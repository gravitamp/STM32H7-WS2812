
led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ebcc  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  0800ee68  0800ee68  0001ee68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f080  0800f080  0001f080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f088  0800f088  0001f088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f08c  0800f08c  0001f08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800f090  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  0800f0a0  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  0800f100  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ad0  240000d0  0800f160  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000ba0  0800f160  00020ba0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bd54  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048fe  00000000  00000000  0004be52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001db8  00000000  00000000  00050750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001be0  00000000  00000000  00052508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d1a5  00000000  00000000  000540e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002aa05  00000000  00000000  0009128d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00180209  00000000  00000000  000bbc92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0023be9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008184  00000000  00000000  0023beec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800ee4c 	.word	0x0800ee4c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	0800ee4c 	.word	0x0800ee4c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
 80005f0:	615a      	str	r2, [r3, #20]
 80005f2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80005f4:	4b2d      	ldr	r3, [pc, #180]	; (80006ac <MX_ADC3_Init+0xd0>)
 80005f6:	4a2e      	ldr	r2, [pc, #184]	; (80006b0 <MX_ADC3_Init+0xd4>)
 80005f8:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80005fa:	4b2c      	ldr	r3, [pc, #176]	; (80006ac <MX_ADC3_Init+0xd0>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000600:	4b2a      	ldr	r3, [pc, #168]	; (80006ac <MX_ADC3_Init+0xd0>)
 8000602:	2201      	movs	r2, #1
 8000604:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000606:	4b29      	ldr	r3, [pc, #164]	; (80006ac <MX_ADC3_Init+0xd0>)
 8000608:	2204      	movs	r2, #4
 800060a:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800060c:	4b27      	ldr	r3, [pc, #156]	; (80006ac <MX_ADC3_Init+0xd0>)
 800060e:	2200      	movs	r2, #0
 8000610:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000612:	4b26      	ldr	r3, [pc, #152]	; (80006ac <MX_ADC3_Init+0xd0>)
 8000614:	2201      	movs	r2, #1
 8000616:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 2;
 8000618:	4b24      	ldr	r3, [pc, #144]	; (80006ac <MX_ADC3_Init+0xd0>)
 800061a:	2202      	movs	r2, #2
 800061c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800061e:	4b23      	ldr	r3, [pc, #140]	; (80006ac <MX_ADC3_Init+0xd0>)
 8000620:	2200      	movs	r2, #0
 8000622:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000624:	4b21      	ldr	r3, [pc, #132]	; (80006ac <MX_ADC3_Init+0xd0>)
 8000626:	2200      	movs	r2, #0
 8000628:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800062a:	4b20      	ldr	r3, [pc, #128]	; (80006ac <MX_ADC3_Init+0xd0>)
 800062c:	2200      	movs	r2, #0
 800062e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000630:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <MX_ADC3_Init+0xd0>)
 8000632:	2200      	movs	r2, #0
 8000634:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000636:	4b1d      	ldr	r3, [pc, #116]	; (80006ac <MX_ADC3_Init+0xd0>)
 8000638:	2200      	movs	r2, #0
 800063a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800063c:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <MX_ADC3_Init+0xd0>)
 800063e:	2200      	movs	r2, #0
 8000640:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000642:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <MX_ADC3_Init+0xd0>)
 8000644:	2200      	movs	r2, #0
 8000646:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800064a:	4818      	ldr	r0, [pc, #96]	; (80006ac <MX_ADC3_Init+0xd0>)
 800064c:	f001 fbfe 	bl	8001e4c <HAL_ADC_Init>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8000656:	f000 fdc1 	bl	80011dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800065a:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <MX_ADC3_Init+0xd8>)
 800065c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800065e:	2306      	movs	r3, #6
 8000660:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000666:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800066a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800066c:	2304      	movs	r3, #4
 800066e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000674:	2300      	movs	r3, #0
 8000676:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	4619      	mov	r1, r3
 800067c:	480b      	ldr	r0, [pc, #44]	; (80006ac <MX_ADC3_Init+0xd0>)
 800067e:	f001 ffe3 	bl	8002648 <HAL_ADC_ConfigChannel>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000688:	f000 fda8 	bl	80011dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800068c:	230c      	movs	r3, #12
 800068e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	4619      	mov	r1, r3
 8000694:	4805      	ldr	r0, [pc, #20]	; (80006ac <MX_ADC3_Init+0xd0>)
 8000696:	f001 ffd7 	bl	8002648 <HAL_ADC_ConfigChannel>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 80006a0:	f000 fd9c 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80006a4:	bf00      	nop
 80006a6:	3720      	adds	r7, #32
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	240000ec 	.word	0x240000ec
 80006b0:	58026000 	.word	0x58026000
 80006b4:	19200040 	.word	0x19200040

080006b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b0ba      	sub	sp, #232	; 0xe8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006d0:	f107 0310 	add.w	r3, r7, #16
 80006d4:	22c0      	movs	r2, #192	; 0xc0
 80006d6:	2100      	movs	r1, #0
 80006d8:	4618      	mov	r0, r3
 80006da:	f00e fbaf 	bl	800ee3c <memset>
  if(adcHandle->Instance==ADC3)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a31      	ldr	r2, [pc, #196]	; (80007a8 <HAL_ADC_MspInit+0xf0>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d15a      	bne.n	800079e <HAL_ADC_MspInit+0xe6>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006e8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80006ec:	f04f 0300 	mov.w	r3, #0
 80006f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 50;
 80006f8:	2332      	movs	r3, #50	; 0x32
 80006fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000700:	2302      	movs	r3, #2
 8000702:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000704:	2302      	movs	r3, #2
 8000706:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8000708:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800070c:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800070e:	2300      	movs	r3, #0
 8000710:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8000716:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800071a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800071e:	f107 0310 	add.w	r3, r7, #16
 8000722:	4618      	mov	r0, r3
 8000724:	f007 fee2 	bl	80084ec <HAL_RCCEx_PeriphCLKConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 800072e:	f000 fd55 	bl	80011dc <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000732:	4b1e      	ldr	r3, [pc, #120]	; (80007ac <HAL_ADC_MspInit+0xf4>)
 8000734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000738:	4a1c      	ldr	r2, [pc, #112]	; (80007ac <HAL_ADC_MspInit+0xf4>)
 800073a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800073e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000742:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <HAL_ADC_MspInit+0xf4>)
 8000744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000748:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000750:	4b16      	ldr	r3, [pc, #88]	; (80007ac <HAL_ADC_MspInit+0xf4>)
 8000752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000756:	4a15      	ldr	r2, [pc, #84]	; (80007ac <HAL_ADC_MspInit+0xf4>)
 8000758:	f043 0320 	orr.w	r3, r3, #32
 800075c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000760:	4b12      	ldr	r3, [pc, #72]	; (80007ac <HAL_ADC_MspInit+0xf4>)
 8000762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000766:	f003 0320 	and.w	r3, r3, #32
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PF10     ------> ADC3_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800076e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000772:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000776:	2303      	movs	r3, #3
 8000778:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000782:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000786:	4619      	mov	r1, r3
 8000788:	4809      	ldr	r0, [pc, #36]	; (80007b0 <HAL_ADC_MspInit+0xf8>)
 800078a:	f005 fc3d 	bl	8006008 <HAL_GPIO_Init>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	2100      	movs	r1, #0
 8000792:	207f      	movs	r0, #127	; 0x7f
 8000794:	f002 fcc1 	bl	800311a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000798:	207f      	movs	r0, #127	; 0x7f
 800079a:	f002 fcd8 	bl	800314e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800079e:	bf00      	nop
 80007a0:	37e8      	adds	r7, #232	; 0xe8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	58026000 	.word	0x58026000
 80007ac:	58024400 	.word	0x58024400
 80007b0:	58021400 	.word	0x58021400

080007b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ba:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <MX_DMA_Init+0x3c>)
 80007bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007c0:	4a0b      	ldr	r2, [pc, #44]	; (80007f0 <MX_DMA_Init+0x3c>)
 80007c2:	f043 0301 	orr.w	r3, r3, #1
 80007c6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_DMA_Init+0x3c>)
 80007cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007d0:	f003 0301 	and.w	r3, r3, #1
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80007d8:	2200      	movs	r2, #0
 80007da:	2100      	movs	r1, #0
 80007dc:	200b      	movs	r0, #11
 80007de:	f002 fc9c 	bl	800311a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80007e2:	200b      	movs	r0, #11
 80007e4:	f002 fcb3 	bl	800314e <HAL_NVIC_EnableIRQ>

}
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	58024400 	.word	0x58024400

080007f4 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007f8:	4b1e      	ldr	r3, [pc, #120]	; (8000874 <MX_ETH_Init+0x80>)
 80007fa:	4a1f      	ldr	r2, [pc, #124]	; (8000878 <MX_ETH_Init+0x84>)
 80007fc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007fe:	4b1f      	ldr	r3, [pc, #124]	; (800087c <MX_ETH_Init+0x88>)
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000804:	4b1d      	ldr	r3, [pc, #116]	; (800087c <MX_ETH_Init+0x88>)
 8000806:	2280      	movs	r2, #128	; 0x80
 8000808:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800080a:	4b1c      	ldr	r3, [pc, #112]	; (800087c <MX_ETH_Init+0x88>)
 800080c:	22e1      	movs	r2, #225	; 0xe1
 800080e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000810:	4b1a      	ldr	r3, [pc, #104]	; (800087c <MX_ETH_Init+0x88>)
 8000812:	2200      	movs	r2, #0
 8000814:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000816:	4b19      	ldr	r3, [pc, #100]	; (800087c <MX_ETH_Init+0x88>)
 8000818:	2200      	movs	r2, #0
 800081a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <MX_ETH_Init+0x88>)
 800081e:	2200      	movs	r2, #0
 8000820:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_ETH_Init+0x80>)
 8000824:	4a15      	ldr	r2, [pc, #84]	; (800087c <MX_ETH_Init+0x88>)
 8000826:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_ETH_Init+0x80>)
 800082a:	2201      	movs	r2, #1
 800082c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_ETH_Init+0x80>)
 8000830:	4a13      	ldr	r2, [pc, #76]	; (8000880 <MX_ETH_Init+0x8c>)
 8000832:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_ETH_Init+0x80>)
 8000836:	4a13      	ldr	r2, [pc, #76]	; (8000884 <MX_ETH_Init+0x90>)
 8000838:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_ETH_Init+0x80>)
 800083c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000840:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000842:	480c      	ldr	r0, [pc, #48]	; (8000874 <MX_ETH_Init+0x80>)
 8000844:	f004 ffbc 	bl	80057c0 <HAL_ETH_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800084e:	f000 fcc5 	bl	80011dc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000852:	2238      	movs	r2, #56	; 0x38
 8000854:	2100      	movs	r1, #0
 8000856:	480c      	ldr	r0, [pc, #48]	; (8000888 <MX_ETH_Init+0x94>)
 8000858:	f00e faf0 	bl	800ee3c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <MX_ETH_Init+0x94>)
 800085e:	2221      	movs	r2, #33	; 0x21
 8000860:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_ETH_Init+0x94>)
 8000864:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000868:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800086a:	4b07      	ldr	r3, [pc, #28]	; (8000888 <MX_ETH_Init+0x94>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	24000188 	.word	0x24000188
 8000878:	40028000 	.word	0x40028000
 800087c:	24000238 	.word	0x24000238
 8000880:	24000070 	.word	0x24000070
 8000884:	24000010 	.word	0x24000010
 8000888:	24000150 	.word	0x24000150

0800088c <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08e      	sub	sp, #56	; 0x38
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a59      	ldr	r2, [pc, #356]	; (8000a10 <HAL_ETH_MspInit+0x184>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	f040 80ab 	bne.w	8000a06 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80008b0:	4b58      	ldr	r3, [pc, #352]	; (8000a14 <HAL_ETH_MspInit+0x188>)
 80008b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008b6:	4a57      	ldr	r2, [pc, #348]	; (8000a14 <HAL_ETH_MspInit+0x188>)
 80008b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008bc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80008c0:	4b54      	ldr	r3, [pc, #336]	; (8000a14 <HAL_ETH_MspInit+0x188>)
 80008c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008ca:	623b      	str	r3, [r7, #32]
 80008cc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80008ce:	4b51      	ldr	r3, [pc, #324]	; (8000a14 <HAL_ETH_MspInit+0x188>)
 80008d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008d4:	4a4f      	ldr	r2, [pc, #316]	; (8000a14 <HAL_ETH_MspInit+0x188>)
 80008d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008da:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80008de:	4b4d      	ldr	r3, [pc, #308]	; (8000a14 <HAL_ETH_MspInit+0x188>)
 80008e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008e8:	61fb      	str	r3, [r7, #28]
 80008ea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80008ec:	4b49      	ldr	r3, [pc, #292]	; (8000a14 <HAL_ETH_MspInit+0x188>)
 80008ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008f2:	4a48      	ldr	r2, [pc, #288]	; (8000a14 <HAL_ETH_MspInit+0x188>)
 80008f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80008fc:	4b45      	ldr	r3, [pc, #276]	; (8000a14 <HAL_ETH_MspInit+0x188>)
 80008fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000906:	61bb      	str	r3, [r7, #24]
 8000908:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	4b42      	ldr	r3, [pc, #264]	; (8000a14 <HAL_ETH_MspInit+0x188>)
 800090c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000910:	4a40      	ldr	r2, [pc, #256]	; (8000a14 <HAL_ETH_MspInit+0x188>)
 8000912:	f043 0304 	orr.w	r3, r3, #4
 8000916:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800091a:	4b3e      	ldr	r3, [pc, #248]	; (8000a14 <HAL_ETH_MspInit+0x188>)
 800091c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000920:	f003 0304 	and.w	r3, r3, #4
 8000924:	617b      	str	r3, [r7, #20]
 8000926:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000928:	4b3a      	ldr	r3, [pc, #232]	; (8000a14 <HAL_ETH_MspInit+0x188>)
 800092a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800092e:	4a39      	ldr	r2, [pc, #228]	; (8000a14 <HAL_ETH_MspInit+0x188>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000938:	4b36      	ldr	r3, [pc, #216]	; (8000a14 <HAL_ETH_MspInit+0x188>)
 800093a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000946:	4b33      	ldr	r3, [pc, #204]	; (8000a14 <HAL_ETH_MspInit+0x188>)
 8000948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800094c:	4a31      	ldr	r2, [pc, #196]	; (8000a14 <HAL_ETH_MspInit+0x188>)
 800094e:	f043 0302 	orr.w	r3, r3, #2
 8000952:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000956:	4b2f      	ldr	r3, [pc, #188]	; (8000a14 <HAL_ETH_MspInit+0x188>)
 8000958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095c:	f003 0302 	and.w	r3, r3, #2
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000964:	4b2b      	ldr	r3, [pc, #172]	; (8000a14 <HAL_ETH_MspInit+0x188>)
 8000966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096a:	4a2a      	ldr	r2, [pc, #168]	; (8000a14 <HAL_ETH_MspInit+0x188>)
 800096c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000970:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000974:	4b27      	ldr	r3, [pc, #156]	; (8000a14 <HAL_ETH_MspInit+0x188>)
 8000976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000982:	2332      	movs	r3, #50	; 0x32
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	2302      	movs	r3, #2
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000992:	230b      	movs	r3, #11
 8000994:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099a:	4619      	mov	r1, r3
 800099c:	481e      	ldr	r0, [pc, #120]	; (8000a18 <HAL_ETH_MspInit+0x18c>)
 800099e:	f005 fb33 	bl	8006008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80009a2:	2386      	movs	r3, #134	; 0x86
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a6:	2302      	movs	r3, #2
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009b2:	230b      	movs	r3, #11
 80009b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ba:	4619      	mov	r1, r3
 80009bc:	4817      	ldr	r0, [pc, #92]	; (8000a1c <HAL_ETH_MspInit+0x190>)
 80009be:	f005 fb23 	bl	8006008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80009c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009d4:	230b      	movs	r3, #11
 80009d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009dc:	4619      	mov	r1, r3
 80009de:	4810      	ldr	r0, [pc, #64]	; (8000a20 <HAL_ETH_MspInit+0x194>)
 80009e0:	f005 fb12 	bl	8006008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80009e4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009f6:	230b      	movs	r3, #11
 80009f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fe:	4619      	mov	r1, r3
 8000a00:	4808      	ldr	r0, [pc, #32]	; (8000a24 <HAL_ETH_MspInit+0x198>)
 8000a02:	f005 fb01 	bl	8006008 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000a06:	bf00      	nop
 8000a08:	3738      	adds	r7, #56	; 0x38
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40028000 	.word	0x40028000
 8000a14:	58024400 	.word	0x58024400
 8000a18:	58020800 	.word	0x58020800
 8000a1c:	58020000 	.word	0x58020000
 8000a20:	58020400 	.word	0x58020400
 8000a24:	58021800 	.word	0x58021800

08000a28 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08c      	sub	sp, #48	; 0x30
 8000a2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
 8000a3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3e:	4b57      	ldr	r3, [pc, #348]	; (8000b9c <MX_GPIO_Init+0x174>)
 8000a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a44:	4a55      	ldr	r2, [pc, #340]	; (8000b9c <MX_GPIO_Init+0x174>)
 8000a46:	f043 0304 	orr.w	r3, r3, #4
 8000a4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a4e:	4b53      	ldr	r3, [pc, #332]	; (8000b9c <MX_GPIO_Init+0x174>)
 8000a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a54:	f003 0304 	and.w	r3, r3, #4
 8000a58:	61bb      	str	r3, [r7, #24]
 8000a5a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a5c:	4b4f      	ldr	r3, [pc, #316]	; (8000b9c <MX_GPIO_Init+0x174>)
 8000a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a62:	4a4e      	ldr	r2, [pc, #312]	; (8000b9c <MX_GPIO_Init+0x174>)
 8000a64:	f043 0320 	orr.w	r3, r3, #32
 8000a68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a6c:	4b4b      	ldr	r3, [pc, #300]	; (8000b9c <MX_GPIO_Init+0x174>)
 8000a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a72:	f003 0320 	and.w	r3, r3, #32
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a7a:	4b48      	ldr	r3, [pc, #288]	; (8000b9c <MX_GPIO_Init+0x174>)
 8000a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a80:	4a46      	ldr	r2, [pc, #280]	; (8000b9c <MX_GPIO_Init+0x174>)
 8000a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a8a:	4b44      	ldr	r3, [pc, #272]	; (8000b9c <MX_GPIO_Init+0x174>)
 8000a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a98:	4b40      	ldr	r3, [pc, #256]	; (8000b9c <MX_GPIO_Init+0x174>)
 8000a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9e:	4a3f      	ldr	r2, [pc, #252]	; (8000b9c <MX_GPIO_Init+0x174>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa8:	4b3c      	ldr	r3, [pc, #240]	; (8000b9c <MX_GPIO_Init+0x174>)
 8000aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	4b39      	ldr	r3, [pc, #228]	; (8000b9c <MX_GPIO_Init+0x174>)
 8000ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000abc:	4a37      	ldr	r2, [pc, #220]	; (8000b9c <MX_GPIO_Init+0x174>)
 8000abe:	f043 0302 	orr.w	r3, r3, #2
 8000ac2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac6:	4b35      	ldr	r3, [pc, #212]	; (8000b9c <MX_GPIO_Init+0x174>)
 8000ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000acc:	f003 0302 	and.w	r3, r3, #2
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ad4:	4b31      	ldr	r3, [pc, #196]	; (8000b9c <MX_GPIO_Init+0x174>)
 8000ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ada:	4a30      	ldr	r2, [pc, #192]	; (8000b9c <MX_GPIO_Init+0x174>)
 8000adc:	f043 0308 	orr.w	r3, r3, #8
 8000ae0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ae4:	4b2d      	ldr	r3, [pc, #180]	; (8000b9c <MX_GPIO_Init+0x174>)
 8000ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aea:	f003 0308 	and.w	r3, r3, #8
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000af2:	4b2a      	ldr	r3, [pc, #168]	; (8000b9c <MX_GPIO_Init+0x174>)
 8000af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af8:	4a28      	ldr	r2, [pc, #160]	; (8000b9c <MX_GPIO_Init+0x174>)
 8000afa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000afe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b02:	4b26      	ldr	r3, [pc, #152]	; (8000b9c <MX_GPIO_Init+0x174>)
 8000b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000b16:	4822      	ldr	r0, [pc, #136]	; (8000ba0 <MX_GPIO_Init+0x178>)
 8000b18:	f005 fc26 	bl	8006368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2140      	movs	r1, #64	; 0x40
 8000b20:	4820      	ldr	r0, [pc, #128]	; (8000ba4 <MX_GPIO_Init+0x17c>)
 8000b22:	f005 fc21 	bl	8006368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b2c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 031c 	add.w	r3, r7, #28
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	481a      	ldr	r0, [pc, #104]	; (8000ba8 <MX_GPIO_Init+0x180>)
 8000b3e:	f005 fa63 	bl	8006008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000b42:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b54:	f107 031c 	add.w	r3, r7, #28
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4811      	ldr	r0, [pc, #68]	; (8000ba0 <MX_GPIO_Init+0x178>)
 8000b5c:	f005 fa54 	bl	8006008 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b60:	2340      	movs	r3, #64	; 0x40
 8000b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b70:	f107 031c 	add.w	r3, r7, #28
 8000b74:	4619      	mov	r1, r3
 8000b76:	480b      	ldr	r0, [pc, #44]	; (8000ba4 <MX_GPIO_Init+0x17c>)
 8000b78:	f005 fa46 	bl	8006008 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b7c:	2380      	movs	r3, #128	; 0x80
 8000b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b80:	2300      	movs	r3, #0
 8000b82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b88:	f107 031c 	add.w	r3, r7, #28
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <MX_GPIO_Init+0x17c>)
 8000b90:	f005 fa3a 	bl	8006008 <HAL_GPIO_Init>

}
 8000b94:	bf00      	nop
 8000b96:	3730      	adds	r7, #48	; 0x30
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	58024400 	.word	0x58024400
 8000ba0:	58020400 	.word	0x58020400
 8000ba4:	58021800 	.word	0x58021800
 8000ba8:	58020800 	.word	0x58020800

08000bac <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000bb0:	4b1b      	ldr	r3, [pc, #108]	; (8000c20 <MX_I2C4_Init+0x74>)
 8000bb2:	4a1c      	ldr	r2, [pc, #112]	; (8000c24 <MX_I2C4_Init+0x78>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00B03FDB;
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <MX_I2C4_Init+0x74>)
 8000bb8:	4a1b      	ldr	r2, [pc, #108]	; (8000c28 <MX_I2C4_Init+0x7c>)
 8000bba:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000bbc:	4b18      	ldr	r3, [pc, #96]	; (8000c20 <MX_I2C4_Init+0x74>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bc2:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <MX_I2C4_Init+0x74>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bc8:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <MX_I2C4_Init+0x74>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000bce:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <MX_I2C4_Init+0x74>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bd4:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <MX_I2C4_Init+0x74>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bda:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <MX_I2C4_Init+0x74>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000be0:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <MX_I2C4_Init+0x74>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000be6:	480e      	ldr	r0, [pc, #56]	; (8000c20 <MX_I2C4_Init+0x74>)
 8000be8:	f005 fbd8 	bl	800639c <HAL_I2C_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000bf2:	f000 faf3 	bl	80011dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4809      	ldr	r0, [pc, #36]	; (8000c20 <MX_I2C4_Init+0x74>)
 8000bfa:	f006 fa67 	bl	80070cc <HAL_I2CEx_ConfigAnalogFilter>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000c04:	f000 faea 	bl	80011dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4805      	ldr	r0, [pc, #20]	; (8000c20 <MX_I2C4_Init+0x74>)
 8000c0c:	f006 faa9 	bl	8007162 <HAL_I2CEx_ConfigDigitalFilter>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000c16:	f000 fae1 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	24000240 	.word	0x24000240
 8000c24:	58001c00 	.word	0x58001c00
 8000c28:	00b03fdb 	.word	0x00b03fdb

08000c2c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b0ba      	sub	sp, #232	; 0xe8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c44:	f107 0310 	add.w	r3, r7, #16
 8000c48:	22c0      	movs	r2, #192	; 0xc0
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f00e f8f5 	bl	800ee3c <memset>
  if(i2cHandle->Instance==I2C4)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a2b      	ldr	r2, [pc, #172]	; (8000d04 <HAL_I2C_MspInit+0xd8>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d14e      	bne.n	8000cfa <HAL_I2C_MspInit+0xce>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000c5c:	f04f 0210 	mov.w	r2, #16
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c6e:	f107 0310 	add.w	r3, r7, #16
 8000c72:	4618      	mov	r0, r3
 8000c74:	f007 fc3a 	bl	80084ec <HAL_RCCEx_PeriphCLKConfig>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000c7e:	f000 faad 	bl	80011dc <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c82:	4b21      	ldr	r3, [pc, #132]	; (8000d08 <HAL_I2C_MspInit+0xdc>)
 8000c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c88:	4a1f      	ldr	r2, [pc, #124]	; (8000d08 <HAL_I2C_MspInit+0xdc>)
 8000c8a:	f043 0308 	orr.w	r3, r3, #8
 8000c8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c92:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <HAL_I2C_MspInit+0xdc>)
 8000c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c98:	f003 0308 	and.w	r3, r3, #8
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000ca0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ca4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ca8:	2312      	movs	r3, #18
 8000caa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000cba:	2304      	movs	r3, #4
 8000cbc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cc0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4811      	ldr	r0, [pc, #68]	; (8000d0c <HAL_I2C_MspInit+0xe0>)
 8000cc8:	f005 f99e 	bl	8006008 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000ccc:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <HAL_I2C_MspInit+0xdc>)
 8000cce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cd2:	4a0d      	ldr	r2, [pc, #52]	; (8000d08 <HAL_I2C_MspInit+0xdc>)
 8000cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cd8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <HAL_I2C_MspInit+0xdc>)
 8000cde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	68bb      	ldr	r3, [r7, #8]

    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2100      	movs	r1, #0
 8000cee:	205f      	movs	r0, #95	; 0x5f
 8000cf0:	f002 fa13 	bl	800311a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8000cf4:	205f      	movs	r0, #95	; 0x5f
 8000cf6:	f002 fa2a 	bl	800314e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	37e8      	adds	r7, #232	; 0xe8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	58001c00 	.word	0x58001c00
 8000d08:	58024400 	.word	0x58024400
 8000d0c:	58020c00 	.word	0x58020c00

08000d10 <Set_LED>:

uint8_t LED_Data[MAX_LED][4];
uint8_t LED_Mod[MAX_LED][4];  // for brightness

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
 8000d1c:	603b      	str	r3, [r7, #0]
  LED_Data[LEDnum][0] = LEDnum;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	b2d9      	uxtb	r1, r3
 8000d22:	4a11      	ldr	r2, [pc, #68]	; (8000d68 <Set_LED+0x58>)
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
  LED_Data[LEDnum][1] = Green;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	b2d9      	uxtb	r1, r3
 8000d2e:	4a0e      	ldr	r2, [pc, #56]	; (8000d68 <Set_LED+0x58>)
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	4413      	add	r3, r2
 8000d36:	460a      	mov	r2, r1
 8000d38:	705a      	strb	r2, [r3, #1]
  LED_Data[LEDnum][2] = Red;
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	b2d9      	uxtb	r1, r3
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <Set_LED+0x58>)
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	4413      	add	r3, r2
 8000d46:	460a      	mov	r2, r1
 8000d48:	709a      	strb	r2, [r3, #2]
  LED_Data[LEDnum][3] = Blue;
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	b2d9      	uxtb	r1, r3
 8000d4e:	4a06      	ldr	r2, [pc, #24]	; (8000d68 <Set_LED+0x58>)
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	4413      	add	r3, r2
 8000d56:	460a      	mov	r2, r1
 8000d58:	70da      	strb	r2, [r3, #3]
}
 8000d5a:	bf00      	nop
 8000d5c:	3714      	adds	r7, #20
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	2400029c 	.word	0x2400029c
 8000d6c:	00000000 	.word	0x00000000

08000d70 <Set_Brightness>:

#define PI 3.14159265

void Set_Brightness (int brightness)  // 0-45
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	ed2d 8b02 	vpush	{d8}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

  if (brightness > 45) brightness = 45;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2b2d      	cmp	r3, #45	; 0x2d
 8000d80:	dd01      	ble.n	8000d86 <Set_Brightness+0x16>
 8000d82:	232d      	movs	r3, #45	; 0x2d
 8000d84:	607b      	str	r3, [r7, #4]
  for (int i=0; i<MAX_LED; i++)
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
 8000d8a:	e051      	b.n	8000e30 <Set_Brightness+0xc0>
  {
    LED_Mod[i][0] = LED_Data[i][0];
 8000d8c:	4a32      	ldr	r2, [pc, #200]	; (8000e58 <Set_Brightness+0xe8>)
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8000d94:	4a31      	ldr	r2, [pc, #196]	; (8000e5c <Set_Brightness+0xec>)
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
    for (int j=1; j<4; j++)
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	e040      	b.n	8000e24 <Set_Brightness+0xb4>
    {
      float angle = 90-brightness;  // in degrees
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8000da8:	ee07 3a90 	vmov	s15, r3
 8000dac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000db0:	edc7 7a03 	vstr	s15, [r7, #12]
      angle = angle*PI / 180;  // in rad
 8000db4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000db8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dbc:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8000e48 <Set_Brightness+0xd8>
 8000dc0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000dc4:	ed9f 5b22 	vldr	d5, [pc, #136]	; 8000e50 <Set_Brightness+0xe0>
 8000dc8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000dcc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000dd0:	edc7 7a03 	vstr	s15, [r7, #12]
      LED_Mod[i][j] = (LED_Data[i][j])/(tan(angle));
 8000dd4:	4a20      	ldr	r2, [pc, #128]	; (8000e58 <Set_Brightness+0xe8>)
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	441a      	add	r2, r3
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	4413      	add	r3, r2
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	ee07 3a90 	vmov	s15, r3
 8000de6:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8000dea:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000df2:	eeb0 0b47 	vmov.f64	d0, d7
 8000df6:	f00d f9cb 	bl	800e190 <tan>
 8000dfa:	eeb0 6b40 	vmov.f64	d6, d0
 8000dfe:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8000e02:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e06:	edc7 7a00 	vstr	s15, [r7]
 8000e0a:	783b      	ldrb	r3, [r7, #0]
 8000e0c:	b2d9      	uxtb	r1, r3
 8000e0e:	4a13      	ldr	r2, [pc, #76]	; (8000e5c <Set_Brightness+0xec>)
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	441a      	add	r2, r3
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	4413      	add	r3, r2
 8000e1a:	460a      	mov	r2, r1
 8000e1c:	701a      	strb	r2, [r3, #0]
    for (int j=1; j<4; j++)
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	3301      	adds	r3, #1
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	2b03      	cmp	r3, #3
 8000e28:	ddbb      	ble.n	8000da2 <Set_Brightness+0x32>
  for (int i=0; i<MAX_LED; i++)
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	617b      	str	r3, [r7, #20]
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	2b09      	cmp	r3, #9
 8000e34:	ddaa      	ble.n	8000d8c <Set_Brightness+0x1c>
    }
  }

#endif

}
 8000e36:	bf00      	nop
 8000e38:	bf00      	nop
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	ecbd 8b02 	vpop	{d8}
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	f3af 8000 	nop.w
 8000e48:	53c8d4f1 	.word	0x53c8d4f1
 8000e4c:	400921fb 	.word	0x400921fb
 8000e50:	00000000 	.word	0x00000000
 8000e54:	40668000 	.word	0x40668000
 8000e58:	2400029c 	.word	0x2400029c
 8000e5c:	240002c4 	.word	0x240002c4

08000e60 <WS2812_Send>:

uint16_t pwmData[(24*MAX_LED)+50];

void WS2812_Send (void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
  uint32_t indx=0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
  uint32_t color;


  for (int i= 0; i<MAX_LED; i++)
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	e036      	b.n	8000ede <WS2812_Send+0x7e>
  {
#if USE_BRIGHTNESS
    color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 8000e70:	4a2e      	ldr	r2, [pc, #184]	; (8000f2c <WS2812_Send+0xcc>)
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	4413      	add	r3, r2
 8000e78:	785b      	ldrb	r3, [r3, #1]
 8000e7a:	041a      	lsls	r2, r3, #16
 8000e7c:	492b      	ldr	r1, [pc, #172]	; (8000f2c <WS2812_Send+0xcc>)
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	440b      	add	r3, r1
 8000e84:	789b      	ldrb	r3, [r3, #2]
 8000e86:	021b      	lsls	r3, r3, #8
 8000e88:	431a      	orrs	r2, r3
 8000e8a:	4928      	ldr	r1, [pc, #160]	; (8000f2c <WS2812_Send+0xcc>)
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	440b      	add	r3, r1
 8000e92:	78db      	ldrb	r3, [r3, #3]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	607b      	str	r3, [r7, #4]
#else
    color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
#endif

    for (int i=23; i>=0; i--)
 8000e98:	2317      	movs	r3, #23
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	e019      	b.n	8000ed2 <WS2812_Send+0x72>
    {
      if (color&(1<<i))
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d005      	beq.n	8000ebc <WS2812_Send+0x5c>
      {
        pwmData[indx] = 100;  // 2/3 of 90
 8000eb0:	4a1f      	ldr	r2, [pc, #124]	; (8000f30 <WS2812_Send+0xd0>)
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	2164      	movs	r1, #100	; 0x64
 8000eb6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000eba:	e004      	b.n	8000ec6 <WS2812_Send+0x66>
      }

      else pwmData[indx] = 50;  // 1/3 of 90
 8000ebc:	4a1c      	ldr	r2, [pc, #112]	; (8000f30 <WS2812_Send+0xd0>)
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	2132      	movs	r1, #50	; 0x32
 8000ec2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

      indx++;
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	617b      	str	r3, [r7, #20]
    for (int i=23; i>=0; i--)
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	dae2      	bge.n	8000e9e <WS2812_Send+0x3e>
  for (int i= 0; i<MAX_LED; i++)
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	3301      	adds	r3, #1
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	2b09      	cmp	r3, #9
 8000ee2:	ddc5      	ble.n	8000e70 <WS2812_Send+0x10>
    }

  }

  for (int i=0; i<50; i++)
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	e00a      	b.n	8000f00 <WS2812_Send+0xa0>
  {
    pwmData[indx] = 0;
 8000eea:	4a11      	ldr	r2, [pc, #68]	; (8000f30 <WS2812_Send+0xd0>)
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	2100      	movs	r1, #0
 8000ef0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    indx++;
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	617b      	str	r3, [r7, #20]
  for (int i=0; i<50; i++)
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	3301      	adds	r3, #1
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	2b31      	cmp	r3, #49	; 0x31
 8000f04:	ddf1      	ble.n	8000eea <WS2812_Send+0x8a>
  }

  HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	4a09      	ldr	r2, [pc, #36]	; (8000f30 <WS2812_Send+0xd0>)
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4809      	ldr	r0, [pc, #36]	; (8000f34 <WS2812_Send+0xd4>)
 8000f10:	f00a f8a2 	bl	800b058 <HAL_TIM_PWM_Start_DMA>
  while (!datasentflag){};
 8000f14:	bf00      	nop
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <WS2812_Send+0xd8>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d0fb      	beq.n	8000f16 <WS2812_Send+0xb6>
  datasentflag = 0;
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <WS2812_Send+0xd8>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
}
 8000f24:	bf00      	nop
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	240002c4 	.word	0x240002c4
 8000f30:	240002ec 	.word	0x240002ec
 8000f34:	24000534 	.word	0x24000534
 8000f38:	24000298 	.word	0x24000298

08000f3c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 8000f44:	2100      	movs	r1, #0
 8000f46:	4805      	ldr	r0, [pc, #20]	; (8000f5c <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000f48:	f00a faac 	bl	800b4a4 <HAL_TIM_PWM_Stop_DMA>
  datasentflag=1;
 8000f4c:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	601a      	str	r2, [r3, #0]
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	24000534 	.word	0x24000534
 8000f60:	24000298 	.word	0x24000298

08000f64 <HAL_ADC_ConvCpltCallback>:

uint16_t AD_RES = 0;
uint16_t data;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
    // Read & Update The ADC Result
    AD_RES = HAL_ADC_GetValue(&hadc3);
 8000f6c:	4805      	ldr	r0, [pc, #20]	; (8000f84 <HAL_ADC_ConvCpltCallback+0x20>)
 8000f6e:	f001 f90f 	bl	8002190 <HAL_ADC_GetValue>
 8000f72:	4603      	mov	r3, r0
 8000f74:	b29a      	uxth	r2, r3
 8000f76:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <HAL_ADC_ConvCpltCallback+0x24>)
 8000f78:	801a      	strh	r2, [r3, #0]
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	240000ec 	.word	0x240000ec
 8000f88:	24000530 	.word	0x24000530

08000f8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f90:	f000 fcb8 	bl	8001904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f94:	f000 f86a 	bl	800106c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f98:	f7ff fd46 	bl	8000a28 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f9c:	f7ff fc0a 	bl	80007b4 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000fa0:	f000 fbd8 	bl	8001754 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8000fa4:	f000 fa14 	bl	80013d0 <MX_TIM3_Init>
  MX_ETH_Init();
 8000fa8:	f7ff fc24 	bl	80007f4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000fac:	f000 fb1c 	bl	80015e8 <MX_USART3_UART_Init>
  MX_ADC3_Init();
 8000fb0:	f7ff fb14 	bl	80005dc <MX_ADC3_Init>
  MX_I2C4_Init();
 8000fb4:	f7ff fdfa 	bl	8000bac <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */
  // Start ADC Conversion
//  HAL_ADC_Start_IT(&hadc3);
  Set_LED(0, 255, 0, 0);
 8000fb8:	2300      	movs	r3, #0
 8000fba:	2200      	movs	r2, #0
 8000fbc:	21ff      	movs	r1, #255	; 0xff
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f7ff fea6 	bl	8000d10 <Set_LED>
  Set_LED(1, 0, 255, 0);
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	22ff      	movs	r2, #255	; 0xff
 8000fc8:	2100      	movs	r1, #0
 8000fca:	2001      	movs	r0, #1
 8000fcc:	f7ff fea0 	bl	8000d10 <Set_LED>
  Set_LED(2, 0, 0, 255);
 8000fd0:	23ff      	movs	r3, #255	; 0xff
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2002      	movs	r0, #2
 8000fd8:	f7ff fe9a 	bl	8000d10 <Set_LED>
  Set_LED(3, 46, 89, 128);
 8000fdc:	2380      	movs	r3, #128	; 0x80
 8000fde:	2259      	movs	r2, #89	; 0x59
 8000fe0:	212e      	movs	r1, #46	; 0x2e
 8000fe2:	2003      	movs	r0, #3
 8000fe4:	f7ff fe94 	bl	8000d10 <Set_LED>
  Set_LED(4, 156, 233, 100);
 8000fe8:	2364      	movs	r3, #100	; 0x64
 8000fea:	22e9      	movs	r2, #233	; 0xe9
 8000fec:	219c      	movs	r1, #156	; 0x9c
 8000fee:	2004      	movs	r0, #4
 8000ff0:	f7ff fe8e 	bl	8000d10 <Set_LED>
  Set_LED(5, 102, 0, 235);
 8000ff4:	23eb      	movs	r3, #235	; 0xeb
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2166      	movs	r1, #102	; 0x66
 8000ffa:	2005      	movs	r0, #5
 8000ffc:	f7ff fe88 	bl	8000d10 <Set_LED>
  Set_LED(6, 47, 38, 77);
 8001000:	234d      	movs	r3, #77	; 0x4d
 8001002:	2226      	movs	r2, #38	; 0x26
 8001004:	212f      	movs	r1, #47	; 0x2f
 8001006:	2006      	movs	r0, #6
 8001008:	f7ff fe82 	bl	8000d10 <Set_LED>
  Set_LED(7, 255, 200, 0);
 800100c:	2300      	movs	r3, #0
 800100e:	22c8      	movs	r2, #200	; 0xc8
 8001010:	21ff      	movs	r1, #255	; 0xff
 8001012:	2007      	movs	r0, #7
 8001014:	f7ff fe7c 	bl	8000d10 <Set_LED>
  Set_LED(8, 0, 255, 255);
 8001018:	23ff      	movs	r3, #255	; 0xff
 800101a:	22ff      	movs	r2, #255	; 0xff
 800101c:	2100      	movs	r1, #0
 800101e:	2008      	movs	r0, #8
 8001020:	f7ff fe76 	bl	8000d10 <Set_LED>

  isl76682_init(0x44 << 1);
 8001024:	2088      	movs	r0, #136	; 0x88
 8001026:	f00d f82f 	bl	800e088 <isl76682_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

//    data = AD_RES[0];
    status = isl76682_read(0x44 << 1);
 800102a:	2088      	movs	r0, #136	; 0x88
 800102c:	f00d f864 	bl	800e0f8 <isl76682_read>
 8001030:	4603      	mov	r3, r0
 8001032:	4a0c      	ldr	r2, [pc, #48]	; (8001064 <main+0xd8>)
 8001034:	6013      	str	r3, [r2, #0]
    Set_Brightness((status*45)/200);
 8001036:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <main+0xd8>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	4613      	mov	r3, r2
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	4413      	add	r3, r2
 8001040:	011a      	lsls	r2, r3, #4
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	4a08      	ldr	r2, [pc, #32]	; (8001068 <main+0xdc>)
 8001046:	fb82 1203 	smull	r1, r2, r2, r3
 800104a:	1192      	asrs	r2, r2, #6
 800104c:	17db      	asrs	r3, r3, #31
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fe8d 	bl	8000d70 <Set_Brightness>
    WS2812_Send();
 8001056:	f7ff ff03 	bl	8000e60 <WS2812_Send>
    HAL_Delay(100);
 800105a:	2064      	movs	r0, #100	; 0x64
 800105c:	f000 fce4 	bl	8001a28 <HAL_Delay>
  {
 8001060:	e7e3      	b.n	800102a <main+0x9e>
 8001062:	bf00      	nop
 8001064:	24000294 	.word	0x24000294
 8001068:	51eb851f 	.word	0x51eb851f

0800106c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b09e      	sub	sp, #120	; 0x78
 8001070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001072:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001076:	224c      	movs	r2, #76	; 0x4c
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f00d fede 	bl	800ee3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	2220      	movs	r2, #32
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f00d fed7 	bl	800ee3c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800108e:	2002      	movs	r0, #2
 8001090:	f006 f9fc 	bl	800748c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001094:	2300      	movs	r3, #0
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	4b4d      	ldr	r3, [pc, #308]	; (80011d0 <SystemClock_Config+0x164>)
 800109a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800109c:	4a4c      	ldr	r2, [pc, #304]	; (80011d0 <SystemClock_Config+0x164>)
 800109e:	f023 0301 	bic.w	r3, r3, #1
 80010a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80010a4:	4b4a      	ldr	r3, [pc, #296]	; (80011d0 <SystemClock_Config+0x164>)
 80010a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	4b49      	ldr	r3, [pc, #292]	; (80011d4 <SystemClock_Config+0x168>)
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	4a48      	ldr	r2, [pc, #288]	; (80011d4 <SystemClock_Config+0x168>)
 80010b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010b8:	6193      	str	r3, [r2, #24]
 80010ba:	4b46      	ldr	r3, [pc, #280]	; (80011d4 <SystemClock_Config+0x168>)
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010c6:	bf00      	nop
 80010c8:	4b42      	ldr	r3, [pc, #264]	; (80011d4 <SystemClock_Config+0x168>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010d4:	d1f8      	bne.n	80010c8 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d6:	4b40      	ldr	r3, [pc, #256]	; (80011d8 <SystemClock_Config+0x16c>)
 80010d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010dc:	4a3e      	ldr	r2, [pc, #248]	; (80011d8 <SystemClock_Config+0x16c>)
 80010de:	f043 0302 	orr.w	r3, r3, #2
 80010e2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80010e6:	4b3c      	ldr	r3, [pc, #240]	; (80011d8 <SystemClock_Config+0x16c>)
 80010e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010ec:	f003 0302 	and.w	r3, r3, #2
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80010f4:	2300      	movs	r3, #0
 80010f6:	603b      	str	r3, [r7, #0]
 80010f8:	4b36      	ldr	r3, [pc, #216]	; (80011d4 <SystemClock_Config+0x168>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	4a35      	ldr	r2, [pc, #212]	; (80011d4 <SystemClock_Config+0x168>)
 80010fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001102:	6193      	str	r3, [r2, #24]
 8001104:	4b33      	ldr	r3, [pc, #204]	; (80011d4 <SystemClock_Config+0x168>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800110c:	603b      	str	r3, [r7, #0]
 800110e:	4b30      	ldr	r3, [pc, #192]	; (80011d0 <SystemClock_Config+0x164>)
 8001110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001112:	4a2f      	ldr	r2, [pc, #188]	; (80011d0 <SystemClock_Config+0x164>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	62d3      	str	r3, [r2, #44]	; 0x2c
 800111a:	4b2d      	ldr	r3, [pc, #180]	; (80011d0 <SystemClock_Config+0x164>)
 800111c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	603b      	str	r3, [r7, #0]
 8001124:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001126:	bf00      	nop
 8001128:	4b2a      	ldr	r3, [pc, #168]	; (80011d4 <SystemClock_Config+0x168>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001130:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001134:	d1f8      	bne.n	8001128 <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001136:	4b28      	ldr	r3, [pc, #160]	; (80011d8 <SystemClock_Config+0x16c>)
 8001138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113a:	f023 0303 	bic.w	r3, r3, #3
 800113e:	4a26      	ldr	r2, [pc, #152]	; (80011d8 <SystemClock_Config+0x16c>)
 8001140:	f043 0302 	orr.w	r3, r3, #2
 8001144:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001146:	2321      	movs	r3, #33	; 0x21
 8001148:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800114a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800114e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001150:	2301      	movs	r3, #1
 8001152:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001154:	2302      	movs	r3, #2
 8001156:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001158:	2302      	movs	r3, #2
 800115a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 800115c:	2301      	movs	r3, #1
 800115e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8001160:	2378      	movs	r3, #120	; 0x78
 8001162:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001164:	2302      	movs	r3, #2
 8001166:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001168:	2304      	movs	r3, #4
 800116a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800116c:	2302      	movs	r3, #2
 800116e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001170:	230c      	movs	r3, #12
 8001172:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001174:	2300      	movs	r3, #0
 8001176:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001180:	4618      	mov	r0, r3
 8001182:	f006 f9cd 	bl	8007520 <HAL_RCC_OscConfig>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <SystemClock_Config+0x124>
  {
    Error_Handler();
 800118c:	f000 f826 	bl	80011dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001190:	233f      	movs	r3, #63	; 0x3f
 8001192:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001194:	2303      	movs	r3, #3
 8001196:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800119c:	2308      	movs	r3, #8
 800119e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80011a0:	2340      	movs	r3, #64	; 0x40
 80011a2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 80011a4:	2350      	movs	r3, #80	; 0x50
 80011a6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80011a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80011ae:	2340      	movs	r3, #64	; 0x40
 80011b0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011b2:	f107 030c 	add.w	r3, r7, #12
 80011b6:	2104      	movs	r1, #4
 80011b8:	4618      	mov	r0, r3
 80011ba:	f006 fe0b 	bl	8007dd4 <HAL_RCC_ClockConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <SystemClock_Config+0x15c>
  {
    Error_Handler();
 80011c4:	f000 f80a 	bl	80011dc <Error_Handler>
  }
}
 80011c8:	bf00      	nop
 80011ca:	3778      	adds	r7, #120	; 0x78
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	58000400 	.word	0x58000400
 80011d4:	58024800 	.word	0x58024800
 80011d8:	58024400 	.word	0x58024400

080011dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e0:	b672      	cpsid	i
}
 80011e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <Error_Handler+0x8>
	...

080011e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ee:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <HAL_MspInit+0x30>)
 80011f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011f4:	4a08      	ldr	r2, [pc, #32]	; (8001218 <HAL_MspInit+0x30>)
 80011f6:	f043 0302 	orr.w	r3, r3, #2
 80011fa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_MspInit+0x30>)
 8001200:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	58024400 	.word	0x58024400

0800121c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <NMI_Handler+0x4>

08001222 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <HardFault_Handler+0x4>

08001228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <MemManage_Handler+0x4>

0800122e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001232:	e7fe      	b.n	8001232 <BusFault_Handler+0x4>

08001234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <UsageFault_Handler+0x4>

0800123a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001268:	f000 fbbe 	bl	80019e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}

08001270 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8001274:	4802      	ldr	r0, [pc, #8]	; (8001280 <DMA1_Stream0_IRQHandler+0x10>)
 8001276:	f002 ff91 	bl	800419c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	24000580 	.word	0x24000580

08001284 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001288:	4802      	ldr	r0, [pc, #8]	; (8001294 <TIM3_IRQHandler+0x10>)
 800128a:	f00a fa03 	bl	800b694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	24000534 	.word	0x24000534

08001298 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 800129c:	4802      	ldr	r0, [pc, #8]	; (80012a8 <I2C4_EV_IRQHandler+0x10>)
 800129e:	f005 fc43 	bl	8006b28 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	24000240 	.word	0x24000240

080012ac <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80012b0:	4802      	ldr	r0, [pc, #8]	; (80012bc <ADC3_IRQHandler+0x10>)
 80012b2:	f000 ff7b 	bl	80021ac <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	240000ec 	.word	0x240000ec

080012c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012c4:	4b37      	ldr	r3, [pc, #220]	; (80013a4 <SystemInit+0xe4>)
 80012c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ca:	4a36      	ldr	r2, [pc, #216]	; (80013a4 <SystemInit+0xe4>)
 80012cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012d4:	4b34      	ldr	r3, [pc, #208]	; (80013a8 <SystemInit+0xe8>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 030f 	and.w	r3, r3, #15
 80012dc:	2b06      	cmp	r3, #6
 80012de:	d807      	bhi.n	80012f0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012e0:	4b31      	ldr	r3, [pc, #196]	; (80013a8 <SystemInit+0xe8>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f023 030f 	bic.w	r3, r3, #15
 80012e8:	4a2f      	ldr	r2, [pc, #188]	; (80013a8 <SystemInit+0xe8>)
 80012ea:	f043 0307 	orr.w	r3, r3, #7
 80012ee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80012f0:	4b2e      	ldr	r3, [pc, #184]	; (80013ac <SystemInit+0xec>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a2d      	ldr	r2, [pc, #180]	; (80013ac <SystemInit+0xec>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012fc:	4b2b      	ldr	r3, [pc, #172]	; (80013ac <SystemInit+0xec>)
 80012fe:	2200      	movs	r2, #0
 8001300:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001302:	4b2a      	ldr	r3, [pc, #168]	; (80013ac <SystemInit+0xec>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	4929      	ldr	r1, [pc, #164]	; (80013ac <SystemInit+0xec>)
 8001308:	4b29      	ldr	r3, [pc, #164]	; (80013b0 <SystemInit+0xf0>)
 800130a:	4013      	ands	r3, r2
 800130c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800130e:	4b26      	ldr	r3, [pc, #152]	; (80013a8 <SystemInit+0xe8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	2b00      	cmp	r3, #0
 8001318:	d007      	beq.n	800132a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800131a:	4b23      	ldr	r3, [pc, #140]	; (80013a8 <SystemInit+0xe8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f023 030f 	bic.w	r3, r3, #15
 8001322:	4a21      	ldr	r2, [pc, #132]	; (80013a8 <SystemInit+0xe8>)
 8001324:	f043 0307 	orr.w	r3, r3, #7
 8001328:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800132a:	4b20      	ldr	r3, [pc, #128]	; (80013ac <SystemInit+0xec>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001330:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <SystemInit+0xec>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001336:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <SystemInit+0xec>)
 8001338:	2200      	movs	r2, #0
 800133a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800133c:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <SystemInit+0xec>)
 800133e:	4a1d      	ldr	r2, [pc, #116]	; (80013b4 <SystemInit+0xf4>)
 8001340:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001342:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <SystemInit+0xec>)
 8001344:	4a1c      	ldr	r2, [pc, #112]	; (80013b8 <SystemInit+0xf8>)
 8001346:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001348:	4b18      	ldr	r3, [pc, #96]	; (80013ac <SystemInit+0xec>)
 800134a:	4a1c      	ldr	r2, [pc, #112]	; (80013bc <SystemInit+0xfc>)
 800134c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800134e:	4b17      	ldr	r3, [pc, #92]	; (80013ac <SystemInit+0xec>)
 8001350:	2200      	movs	r2, #0
 8001352:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001354:	4b15      	ldr	r3, [pc, #84]	; (80013ac <SystemInit+0xec>)
 8001356:	4a19      	ldr	r2, [pc, #100]	; (80013bc <SystemInit+0xfc>)
 8001358:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800135a:	4b14      	ldr	r3, [pc, #80]	; (80013ac <SystemInit+0xec>)
 800135c:	2200      	movs	r2, #0
 800135e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <SystemInit+0xec>)
 8001362:	4a16      	ldr	r2, [pc, #88]	; (80013bc <SystemInit+0xfc>)
 8001364:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001366:	4b11      	ldr	r3, [pc, #68]	; (80013ac <SystemInit+0xec>)
 8001368:	2200      	movs	r2, #0
 800136a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800136c:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <SystemInit+0xec>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a0e      	ldr	r2, [pc, #56]	; (80013ac <SystemInit+0xec>)
 8001372:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001376:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <SystemInit+0xec>)
 800137a:	2200      	movs	r2, #0
 800137c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <SystemInit+0x100>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <SystemInit+0x104>)
 8001384:	4013      	ands	r3, r2
 8001386:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800138a:	d202      	bcs.n	8001392 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800138c:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <SystemInit+0x108>)
 800138e:	2201      	movs	r2, #1
 8001390:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <SystemInit+0x10c>)
 8001394:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001398:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800139a:	bf00      	nop
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000ed00 	.word	0xe000ed00
 80013a8:	52002000 	.word	0x52002000
 80013ac:	58024400 	.word	0x58024400
 80013b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80013b4:	02020200 	.word	0x02020200
 80013b8:	01ff0000 	.word	0x01ff0000
 80013bc:	01010280 	.word	0x01010280
 80013c0:	5c001000 	.word	0x5c001000
 80013c4:	ffff0000 	.word	0xffff0000
 80013c8:	51008108 	.word	0x51008108
 80013cc:	52004000 	.word	0x52004000

080013d0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim3_ch1;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08e      	sub	sp, #56	; 0x38
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e4:	f107 031c 	add.w	r3, r7, #28
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013f0:	463b      	mov	r3, r7
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]
 80013fe:	615a      	str	r2, [r3, #20]
 8001400:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001402:	4b2c      	ldr	r3, [pc, #176]	; (80014b4 <MX_TIM3_Init+0xe4>)
 8001404:	4a2c      	ldr	r2, [pc, #176]	; (80014b8 <MX_TIM3_Init+0xe8>)
 8001406:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001408:	4b2a      	ldr	r3, [pc, #168]	; (80014b4 <MX_TIM3_Init+0xe4>)
 800140a:	2200      	movs	r2, #0
 800140c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140e:	4b29      	ldr	r3, [pc, #164]	; (80014b4 <MX_TIM3_Init+0xe4>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 150-1;
 8001414:	4b27      	ldr	r3, [pc, #156]	; (80014b4 <MX_TIM3_Init+0xe4>)
 8001416:	2295      	movs	r2, #149	; 0x95
 8001418:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800141a:	4b26      	ldr	r3, [pc, #152]	; (80014b4 <MX_TIM3_Init+0xe4>)
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001420:	4b24      	ldr	r3, [pc, #144]	; (80014b4 <MX_TIM3_Init+0xe4>)
 8001422:	2200      	movs	r2, #0
 8001424:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001426:	4823      	ldr	r0, [pc, #140]	; (80014b4 <MX_TIM3_Init+0xe4>)
 8001428:	f009 fd5e 	bl	800aee8 <HAL_TIM_Base_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001432:	f7ff fed3 	bl	80011dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001436:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800143a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800143c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001440:	4619      	mov	r1, r3
 8001442:	481c      	ldr	r0, [pc, #112]	; (80014b4 <MX_TIM3_Init+0xe4>)
 8001444:	f00a fb5a 	bl	800bafc <HAL_TIM_ConfigClockSource>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800144e:	f7ff fec5 	bl	80011dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001452:	4818      	ldr	r0, [pc, #96]	; (80014b4 <MX_TIM3_Init+0xe4>)
 8001454:	f009 fd9f 	bl	800af96 <HAL_TIM_PWM_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800145e:	f7ff febd 	bl	80011dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001466:	2300      	movs	r3, #0
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800146a:	f107 031c 	add.w	r3, r7, #28
 800146e:	4619      	mov	r1, r3
 8001470:	4810      	ldr	r0, [pc, #64]	; (80014b4 <MX_TIM3_Init+0xe4>)
 8001472:	f00b f97d 	bl	800c770 <HAL_TIMEx_MasterConfigSynchronization>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800147c:	f7ff feae 	bl	80011dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001480:	2360      	movs	r3, #96	; 0x60
 8001482:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001488:	2300      	movs	r3, #0
 800148a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001490:	463b      	mov	r3, r7
 8001492:	2200      	movs	r2, #0
 8001494:	4619      	mov	r1, r3
 8001496:	4807      	ldr	r0, [pc, #28]	; (80014b4 <MX_TIM3_Init+0xe4>)
 8001498:	f00a fa1c 	bl	800b8d4 <HAL_TIM_PWM_ConfigChannel>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80014a2:	f7ff fe9b 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014a6:	4803      	ldr	r0, [pc, #12]	; (80014b4 <MX_TIM3_Init+0xe4>)
 80014a8:	f000 f864 	bl	8001574 <HAL_TIM_MspPostInit>

}
 80014ac:	bf00      	nop
 80014ae:	3738      	adds	r7, #56	; 0x38
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	24000534 	.word	0x24000534
 80014b8:	40000400 	.word	0x40000400

080014bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a26      	ldr	r2, [pc, #152]	; (8001564 <HAL_TIM_Base_MspInit+0xa8>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d145      	bne.n	800155a <HAL_TIM_Base_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014ce:	4b26      	ldr	r3, [pc, #152]	; (8001568 <HAL_TIM_Base_MspInit+0xac>)
 80014d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014d4:	4a24      	ldr	r2, [pc, #144]	; (8001568 <HAL_TIM_Base_MspInit+0xac>)
 80014d6:	f043 0302 	orr.w	r3, r3, #2
 80014da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014de:	4b22      	ldr	r3, [pc, #136]	; (8001568 <HAL_TIM_Base_MspInit+0xac>)
 80014e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1 Init */
    hdma_tim3_ch1.Instance = DMA1_Stream0;
 80014ec:	4b1f      	ldr	r3, [pc, #124]	; (800156c <HAL_TIM_Base_MspInit+0xb0>)
 80014ee:	4a20      	ldr	r2, [pc, #128]	; (8001570 <HAL_TIM_Base_MspInit+0xb4>)
 80014f0:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 80014f2:	4b1e      	ldr	r3, [pc, #120]	; (800156c <HAL_TIM_Base_MspInit+0xb0>)
 80014f4:	2217      	movs	r2, #23
 80014f6:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014f8:	4b1c      	ldr	r3, [pc, #112]	; (800156c <HAL_TIM_Base_MspInit+0xb0>)
 80014fa:	2240      	movs	r2, #64	; 0x40
 80014fc:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014fe:	4b1b      	ldr	r3, [pc, #108]	; (800156c <HAL_TIM_Base_MspInit+0xb0>)
 8001500:	2200      	movs	r2, #0
 8001502:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001504:	4b19      	ldr	r3, [pc, #100]	; (800156c <HAL_TIM_Base_MspInit+0xb0>)
 8001506:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800150a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800150c:	4b17      	ldr	r3, [pc, #92]	; (800156c <HAL_TIM_Base_MspInit+0xb0>)
 800150e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001512:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001514:	4b15      	ldr	r3, [pc, #84]	; (800156c <HAL_TIM_Base_MspInit+0xb0>)
 8001516:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800151a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 800151c:	4b13      	ldr	r3, [pc, #76]	; (800156c <HAL_TIM_Base_MspInit+0xb0>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001522:	4b12      	ldr	r3, [pc, #72]	; (800156c <HAL_TIM_Base_MspInit+0xb0>)
 8001524:	2200      	movs	r2, #0
 8001526:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001528:	4b10      	ldr	r3, [pc, #64]	; (800156c <HAL_TIM_Base_MspInit+0xb0>)
 800152a:	2200      	movs	r2, #0
 800152c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 800152e:	480f      	ldr	r0, [pc, #60]	; (800156c <HAL_TIM_Base_MspInit+0xb0>)
 8001530:	f001 fe28 	bl	8003184 <HAL_DMA_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 800153a:	f7ff fe4f 	bl	80011dc <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a0a      	ldr	r2, [pc, #40]	; (800156c <HAL_TIM_Base_MspInit+0xb0>)
 8001542:	625a      	str	r2, [r3, #36]	; 0x24
 8001544:	4a09      	ldr	r2, [pc, #36]	; (800156c <HAL_TIM_Base_MspInit+0xb0>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800154a:	2200      	movs	r2, #0
 800154c:	2100      	movs	r1, #0
 800154e:	201d      	movs	r0, #29
 8001550:	f001 fde3 	bl	800311a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001554:	201d      	movs	r0, #29
 8001556:	f001 fdfa 	bl	800314e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800155a:	bf00      	nop
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40000400 	.word	0x40000400
 8001568:	58024400 	.word	0x58024400
 800156c:	24000580 	.word	0x24000580
 8001570:	40020010 	.word	0x40020010

08001574 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b088      	sub	sp, #32
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 030c 	add.w	r3, r7, #12
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a12      	ldr	r2, [pc, #72]	; (80015dc <HAL_TIM_MspPostInit+0x68>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d11e      	bne.n	80015d4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001596:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_TIM_MspPostInit+0x6c>)
 8001598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800159c:	4a10      	ldr	r2, [pc, #64]	; (80015e0 <HAL_TIM_MspPostInit+0x6c>)
 800159e:	f043 0302 	orr.w	r3, r3, #2
 80015a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <HAL_TIM_MspPostInit+0x6c>)
 80015a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015b4:	2310      	movs	r3, #16
 80015b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b8:	2302      	movs	r3, #2
 80015ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015c4:	2302      	movs	r3, #2
 80015c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c8:	f107 030c 	add.w	r3, r7, #12
 80015cc:	4619      	mov	r1, r3
 80015ce:	4805      	ldr	r0, [pc, #20]	; (80015e4 <HAL_TIM_MspPostInit+0x70>)
 80015d0:	f004 fd1a 	bl	8006008 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80015d4:	bf00      	nop
 80015d6:	3720      	adds	r7, #32
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40000400 	.word	0x40000400
 80015e0:	58024400 	.word	0x58024400
 80015e4:	58020400 	.word	0x58020400

080015e8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015ec:	4b22      	ldr	r3, [pc, #136]	; (8001678 <MX_USART3_UART_Init+0x90>)
 80015ee:	4a23      	ldr	r2, [pc, #140]	; (800167c <MX_USART3_UART_Init+0x94>)
 80015f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015f2:	4b21      	ldr	r3, [pc, #132]	; (8001678 <MX_USART3_UART_Init+0x90>)
 80015f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015fa:	4b1f      	ldr	r3, [pc, #124]	; (8001678 <MX_USART3_UART_Init+0x90>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001600:	4b1d      	ldr	r3, [pc, #116]	; (8001678 <MX_USART3_UART_Init+0x90>)
 8001602:	2200      	movs	r2, #0
 8001604:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001606:	4b1c      	ldr	r3, [pc, #112]	; (8001678 <MX_USART3_UART_Init+0x90>)
 8001608:	2200      	movs	r2, #0
 800160a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800160c:	4b1a      	ldr	r3, [pc, #104]	; (8001678 <MX_USART3_UART_Init+0x90>)
 800160e:	220c      	movs	r2, #12
 8001610:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001612:	4b19      	ldr	r3, [pc, #100]	; (8001678 <MX_USART3_UART_Init+0x90>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001618:	4b17      	ldr	r3, [pc, #92]	; (8001678 <MX_USART3_UART_Init+0x90>)
 800161a:	2200      	movs	r2, #0
 800161c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800161e:	4b16      	ldr	r3, [pc, #88]	; (8001678 <MX_USART3_UART_Init+0x90>)
 8001620:	2200      	movs	r2, #0
 8001622:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001624:	4b14      	ldr	r3, [pc, #80]	; (8001678 <MX_USART3_UART_Init+0x90>)
 8001626:	2200      	movs	r2, #0
 8001628:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800162a:	4b13      	ldr	r3, [pc, #76]	; (8001678 <MX_USART3_UART_Init+0x90>)
 800162c:	2200      	movs	r2, #0
 800162e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001630:	4811      	ldr	r0, [pc, #68]	; (8001678 <MX_USART3_UART_Init+0x90>)
 8001632:	f00b f949 	bl	800c8c8 <HAL_UART_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800163c:	f7ff fdce 	bl	80011dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001640:	2100      	movs	r1, #0
 8001642:	480d      	ldr	r0, [pc, #52]	; (8001678 <MX_USART3_UART_Init+0x90>)
 8001644:	f00c f94b 	bl	800d8de <HAL_UARTEx_SetTxFifoThreshold>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800164e:	f7ff fdc5 	bl	80011dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001652:	2100      	movs	r1, #0
 8001654:	4808      	ldr	r0, [pc, #32]	; (8001678 <MX_USART3_UART_Init+0x90>)
 8001656:	f00c f980 	bl	800d95a <HAL_UARTEx_SetRxFifoThreshold>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001660:	f7ff fdbc 	bl	80011dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001664:	4804      	ldr	r0, [pc, #16]	; (8001678 <MX_USART3_UART_Init+0x90>)
 8001666:	f00c f901 	bl	800d86c <HAL_UARTEx_DisableFifoMode>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001670:	f7ff fdb4 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	240005f8 	.word	0x240005f8
 800167c:	40004800 	.word	0x40004800

08001680 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b0ba      	sub	sp, #232	; 0xe8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001698:	f107 0310 	add.w	r3, r7, #16
 800169c:	22c0      	movs	r2, #192	; 0xc0
 800169e:	2100      	movs	r1, #0
 80016a0:	4618      	mov	r0, r3
 80016a2:	f00d fbcb 	bl	800ee3c <memset>
  if(uartHandle->Instance==USART3)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a27      	ldr	r2, [pc, #156]	; (8001748 <HAL_UART_MspInit+0xc8>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d146      	bne.n	800173e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80016b0:	f04f 0202 	mov.w	r2, #2
 80016b4:	f04f 0300 	mov.w	r3, #0
 80016b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80016bc:	2300      	movs	r3, #0
 80016be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016c2:	f107 0310 	add.w	r3, r7, #16
 80016c6:	4618      	mov	r0, r3
 80016c8:	f006 ff10 	bl	80084ec <HAL_RCCEx_PeriphCLKConfig>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80016d2:	f7ff fd83 	bl	80011dc <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80016d6:	4b1d      	ldr	r3, [pc, #116]	; (800174c <HAL_UART_MspInit+0xcc>)
 80016d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016dc:	4a1b      	ldr	r2, [pc, #108]	; (800174c <HAL_UART_MspInit+0xcc>)
 80016de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016e6:	4b19      	ldr	r3, [pc, #100]	; (800174c <HAL_UART_MspInit+0xcc>)
 80016e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016f4:	4b15      	ldr	r3, [pc, #84]	; (800174c <HAL_UART_MspInit+0xcc>)
 80016f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016fa:	4a14      	ldr	r2, [pc, #80]	; (800174c <HAL_UART_MspInit+0xcc>)
 80016fc:	f043 0308 	orr.w	r3, r3, #8
 8001700:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <HAL_UART_MspInit+0xcc>)
 8001706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800170a:	f003 0308 	and.w	r3, r3, #8
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001712:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001716:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171a:	2302      	movs	r3, #2
 800171c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001726:	2300      	movs	r3, #0
 8001728:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800172c:	2307      	movs	r3, #7
 800172e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001732:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001736:	4619      	mov	r1, r3
 8001738:	4805      	ldr	r0, [pc, #20]	; (8001750 <HAL_UART_MspInit+0xd0>)
 800173a:	f004 fc65 	bl	8006008 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800173e:	bf00      	nop
 8001740:	37e8      	adds	r7, #232	; 0xe8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40004800 	.word	0x40004800
 800174c:	58024400 	.word	0x58024400
 8001750:	58020c00 	.word	0x58020c00

08001754 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001758:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800175a:	4a16      	ldr	r2, [pc, #88]	; (80017b4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800175c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800175e:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001760:	2209      	movs	r2, #9
 8001762:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001764:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001766:	2202      	movs	r2, #2
 8001768:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800176c:	2200      	movs	r2, #0
 800176e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001772:	2202      	movs	r2, #2
 8001774:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001778:	2201      	movs	r2, #1
 800177a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800177e:	2200      	movs	r2, #0
 8001780:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001782:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001784:	2200      	movs	r2, #0
 8001786:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001788:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800178a:	2201      	movs	r2, #1
 800178c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001790:	2201      	movs	r2, #1
 8001792:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001796:	2200      	movs	r2, #0
 8001798:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800179a:	4805      	ldr	r0, [pc, #20]	; (80017b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800179c:	f005 fd2d 	bl	80071fa <HAL_PCD_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80017a6:	f7ff fd19 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	2400068c 	.word	0x2400068c
 80017b4:	40080000 	.word	0x40080000

080017b8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b0ba      	sub	sp, #232	; 0xe8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017d0:	f107 0310 	add.w	r3, r7, #16
 80017d4:	22c0      	movs	r2, #192	; 0xc0
 80017d6:	2100      	movs	r1, #0
 80017d8:	4618      	mov	r0, r3
 80017da:	f00d fb2f 	bl	800ee3c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a30      	ldr	r2, [pc, #192]	; (80018a4 <HAL_PCD_MspInit+0xec>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d159      	bne.n	800189c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80017e8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80017ec:	f04f 0300 	mov.w	r3, #0
 80017f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80017f4:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80017f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017fc:	f107 0310 	add.w	r3, r7, #16
 8001800:	4618      	mov	r0, r3
 8001802:	f006 fe73 	bl	80084ec <HAL_RCCEx_PeriphCLKConfig>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800180c:	f7ff fce6 	bl	80011dc <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001810:	f005 fe76 	bl	8007500 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001814:	4b24      	ldr	r3, [pc, #144]	; (80018a8 <HAL_PCD_MspInit+0xf0>)
 8001816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800181a:	4a23      	ldr	r2, [pc, #140]	; (80018a8 <HAL_PCD_MspInit+0xf0>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001824:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <HAL_PCD_MspInit+0xf0>)
 8001826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001832:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001836:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183a:	2302      	movs	r3, #2
 800183c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800184c:	230a      	movs	r3, #10
 800184e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001852:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001856:	4619      	mov	r1, r3
 8001858:	4814      	ldr	r0, [pc, #80]	; (80018ac <HAL_PCD_MspInit+0xf4>)
 800185a:	f004 fbd5 	bl	8006008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800185e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001862:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001866:	2300      	movs	r3, #0
 8001868:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001872:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001876:	4619      	mov	r1, r3
 8001878:	480c      	ldr	r0, [pc, #48]	; (80018ac <HAL_PCD_MspInit+0xf4>)
 800187a:	f004 fbc5 	bl	8006008 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800187e:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <HAL_PCD_MspInit+0xf0>)
 8001880:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001884:	4a08      	ldr	r2, [pc, #32]	; (80018a8 <HAL_PCD_MspInit+0xf0>)
 8001886:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800188a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_PCD_MspInit+0xf0>)
 8001890:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001894:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800189c:	bf00      	nop
 800189e:	37e8      	adds	r7, #232	; 0xe8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40080000 	.word	0x40080000
 80018a8:	58024400 	.word	0x58024400
 80018ac:	58020000 	.word	0x58020000

080018b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80018b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80018b4:	f7ff fd04 	bl	80012c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018b8:	480c      	ldr	r0, [pc, #48]	; (80018ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018ba:	490d      	ldr	r1, [pc, #52]	; (80018f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018bc:	4a0d      	ldr	r2, [pc, #52]	; (80018f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018c0:	e002      	b.n	80018c8 <LoopCopyDataInit>

080018c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018c6:	3304      	adds	r3, #4

080018c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018cc:	d3f9      	bcc.n	80018c2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ce:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018d0:	4c0a      	ldr	r4, [pc, #40]	; (80018fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80018d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d4:	e001      	b.n	80018da <LoopFillZerobss>

080018d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d8:	3204      	adds	r2, #4

080018da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018dc:	d3fb      	bcc.n	80018d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018de:	f00d fa89 	bl	800edf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018e2:	f7ff fb53 	bl	8000f8c <main>
  bx  lr
 80018e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018e8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80018ec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80018f0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80018f4:	0800f090 	.word	0x0800f090
  ldr r2, =_sbss
 80018f8:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 80018fc:	24000ba0 	.word	0x24000ba0

08001900 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001900:	e7fe      	b.n	8001900 <ADC_IRQHandler>
	...

08001904 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800190a:	2003      	movs	r0, #3
 800190c:	f001 fbfa 	bl	8003104 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001910:	f006 fc16 	bl	8008140 <HAL_RCC_GetSysClockFreq>
 8001914:	4602      	mov	r2, r0
 8001916:	4b15      	ldr	r3, [pc, #84]	; (800196c <HAL_Init+0x68>)
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	0a1b      	lsrs	r3, r3, #8
 800191c:	f003 030f 	and.w	r3, r3, #15
 8001920:	4913      	ldr	r1, [pc, #76]	; (8001970 <HAL_Init+0x6c>)
 8001922:	5ccb      	ldrb	r3, [r1, r3]
 8001924:	f003 031f 	and.w	r3, r3, #31
 8001928:	fa22 f303 	lsr.w	r3, r2, r3
 800192c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800192e:	4b0f      	ldr	r3, [pc, #60]	; (800196c <HAL_Init+0x68>)
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	f003 030f 	and.w	r3, r3, #15
 8001936:	4a0e      	ldr	r2, [pc, #56]	; (8001970 <HAL_Init+0x6c>)
 8001938:	5cd3      	ldrb	r3, [r2, r3]
 800193a:	f003 031f 	and.w	r3, r3, #31
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	fa22 f303 	lsr.w	r3, r2, r3
 8001944:	4a0b      	ldr	r2, [pc, #44]	; (8001974 <HAL_Init+0x70>)
 8001946:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001948:	4a0b      	ldr	r2, [pc, #44]	; (8001978 <HAL_Init+0x74>)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800194e:	2000      	movs	r0, #0
 8001950:	f000 f814 	bl	800197c <HAL_InitTick>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e002      	b.n	8001964 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800195e:	f7ff fc43 	bl	80011e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	58024400 	.word	0x58024400
 8001970:	0800ee68 	.word	0x0800ee68
 8001974:	24000004 	.word	0x24000004
 8001978:	24000000 	.word	0x24000000

0800197c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001984:	4b15      	ldr	r3, [pc, #84]	; (80019dc <HAL_InitTick+0x60>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d101      	bne.n	8001990 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e021      	b.n	80019d4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001990:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <HAL_InitTick+0x64>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <HAL_InitTick+0x60>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	4619      	mov	r1, r3
 800199a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800199e:	fbb3 f3f1 	udiv	r3, r3, r1
 80019a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a6:	4618      	mov	r0, r3
 80019a8:	f001 fbdf 	bl	800316a <HAL_SYSTICK_Config>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e00e      	b.n	80019d4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b0f      	cmp	r3, #15
 80019ba:	d80a      	bhi.n	80019d2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019bc:	2200      	movs	r2, #0
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	f04f 30ff 	mov.w	r0, #4294967295
 80019c4:	f001 fba9 	bl	800311a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019c8:	4a06      	ldr	r2, [pc, #24]	; (80019e4 <HAL_InitTick+0x68>)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ce:	2300      	movs	r3, #0
 80019d0:	e000      	b.n	80019d4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	2400000c 	.word	0x2400000c
 80019e0:	24000000 	.word	0x24000000
 80019e4:	24000008 	.word	0x24000008

080019e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <HAL_IncTick+0x20>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	461a      	mov	r2, r3
 80019f2:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <HAL_IncTick+0x24>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4413      	add	r3, r2
 80019f8:	4a04      	ldr	r2, [pc, #16]	; (8001a0c <HAL_IncTick+0x24>)
 80019fa:	6013      	str	r3, [r2, #0]
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	2400000c 	.word	0x2400000c
 8001a0c:	24000b98 	.word	0x24000b98

08001a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return uwTick;
 8001a14:	4b03      	ldr	r3, [pc, #12]	; (8001a24 <HAL_GetTick+0x14>)
 8001a16:	681b      	ldr	r3, [r3, #0]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	24000b98 	.word	0x24000b98

08001a28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a30:	f7ff ffee 	bl	8001a10 <HAL_GetTick>
 8001a34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a40:	d005      	beq.n	8001a4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a42:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <HAL_Delay+0x44>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	461a      	mov	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a4e:	bf00      	nop
 8001a50:	f7ff ffde 	bl	8001a10 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d8f7      	bhi.n	8001a50 <HAL_Delay+0x28>
  {
  }
}
 8001a60:	bf00      	nop
 8001a62:	bf00      	nop
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	2400000c 	.word	0x2400000c

08001a70 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a74:	4b03      	ldr	r3, [pc, #12]	; (8001a84 <HAL_GetREVID+0x14>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	0c1b      	lsrs	r3, r3, #16
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	5c001000 	.word	0x5c001000

08001a88 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001a98:	4904      	ldr	r1, [pc, #16]	; (8001aac <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	604b      	str	r3, [r1, #4]
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	58000400 	.word	0x58000400

08001ab0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
 8001ade:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	431a      	orrs	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	609a      	str	r2, [r3, #8]
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b087      	sub	sp, #28
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
 8001b24:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	3360      	adds	r3, #96	; 0x60
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	430b      	orrs	r3, r1
 8001b46:	431a      	orrs	r2, r3
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001b4c:	bf00      	nop
 8001b4e:	371c      	adds	r7, #28
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	f003 031f 	and.w	r3, r3, #31
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	fa01 f303 	lsl.w	r3, r1, r3
 8001b78:	431a      	orrs	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	611a      	str	r2, [r3, #16]
}
 8001b7e:	bf00      	nop
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b087      	sub	sp, #28
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	60f8      	str	r0, [r7, #12]
 8001b92:	60b9      	str	r1, [r7, #8]
 8001b94:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	3360      	adds	r3, #96	; 0x60
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	601a      	str	r2, [r3, #0]
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	371c      	adds	r7, #28
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e000      	b.n	8001bda <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b087      	sub	sp, #28
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	60f8      	str	r0, [r7, #12]
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	3330      	adds	r3, #48	; 0x30
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	0a1b      	lsrs	r3, r3, #8
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	f003 030c 	and.w	r3, r3, #12
 8001c02:	4413      	add	r3, r2
 8001c04:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	f003 031f 	and.w	r3, r3, #31
 8001c10:	211f      	movs	r1, #31
 8001c12:	fa01 f303 	lsl.w	r3, r1, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	401a      	ands	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	0e9b      	lsrs	r3, r3, #26
 8001c1e:	f003 011f 	and.w	r1, r3, #31
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	f003 031f 	and.w	r3, r3, #31
 8001c28:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c32:	bf00      	nop
 8001c34:	371c      	adds	r7, #28
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b087      	sub	sp, #28
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	3314      	adds	r3, #20
 8001c74:	461a      	mov	r2, r3
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	0e5b      	lsrs	r3, r3, #25
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	4413      	add	r3, r2
 8001c82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	0d1b      	lsrs	r3, r3, #20
 8001c8c:	f003 031f 	and.w	r3, r3, #31
 8001c90:	2107      	movs	r1, #7
 8001c92:	fa01 f303 	lsl.w	r3, r1, r3
 8001c96:	43db      	mvns	r3, r3
 8001c98:	401a      	ands	r2, r3
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	0d1b      	lsrs	r3, r3, #20
 8001c9e:	f003 031f 	and.w	r3, r3, #31
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001cae:	bf00      	nop
 8001cb0:	371c      	adds	r7, #28
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
	...

08001cbc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	401a      	ands	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f003 0318 	and.w	r3, r3, #24
 8001cde:	4908      	ldr	r1, [pc, #32]	; (8001d00 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ce0:	40d9      	lsrs	r1, r3
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	400b      	ands	r3, r1
 8001ce6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cea:	431a      	orrs	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001cf2:	bf00      	nop
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	000fffff 	.word	0x000fffff

08001d04 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 031f 	and.w	r3, r3, #31
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <LL_ADC_DisableDeepPowerDown+0x20>)
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	6093      	str	r3, [r2, #8]
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	5fffffc0 	.word	0x5fffffc0

08001d60 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d74:	d101      	bne.n	8001d7a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d76:	2301      	movs	r3, #1
 8001d78:	e000      	b.n	8001d7c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	4b05      	ldr	r3, [pc, #20]	; (8001dac <LL_ADC_EnableInternalRegulator+0x24>)
 8001d96:	4013      	ands	r3, r2
 8001d98:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	6fffffc0 	.word	0x6fffffc0

08001db0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001dc4:	d101      	bne.n	8001dca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e000      	b.n	8001dcc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d101      	bne.n	8001df0 <LL_ADC_IsEnabled+0x18>
 8001dec:	2301      	movs	r3, #1
 8001dee:	e000      	b.n	8001df2 <LL_ADC_IsEnabled+0x1a>
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 0304 	and.w	r3, r3, #4
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	d101      	bne.n	8001e16 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e12:	2301      	movs	r3, #1
 8001e14:	e000      	b.n	8001e18 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f003 0308 	and.w	r3, r3, #8
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	d101      	bne.n	8001e3c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e000      	b.n	8001e3e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
	...

08001e4c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e4c:	b590      	push	{r4, r7, lr}
 8001e4e:	b089      	sub	sp, #36	; 0x24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e54:	2300      	movs	r3, #0
 8001e56:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e18f      	b.n	8002186 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d109      	bne.n	8001e88 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7fe fc1f 	bl	80006b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff ff67 	bl	8001d60 <LL_ADC_IsDeepPowerDownEnabled>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d004      	beq.n	8001ea2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff ff4d 	bl	8001d3c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff ff82 	bl	8001db0 <LL_ADC_IsInternalRegulatorEnabled>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d114      	bne.n	8001edc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff ff66 	bl	8001d88 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ebc:	4b87      	ldr	r3, [pc, #540]	; (80020dc <HAL_ADC_Init+0x290>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	099b      	lsrs	r3, r3, #6
 8001ec2:	4a87      	ldr	r2, [pc, #540]	; (80020e0 <HAL_ADC_Init+0x294>)
 8001ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec8:	099b      	lsrs	r3, r3, #6
 8001eca:	3301      	adds	r3, #1
 8001ecc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ece:	e002      	b.n	8001ed6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1f9      	bne.n	8001ed0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff65 	bl	8001db0 <LL_ADC_IsInternalRegulatorEnabled>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10d      	bne.n	8001f08 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef0:	f043 0210 	orr.w	r2, r3, #16
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efc:	f043 0201 	orr.w	r2, r3, #1
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff ff76 	bl	8001dfe <LL_ADC_REG_IsConversionOngoing>
 8001f12:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f18:	f003 0310 	and.w	r3, r3, #16
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f040 8129 	bne.w	8002174 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f040 8125 	bne.w	8002174 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001f32:	f043 0202 	orr.w	r2, r3, #2
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff ff4a 	bl	8001dd8 <LL_ADC_IsEnabled>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d136      	bne.n	8001fb8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a65      	ldr	r2, [pc, #404]	; (80020e4 <HAL_ADC_Init+0x298>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d004      	beq.n	8001f5e <HAL_ADC_Init+0x112>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a63      	ldr	r2, [pc, #396]	; (80020e8 <HAL_ADC_Init+0x29c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d10e      	bne.n	8001f7c <HAL_ADC_Init+0x130>
 8001f5e:	4861      	ldr	r0, [pc, #388]	; (80020e4 <HAL_ADC_Init+0x298>)
 8001f60:	f7ff ff3a 	bl	8001dd8 <LL_ADC_IsEnabled>
 8001f64:	4604      	mov	r4, r0
 8001f66:	4860      	ldr	r0, [pc, #384]	; (80020e8 <HAL_ADC_Init+0x29c>)
 8001f68:	f7ff ff36 	bl	8001dd8 <LL_ADC_IsEnabled>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	4323      	orrs	r3, r4
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	bf0c      	ite	eq
 8001f74:	2301      	moveq	r3, #1
 8001f76:	2300      	movne	r3, #0
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	e008      	b.n	8001f8e <HAL_ADC_Init+0x142>
 8001f7c:	485b      	ldr	r0, [pc, #364]	; (80020ec <HAL_ADC_Init+0x2a0>)
 8001f7e:	f7ff ff2b 	bl	8001dd8 <LL_ADC_IsEnabled>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	bf0c      	ite	eq
 8001f88:	2301      	moveq	r3, #1
 8001f8a:	2300      	movne	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d012      	beq.n	8001fb8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a53      	ldr	r2, [pc, #332]	; (80020e4 <HAL_ADC_Init+0x298>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d004      	beq.n	8001fa6 <HAL_ADC_Init+0x15a>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a51      	ldr	r2, [pc, #324]	; (80020e8 <HAL_ADC_Init+0x29c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d101      	bne.n	8001faa <HAL_ADC_Init+0x15e>
 8001fa6:	4a52      	ldr	r2, [pc, #328]	; (80020f0 <HAL_ADC_Init+0x2a4>)
 8001fa8:	e000      	b.n	8001fac <HAL_ADC_Init+0x160>
 8001faa:	4a52      	ldr	r2, [pc, #328]	; (80020f4 <HAL_ADC_Init+0x2a8>)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4610      	mov	r0, r2
 8001fb4:	f7ff fd7c 	bl	8001ab0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001fb8:	f7ff fd5a 	bl	8001a70 <HAL_GetREVID>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	f241 0203 	movw	r2, #4099	; 0x1003
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d914      	bls.n	8001ff0 <HAL_ADC_Init+0x1a4>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2b10      	cmp	r3, #16
 8001fcc:	d110      	bne.n	8001ff0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	7d5b      	ldrb	r3, [r3, #21]
 8001fd2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fd8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001fde:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	7f1b      	ldrb	r3, [r3, #28]
 8001fe4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001fe6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fe8:	f043 030c 	orr.w	r3, r3, #12
 8001fec:	61bb      	str	r3, [r7, #24]
 8001fee:	e00d      	b.n	800200c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	7d5b      	ldrb	r3, [r3, #21]
 8001ff4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ffa:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002000:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	7f1b      	ldrb	r3, [r3, #28]
 8002006:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002008:	4313      	orrs	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	7f1b      	ldrb	r3, [r3, #28]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d106      	bne.n	8002022 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	3b01      	subs	r3, #1
 800201a:	045b      	lsls	r3, r3, #17
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	2b00      	cmp	r3, #0
 8002028:	d009      	beq.n	800203e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002036:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	4b2c      	ldr	r3, [pc, #176]	; (80020f8 <HAL_ADC_Init+0x2ac>)
 8002046:	4013      	ands	r3, r2
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6812      	ldr	r2, [r2, #0]
 800204c:	69b9      	ldr	r1, [r7, #24]
 800204e:	430b      	orrs	r3, r1
 8002050:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff fed1 	bl	8001dfe <LL_ADC_REG_IsConversionOngoing>
 800205c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff fede 	bl	8001e24 <LL_ADC_INJ_IsConversionOngoing>
 8002068:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d15f      	bne.n	8002130 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d15c      	bne.n	8002130 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	7d1b      	ldrb	r3, [r3, #20]
 800207a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002080:	4313      	orrs	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	4b1c      	ldr	r3, [pc, #112]	; (80020fc <HAL_ADC_Init+0x2b0>)
 800208c:	4013      	ands	r3, r2
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	6812      	ldr	r2, [r2, #0]
 8002092:	69b9      	ldr	r1, [r7, #24]
 8002094:	430b      	orrs	r3, r1
 8002096:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d130      	bne.n	8002104 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	691a      	ldr	r2, [r3, #16]
 80020ae:	4b14      	ldr	r3, [pc, #80]	; (8002100 <HAL_ADC_Init+0x2b4>)
 80020b0:	4013      	ands	r3, r2
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80020b6:	3a01      	subs	r2, #1
 80020b8:	0411      	lsls	r1, r2, #16
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80020be:	4311      	orrs	r1, r2
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80020c4:	4311      	orrs	r1, r2
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80020ca:	430a      	orrs	r2, r1
 80020cc:	431a      	orrs	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f042 0201 	orr.w	r2, r2, #1
 80020d6:	611a      	str	r2, [r3, #16]
 80020d8:	e01c      	b.n	8002114 <HAL_ADC_Init+0x2c8>
 80020da:	bf00      	nop
 80020dc:	24000000 	.word	0x24000000
 80020e0:	053e2d63 	.word	0x053e2d63
 80020e4:	40022000 	.word	0x40022000
 80020e8:	40022100 	.word	0x40022100
 80020ec:	58026000 	.word	0x58026000
 80020f0:	40022300 	.word	0x40022300
 80020f4:	58026300 	.word	0x58026300
 80020f8:	fff0c003 	.word	0xfff0c003
 80020fc:	ffffbffc 	.word	0xffffbffc
 8002100:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	691a      	ldr	r2, [r3, #16]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0201 	bic.w	r2, r2, #1
 8002112:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 fddc 	bl	8002ce8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d10c      	bne.n	8002152 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f023 010f 	bic.w	r1, r3, #15
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	1e5a      	subs	r2, r3, #1
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	631a      	str	r2, [r3, #48]	; 0x30
 8002150:	e007      	b.n	8002162 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 020f 	bic.w	r2, r2, #15
 8002160:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002166:	f023 0303 	bic.w	r3, r3, #3
 800216a:	f043 0201 	orr.w	r2, r3, #1
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	655a      	str	r2, [r3, #84]	; 0x54
 8002172:	e007      	b.n	8002184 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002178:	f043 0210 	orr.w	r2, r3, #16
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002184:	7ffb      	ldrb	r3, [r7, #31]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3724      	adds	r7, #36	; 0x24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd90      	pop	{r4, r7, pc}
 800218e:	bf00      	nop

08002190 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800219e:	4618      	mov	r0, r3
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08a      	sub	sp, #40	; 0x28
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80021b4:	2300      	movs	r3, #0
 80021b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a87      	ldr	r2, [pc, #540]	; (80023ec <HAL_ADC_IRQHandler+0x240>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d004      	beq.n	80021dc <HAL_ADC_IRQHandler+0x30>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a86      	ldr	r2, [pc, #536]	; (80023f0 <HAL_ADC_IRQHandler+0x244>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d101      	bne.n	80021e0 <HAL_ADC_IRQHandler+0x34>
 80021dc:	4b85      	ldr	r3, [pc, #532]	; (80023f4 <HAL_ADC_IRQHandler+0x248>)
 80021de:	e000      	b.n	80021e2 <HAL_ADC_IRQHandler+0x36>
 80021e0:	4b85      	ldr	r3, [pc, #532]	; (80023f8 <HAL_ADC_IRQHandler+0x24c>)
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fd8e 	bl	8001d04 <LL_ADC_GetMultimode>
 80021e8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d017      	beq.n	8002224 <HAL_ADC_IRQHandler+0x78>
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d012      	beq.n	8002224 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002202:	f003 0310 	and.w	r3, r3, #16
 8002206:	2b00      	cmp	r3, #0
 8002208:	d105      	bne.n	8002216 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800220e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 fe9a 	bl	8002f50 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2202      	movs	r2, #2
 8002222:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f003 0304 	and.w	r3, r3, #4
 800222a:	2b00      	cmp	r3, #0
 800222c:	d004      	beq.n	8002238 <HAL_ADC_IRQHandler+0x8c>
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10a      	bne.n	800224e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 8083 	beq.w	800234a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	2b00      	cmp	r3, #0
 800224c:	d07d      	beq.n	800234a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002252:	f003 0310 	and.w	r3, r3, #16
 8002256:	2b00      	cmp	r3, #0
 8002258:	d105      	bne.n	8002266 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800225e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff fca8 	bl	8001bc0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d062      	beq.n	800233c <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a5d      	ldr	r2, [pc, #372]	; (80023f0 <HAL_ADC_IRQHandler+0x244>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d002      	beq.n	8002286 <HAL_ADC_IRQHandler+0xda>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	e000      	b.n	8002288 <HAL_ADC_IRQHandler+0xdc>
 8002286:	4b59      	ldr	r3, [pc, #356]	; (80023ec <HAL_ADC_IRQHandler+0x240>)
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	6812      	ldr	r2, [r2, #0]
 800228c:	4293      	cmp	r3, r2
 800228e:	d008      	beq.n	80022a2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d005      	beq.n	80022a2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	2b05      	cmp	r3, #5
 800229a:	d002      	beq.n	80022a2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	2b09      	cmp	r3, #9
 80022a0:	d104      	bne.n	80022ac <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	623b      	str	r3, [r7, #32]
 80022aa:	e00c      	b.n	80022c6 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a4f      	ldr	r2, [pc, #316]	; (80023f0 <HAL_ADC_IRQHandler+0x244>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d002      	beq.n	80022bc <HAL_ADC_IRQHandler+0x110>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	e000      	b.n	80022be <HAL_ADC_IRQHandler+0x112>
 80022bc:	4b4b      	ldr	r3, [pc, #300]	; (80023ec <HAL_ADC_IRQHandler+0x240>)
 80022be:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80022c6:	6a3b      	ldr	r3, [r7, #32]
 80022c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d135      	bne.n	800233c <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b08      	cmp	r3, #8
 80022dc:	d12e      	bne.n	800233c <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff fd8b 	bl	8001dfe <LL_ADC_REG_IsConversionOngoing>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d11a      	bne.n	8002324 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 020c 	bic.w	r2, r2, #12
 80022fc:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002302:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d112      	bne.n	800233c <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231a:	f043 0201 	orr.w	r2, r3, #1
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	655a      	str	r2, [r3, #84]	; 0x54
 8002322:	e00b      	b.n	800233c <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002328:	f043 0210 	orr.w	r2, r3, #16
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002334:	f043 0201 	orr.w	r2, r3, #1
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7fe fe11 	bl	8000f64 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	220c      	movs	r2, #12
 8002348:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	f003 0320 	and.w	r3, r3, #32
 8002350:	2b00      	cmp	r3, #0
 8002352:	d004      	beq.n	800235e <HAL_ADC_IRQHandler+0x1b2>
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	f003 0320 	and.w	r3, r3, #32
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10b      	bne.n	8002376 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002364:	2b00      	cmp	r3, #0
 8002366:	f000 80a0 	beq.w	80024aa <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 809a 	beq.w	80024aa <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237a:	f003 0310 	and.w	r3, r3, #16
 800237e:	2b00      	cmp	r3, #0
 8002380:	d105      	bne.n	800238e <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002386:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff fc53 	bl	8001c3e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002398:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff fc0e 	bl	8001bc0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80023a4:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a11      	ldr	r2, [pc, #68]	; (80023f0 <HAL_ADC_IRQHandler+0x244>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d002      	beq.n	80023b6 <HAL_ADC_IRQHandler+0x20a>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	e000      	b.n	80023b8 <HAL_ADC_IRQHandler+0x20c>
 80023b6:	4b0d      	ldr	r3, [pc, #52]	; (80023ec <HAL_ADC_IRQHandler+0x240>)
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6812      	ldr	r2, [r2, #0]
 80023bc:	4293      	cmp	r3, r2
 80023be:	d008      	beq.n	80023d2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d005      	beq.n	80023d2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	2b06      	cmp	r3, #6
 80023ca:	d002      	beq.n	80023d2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	2b07      	cmp	r3, #7
 80023d0:	d104      	bne.n	80023dc <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	623b      	str	r3, [r7, #32]
 80023da:	e014      	b.n	8002406 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a03      	ldr	r2, [pc, #12]	; (80023f0 <HAL_ADC_IRQHandler+0x244>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d00a      	beq.n	80023fc <HAL_ADC_IRQHandler+0x250>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	e008      	b.n	80023fe <HAL_ADC_IRQHandler+0x252>
 80023ec:	40022000 	.word	0x40022000
 80023f0:	40022100 	.word	0x40022100
 80023f4:	40022300 	.word	0x40022300
 80023f8:	58026300 	.word	0x58026300
 80023fc:	4b84      	ldr	r3, [pc, #528]	; (8002610 <HAL_ADC_IRQHandler+0x464>)
 80023fe:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d047      	beq.n	800249c <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800240c:	6a3b      	ldr	r3, [r7, #32]
 800240e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d007      	beq.n	8002426 <HAL_ADC_IRQHandler+0x27a>
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d03f      	beq.n	800249c <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800241c:	6a3b      	ldr	r3, [r7, #32]
 800241e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002422:	2b00      	cmp	r3, #0
 8002424:	d13a      	bne.n	800249c <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002430:	2b40      	cmp	r3, #64	; 0x40
 8002432:	d133      	bne.n	800249c <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002434:	6a3b      	ldr	r3, [r7, #32]
 8002436:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d12e      	bne.n	800249c <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff fcee 	bl	8001e24 <LL_ADC_INJ_IsConversionOngoing>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d11a      	bne.n	8002484 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800245c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002462:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002472:	2b00      	cmp	r3, #0
 8002474:	d112      	bne.n	800249c <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247a:	f043 0201 	orr.w	r2, r3, #1
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	655a      	str	r2, [r3, #84]	; 0x54
 8002482:	e00b      	b.n	800249c <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002488:	f043 0210 	orr.w	r2, r3, #16
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002494:	f043 0201 	orr.w	r2, r3, #1
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 fd2f 	bl	8002f00 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2260      	movs	r2, #96	; 0x60
 80024a8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d011      	beq.n	80024d8 <HAL_ADC_IRQHandler+0x32c>
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00c      	beq.n	80024d8 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f8a8 	bl	8002620 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2280      	movs	r2, #128	; 0x80
 80024d6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d012      	beq.n	8002508 <HAL_ADC_IRQHandler+0x35c>
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00d      	beq.n	8002508 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 fd15 	bl	8002f28 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002506:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800250e:	2b00      	cmp	r3, #0
 8002510:	d012      	beq.n	8002538 <HAL_ADC_IRQHandler+0x38c>
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00d      	beq.n	8002538 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002520:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 fd07 	bl	8002f3c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002536:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f003 0310 	and.w	r3, r3, #16
 800253e:	2b00      	cmp	r3, #0
 8002540:	d043      	beq.n	80025ca <HAL_ADC_IRQHandler+0x41e>
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	f003 0310 	and.w	r3, r3, #16
 8002548:	2b00      	cmp	r3, #0
 800254a:	d03e      	beq.n	80025ca <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002550:	2b00      	cmp	r3, #0
 8002552:	d102      	bne.n	800255a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8002554:	2301      	movs	r3, #1
 8002556:	627b      	str	r3, [r7, #36]	; 0x24
 8002558:	e021      	b.n	800259e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d015      	beq.n	800258c <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a2a      	ldr	r2, [pc, #168]	; (8002610 <HAL_ADC_IRQHandler+0x464>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d004      	beq.n	8002574 <HAL_ADC_IRQHandler+0x3c8>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a29      	ldr	r2, [pc, #164]	; (8002614 <HAL_ADC_IRQHandler+0x468>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d101      	bne.n	8002578 <HAL_ADC_IRQHandler+0x3cc>
 8002574:	4b28      	ldr	r3, [pc, #160]	; (8002618 <HAL_ADC_IRQHandler+0x46c>)
 8002576:	e000      	b.n	800257a <HAL_ADC_IRQHandler+0x3ce>
 8002578:	4b28      	ldr	r3, [pc, #160]	; (800261c <HAL_ADC_IRQHandler+0x470>)
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff fbd0 	bl	8001d20 <LL_ADC_GetMultiDMATransfer>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00b      	beq.n	800259e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002586:	2301      	movs	r3, #1
 8002588:	627b      	str	r3, [r7, #36]	; 0x24
 800258a:	e008      	b.n	800259e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800259a:	2301      	movs	r3, #1
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d10e      	bne.n	80025c2 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b4:	f043 0202 	orr.w	r2, r3, #2
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 f839 	bl	8002634 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2210      	movs	r2, #16
 80025c8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d018      	beq.n	8002606 <HAL_ADC_IRQHandler+0x45a>
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d013      	beq.n	8002606 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ee:	f043 0208 	orr.w	r2, r3, #8
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025fe:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 fc87 	bl	8002f14 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002606:	bf00      	nop
 8002608:	3728      	adds	r7, #40	; 0x28
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40022000 	.word	0x40022000
 8002614:	40022100 	.word	0x40022100
 8002618:	40022300 	.word	0x40022300
 800261c:	58026300 	.word	0x58026300

08002620 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002648:	b590      	push	{r4, r7, lr}
 800264a:	b0a1      	sub	sp, #132	; 0x84
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002652:	2300      	movs	r3, #0
 8002654:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002658:	2300      	movs	r3, #0
 800265a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	4a9d      	ldr	r2, [pc, #628]	; (80028d8 <HAL_ADC_ConfigChannel+0x290>)
 8002662:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <HAL_ADC_ConfigChannel+0x2a>
 800266e:	2302      	movs	r3, #2
 8002670:	e321      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0x66e>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff fbbd 	bl	8001dfe <LL_ADC_REG_IsConversionOngoing>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	f040 8306 	bne.w	8002c98 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002694:	2b00      	cmp	r3, #0
 8002696:	d108      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x62>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	0e9b      	lsrs	r3, r3, #26
 800269e:	f003 031f 	and.w	r3, r3, #31
 80026a2:	2201      	movs	r2, #1
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	e016      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x90>
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026b2:	fa93 f3a3 	rbit	r3, r3
 80026b6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026ba:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80026bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80026c2:	2320      	movs	r3, #32
 80026c4:	e003      	b.n	80026ce <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80026c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026c8:	fab3 f383 	clz	r3, r3
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	f003 031f 	and.w	r3, r3, #31
 80026d2:	2201      	movs	r2, #1
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6812      	ldr	r2, [r2, #0]
 80026dc:	69d1      	ldr	r1, [r2, #28]
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	430b      	orrs	r3, r1
 80026e4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6818      	ldr	r0, [r3, #0]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	6859      	ldr	r1, [r3, #4]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	461a      	mov	r2, r3
 80026f4:	f7ff fa77 	bl	8001be6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff fb7e 	bl	8001dfe <LL_ADC_REG_IsConversionOngoing>
 8002702:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff fb8b 	bl	8001e24 <LL_ADC_INJ_IsConversionOngoing>
 800270e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002710:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002712:	2b00      	cmp	r3, #0
 8002714:	f040 80b3 	bne.w	800287e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002718:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800271a:	2b00      	cmp	r3, #0
 800271c:	f040 80af 	bne.w	800287e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6818      	ldr	r0, [r3, #0]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	6819      	ldr	r1, [r3, #0]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	461a      	mov	r2, r3
 800272e:	f7ff fa99 	bl	8001c64 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002732:	4b6a      	ldr	r3, [pc, #424]	; (80028dc <HAL_ADC_ConfigChannel+0x294>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800273a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800273e:	d10b      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x110>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	695a      	ldr	r2, [r3, #20]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	089b      	lsrs	r3, r3, #2
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	e01d      	b.n	8002794 <HAL_ADC_ConfigChannel+0x14c>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	f003 0310 	and.w	r3, r3, #16
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10b      	bne.n	800277e <HAL_ADC_ConfigChannel+0x136>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	695a      	ldr	r2, [r3, #20]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	089b      	lsrs	r3, r3, #2
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	e00a      	b.n	8002794 <HAL_ADC_ConfigChannel+0x14c>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	695a      	ldr	r2, [r3, #20]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	089b      	lsrs	r3, r3, #2
 800278a:	f003 0304 	and.w	r3, r3, #4
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	2b04      	cmp	r3, #4
 800279c:	d027      	beq.n	80027ee <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6818      	ldr	r0, [r3, #0]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	6919      	ldr	r1, [r3, #16]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027ac:	f7ff f9b4 	bl	8001b18 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6818      	ldr	r0, [r3, #0]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	6919      	ldr	r1, [r3, #16]
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	7e5b      	ldrb	r3, [r3, #25]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d102      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x17e>
 80027c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80027c4:	e000      	b.n	80027c8 <HAL_ADC_ConfigChannel+0x180>
 80027c6:	2300      	movs	r3, #0
 80027c8:	461a      	mov	r2, r3
 80027ca:	f7ff f9de 	bl	8001b8a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6818      	ldr	r0, [r3, #0]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	6919      	ldr	r1, [r3, #16]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	7e1b      	ldrb	r3, [r3, #24]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d102      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x19c>
 80027de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027e2:	e000      	b.n	80027e6 <HAL_ADC_ConfigChannel+0x19e>
 80027e4:	2300      	movs	r3, #0
 80027e6:	461a      	mov	r2, r3
 80027e8:	f7ff f9b6 	bl	8001b58 <LL_ADC_SetDataRightShift>
 80027ec:	e047      	b.n	800287e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	069b      	lsls	r3, r3, #26
 80027fe:	429a      	cmp	r2, r3
 8002800:	d107      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002810:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002818:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	069b      	lsls	r3, r3, #26
 8002822:	429a      	cmp	r2, r3
 8002824:	d107      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002834:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800283c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	069b      	lsls	r3, r3, #26
 8002846:	429a      	cmp	r2, r3
 8002848:	d107      	bne.n	800285a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002858:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002860:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	069b      	lsls	r3, r3, #26
 800286a:	429a      	cmp	r2, r3
 800286c:	d107      	bne.n	800287e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800287c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff faa8 	bl	8001dd8 <LL_ADC_IsEnabled>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	f040 820d 	bne.w	8002caa <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6818      	ldr	r0, [r3, #0]
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	6819      	ldr	r1, [r3, #0]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	461a      	mov	r2, r3
 800289e:	f7ff fa0d 	bl	8001cbc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	4a0c      	ldr	r2, [pc, #48]	; (80028d8 <HAL_ADC_ConfigChannel+0x290>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	f040 8133 	bne.w	8002b14 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d110      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x298>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	0e9b      	lsrs	r3, r3, #26
 80028c4:	3301      	adds	r3, #1
 80028c6:	f003 031f 	and.w	r3, r3, #31
 80028ca:	2b09      	cmp	r3, #9
 80028cc:	bf94      	ite	ls
 80028ce:	2301      	movls	r3, #1
 80028d0:	2300      	movhi	r3, #0
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	e01e      	b.n	8002914 <HAL_ADC_ConfigChannel+0x2cc>
 80028d6:	bf00      	nop
 80028d8:	47ff0000 	.word	0x47ff0000
 80028dc:	5c001000 	.word	0x5c001000
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028e8:	fa93 f3a3 	rbit	r3, r3
 80028ec:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80028ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80028f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80028f8:	2320      	movs	r3, #32
 80028fa:	e003      	b.n	8002904 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80028fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028fe:	fab3 f383 	clz	r3, r3
 8002902:	b2db      	uxtb	r3, r3
 8002904:	3301      	adds	r3, #1
 8002906:	f003 031f 	and.w	r3, r3, #31
 800290a:	2b09      	cmp	r3, #9
 800290c:	bf94      	ite	ls
 800290e:	2301      	movls	r3, #1
 8002910:	2300      	movhi	r3, #0
 8002912:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002914:	2b00      	cmp	r3, #0
 8002916:	d079      	beq.n	8002a0c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002920:	2b00      	cmp	r3, #0
 8002922:	d107      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x2ec>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	0e9b      	lsrs	r3, r3, #26
 800292a:	3301      	adds	r3, #1
 800292c:	069b      	lsls	r3, r3, #26
 800292e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002932:	e015      	b.n	8002960 <HAL_ADC_ConfigChannel+0x318>
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800293c:	fa93 f3a3 	rbit	r3, r3
 8002940:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002944:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 800294c:	2320      	movs	r3, #32
 800294e:	e003      	b.n	8002958 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002952:	fab3 f383 	clz	r3, r3
 8002956:	b2db      	uxtb	r3, r3
 8002958:	3301      	adds	r3, #1
 800295a:	069b      	lsls	r3, r3, #26
 800295c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002968:	2b00      	cmp	r3, #0
 800296a:	d109      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x338>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	0e9b      	lsrs	r3, r3, #26
 8002972:	3301      	adds	r3, #1
 8002974:	f003 031f 	and.w	r3, r3, #31
 8002978:	2101      	movs	r1, #1
 800297a:	fa01 f303 	lsl.w	r3, r1, r3
 800297e:	e017      	b.n	80029b0 <HAL_ADC_ConfigChannel+0x368>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002988:	fa93 f3a3 	rbit	r3, r3
 800298c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800298e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002990:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002998:	2320      	movs	r3, #32
 800299a:	e003      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 800299c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800299e:	fab3 f383 	clz	r3, r3
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	3301      	adds	r3, #1
 80029a6:	f003 031f 	and.w	r3, r3, #31
 80029aa:	2101      	movs	r1, #1
 80029ac:	fa01 f303 	lsl.w	r3, r1, r3
 80029b0:	ea42 0103 	orr.w	r1, r2, r3
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10a      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x38e>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	0e9b      	lsrs	r3, r3, #26
 80029c6:	3301      	adds	r3, #1
 80029c8:	f003 021f 	and.w	r2, r3, #31
 80029cc:	4613      	mov	r3, r2
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	4413      	add	r3, r2
 80029d2:	051b      	lsls	r3, r3, #20
 80029d4:	e018      	b.n	8002a08 <HAL_ADC_ConfigChannel+0x3c0>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029de:	fa93 f3a3 	rbit	r3, r3
 80029e2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80029e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80029e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80029ee:	2320      	movs	r3, #32
 80029f0:	e003      	b.n	80029fa <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80029f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f4:	fab3 f383 	clz	r3, r3
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	3301      	adds	r3, #1
 80029fc:	f003 021f 	and.w	r2, r3, #31
 8002a00:	4613      	mov	r3, r2
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	4413      	add	r3, r2
 8002a06:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a08:	430b      	orrs	r3, r1
 8002a0a:	e07e      	b.n	8002b0a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d107      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x3e0>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	0e9b      	lsrs	r3, r3, #26
 8002a1e:	3301      	adds	r3, #1
 8002a20:	069b      	lsls	r3, r3, #26
 8002a22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a26:	e015      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x40c>
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a30:	fa93 f3a3 	rbit	r3, r3
 8002a34:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002a40:	2320      	movs	r3, #32
 8002a42:	e003      	b.n	8002a4c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a46:	fab3 f383 	clz	r3, r3
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	069b      	lsls	r3, r3, #26
 8002a50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d109      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x42c>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	0e9b      	lsrs	r3, r3, #26
 8002a66:	3301      	adds	r3, #1
 8002a68:	f003 031f 	and.w	r3, r3, #31
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a72:	e017      	b.n	8002aa4 <HAL_ADC_ConfigChannel+0x45c>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	fa93 f3a3 	rbit	r3, r3
 8002a80:	61bb      	str	r3, [r7, #24]
  return result;
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002a8c:	2320      	movs	r3, #32
 8002a8e:	e003      	b.n	8002a98 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002a90:	6a3b      	ldr	r3, [r7, #32]
 8002a92:	fab3 f383 	clz	r3, r3
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	3301      	adds	r3, #1
 8002a9a:	f003 031f 	and.w	r3, r3, #31
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa4:	ea42 0103 	orr.w	r1, r2, r3
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10d      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x488>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	0e9b      	lsrs	r3, r3, #26
 8002aba:	3301      	adds	r3, #1
 8002abc:	f003 021f 	and.w	r2, r3, #31
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	4413      	add	r3, r2
 8002ac6:	3b1e      	subs	r3, #30
 8002ac8:	051b      	lsls	r3, r3, #20
 8002aca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ace:	e01b      	b.n	8002b08 <HAL_ADC_ConfigChannel+0x4c0>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	fa93 f3a3 	rbit	r3, r3
 8002adc:	60fb      	str	r3, [r7, #12]
  return result;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002ae8:	2320      	movs	r3, #32
 8002aea:	e003      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	fab3 f383 	clz	r3, r3
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	3301      	adds	r3, #1
 8002af6:	f003 021f 	and.w	r2, r3, #31
 8002afa:	4613      	mov	r3, r2
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	4413      	add	r3, r2
 8002b00:	3b1e      	subs	r3, #30
 8002b02:	051b      	lsls	r3, r3, #20
 8002b04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b08:	430b      	orrs	r3, r1
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	6892      	ldr	r2, [r2, #8]
 8002b0e:	4619      	mov	r1, r3
 8002b10:	f7ff f8a8 	bl	8001c64 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f280 80c6 	bge.w	8002caa <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a67      	ldr	r2, [pc, #412]	; (8002cc0 <HAL_ADC_ConfigChannel+0x678>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d004      	beq.n	8002b32 <HAL_ADC_ConfigChannel+0x4ea>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a65      	ldr	r2, [pc, #404]	; (8002cc4 <HAL_ADC_ConfigChannel+0x67c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d101      	bne.n	8002b36 <HAL_ADC_ConfigChannel+0x4ee>
 8002b32:	4b65      	ldr	r3, [pc, #404]	; (8002cc8 <HAL_ADC_ConfigChannel+0x680>)
 8002b34:	e000      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x4f0>
 8002b36:	4b65      	ldr	r3, [pc, #404]	; (8002ccc <HAL_ADC_ConfigChannel+0x684>)
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fe ffdf 	bl	8001afc <LL_ADC_GetCommonPathInternalCh>
 8002b3e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a5e      	ldr	r2, [pc, #376]	; (8002cc0 <HAL_ADC_ConfigChannel+0x678>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d004      	beq.n	8002b54 <HAL_ADC_ConfigChannel+0x50c>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a5d      	ldr	r2, [pc, #372]	; (8002cc4 <HAL_ADC_ConfigChannel+0x67c>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d10e      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x52a>
 8002b54:	485a      	ldr	r0, [pc, #360]	; (8002cc0 <HAL_ADC_ConfigChannel+0x678>)
 8002b56:	f7ff f93f 	bl	8001dd8 <LL_ADC_IsEnabled>
 8002b5a:	4604      	mov	r4, r0
 8002b5c:	4859      	ldr	r0, [pc, #356]	; (8002cc4 <HAL_ADC_ConfigChannel+0x67c>)
 8002b5e:	f7ff f93b 	bl	8001dd8 <LL_ADC_IsEnabled>
 8002b62:	4603      	mov	r3, r0
 8002b64:	4323      	orrs	r3, r4
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	bf0c      	ite	eq
 8002b6a:	2301      	moveq	r3, #1
 8002b6c:	2300      	movne	r3, #0
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	e008      	b.n	8002b84 <HAL_ADC_ConfigChannel+0x53c>
 8002b72:	4857      	ldr	r0, [pc, #348]	; (8002cd0 <HAL_ADC_ConfigChannel+0x688>)
 8002b74:	f7ff f930 	bl	8001dd8 <LL_ADC_IsEnabled>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	bf0c      	ite	eq
 8002b7e:	2301      	moveq	r3, #1
 8002b80:	2300      	movne	r3, #0
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d07d      	beq.n	8002c84 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a51      	ldr	r2, [pc, #324]	; (8002cd4 <HAL_ADC_ConfigChannel+0x68c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d130      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x5ac>
 8002b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d12b      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a4b      	ldr	r2, [pc, #300]	; (8002cd0 <HAL_ADC_ConfigChannel+0x688>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	f040 8081 	bne.w	8002caa <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a44      	ldr	r2, [pc, #272]	; (8002cc0 <HAL_ADC_ConfigChannel+0x678>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d004      	beq.n	8002bbc <HAL_ADC_ConfigChannel+0x574>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a43      	ldr	r2, [pc, #268]	; (8002cc4 <HAL_ADC_ConfigChannel+0x67c>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d101      	bne.n	8002bc0 <HAL_ADC_ConfigChannel+0x578>
 8002bbc:	4a42      	ldr	r2, [pc, #264]	; (8002cc8 <HAL_ADC_ConfigChannel+0x680>)
 8002bbe:	e000      	b.n	8002bc2 <HAL_ADC_ConfigChannel+0x57a>
 8002bc0:	4a42      	ldr	r2, [pc, #264]	; (8002ccc <HAL_ADC_ConfigChannel+0x684>)
 8002bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4610      	mov	r0, r2
 8002bcc:	f7fe ff83 	bl	8001ad6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bd0:	4b41      	ldr	r3, [pc, #260]	; (8002cd8 <HAL_ADC_ConfigChannel+0x690>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	099b      	lsrs	r3, r3, #6
 8002bd6:	4a41      	ldr	r2, [pc, #260]	; (8002cdc <HAL_ADC_ConfigChannel+0x694>)
 8002bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bdc:	099b      	lsrs	r3, r3, #6
 8002bde:	3301      	adds	r3, #1
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002be4:	e002      	b.n	8002bec <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	3b01      	subs	r3, #1
 8002bea:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f9      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bf2:	e05a      	b.n	8002caa <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a39      	ldr	r2, [pc, #228]	; (8002ce0 <HAL_ADC_ConfigChannel+0x698>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d11e      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x5f4>
 8002bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d119      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a30      	ldr	r2, [pc, #192]	; (8002cd0 <HAL_ADC_ConfigChannel+0x688>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d14b      	bne.n	8002caa <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a2a      	ldr	r2, [pc, #168]	; (8002cc0 <HAL_ADC_ConfigChannel+0x678>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d004      	beq.n	8002c26 <HAL_ADC_ConfigChannel+0x5de>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a28      	ldr	r2, [pc, #160]	; (8002cc4 <HAL_ADC_ConfigChannel+0x67c>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d101      	bne.n	8002c2a <HAL_ADC_ConfigChannel+0x5e2>
 8002c26:	4a28      	ldr	r2, [pc, #160]	; (8002cc8 <HAL_ADC_ConfigChannel+0x680>)
 8002c28:	e000      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x5e4>
 8002c2a:	4a28      	ldr	r2, [pc, #160]	; (8002ccc <HAL_ADC_ConfigChannel+0x684>)
 8002c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c32:	4619      	mov	r1, r3
 8002c34:	4610      	mov	r0, r2
 8002c36:	f7fe ff4e 	bl	8001ad6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c3a:	e036      	b.n	8002caa <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a28      	ldr	r2, [pc, #160]	; (8002ce4 <HAL_ADC_ConfigChannel+0x69c>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d131      	bne.n	8002caa <HAL_ADC_ConfigChannel+0x662>
 8002c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d12c      	bne.n	8002caa <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a1e      	ldr	r2, [pc, #120]	; (8002cd0 <HAL_ADC_ConfigChannel+0x688>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d127      	bne.n	8002caa <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a18      	ldr	r2, [pc, #96]	; (8002cc0 <HAL_ADC_ConfigChannel+0x678>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d004      	beq.n	8002c6e <HAL_ADC_ConfigChannel+0x626>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a16      	ldr	r2, [pc, #88]	; (8002cc4 <HAL_ADC_ConfigChannel+0x67c>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d101      	bne.n	8002c72 <HAL_ADC_ConfigChannel+0x62a>
 8002c6e:	4a16      	ldr	r2, [pc, #88]	; (8002cc8 <HAL_ADC_ConfigChannel+0x680>)
 8002c70:	e000      	b.n	8002c74 <HAL_ADC_ConfigChannel+0x62c>
 8002c72:	4a16      	ldr	r2, [pc, #88]	; (8002ccc <HAL_ADC_ConfigChannel+0x684>)
 8002c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	f7fe ff2a 	bl	8001ad6 <LL_ADC_SetCommonPathInternalCh>
 8002c82:	e012      	b.n	8002caa <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c88:	f043 0220 	orr.w	r2, r3, #32
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002c96:	e008      	b.n	8002caa <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9c:	f043 0220 	orr.w	r2, r3, #32
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002cb2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3784      	adds	r7, #132	; 0x84
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd90      	pop	{r4, r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40022000 	.word	0x40022000
 8002cc4:	40022100 	.word	0x40022100
 8002cc8:	40022300 	.word	0x40022300
 8002ccc:	58026300 	.word	0x58026300
 8002cd0:	58026000 	.word	0x58026000
 8002cd4:	cb840000 	.word	0xcb840000
 8002cd8:	24000000 	.word	0x24000000
 8002cdc:	053e2d63 	.word	0x053e2d63
 8002ce0:	c7520000 	.word	0xc7520000
 8002ce4:	cfb80000 	.word	0xcfb80000

08002ce8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a7a      	ldr	r2, [pc, #488]	; (8002ee0 <ADC_ConfigureBoostMode+0x1f8>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d004      	beq.n	8002d04 <ADC_ConfigureBoostMode+0x1c>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a79      	ldr	r2, [pc, #484]	; (8002ee4 <ADC_ConfigureBoostMode+0x1fc>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d109      	bne.n	8002d18 <ADC_ConfigureBoostMode+0x30>
 8002d04:	4b78      	ldr	r3, [pc, #480]	; (8002ee8 <ADC_ConfigureBoostMode+0x200>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	bf14      	ite	ne
 8002d10:	2301      	movne	r3, #1
 8002d12:	2300      	moveq	r3, #0
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	e008      	b.n	8002d2a <ADC_ConfigureBoostMode+0x42>
 8002d18:	4b74      	ldr	r3, [pc, #464]	; (8002eec <ADC_ConfigureBoostMode+0x204>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	bf14      	ite	ne
 8002d24:	2301      	movne	r3, #1
 8002d26:	2300      	moveq	r3, #0
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d01c      	beq.n	8002d68 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002d2e:	f005 fb81 	bl	8008434 <HAL_RCC_GetHCLKFreq>
 8002d32:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d3c:	d010      	beq.n	8002d60 <ADC_ConfigureBoostMode+0x78>
 8002d3e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d42:	d873      	bhi.n	8002e2c <ADC_ConfigureBoostMode+0x144>
 8002d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d48:	d002      	beq.n	8002d50 <ADC_ConfigureBoostMode+0x68>
 8002d4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d4e:	d16d      	bne.n	8002e2c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	0c1b      	lsrs	r3, r3, #16
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5c:	60fb      	str	r3, [r7, #12]
        break;
 8002d5e:	e068      	b.n	8002e32 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	089b      	lsrs	r3, r3, #2
 8002d64:	60fb      	str	r3, [r7, #12]
        break;
 8002d66:	e064      	b.n	8002e32 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002d68:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002d6c:	f04f 0100 	mov.w	r1, #0
 8002d70:	f006 fdc6 	bl	8009900 <HAL_RCCEx_GetPeriphCLKFreq>
 8002d74:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002d7e:	d051      	beq.n	8002e24 <ADC_ConfigureBoostMode+0x13c>
 8002d80:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002d84:	d854      	bhi.n	8002e30 <ADC_ConfigureBoostMode+0x148>
 8002d86:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002d8a:	d047      	beq.n	8002e1c <ADC_ConfigureBoostMode+0x134>
 8002d8c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002d90:	d84e      	bhi.n	8002e30 <ADC_ConfigureBoostMode+0x148>
 8002d92:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002d96:	d03d      	beq.n	8002e14 <ADC_ConfigureBoostMode+0x12c>
 8002d98:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002d9c:	d848      	bhi.n	8002e30 <ADC_ConfigureBoostMode+0x148>
 8002d9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002da2:	d033      	beq.n	8002e0c <ADC_ConfigureBoostMode+0x124>
 8002da4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002da8:	d842      	bhi.n	8002e30 <ADC_ConfigureBoostMode+0x148>
 8002daa:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002dae:	d029      	beq.n	8002e04 <ADC_ConfigureBoostMode+0x11c>
 8002db0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002db4:	d83c      	bhi.n	8002e30 <ADC_ConfigureBoostMode+0x148>
 8002db6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002dba:	d01a      	beq.n	8002df2 <ADC_ConfigureBoostMode+0x10a>
 8002dbc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002dc0:	d836      	bhi.n	8002e30 <ADC_ConfigureBoostMode+0x148>
 8002dc2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002dc6:	d014      	beq.n	8002df2 <ADC_ConfigureBoostMode+0x10a>
 8002dc8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002dcc:	d830      	bhi.n	8002e30 <ADC_ConfigureBoostMode+0x148>
 8002dce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dd2:	d00e      	beq.n	8002df2 <ADC_ConfigureBoostMode+0x10a>
 8002dd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dd8:	d82a      	bhi.n	8002e30 <ADC_ConfigureBoostMode+0x148>
 8002dda:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002dde:	d008      	beq.n	8002df2 <ADC_ConfigureBoostMode+0x10a>
 8002de0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002de4:	d824      	bhi.n	8002e30 <ADC_ConfigureBoostMode+0x148>
 8002de6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dea:	d002      	beq.n	8002df2 <ADC_ConfigureBoostMode+0x10a>
 8002dec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002df0:	d11e      	bne.n	8002e30 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	0c9b      	lsrs	r3, r3, #18
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e00:	60fb      	str	r3, [r7, #12]
        break;
 8002e02:	e016      	b.n	8002e32 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	091b      	lsrs	r3, r3, #4
 8002e08:	60fb      	str	r3, [r7, #12]
        break;
 8002e0a:	e012      	b.n	8002e32 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	095b      	lsrs	r3, r3, #5
 8002e10:	60fb      	str	r3, [r7, #12]
        break;
 8002e12:	e00e      	b.n	8002e32 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	099b      	lsrs	r3, r3, #6
 8002e18:	60fb      	str	r3, [r7, #12]
        break;
 8002e1a:	e00a      	b.n	8002e32 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	09db      	lsrs	r3, r3, #7
 8002e20:	60fb      	str	r3, [r7, #12]
        break;
 8002e22:	e006      	b.n	8002e32 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	0a1b      	lsrs	r3, r3, #8
 8002e28:	60fb      	str	r3, [r7, #12]
        break;
 8002e2a:	e002      	b.n	8002e32 <ADC_ConfigureBoostMode+0x14a>
        break;
 8002e2c:	bf00      	nop
 8002e2e:	e000      	b.n	8002e32 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002e30:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002e32:	f7fe fe1d 	bl	8001a70 <HAL_GetREVID>
 8002e36:	4603      	mov	r3, r0
 8002e38:	f241 0203 	movw	r2, #4099	; 0x1003
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d815      	bhi.n	8002e6c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4a2b      	ldr	r2, [pc, #172]	; (8002ef0 <ADC_ConfigureBoostMode+0x208>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d908      	bls.n	8002e5a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e56:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002e58:	e03e      	b.n	8002ed8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e68:	609a      	str	r2, [r3, #8]
}
 8002e6a:	e035      	b.n	8002ed8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	085b      	lsrs	r3, r3, #1
 8002e70:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	4a1f      	ldr	r2, [pc, #124]	; (8002ef4 <ADC_ConfigureBoostMode+0x20c>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d808      	bhi.n	8002e8c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002e88:	609a      	str	r2, [r3, #8]
}
 8002e8a:	e025      	b.n	8002ed8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	4a1a      	ldr	r2, [pc, #104]	; (8002ef8 <ADC_ConfigureBoostMode+0x210>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d80a      	bhi.n	8002eaa <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ea6:	609a      	str	r2, [r3, #8]
}
 8002ea8:	e016      	b.n	8002ed8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4a13      	ldr	r2, [pc, #76]	; (8002efc <ADC_ConfigureBoostMode+0x214>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d80a      	bhi.n	8002ec8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ec4:	609a      	str	r2, [r3, #8]
}
 8002ec6:	e007      	b.n	8002ed8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002ed6:	609a      	str	r2, [r3, #8]
}
 8002ed8:	bf00      	nop
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40022000 	.word	0x40022000
 8002ee4:	40022100 	.word	0x40022100
 8002ee8:	40022300 	.word	0x40022300
 8002eec:	58026300 	.word	0x58026300
 8002ef0:	01312d00 	.word	0x01312d00
 8002ef4:	005f5e10 	.word	0x005f5e10
 8002ef8:	00bebc20 	.word	0x00bebc20
 8002efc:	017d7840 	.word	0x017d7840

08002f00 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f74:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <__NVIC_SetPriorityGrouping+0x40>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f80:	4013      	ands	r3, r2
 8002f82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f8c:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f92:	4a04      	ldr	r2, [pc, #16]	; (8002fa4 <__NVIC_SetPriorityGrouping+0x40>)
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	60d3      	str	r3, [r2, #12]
}
 8002f98:	bf00      	nop
 8002f9a:	3714      	adds	r7, #20
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	e000ed00 	.word	0xe000ed00
 8002fa8:	05fa0000 	.word	0x05fa0000

08002fac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fb0:	4b04      	ldr	r3, [pc, #16]	; (8002fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	0a1b      	lsrs	r3, r3, #8
 8002fb6:	f003 0307 	and.w	r3, r3, #7
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	e000ed00 	.word	0xe000ed00

08002fc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002fd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	db0b      	blt.n	8002ff2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fda:	88fb      	ldrh	r3, [r7, #6]
 8002fdc:	f003 021f 	and.w	r2, r3, #31
 8002fe0:	4907      	ldr	r1, [pc, #28]	; (8003000 <__NVIC_EnableIRQ+0x38>)
 8002fe2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fe6:	095b      	lsrs	r3, r3, #5
 8002fe8:	2001      	movs	r0, #1
 8002fea:	fa00 f202 	lsl.w	r2, r0, r2
 8002fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	e000e100 	.word	0xe000e100

08003004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	4603      	mov	r3, r0
 800300c:	6039      	str	r1, [r7, #0]
 800300e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003010:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003014:	2b00      	cmp	r3, #0
 8003016:	db0a      	blt.n	800302e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	b2da      	uxtb	r2, r3
 800301c:	490c      	ldr	r1, [pc, #48]	; (8003050 <__NVIC_SetPriority+0x4c>)
 800301e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003022:	0112      	lsls	r2, r2, #4
 8003024:	b2d2      	uxtb	r2, r2
 8003026:	440b      	add	r3, r1
 8003028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800302c:	e00a      	b.n	8003044 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	b2da      	uxtb	r2, r3
 8003032:	4908      	ldr	r1, [pc, #32]	; (8003054 <__NVIC_SetPriority+0x50>)
 8003034:	88fb      	ldrh	r3, [r7, #6]
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	3b04      	subs	r3, #4
 800303c:	0112      	lsls	r2, r2, #4
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	440b      	add	r3, r1
 8003042:	761a      	strb	r2, [r3, #24]
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	e000e100 	.word	0xe000e100
 8003054:	e000ed00 	.word	0xe000ed00

08003058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003058:	b480      	push	{r7}
 800305a:	b089      	sub	sp, #36	; 0x24
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	f1c3 0307 	rsb	r3, r3, #7
 8003072:	2b04      	cmp	r3, #4
 8003074:	bf28      	it	cs
 8003076:	2304      	movcs	r3, #4
 8003078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	3304      	adds	r3, #4
 800307e:	2b06      	cmp	r3, #6
 8003080:	d902      	bls.n	8003088 <NVIC_EncodePriority+0x30>
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	3b03      	subs	r3, #3
 8003086:	e000      	b.n	800308a <NVIC_EncodePriority+0x32>
 8003088:	2300      	movs	r3, #0
 800308a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800308c:	f04f 32ff 	mov.w	r2, #4294967295
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	43da      	mvns	r2, r3
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	401a      	ands	r2, r3
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030a0:	f04f 31ff 	mov.w	r1, #4294967295
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	fa01 f303 	lsl.w	r3, r1, r3
 80030aa:	43d9      	mvns	r1, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b0:	4313      	orrs	r3, r2
         );
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3724      	adds	r7, #36	; 0x24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
	...

080030c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3b01      	subs	r3, #1
 80030cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030d0:	d301      	bcc.n	80030d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030d2:	2301      	movs	r3, #1
 80030d4:	e00f      	b.n	80030f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030d6:	4a0a      	ldr	r2, [pc, #40]	; (8003100 <SysTick_Config+0x40>)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3b01      	subs	r3, #1
 80030dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030de:	210f      	movs	r1, #15
 80030e0:	f04f 30ff 	mov.w	r0, #4294967295
 80030e4:	f7ff ff8e 	bl	8003004 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030e8:	4b05      	ldr	r3, [pc, #20]	; (8003100 <SysTick_Config+0x40>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030ee:	4b04      	ldr	r3, [pc, #16]	; (8003100 <SysTick_Config+0x40>)
 80030f0:	2207      	movs	r2, #7
 80030f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	e000e010 	.word	0xe000e010

08003104 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f7ff ff29 	bl	8002f64 <__NVIC_SetPriorityGrouping>
}
 8003112:	bf00      	nop
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b086      	sub	sp, #24
 800311e:	af00      	add	r7, sp, #0
 8003120:	4603      	mov	r3, r0
 8003122:	60b9      	str	r1, [r7, #8]
 8003124:	607a      	str	r2, [r7, #4]
 8003126:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003128:	f7ff ff40 	bl	8002fac <__NVIC_GetPriorityGrouping>
 800312c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	68b9      	ldr	r1, [r7, #8]
 8003132:	6978      	ldr	r0, [r7, #20]
 8003134:	f7ff ff90 	bl	8003058 <NVIC_EncodePriority>
 8003138:	4602      	mov	r2, r0
 800313a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800313e:	4611      	mov	r1, r2
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff ff5f 	bl	8003004 <__NVIC_SetPriority>
}
 8003146:	bf00      	nop
 8003148:	3718      	adds	r7, #24
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b082      	sub	sp, #8
 8003152:	af00      	add	r7, sp, #0
 8003154:	4603      	mov	r3, r0
 8003156:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003158:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff ff33 	bl	8002fc8 <__NVIC_EnableIRQ>
}
 8003162:	bf00      	nop
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b082      	sub	sp, #8
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7ff ffa4 	bl	80030c0 <SysTick_Config>
 8003178:	4603      	mov	r3, r0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
	...

08003184 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800318c:	f7fe fc40 	bl	8001a10 <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e316      	b.n	80037ca <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a66      	ldr	r2, [pc, #408]	; (800333c <HAL_DMA_Init+0x1b8>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d04a      	beq.n	800323c <HAL_DMA_Init+0xb8>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a65      	ldr	r2, [pc, #404]	; (8003340 <HAL_DMA_Init+0x1bc>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d045      	beq.n	800323c <HAL_DMA_Init+0xb8>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a63      	ldr	r2, [pc, #396]	; (8003344 <HAL_DMA_Init+0x1c0>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d040      	beq.n	800323c <HAL_DMA_Init+0xb8>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a62      	ldr	r2, [pc, #392]	; (8003348 <HAL_DMA_Init+0x1c4>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d03b      	beq.n	800323c <HAL_DMA_Init+0xb8>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a60      	ldr	r2, [pc, #384]	; (800334c <HAL_DMA_Init+0x1c8>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d036      	beq.n	800323c <HAL_DMA_Init+0xb8>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a5f      	ldr	r2, [pc, #380]	; (8003350 <HAL_DMA_Init+0x1cc>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d031      	beq.n	800323c <HAL_DMA_Init+0xb8>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a5d      	ldr	r2, [pc, #372]	; (8003354 <HAL_DMA_Init+0x1d0>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d02c      	beq.n	800323c <HAL_DMA_Init+0xb8>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a5c      	ldr	r2, [pc, #368]	; (8003358 <HAL_DMA_Init+0x1d4>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d027      	beq.n	800323c <HAL_DMA_Init+0xb8>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a5a      	ldr	r2, [pc, #360]	; (800335c <HAL_DMA_Init+0x1d8>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d022      	beq.n	800323c <HAL_DMA_Init+0xb8>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a59      	ldr	r2, [pc, #356]	; (8003360 <HAL_DMA_Init+0x1dc>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d01d      	beq.n	800323c <HAL_DMA_Init+0xb8>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a57      	ldr	r2, [pc, #348]	; (8003364 <HAL_DMA_Init+0x1e0>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d018      	beq.n	800323c <HAL_DMA_Init+0xb8>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a56      	ldr	r2, [pc, #344]	; (8003368 <HAL_DMA_Init+0x1e4>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d013      	beq.n	800323c <HAL_DMA_Init+0xb8>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a54      	ldr	r2, [pc, #336]	; (800336c <HAL_DMA_Init+0x1e8>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d00e      	beq.n	800323c <HAL_DMA_Init+0xb8>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a53      	ldr	r2, [pc, #332]	; (8003370 <HAL_DMA_Init+0x1ec>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d009      	beq.n	800323c <HAL_DMA_Init+0xb8>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a51      	ldr	r2, [pc, #324]	; (8003374 <HAL_DMA_Init+0x1f0>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d004      	beq.n	800323c <HAL_DMA_Init+0xb8>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a50      	ldr	r2, [pc, #320]	; (8003378 <HAL_DMA_Init+0x1f4>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d101      	bne.n	8003240 <HAL_DMA_Init+0xbc>
 800323c:	2301      	movs	r3, #1
 800323e:	e000      	b.n	8003242 <HAL_DMA_Init+0xbe>
 8003240:	2300      	movs	r3, #0
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 813b 	beq.w	80034be <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2202      	movs	r2, #2
 800324c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a37      	ldr	r2, [pc, #220]	; (800333c <HAL_DMA_Init+0x1b8>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d04a      	beq.n	80032f8 <HAL_DMA_Init+0x174>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a36      	ldr	r2, [pc, #216]	; (8003340 <HAL_DMA_Init+0x1bc>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d045      	beq.n	80032f8 <HAL_DMA_Init+0x174>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a34      	ldr	r2, [pc, #208]	; (8003344 <HAL_DMA_Init+0x1c0>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d040      	beq.n	80032f8 <HAL_DMA_Init+0x174>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a33      	ldr	r2, [pc, #204]	; (8003348 <HAL_DMA_Init+0x1c4>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d03b      	beq.n	80032f8 <HAL_DMA_Init+0x174>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a31      	ldr	r2, [pc, #196]	; (800334c <HAL_DMA_Init+0x1c8>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d036      	beq.n	80032f8 <HAL_DMA_Init+0x174>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a30      	ldr	r2, [pc, #192]	; (8003350 <HAL_DMA_Init+0x1cc>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d031      	beq.n	80032f8 <HAL_DMA_Init+0x174>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a2e      	ldr	r2, [pc, #184]	; (8003354 <HAL_DMA_Init+0x1d0>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d02c      	beq.n	80032f8 <HAL_DMA_Init+0x174>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a2d      	ldr	r2, [pc, #180]	; (8003358 <HAL_DMA_Init+0x1d4>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d027      	beq.n	80032f8 <HAL_DMA_Init+0x174>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a2b      	ldr	r2, [pc, #172]	; (800335c <HAL_DMA_Init+0x1d8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d022      	beq.n	80032f8 <HAL_DMA_Init+0x174>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a2a      	ldr	r2, [pc, #168]	; (8003360 <HAL_DMA_Init+0x1dc>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d01d      	beq.n	80032f8 <HAL_DMA_Init+0x174>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a28      	ldr	r2, [pc, #160]	; (8003364 <HAL_DMA_Init+0x1e0>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d018      	beq.n	80032f8 <HAL_DMA_Init+0x174>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a27      	ldr	r2, [pc, #156]	; (8003368 <HAL_DMA_Init+0x1e4>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d013      	beq.n	80032f8 <HAL_DMA_Init+0x174>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a25      	ldr	r2, [pc, #148]	; (800336c <HAL_DMA_Init+0x1e8>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00e      	beq.n	80032f8 <HAL_DMA_Init+0x174>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a24      	ldr	r2, [pc, #144]	; (8003370 <HAL_DMA_Init+0x1ec>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d009      	beq.n	80032f8 <HAL_DMA_Init+0x174>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a22      	ldr	r2, [pc, #136]	; (8003374 <HAL_DMA_Init+0x1f0>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d004      	beq.n	80032f8 <HAL_DMA_Init+0x174>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a21      	ldr	r2, [pc, #132]	; (8003378 <HAL_DMA_Init+0x1f4>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d108      	bne.n	800330a <HAL_DMA_Init+0x186>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0201 	bic.w	r2, r2, #1
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	e007      	b.n	800331a <HAL_DMA_Init+0x196>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 0201 	bic.w	r2, r2, #1
 8003318:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800331a:	e02f      	b.n	800337c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800331c:	f7fe fb78 	bl	8001a10 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b05      	cmp	r3, #5
 8003328:	d928      	bls.n	800337c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2220      	movs	r2, #32
 800332e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2203      	movs	r2, #3
 8003334:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e246      	b.n	80037ca <HAL_DMA_Init+0x646>
 800333c:	40020010 	.word	0x40020010
 8003340:	40020028 	.word	0x40020028
 8003344:	40020040 	.word	0x40020040
 8003348:	40020058 	.word	0x40020058
 800334c:	40020070 	.word	0x40020070
 8003350:	40020088 	.word	0x40020088
 8003354:	400200a0 	.word	0x400200a0
 8003358:	400200b8 	.word	0x400200b8
 800335c:	40020410 	.word	0x40020410
 8003360:	40020428 	.word	0x40020428
 8003364:	40020440 	.word	0x40020440
 8003368:	40020458 	.word	0x40020458
 800336c:	40020470 	.word	0x40020470
 8003370:	40020488 	.word	0x40020488
 8003374:	400204a0 	.word	0x400204a0
 8003378:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1c8      	bne.n	800331c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	4b83      	ldr	r3, [pc, #524]	; (80035a4 <HAL_DMA_Init+0x420>)
 8003396:	4013      	ands	r3, r2
 8003398:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80033a2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ae:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033ba:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	2b04      	cmp	r3, #4
 80033ce:	d107      	bne.n	80033e0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d8:	4313      	orrs	r3, r2
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	4313      	orrs	r3, r2
 80033de:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80033e0:	4b71      	ldr	r3, [pc, #452]	; (80035a8 <HAL_DMA_Init+0x424>)
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	4b71      	ldr	r3, [pc, #452]	; (80035ac <HAL_DMA_Init+0x428>)
 80033e6:	4013      	ands	r3, r2
 80033e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033ec:	d328      	bcc.n	8003440 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b28      	cmp	r3, #40	; 0x28
 80033f4:	d903      	bls.n	80033fe <HAL_DMA_Init+0x27a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b2e      	cmp	r3, #46	; 0x2e
 80033fc:	d917      	bls.n	800342e <HAL_DMA_Init+0x2aa>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b3e      	cmp	r3, #62	; 0x3e
 8003404:	d903      	bls.n	800340e <HAL_DMA_Init+0x28a>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b42      	cmp	r3, #66	; 0x42
 800340c:	d90f      	bls.n	800342e <HAL_DMA_Init+0x2aa>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b46      	cmp	r3, #70	; 0x46
 8003414:	d903      	bls.n	800341e <HAL_DMA_Init+0x29a>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2b48      	cmp	r3, #72	; 0x48
 800341c:	d907      	bls.n	800342e <HAL_DMA_Init+0x2aa>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b4e      	cmp	r3, #78	; 0x4e
 8003424:	d905      	bls.n	8003432 <HAL_DMA_Init+0x2ae>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b52      	cmp	r3, #82	; 0x52
 800342c:	d801      	bhi.n	8003432 <HAL_DMA_Init+0x2ae>
 800342e:	2301      	movs	r3, #1
 8003430:	e000      	b.n	8003434 <HAL_DMA_Init+0x2b0>
 8003432:	2300      	movs	r3, #0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d003      	beq.n	8003440 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800343e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	f023 0307 	bic.w	r3, r3, #7
 8003456:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	4313      	orrs	r3, r2
 8003460:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	2b04      	cmp	r3, #4
 8003468:	d117      	bne.n	800349a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	4313      	orrs	r3, r2
 8003472:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00e      	beq.n	800349a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f002 f815 	bl	80054ac <DMA_CheckFifoParam>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d008      	beq.n	800349a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2240      	movs	r2, #64	; 0x40
 800348c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e197      	b.n	80037ca <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f001 ff50 	bl	8005348 <DMA_CalcBaseAndBitshift>
 80034a8:	4603      	mov	r3, r0
 80034aa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b0:	f003 031f 	and.w	r3, r3, #31
 80034b4:	223f      	movs	r2, #63	; 0x3f
 80034b6:	409a      	lsls	r2, r3
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	609a      	str	r2, [r3, #8]
 80034bc:	e0cd      	b.n	800365a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a3b      	ldr	r2, [pc, #236]	; (80035b0 <HAL_DMA_Init+0x42c>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d022      	beq.n	800350e <HAL_DMA_Init+0x38a>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a39      	ldr	r2, [pc, #228]	; (80035b4 <HAL_DMA_Init+0x430>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d01d      	beq.n	800350e <HAL_DMA_Init+0x38a>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a38      	ldr	r2, [pc, #224]	; (80035b8 <HAL_DMA_Init+0x434>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d018      	beq.n	800350e <HAL_DMA_Init+0x38a>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a36      	ldr	r2, [pc, #216]	; (80035bc <HAL_DMA_Init+0x438>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d013      	beq.n	800350e <HAL_DMA_Init+0x38a>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a35      	ldr	r2, [pc, #212]	; (80035c0 <HAL_DMA_Init+0x43c>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d00e      	beq.n	800350e <HAL_DMA_Init+0x38a>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a33      	ldr	r2, [pc, #204]	; (80035c4 <HAL_DMA_Init+0x440>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d009      	beq.n	800350e <HAL_DMA_Init+0x38a>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a32      	ldr	r2, [pc, #200]	; (80035c8 <HAL_DMA_Init+0x444>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d004      	beq.n	800350e <HAL_DMA_Init+0x38a>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a30      	ldr	r2, [pc, #192]	; (80035cc <HAL_DMA_Init+0x448>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d101      	bne.n	8003512 <HAL_DMA_Init+0x38e>
 800350e:	2301      	movs	r3, #1
 8003510:	e000      	b.n	8003514 <HAL_DMA_Init+0x390>
 8003512:	2300      	movs	r3, #0
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 8097 	beq.w	8003648 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a24      	ldr	r2, [pc, #144]	; (80035b0 <HAL_DMA_Init+0x42c>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d021      	beq.n	8003568 <HAL_DMA_Init+0x3e4>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a22      	ldr	r2, [pc, #136]	; (80035b4 <HAL_DMA_Init+0x430>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d01c      	beq.n	8003568 <HAL_DMA_Init+0x3e4>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a21      	ldr	r2, [pc, #132]	; (80035b8 <HAL_DMA_Init+0x434>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d017      	beq.n	8003568 <HAL_DMA_Init+0x3e4>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a1f      	ldr	r2, [pc, #124]	; (80035bc <HAL_DMA_Init+0x438>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d012      	beq.n	8003568 <HAL_DMA_Init+0x3e4>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a1e      	ldr	r2, [pc, #120]	; (80035c0 <HAL_DMA_Init+0x43c>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d00d      	beq.n	8003568 <HAL_DMA_Init+0x3e4>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a1c      	ldr	r2, [pc, #112]	; (80035c4 <HAL_DMA_Init+0x440>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d008      	beq.n	8003568 <HAL_DMA_Init+0x3e4>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a1b      	ldr	r2, [pc, #108]	; (80035c8 <HAL_DMA_Init+0x444>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d003      	beq.n	8003568 <HAL_DMA_Init+0x3e4>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a19      	ldr	r2, [pc, #100]	; (80035cc <HAL_DMA_Init+0x448>)
 8003566:	4293      	cmp	r3, r2
 8003568:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2202      	movs	r2, #2
 800356e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	4b12      	ldr	r3, [pc, #72]	; (80035d0 <HAL_DMA_Init+0x44c>)
 8003586:	4013      	ands	r3, r2
 8003588:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	2b40      	cmp	r3, #64	; 0x40
 8003590:	d020      	beq.n	80035d4 <HAL_DMA_Init+0x450>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	2b80      	cmp	r3, #128	; 0x80
 8003598:	d102      	bne.n	80035a0 <HAL_DMA_Init+0x41c>
 800359a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800359e:	e01a      	b.n	80035d6 <HAL_DMA_Init+0x452>
 80035a0:	2300      	movs	r3, #0
 80035a2:	e018      	b.n	80035d6 <HAL_DMA_Init+0x452>
 80035a4:	fe10803f 	.word	0xfe10803f
 80035a8:	5c001000 	.word	0x5c001000
 80035ac:	ffff0000 	.word	0xffff0000
 80035b0:	58025408 	.word	0x58025408
 80035b4:	5802541c 	.word	0x5802541c
 80035b8:	58025430 	.word	0x58025430
 80035bc:	58025444 	.word	0x58025444
 80035c0:	58025458 	.word	0x58025458
 80035c4:	5802546c 	.word	0x5802546c
 80035c8:	58025480 	.word	0x58025480
 80035cc:	58025494 	.word	0x58025494
 80035d0:	fffe000f 	.word	0xfffe000f
 80035d4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	68d2      	ldr	r2, [r2, #12]
 80035da:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80035e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80035ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80035f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80035fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003604:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	4313      	orrs	r3, r2
 800360a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	461a      	mov	r2, r3
 800361a:	4b6e      	ldr	r3, [pc, #440]	; (80037d4 <HAL_DMA_Init+0x650>)
 800361c:	4413      	add	r3, r2
 800361e:	4a6e      	ldr	r2, [pc, #440]	; (80037d8 <HAL_DMA_Init+0x654>)
 8003620:	fba2 2303 	umull	r2, r3, r2, r3
 8003624:	091b      	lsrs	r3, r3, #4
 8003626:	009a      	lsls	r2, r3, #2
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f001 fe8b 	bl	8005348 <DMA_CalcBaseAndBitshift>
 8003632:	4603      	mov	r3, r0
 8003634:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363a:	f003 031f 	and.w	r3, r3, #31
 800363e:	2201      	movs	r2, #1
 8003640:	409a      	lsls	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	605a      	str	r2, [r3, #4]
 8003646:	e008      	b.n	800365a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2240      	movs	r2, #64	; 0x40
 800364c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2203      	movs	r2, #3
 8003652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e0b7      	b.n	80037ca <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a5f      	ldr	r2, [pc, #380]	; (80037dc <HAL_DMA_Init+0x658>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d072      	beq.n	800374a <HAL_DMA_Init+0x5c6>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a5d      	ldr	r2, [pc, #372]	; (80037e0 <HAL_DMA_Init+0x65c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d06d      	beq.n	800374a <HAL_DMA_Init+0x5c6>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a5c      	ldr	r2, [pc, #368]	; (80037e4 <HAL_DMA_Init+0x660>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d068      	beq.n	800374a <HAL_DMA_Init+0x5c6>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a5a      	ldr	r2, [pc, #360]	; (80037e8 <HAL_DMA_Init+0x664>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d063      	beq.n	800374a <HAL_DMA_Init+0x5c6>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a59      	ldr	r2, [pc, #356]	; (80037ec <HAL_DMA_Init+0x668>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d05e      	beq.n	800374a <HAL_DMA_Init+0x5c6>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a57      	ldr	r2, [pc, #348]	; (80037f0 <HAL_DMA_Init+0x66c>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d059      	beq.n	800374a <HAL_DMA_Init+0x5c6>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a56      	ldr	r2, [pc, #344]	; (80037f4 <HAL_DMA_Init+0x670>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d054      	beq.n	800374a <HAL_DMA_Init+0x5c6>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a54      	ldr	r2, [pc, #336]	; (80037f8 <HAL_DMA_Init+0x674>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d04f      	beq.n	800374a <HAL_DMA_Init+0x5c6>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a53      	ldr	r2, [pc, #332]	; (80037fc <HAL_DMA_Init+0x678>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d04a      	beq.n	800374a <HAL_DMA_Init+0x5c6>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a51      	ldr	r2, [pc, #324]	; (8003800 <HAL_DMA_Init+0x67c>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d045      	beq.n	800374a <HAL_DMA_Init+0x5c6>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a50      	ldr	r2, [pc, #320]	; (8003804 <HAL_DMA_Init+0x680>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d040      	beq.n	800374a <HAL_DMA_Init+0x5c6>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a4e      	ldr	r2, [pc, #312]	; (8003808 <HAL_DMA_Init+0x684>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d03b      	beq.n	800374a <HAL_DMA_Init+0x5c6>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a4d      	ldr	r2, [pc, #308]	; (800380c <HAL_DMA_Init+0x688>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d036      	beq.n	800374a <HAL_DMA_Init+0x5c6>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a4b      	ldr	r2, [pc, #300]	; (8003810 <HAL_DMA_Init+0x68c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d031      	beq.n	800374a <HAL_DMA_Init+0x5c6>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a4a      	ldr	r2, [pc, #296]	; (8003814 <HAL_DMA_Init+0x690>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d02c      	beq.n	800374a <HAL_DMA_Init+0x5c6>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a48      	ldr	r2, [pc, #288]	; (8003818 <HAL_DMA_Init+0x694>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d027      	beq.n	800374a <HAL_DMA_Init+0x5c6>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a47      	ldr	r2, [pc, #284]	; (800381c <HAL_DMA_Init+0x698>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d022      	beq.n	800374a <HAL_DMA_Init+0x5c6>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a45      	ldr	r2, [pc, #276]	; (8003820 <HAL_DMA_Init+0x69c>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d01d      	beq.n	800374a <HAL_DMA_Init+0x5c6>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a44      	ldr	r2, [pc, #272]	; (8003824 <HAL_DMA_Init+0x6a0>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d018      	beq.n	800374a <HAL_DMA_Init+0x5c6>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a42      	ldr	r2, [pc, #264]	; (8003828 <HAL_DMA_Init+0x6a4>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d013      	beq.n	800374a <HAL_DMA_Init+0x5c6>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a41      	ldr	r2, [pc, #260]	; (800382c <HAL_DMA_Init+0x6a8>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d00e      	beq.n	800374a <HAL_DMA_Init+0x5c6>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a3f      	ldr	r2, [pc, #252]	; (8003830 <HAL_DMA_Init+0x6ac>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d009      	beq.n	800374a <HAL_DMA_Init+0x5c6>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a3e      	ldr	r2, [pc, #248]	; (8003834 <HAL_DMA_Init+0x6b0>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d004      	beq.n	800374a <HAL_DMA_Init+0x5c6>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a3c      	ldr	r2, [pc, #240]	; (8003838 <HAL_DMA_Init+0x6b4>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d101      	bne.n	800374e <HAL_DMA_Init+0x5ca>
 800374a:	2301      	movs	r3, #1
 800374c:	e000      	b.n	8003750 <HAL_DMA_Init+0x5cc>
 800374e:	2300      	movs	r3, #0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d032      	beq.n	80037ba <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f001 ff25 	bl	80055a4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	2b80      	cmp	r3, #128	; 0x80
 8003760:	d102      	bne.n	8003768 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003770:	b2d2      	uxtb	r2, r2
 8003772:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800377c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d010      	beq.n	80037a8 <HAL_DMA_Init+0x624>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b08      	cmp	r3, #8
 800378c:	d80c      	bhi.n	80037a8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f001 ffa2 	bl	80056d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80037a4:	605a      	str	r2, [r3, #4]
 80037a6:	e008      	b.n	80037ba <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	a7fdabf8 	.word	0xa7fdabf8
 80037d8:	cccccccd 	.word	0xcccccccd
 80037dc:	40020010 	.word	0x40020010
 80037e0:	40020028 	.word	0x40020028
 80037e4:	40020040 	.word	0x40020040
 80037e8:	40020058 	.word	0x40020058
 80037ec:	40020070 	.word	0x40020070
 80037f0:	40020088 	.word	0x40020088
 80037f4:	400200a0 	.word	0x400200a0
 80037f8:	400200b8 	.word	0x400200b8
 80037fc:	40020410 	.word	0x40020410
 8003800:	40020428 	.word	0x40020428
 8003804:	40020440 	.word	0x40020440
 8003808:	40020458 	.word	0x40020458
 800380c:	40020470 	.word	0x40020470
 8003810:	40020488 	.word	0x40020488
 8003814:	400204a0 	.word	0x400204a0
 8003818:	400204b8 	.word	0x400204b8
 800381c:	58025408 	.word	0x58025408
 8003820:	5802541c 	.word	0x5802541c
 8003824:	58025430 	.word	0x58025430
 8003828:	58025444 	.word	0x58025444
 800382c:	58025458 	.word	0x58025458
 8003830:	5802546c 	.word	0x5802546c
 8003834:	58025480 	.word	0x58025480
 8003838:	58025494 	.word	0x58025494

0800383c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
 8003848:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800384a:	2300      	movs	r3, #0
 800384c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e226      	b.n	8003ca6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800385e:	2b01      	cmp	r3, #1
 8003860:	d101      	bne.n	8003866 <HAL_DMA_Start_IT+0x2a>
 8003862:	2302      	movs	r3, #2
 8003864:	e21f      	b.n	8003ca6 <HAL_DMA_Start_IT+0x46a>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b01      	cmp	r3, #1
 8003878:	f040 820a 	bne.w	8003c90 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a68      	ldr	r2, [pc, #416]	; (8003a30 <HAL_DMA_Start_IT+0x1f4>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d04a      	beq.n	800392a <HAL_DMA_Start_IT+0xee>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a66      	ldr	r2, [pc, #408]	; (8003a34 <HAL_DMA_Start_IT+0x1f8>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d045      	beq.n	800392a <HAL_DMA_Start_IT+0xee>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a65      	ldr	r2, [pc, #404]	; (8003a38 <HAL_DMA_Start_IT+0x1fc>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d040      	beq.n	800392a <HAL_DMA_Start_IT+0xee>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a63      	ldr	r2, [pc, #396]	; (8003a3c <HAL_DMA_Start_IT+0x200>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d03b      	beq.n	800392a <HAL_DMA_Start_IT+0xee>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a62      	ldr	r2, [pc, #392]	; (8003a40 <HAL_DMA_Start_IT+0x204>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d036      	beq.n	800392a <HAL_DMA_Start_IT+0xee>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a60      	ldr	r2, [pc, #384]	; (8003a44 <HAL_DMA_Start_IT+0x208>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d031      	beq.n	800392a <HAL_DMA_Start_IT+0xee>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a5f      	ldr	r2, [pc, #380]	; (8003a48 <HAL_DMA_Start_IT+0x20c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d02c      	beq.n	800392a <HAL_DMA_Start_IT+0xee>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a5d      	ldr	r2, [pc, #372]	; (8003a4c <HAL_DMA_Start_IT+0x210>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d027      	beq.n	800392a <HAL_DMA_Start_IT+0xee>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a5c      	ldr	r2, [pc, #368]	; (8003a50 <HAL_DMA_Start_IT+0x214>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d022      	beq.n	800392a <HAL_DMA_Start_IT+0xee>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a5a      	ldr	r2, [pc, #360]	; (8003a54 <HAL_DMA_Start_IT+0x218>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d01d      	beq.n	800392a <HAL_DMA_Start_IT+0xee>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a59      	ldr	r2, [pc, #356]	; (8003a58 <HAL_DMA_Start_IT+0x21c>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d018      	beq.n	800392a <HAL_DMA_Start_IT+0xee>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a57      	ldr	r2, [pc, #348]	; (8003a5c <HAL_DMA_Start_IT+0x220>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d013      	beq.n	800392a <HAL_DMA_Start_IT+0xee>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a56      	ldr	r2, [pc, #344]	; (8003a60 <HAL_DMA_Start_IT+0x224>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d00e      	beq.n	800392a <HAL_DMA_Start_IT+0xee>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a54      	ldr	r2, [pc, #336]	; (8003a64 <HAL_DMA_Start_IT+0x228>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d009      	beq.n	800392a <HAL_DMA_Start_IT+0xee>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a53      	ldr	r2, [pc, #332]	; (8003a68 <HAL_DMA_Start_IT+0x22c>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d004      	beq.n	800392a <HAL_DMA_Start_IT+0xee>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a51      	ldr	r2, [pc, #324]	; (8003a6c <HAL_DMA_Start_IT+0x230>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d108      	bne.n	800393c <HAL_DMA_Start_IT+0x100>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0201 	bic.w	r2, r2, #1
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	e007      	b.n	800394c <HAL_DMA_Start_IT+0x110>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0201 	bic.w	r2, r2, #1
 800394a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	68b9      	ldr	r1, [r7, #8]
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f001 fb4c 	bl	8004ff0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a34      	ldr	r2, [pc, #208]	; (8003a30 <HAL_DMA_Start_IT+0x1f4>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d04a      	beq.n	80039f8 <HAL_DMA_Start_IT+0x1bc>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a33      	ldr	r2, [pc, #204]	; (8003a34 <HAL_DMA_Start_IT+0x1f8>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d045      	beq.n	80039f8 <HAL_DMA_Start_IT+0x1bc>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a31      	ldr	r2, [pc, #196]	; (8003a38 <HAL_DMA_Start_IT+0x1fc>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d040      	beq.n	80039f8 <HAL_DMA_Start_IT+0x1bc>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a30      	ldr	r2, [pc, #192]	; (8003a3c <HAL_DMA_Start_IT+0x200>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d03b      	beq.n	80039f8 <HAL_DMA_Start_IT+0x1bc>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a2e      	ldr	r2, [pc, #184]	; (8003a40 <HAL_DMA_Start_IT+0x204>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d036      	beq.n	80039f8 <HAL_DMA_Start_IT+0x1bc>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a2d      	ldr	r2, [pc, #180]	; (8003a44 <HAL_DMA_Start_IT+0x208>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d031      	beq.n	80039f8 <HAL_DMA_Start_IT+0x1bc>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a2b      	ldr	r2, [pc, #172]	; (8003a48 <HAL_DMA_Start_IT+0x20c>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d02c      	beq.n	80039f8 <HAL_DMA_Start_IT+0x1bc>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a2a      	ldr	r2, [pc, #168]	; (8003a4c <HAL_DMA_Start_IT+0x210>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d027      	beq.n	80039f8 <HAL_DMA_Start_IT+0x1bc>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a28      	ldr	r2, [pc, #160]	; (8003a50 <HAL_DMA_Start_IT+0x214>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d022      	beq.n	80039f8 <HAL_DMA_Start_IT+0x1bc>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a27      	ldr	r2, [pc, #156]	; (8003a54 <HAL_DMA_Start_IT+0x218>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d01d      	beq.n	80039f8 <HAL_DMA_Start_IT+0x1bc>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a25      	ldr	r2, [pc, #148]	; (8003a58 <HAL_DMA_Start_IT+0x21c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d018      	beq.n	80039f8 <HAL_DMA_Start_IT+0x1bc>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a24      	ldr	r2, [pc, #144]	; (8003a5c <HAL_DMA_Start_IT+0x220>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d013      	beq.n	80039f8 <HAL_DMA_Start_IT+0x1bc>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a22      	ldr	r2, [pc, #136]	; (8003a60 <HAL_DMA_Start_IT+0x224>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d00e      	beq.n	80039f8 <HAL_DMA_Start_IT+0x1bc>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a21      	ldr	r2, [pc, #132]	; (8003a64 <HAL_DMA_Start_IT+0x228>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d009      	beq.n	80039f8 <HAL_DMA_Start_IT+0x1bc>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a1f      	ldr	r2, [pc, #124]	; (8003a68 <HAL_DMA_Start_IT+0x22c>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d004      	beq.n	80039f8 <HAL_DMA_Start_IT+0x1bc>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a1e      	ldr	r2, [pc, #120]	; (8003a6c <HAL_DMA_Start_IT+0x230>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d101      	bne.n	80039fc <HAL_DMA_Start_IT+0x1c0>
 80039f8:	2301      	movs	r3, #1
 80039fa:	e000      	b.n	80039fe <HAL_DMA_Start_IT+0x1c2>
 80039fc:	2300      	movs	r3, #0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d036      	beq.n	8003a70 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f023 021e 	bic.w	r2, r3, #30
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f042 0216 	orr.w	r2, r2, #22
 8003a14:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d03e      	beq.n	8003a9c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f042 0208 	orr.w	r2, r2, #8
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	e035      	b.n	8003a9c <HAL_DMA_Start_IT+0x260>
 8003a30:	40020010 	.word	0x40020010
 8003a34:	40020028 	.word	0x40020028
 8003a38:	40020040 	.word	0x40020040
 8003a3c:	40020058 	.word	0x40020058
 8003a40:	40020070 	.word	0x40020070
 8003a44:	40020088 	.word	0x40020088
 8003a48:	400200a0 	.word	0x400200a0
 8003a4c:	400200b8 	.word	0x400200b8
 8003a50:	40020410 	.word	0x40020410
 8003a54:	40020428 	.word	0x40020428
 8003a58:	40020440 	.word	0x40020440
 8003a5c:	40020458 	.word	0x40020458
 8003a60:	40020470 	.word	0x40020470
 8003a64:	40020488 	.word	0x40020488
 8003a68:	400204a0 	.word	0x400204a0
 8003a6c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f023 020e 	bic.w	r2, r3, #14
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f042 020a 	orr.w	r2, r2, #10
 8003a82:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d007      	beq.n	8003a9c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0204 	orr.w	r2, r2, #4
 8003a9a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a83      	ldr	r2, [pc, #524]	; (8003cb0 <HAL_DMA_Start_IT+0x474>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d072      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a82      	ldr	r2, [pc, #520]	; (8003cb4 <HAL_DMA_Start_IT+0x478>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d06d      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a80      	ldr	r2, [pc, #512]	; (8003cb8 <HAL_DMA_Start_IT+0x47c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d068      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a7f      	ldr	r2, [pc, #508]	; (8003cbc <HAL_DMA_Start_IT+0x480>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d063      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a7d      	ldr	r2, [pc, #500]	; (8003cc0 <HAL_DMA_Start_IT+0x484>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d05e      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a7c      	ldr	r2, [pc, #496]	; (8003cc4 <HAL_DMA_Start_IT+0x488>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d059      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a7a      	ldr	r2, [pc, #488]	; (8003cc8 <HAL_DMA_Start_IT+0x48c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d054      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a79      	ldr	r2, [pc, #484]	; (8003ccc <HAL_DMA_Start_IT+0x490>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d04f      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a77      	ldr	r2, [pc, #476]	; (8003cd0 <HAL_DMA_Start_IT+0x494>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d04a      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a76      	ldr	r2, [pc, #472]	; (8003cd4 <HAL_DMA_Start_IT+0x498>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d045      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a74      	ldr	r2, [pc, #464]	; (8003cd8 <HAL_DMA_Start_IT+0x49c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d040      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a73      	ldr	r2, [pc, #460]	; (8003cdc <HAL_DMA_Start_IT+0x4a0>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d03b      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a71      	ldr	r2, [pc, #452]	; (8003ce0 <HAL_DMA_Start_IT+0x4a4>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d036      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a70      	ldr	r2, [pc, #448]	; (8003ce4 <HAL_DMA_Start_IT+0x4a8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d031      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a6e      	ldr	r2, [pc, #440]	; (8003ce8 <HAL_DMA_Start_IT+0x4ac>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d02c      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a6d      	ldr	r2, [pc, #436]	; (8003cec <HAL_DMA_Start_IT+0x4b0>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d027      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a6b      	ldr	r2, [pc, #428]	; (8003cf0 <HAL_DMA_Start_IT+0x4b4>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d022      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a6a      	ldr	r2, [pc, #424]	; (8003cf4 <HAL_DMA_Start_IT+0x4b8>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d01d      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a68      	ldr	r2, [pc, #416]	; (8003cf8 <HAL_DMA_Start_IT+0x4bc>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d018      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a67      	ldr	r2, [pc, #412]	; (8003cfc <HAL_DMA_Start_IT+0x4c0>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d013      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a65      	ldr	r2, [pc, #404]	; (8003d00 <HAL_DMA_Start_IT+0x4c4>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d00e      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a64      	ldr	r2, [pc, #400]	; (8003d04 <HAL_DMA_Start_IT+0x4c8>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d009      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a62      	ldr	r2, [pc, #392]	; (8003d08 <HAL_DMA_Start_IT+0x4cc>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d004      	beq.n	8003b8c <HAL_DMA_Start_IT+0x350>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a61      	ldr	r2, [pc, #388]	; (8003d0c <HAL_DMA_Start_IT+0x4d0>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d101      	bne.n	8003b90 <HAL_DMA_Start_IT+0x354>
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e000      	b.n	8003b92 <HAL_DMA_Start_IT+0x356>
 8003b90:	2300      	movs	r3, #0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d01a      	beq.n	8003bcc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d007      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bb2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d007      	beq.n	8003bcc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bca:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a37      	ldr	r2, [pc, #220]	; (8003cb0 <HAL_DMA_Start_IT+0x474>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d04a      	beq.n	8003c6c <HAL_DMA_Start_IT+0x430>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a36      	ldr	r2, [pc, #216]	; (8003cb4 <HAL_DMA_Start_IT+0x478>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d045      	beq.n	8003c6c <HAL_DMA_Start_IT+0x430>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a34      	ldr	r2, [pc, #208]	; (8003cb8 <HAL_DMA_Start_IT+0x47c>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d040      	beq.n	8003c6c <HAL_DMA_Start_IT+0x430>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a33      	ldr	r2, [pc, #204]	; (8003cbc <HAL_DMA_Start_IT+0x480>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d03b      	beq.n	8003c6c <HAL_DMA_Start_IT+0x430>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a31      	ldr	r2, [pc, #196]	; (8003cc0 <HAL_DMA_Start_IT+0x484>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d036      	beq.n	8003c6c <HAL_DMA_Start_IT+0x430>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a30      	ldr	r2, [pc, #192]	; (8003cc4 <HAL_DMA_Start_IT+0x488>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d031      	beq.n	8003c6c <HAL_DMA_Start_IT+0x430>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a2e      	ldr	r2, [pc, #184]	; (8003cc8 <HAL_DMA_Start_IT+0x48c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d02c      	beq.n	8003c6c <HAL_DMA_Start_IT+0x430>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a2d      	ldr	r2, [pc, #180]	; (8003ccc <HAL_DMA_Start_IT+0x490>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d027      	beq.n	8003c6c <HAL_DMA_Start_IT+0x430>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a2b      	ldr	r2, [pc, #172]	; (8003cd0 <HAL_DMA_Start_IT+0x494>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d022      	beq.n	8003c6c <HAL_DMA_Start_IT+0x430>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a2a      	ldr	r2, [pc, #168]	; (8003cd4 <HAL_DMA_Start_IT+0x498>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d01d      	beq.n	8003c6c <HAL_DMA_Start_IT+0x430>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a28      	ldr	r2, [pc, #160]	; (8003cd8 <HAL_DMA_Start_IT+0x49c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d018      	beq.n	8003c6c <HAL_DMA_Start_IT+0x430>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a27      	ldr	r2, [pc, #156]	; (8003cdc <HAL_DMA_Start_IT+0x4a0>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d013      	beq.n	8003c6c <HAL_DMA_Start_IT+0x430>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a25      	ldr	r2, [pc, #148]	; (8003ce0 <HAL_DMA_Start_IT+0x4a4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d00e      	beq.n	8003c6c <HAL_DMA_Start_IT+0x430>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a24      	ldr	r2, [pc, #144]	; (8003ce4 <HAL_DMA_Start_IT+0x4a8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d009      	beq.n	8003c6c <HAL_DMA_Start_IT+0x430>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a22      	ldr	r2, [pc, #136]	; (8003ce8 <HAL_DMA_Start_IT+0x4ac>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d004      	beq.n	8003c6c <HAL_DMA_Start_IT+0x430>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a21      	ldr	r2, [pc, #132]	; (8003cec <HAL_DMA_Start_IT+0x4b0>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d108      	bne.n	8003c7e <HAL_DMA_Start_IT+0x442>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0201 	orr.w	r2, r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]
 8003c7c:	e012      	b.n	8003ca4 <HAL_DMA_Start_IT+0x468>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f042 0201 	orr.w	r2, r2, #1
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	e009      	b.n	8003ca4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c96:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003ca4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3718      	adds	r7, #24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	40020010 	.word	0x40020010
 8003cb4:	40020028 	.word	0x40020028
 8003cb8:	40020040 	.word	0x40020040
 8003cbc:	40020058 	.word	0x40020058
 8003cc0:	40020070 	.word	0x40020070
 8003cc4:	40020088 	.word	0x40020088
 8003cc8:	400200a0 	.word	0x400200a0
 8003ccc:	400200b8 	.word	0x400200b8
 8003cd0:	40020410 	.word	0x40020410
 8003cd4:	40020428 	.word	0x40020428
 8003cd8:	40020440 	.word	0x40020440
 8003cdc:	40020458 	.word	0x40020458
 8003ce0:	40020470 	.word	0x40020470
 8003ce4:	40020488 	.word	0x40020488
 8003ce8:	400204a0 	.word	0x400204a0
 8003cec:	400204b8 	.word	0x400204b8
 8003cf0:	58025408 	.word	0x58025408
 8003cf4:	5802541c 	.word	0x5802541c
 8003cf8:	58025430 	.word	0x58025430
 8003cfc:	58025444 	.word	0x58025444
 8003d00:	58025458 	.word	0x58025458
 8003d04:	5802546c 	.word	0x5802546c
 8003d08:	58025480 	.word	0x58025480
 8003d0c:	58025494 	.word	0x58025494

08003d10 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e237      	b.n	8004192 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d004      	beq.n	8003d38 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2280      	movs	r2, #128	; 0x80
 8003d32:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e22c      	b.n	8004192 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a5c      	ldr	r2, [pc, #368]	; (8003eb0 <HAL_DMA_Abort_IT+0x1a0>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d04a      	beq.n	8003dd8 <HAL_DMA_Abort_IT+0xc8>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a5b      	ldr	r2, [pc, #364]	; (8003eb4 <HAL_DMA_Abort_IT+0x1a4>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d045      	beq.n	8003dd8 <HAL_DMA_Abort_IT+0xc8>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a59      	ldr	r2, [pc, #356]	; (8003eb8 <HAL_DMA_Abort_IT+0x1a8>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d040      	beq.n	8003dd8 <HAL_DMA_Abort_IT+0xc8>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a58      	ldr	r2, [pc, #352]	; (8003ebc <HAL_DMA_Abort_IT+0x1ac>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d03b      	beq.n	8003dd8 <HAL_DMA_Abort_IT+0xc8>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a56      	ldr	r2, [pc, #344]	; (8003ec0 <HAL_DMA_Abort_IT+0x1b0>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d036      	beq.n	8003dd8 <HAL_DMA_Abort_IT+0xc8>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a55      	ldr	r2, [pc, #340]	; (8003ec4 <HAL_DMA_Abort_IT+0x1b4>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d031      	beq.n	8003dd8 <HAL_DMA_Abort_IT+0xc8>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a53      	ldr	r2, [pc, #332]	; (8003ec8 <HAL_DMA_Abort_IT+0x1b8>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d02c      	beq.n	8003dd8 <HAL_DMA_Abort_IT+0xc8>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a52      	ldr	r2, [pc, #328]	; (8003ecc <HAL_DMA_Abort_IT+0x1bc>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d027      	beq.n	8003dd8 <HAL_DMA_Abort_IT+0xc8>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a50      	ldr	r2, [pc, #320]	; (8003ed0 <HAL_DMA_Abort_IT+0x1c0>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d022      	beq.n	8003dd8 <HAL_DMA_Abort_IT+0xc8>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a4f      	ldr	r2, [pc, #316]	; (8003ed4 <HAL_DMA_Abort_IT+0x1c4>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d01d      	beq.n	8003dd8 <HAL_DMA_Abort_IT+0xc8>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a4d      	ldr	r2, [pc, #308]	; (8003ed8 <HAL_DMA_Abort_IT+0x1c8>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d018      	beq.n	8003dd8 <HAL_DMA_Abort_IT+0xc8>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a4c      	ldr	r2, [pc, #304]	; (8003edc <HAL_DMA_Abort_IT+0x1cc>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d013      	beq.n	8003dd8 <HAL_DMA_Abort_IT+0xc8>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a4a      	ldr	r2, [pc, #296]	; (8003ee0 <HAL_DMA_Abort_IT+0x1d0>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d00e      	beq.n	8003dd8 <HAL_DMA_Abort_IT+0xc8>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a49      	ldr	r2, [pc, #292]	; (8003ee4 <HAL_DMA_Abort_IT+0x1d4>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d009      	beq.n	8003dd8 <HAL_DMA_Abort_IT+0xc8>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a47      	ldr	r2, [pc, #284]	; (8003ee8 <HAL_DMA_Abort_IT+0x1d8>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d004      	beq.n	8003dd8 <HAL_DMA_Abort_IT+0xc8>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a46      	ldr	r2, [pc, #280]	; (8003eec <HAL_DMA_Abort_IT+0x1dc>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d101      	bne.n	8003ddc <HAL_DMA_Abort_IT+0xcc>
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e000      	b.n	8003dde <HAL_DMA_Abort_IT+0xce>
 8003ddc:	2300      	movs	r3, #0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 8086 	beq.w	8003ef0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2204      	movs	r2, #4
 8003de8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a2f      	ldr	r2, [pc, #188]	; (8003eb0 <HAL_DMA_Abort_IT+0x1a0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d04a      	beq.n	8003e8c <HAL_DMA_Abort_IT+0x17c>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a2e      	ldr	r2, [pc, #184]	; (8003eb4 <HAL_DMA_Abort_IT+0x1a4>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d045      	beq.n	8003e8c <HAL_DMA_Abort_IT+0x17c>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a2c      	ldr	r2, [pc, #176]	; (8003eb8 <HAL_DMA_Abort_IT+0x1a8>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d040      	beq.n	8003e8c <HAL_DMA_Abort_IT+0x17c>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a2b      	ldr	r2, [pc, #172]	; (8003ebc <HAL_DMA_Abort_IT+0x1ac>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d03b      	beq.n	8003e8c <HAL_DMA_Abort_IT+0x17c>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a29      	ldr	r2, [pc, #164]	; (8003ec0 <HAL_DMA_Abort_IT+0x1b0>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d036      	beq.n	8003e8c <HAL_DMA_Abort_IT+0x17c>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a28      	ldr	r2, [pc, #160]	; (8003ec4 <HAL_DMA_Abort_IT+0x1b4>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d031      	beq.n	8003e8c <HAL_DMA_Abort_IT+0x17c>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a26      	ldr	r2, [pc, #152]	; (8003ec8 <HAL_DMA_Abort_IT+0x1b8>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d02c      	beq.n	8003e8c <HAL_DMA_Abort_IT+0x17c>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a25      	ldr	r2, [pc, #148]	; (8003ecc <HAL_DMA_Abort_IT+0x1bc>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d027      	beq.n	8003e8c <HAL_DMA_Abort_IT+0x17c>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a23      	ldr	r2, [pc, #140]	; (8003ed0 <HAL_DMA_Abort_IT+0x1c0>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d022      	beq.n	8003e8c <HAL_DMA_Abort_IT+0x17c>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a22      	ldr	r2, [pc, #136]	; (8003ed4 <HAL_DMA_Abort_IT+0x1c4>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d01d      	beq.n	8003e8c <HAL_DMA_Abort_IT+0x17c>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a20      	ldr	r2, [pc, #128]	; (8003ed8 <HAL_DMA_Abort_IT+0x1c8>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d018      	beq.n	8003e8c <HAL_DMA_Abort_IT+0x17c>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a1f      	ldr	r2, [pc, #124]	; (8003edc <HAL_DMA_Abort_IT+0x1cc>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d013      	beq.n	8003e8c <HAL_DMA_Abort_IT+0x17c>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a1d      	ldr	r2, [pc, #116]	; (8003ee0 <HAL_DMA_Abort_IT+0x1d0>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d00e      	beq.n	8003e8c <HAL_DMA_Abort_IT+0x17c>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a1c      	ldr	r2, [pc, #112]	; (8003ee4 <HAL_DMA_Abort_IT+0x1d4>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d009      	beq.n	8003e8c <HAL_DMA_Abort_IT+0x17c>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a1a      	ldr	r2, [pc, #104]	; (8003ee8 <HAL_DMA_Abort_IT+0x1d8>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d004      	beq.n	8003e8c <HAL_DMA_Abort_IT+0x17c>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a19      	ldr	r2, [pc, #100]	; (8003eec <HAL_DMA_Abort_IT+0x1dc>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d108      	bne.n	8003e9e <HAL_DMA_Abort_IT+0x18e>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f022 0201 	bic.w	r2, r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	e178      	b.n	8004190 <HAL_DMA_Abort_IT+0x480>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0201 	bic.w	r2, r2, #1
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	e16f      	b.n	8004190 <HAL_DMA_Abort_IT+0x480>
 8003eb0:	40020010 	.word	0x40020010
 8003eb4:	40020028 	.word	0x40020028
 8003eb8:	40020040 	.word	0x40020040
 8003ebc:	40020058 	.word	0x40020058
 8003ec0:	40020070 	.word	0x40020070
 8003ec4:	40020088 	.word	0x40020088
 8003ec8:	400200a0 	.word	0x400200a0
 8003ecc:	400200b8 	.word	0x400200b8
 8003ed0:	40020410 	.word	0x40020410
 8003ed4:	40020428 	.word	0x40020428
 8003ed8:	40020440 	.word	0x40020440
 8003edc:	40020458 	.word	0x40020458
 8003ee0:	40020470 	.word	0x40020470
 8003ee4:	40020488 	.word	0x40020488
 8003ee8:	400204a0 	.word	0x400204a0
 8003eec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 020e 	bic.w	r2, r2, #14
 8003efe:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a6c      	ldr	r2, [pc, #432]	; (80040b8 <HAL_DMA_Abort_IT+0x3a8>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d04a      	beq.n	8003fa0 <HAL_DMA_Abort_IT+0x290>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a6b      	ldr	r2, [pc, #428]	; (80040bc <HAL_DMA_Abort_IT+0x3ac>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d045      	beq.n	8003fa0 <HAL_DMA_Abort_IT+0x290>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a69      	ldr	r2, [pc, #420]	; (80040c0 <HAL_DMA_Abort_IT+0x3b0>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d040      	beq.n	8003fa0 <HAL_DMA_Abort_IT+0x290>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a68      	ldr	r2, [pc, #416]	; (80040c4 <HAL_DMA_Abort_IT+0x3b4>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d03b      	beq.n	8003fa0 <HAL_DMA_Abort_IT+0x290>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a66      	ldr	r2, [pc, #408]	; (80040c8 <HAL_DMA_Abort_IT+0x3b8>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d036      	beq.n	8003fa0 <HAL_DMA_Abort_IT+0x290>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a65      	ldr	r2, [pc, #404]	; (80040cc <HAL_DMA_Abort_IT+0x3bc>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d031      	beq.n	8003fa0 <HAL_DMA_Abort_IT+0x290>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a63      	ldr	r2, [pc, #396]	; (80040d0 <HAL_DMA_Abort_IT+0x3c0>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d02c      	beq.n	8003fa0 <HAL_DMA_Abort_IT+0x290>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a62      	ldr	r2, [pc, #392]	; (80040d4 <HAL_DMA_Abort_IT+0x3c4>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d027      	beq.n	8003fa0 <HAL_DMA_Abort_IT+0x290>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a60      	ldr	r2, [pc, #384]	; (80040d8 <HAL_DMA_Abort_IT+0x3c8>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d022      	beq.n	8003fa0 <HAL_DMA_Abort_IT+0x290>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a5f      	ldr	r2, [pc, #380]	; (80040dc <HAL_DMA_Abort_IT+0x3cc>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d01d      	beq.n	8003fa0 <HAL_DMA_Abort_IT+0x290>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a5d      	ldr	r2, [pc, #372]	; (80040e0 <HAL_DMA_Abort_IT+0x3d0>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d018      	beq.n	8003fa0 <HAL_DMA_Abort_IT+0x290>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a5c      	ldr	r2, [pc, #368]	; (80040e4 <HAL_DMA_Abort_IT+0x3d4>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d013      	beq.n	8003fa0 <HAL_DMA_Abort_IT+0x290>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a5a      	ldr	r2, [pc, #360]	; (80040e8 <HAL_DMA_Abort_IT+0x3d8>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d00e      	beq.n	8003fa0 <HAL_DMA_Abort_IT+0x290>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a59      	ldr	r2, [pc, #356]	; (80040ec <HAL_DMA_Abort_IT+0x3dc>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d009      	beq.n	8003fa0 <HAL_DMA_Abort_IT+0x290>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a57      	ldr	r2, [pc, #348]	; (80040f0 <HAL_DMA_Abort_IT+0x3e0>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d004      	beq.n	8003fa0 <HAL_DMA_Abort_IT+0x290>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a56      	ldr	r2, [pc, #344]	; (80040f4 <HAL_DMA_Abort_IT+0x3e4>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d108      	bne.n	8003fb2 <HAL_DMA_Abort_IT+0x2a2>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 0201 	bic.w	r2, r2, #1
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	e007      	b.n	8003fc2 <HAL_DMA_Abort_IT+0x2b2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0201 	bic.w	r2, r2, #1
 8003fc0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a3c      	ldr	r2, [pc, #240]	; (80040b8 <HAL_DMA_Abort_IT+0x3a8>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d072      	beq.n	80040b2 <HAL_DMA_Abort_IT+0x3a2>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a3a      	ldr	r2, [pc, #232]	; (80040bc <HAL_DMA_Abort_IT+0x3ac>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d06d      	beq.n	80040b2 <HAL_DMA_Abort_IT+0x3a2>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a39      	ldr	r2, [pc, #228]	; (80040c0 <HAL_DMA_Abort_IT+0x3b0>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d068      	beq.n	80040b2 <HAL_DMA_Abort_IT+0x3a2>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a37      	ldr	r2, [pc, #220]	; (80040c4 <HAL_DMA_Abort_IT+0x3b4>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d063      	beq.n	80040b2 <HAL_DMA_Abort_IT+0x3a2>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a36      	ldr	r2, [pc, #216]	; (80040c8 <HAL_DMA_Abort_IT+0x3b8>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d05e      	beq.n	80040b2 <HAL_DMA_Abort_IT+0x3a2>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a34      	ldr	r2, [pc, #208]	; (80040cc <HAL_DMA_Abort_IT+0x3bc>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d059      	beq.n	80040b2 <HAL_DMA_Abort_IT+0x3a2>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a33      	ldr	r2, [pc, #204]	; (80040d0 <HAL_DMA_Abort_IT+0x3c0>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d054      	beq.n	80040b2 <HAL_DMA_Abort_IT+0x3a2>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a31      	ldr	r2, [pc, #196]	; (80040d4 <HAL_DMA_Abort_IT+0x3c4>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d04f      	beq.n	80040b2 <HAL_DMA_Abort_IT+0x3a2>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a30      	ldr	r2, [pc, #192]	; (80040d8 <HAL_DMA_Abort_IT+0x3c8>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d04a      	beq.n	80040b2 <HAL_DMA_Abort_IT+0x3a2>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a2e      	ldr	r2, [pc, #184]	; (80040dc <HAL_DMA_Abort_IT+0x3cc>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d045      	beq.n	80040b2 <HAL_DMA_Abort_IT+0x3a2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a2d      	ldr	r2, [pc, #180]	; (80040e0 <HAL_DMA_Abort_IT+0x3d0>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d040      	beq.n	80040b2 <HAL_DMA_Abort_IT+0x3a2>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a2b      	ldr	r2, [pc, #172]	; (80040e4 <HAL_DMA_Abort_IT+0x3d4>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d03b      	beq.n	80040b2 <HAL_DMA_Abort_IT+0x3a2>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a2a      	ldr	r2, [pc, #168]	; (80040e8 <HAL_DMA_Abort_IT+0x3d8>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d036      	beq.n	80040b2 <HAL_DMA_Abort_IT+0x3a2>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a28      	ldr	r2, [pc, #160]	; (80040ec <HAL_DMA_Abort_IT+0x3dc>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d031      	beq.n	80040b2 <HAL_DMA_Abort_IT+0x3a2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a27      	ldr	r2, [pc, #156]	; (80040f0 <HAL_DMA_Abort_IT+0x3e0>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d02c      	beq.n	80040b2 <HAL_DMA_Abort_IT+0x3a2>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a25      	ldr	r2, [pc, #148]	; (80040f4 <HAL_DMA_Abort_IT+0x3e4>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d027      	beq.n	80040b2 <HAL_DMA_Abort_IT+0x3a2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a24      	ldr	r2, [pc, #144]	; (80040f8 <HAL_DMA_Abort_IT+0x3e8>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d022      	beq.n	80040b2 <HAL_DMA_Abort_IT+0x3a2>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a22      	ldr	r2, [pc, #136]	; (80040fc <HAL_DMA_Abort_IT+0x3ec>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d01d      	beq.n	80040b2 <HAL_DMA_Abort_IT+0x3a2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a21      	ldr	r2, [pc, #132]	; (8004100 <HAL_DMA_Abort_IT+0x3f0>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d018      	beq.n	80040b2 <HAL_DMA_Abort_IT+0x3a2>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a1f      	ldr	r2, [pc, #124]	; (8004104 <HAL_DMA_Abort_IT+0x3f4>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d013      	beq.n	80040b2 <HAL_DMA_Abort_IT+0x3a2>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a1e      	ldr	r2, [pc, #120]	; (8004108 <HAL_DMA_Abort_IT+0x3f8>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d00e      	beq.n	80040b2 <HAL_DMA_Abort_IT+0x3a2>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a1c      	ldr	r2, [pc, #112]	; (800410c <HAL_DMA_Abort_IT+0x3fc>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d009      	beq.n	80040b2 <HAL_DMA_Abort_IT+0x3a2>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a1b      	ldr	r2, [pc, #108]	; (8004110 <HAL_DMA_Abort_IT+0x400>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d004      	beq.n	80040b2 <HAL_DMA_Abort_IT+0x3a2>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a19      	ldr	r2, [pc, #100]	; (8004114 <HAL_DMA_Abort_IT+0x404>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d132      	bne.n	8004118 <HAL_DMA_Abort_IT+0x408>
 80040b2:	2301      	movs	r3, #1
 80040b4:	e031      	b.n	800411a <HAL_DMA_Abort_IT+0x40a>
 80040b6:	bf00      	nop
 80040b8:	40020010 	.word	0x40020010
 80040bc:	40020028 	.word	0x40020028
 80040c0:	40020040 	.word	0x40020040
 80040c4:	40020058 	.word	0x40020058
 80040c8:	40020070 	.word	0x40020070
 80040cc:	40020088 	.word	0x40020088
 80040d0:	400200a0 	.word	0x400200a0
 80040d4:	400200b8 	.word	0x400200b8
 80040d8:	40020410 	.word	0x40020410
 80040dc:	40020428 	.word	0x40020428
 80040e0:	40020440 	.word	0x40020440
 80040e4:	40020458 	.word	0x40020458
 80040e8:	40020470 	.word	0x40020470
 80040ec:	40020488 	.word	0x40020488
 80040f0:	400204a0 	.word	0x400204a0
 80040f4:	400204b8 	.word	0x400204b8
 80040f8:	58025408 	.word	0x58025408
 80040fc:	5802541c 	.word	0x5802541c
 8004100:	58025430 	.word	0x58025430
 8004104:	58025444 	.word	0x58025444
 8004108:	58025458 	.word	0x58025458
 800410c:	5802546c 	.word	0x5802546c
 8004110:	58025480 	.word	0x58025480
 8004114:	58025494 	.word	0x58025494
 8004118:	2300      	movs	r3, #0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d028      	beq.n	8004170 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004128:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800412c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004132:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004138:	f003 031f 	and.w	r3, r3, #31
 800413c:	2201      	movs	r2, #1
 800413e:	409a      	lsls	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800414c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00c      	beq.n	8004170 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004160:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004164:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800416e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004184:	2b00      	cmp	r3, #0
 8004186:	d003      	beq.n	8004190 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop

0800419c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b08a      	sub	sp, #40	; 0x28
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80041a4:	2300      	movs	r3, #0
 80041a6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80041a8:	4b67      	ldr	r3, [pc, #412]	; (8004348 <HAL_DMA_IRQHandler+0x1ac>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a67      	ldr	r2, [pc, #412]	; (800434c <HAL_DMA_IRQHandler+0x1b0>)
 80041ae:	fba2 2303 	umull	r2, r3, r2, r3
 80041b2:	0a9b      	lsrs	r3, r3, #10
 80041b4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ba:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80041c2:	6a3b      	ldr	r3, [r7, #32]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a5f      	ldr	r2, [pc, #380]	; (8004350 <HAL_DMA_IRQHandler+0x1b4>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d04a      	beq.n	800426e <HAL_DMA_IRQHandler+0xd2>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a5d      	ldr	r2, [pc, #372]	; (8004354 <HAL_DMA_IRQHandler+0x1b8>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d045      	beq.n	800426e <HAL_DMA_IRQHandler+0xd2>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a5c      	ldr	r2, [pc, #368]	; (8004358 <HAL_DMA_IRQHandler+0x1bc>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d040      	beq.n	800426e <HAL_DMA_IRQHandler+0xd2>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a5a      	ldr	r2, [pc, #360]	; (800435c <HAL_DMA_IRQHandler+0x1c0>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d03b      	beq.n	800426e <HAL_DMA_IRQHandler+0xd2>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a59      	ldr	r2, [pc, #356]	; (8004360 <HAL_DMA_IRQHandler+0x1c4>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d036      	beq.n	800426e <HAL_DMA_IRQHandler+0xd2>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a57      	ldr	r2, [pc, #348]	; (8004364 <HAL_DMA_IRQHandler+0x1c8>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d031      	beq.n	800426e <HAL_DMA_IRQHandler+0xd2>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a56      	ldr	r2, [pc, #344]	; (8004368 <HAL_DMA_IRQHandler+0x1cc>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d02c      	beq.n	800426e <HAL_DMA_IRQHandler+0xd2>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a54      	ldr	r2, [pc, #336]	; (800436c <HAL_DMA_IRQHandler+0x1d0>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d027      	beq.n	800426e <HAL_DMA_IRQHandler+0xd2>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a53      	ldr	r2, [pc, #332]	; (8004370 <HAL_DMA_IRQHandler+0x1d4>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d022      	beq.n	800426e <HAL_DMA_IRQHandler+0xd2>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a51      	ldr	r2, [pc, #324]	; (8004374 <HAL_DMA_IRQHandler+0x1d8>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d01d      	beq.n	800426e <HAL_DMA_IRQHandler+0xd2>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a50      	ldr	r2, [pc, #320]	; (8004378 <HAL_DMA_IRQHandler+0x1dc>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d018      	beq.n	800426e <HAL_DMA_IRQHandler+0xd2>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a4e      	ldr	r2, [pc, #312]	; (800437c <HAL_DMA_IRQHandler+0x1e0>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d013      	beq.n	800426e <HAL_DMA_IRQHandler+0xd2>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a4d      	ldr	r2, [pc, #308]	; (8004380 <HAL_DMA_IRQHandler+0x1e4>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d00e      	beq.n	800426e <HAL_DMA_IRQHandler+0xd2>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a4b      	ldr	r2, [pc, #300]	; (8004384 <HAL_DMA_IRQHandler+0x1e8>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d009      	beq.n	800426e <HAL_DMA_IRQHandler+0xd2>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a4a      	ldr	r2, [pc, #296]	; (8004388 <HAL_DMA_IRQHandler+0x1ec>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d004      	beq.n	800426e <HAL_DMA_IRQHandler+0xd2>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a48      	ldr	r2, [pc, #288]	; (800438c <HAL_DMA_IRQHandler+0x1f0>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d101      	bne.n	8004272 <HAL_DMA_IRQHandler+0xd6>
 800426e:	2301      	movs	r3, #1
 8004270:	e000      	b.n	8004274 <HAL_DMA_IRQHandler+0xd8>
 8004272:	2300      	movs	r3, #0
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 842b 	beq.w	8004ad0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800427e:	f003 031f 	and.w	r3, r3, #31
 8004282:	2208      	movs	r2, #8
 8004284:	409a      	lsls	r2, r3
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	4013      	ands	r3, r2
 800428a:	2b00      	cmp	r3, #0
 800428c:	f000 80a2 	beq.w	80043d4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a2e      	ldr	r2, [pc, #184]	; (8004350 <HAL_DMA_IRQHandler+0x1b4>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d04a      	beq.n	8004330 <HAL_DMA_IRQHandler+0x194>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a2d      	ldr	r2, [pc, #180]	; (8004354 <HAL_DMA_IRQHandler+0x1b8>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d045      	beq.n	8004330 <HAL_DMA_IRQHandler+0x194>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a2b      	ldr	r2, [pc, #172]	; (8004358 <HAL_DMA_IRQHandler+0x1bc>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d040      	beq.n	8004330 <HAL_DMA_IRQHandler+0x194>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a2a      	ldr	r2, [pc, #168]	; (800435c <HAL_DMA_IRQHandler+0x1c0>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d03b      	beq.n	8004330 <HAL_DMA_IRQHandler+0x194>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a28      	ldr	r2, [pc, #160]	; (8004360 <HAL_DMA_IRQHandler+0x1c4>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d036      	beq.n	8004330 <HAL_DMA_IRQHandler+0x194>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a27      	ldr	r2, [pc, #156]	; (8004364 <HAL_DMA_IRQHandler+0x1c8>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d031      	beq.n	8004330 <HAL_DMA_IRQHandler+0x194>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a25      	ldr	r2, [pc, #148]	; (8004368 <HAL_DMA_IRQHandler+0x1cc>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d02c      	beq.n	8004330 <HAL_DMA_IRQHandler+0x194>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a24      	ldr	r2, [pc, #144]	; (800436c <HAL_DMA_IRQHandler+0x1d0>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d027      	beq.n	8004330 <HAL_DMA_IRQHandler+0x194>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a22      	ldr	r2, [pc, #136]	; (8004370 <HAL_DMA_IRQHandler+0x1d4>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d022      	beq.n	8004330 <HAL_DMA_IRQHandler+0x194>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a21      	ldr	r2, [pc, #132]	; (8004374 <HAL_DMA_IRQHandler+0x1d8>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d01d      	beq.n	8004330 <HAL_DMA_IRQHandler+0x194>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a1f      	ldr	r2, [pc, #124]	; (8004378 <HAL_DMA_IRQHandler+0x1dc>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d018      	beq.n	8004330 <HAL_DMA_IRQHandler+0x194>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a1e      	ldr	r2, [pc, #120]	; (800437c <HAL_DMA_IRQHandler+0x1e0>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d013      	beq.n	8004330 <HAL_DMA_IRQHandler+0x194>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a1c      	ldr	r2, [pc, #112]	; (8004380 <HAL_DMA_IRQHandler+0x1e4>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d00e      	beq.n	8004330 <HAL_DMA_IRQHandler+0x194>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a1b      	ldr	r2, [pc, #108]	; (8004384 <HAL_DMA_IRQHandler+0x1e8>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d009      	beq.n	8004330 <HAL_DMA_IRQHandler+0x194>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a19      	ldr	r2, [pc, #100]	; (8004388 <HAL_DMA_IRQHandler+0x1ec>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d004      	beq.n	8004330 <HAL_DMA_IRQHandler+0x194>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a18      	ldr	r2, [pc, #96]	; (800438c <HAL_DMA_IRQHandler+0x1f0>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d12f      	bne.n	8004390 <HAL_DMA_IRQHandler+0x1f4>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0304 	and.w	r3, r3, #4
 800433a:	2b00      	cmp	r3, #0
 800433c:	bf14      	ite	ne
 800433e:	2301      	movne	r3, #1
 8004340:	2300      	moveq	r3, #0
 8004342:	b2db      	uxtb	r3, r3
 8004344:	e02e      	b.n	80043a4 <HAL_DMA_IRQHandler+0x208>
 8004346:	bf00      	nop
 8004348:	24000000 	.word	0x24000000
 800434c:	1b4e81b5 	.word	0x1b4e81b5
 8004350:	40020010 	.word	0x40020010
 8004354:	40020028 	.word	0x40020028
 8004358:	40020040 	.word	0x40020040
 800435c:	40020058 	.word	0x40020058
 8004360:	40020070 	.word	0x40020070
 8004364:	40020088 	.word	0x40020088
 8004368:	400200a0 	.word	0x400200a0
 800436c:	400200b8 	.word	0x400200b8
 8004370:	40020410 	.word	0x40020410
 8004374:	40020428 	.word	0x40020428
 8004378:	40020440 	.word	0x40020440
 800437c:	40020458 	.word	0x40020458
 8004380:	40020470 	.word	0x40020470
 8004384:	40020488 	.word	0x40020488
 8004388:	400204a0 	.word	0x400204a0
 800438c:	400204b8 	.word	0x400204b8
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0308 	and.w	r3, r3, #8
 800439a:	2b00      	cmp	r3, #0
 800439c:	bf14      	ite	ne
 800439e:	2301      	movne	r3, #1
 80043a0:	2300      	moveq	r3, #0
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d015      	beq.n	80043d4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0204 	bic.w	r2, r2, #4
 80043b6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043bc:	f003 031f 	and.w	r3, r3, #31
 80043c0:	2208      	movs	r2, #8
 80043c2:	409a      	lsls	r2, r3
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043cc:	f043 0201 	orr.w	r2, r3, #1
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d8:	f003 031f 	and.w	r3, r3, #31
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	fa22 f303 	lsr.w	r3, r2, r3
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d06e      	beq.n	80044c8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a69      	ldr	r2, [pc, #420]	; (8004594 <HAL_DMA_IRQHandler+0x3f8>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d04a      	beq.n	800448a <HAL_DMA_IRQHandler+0x2ee>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a67      	ldr	r2, [pc, #412]	; (8004598 <HAL_DMA_IRQHandler+0x3fc>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d045      	beq.n	800448a <HAL_DMA_IRQHandler+0x2ee>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a66      	ldr	r2, [pc, #408]	; (800459c <HAL_DMA_IRQHandler+0x400>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d040      	beq.n	800448a <HAL_DMA_IRQHandler+0x2ee>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a64      	ldr	r2, [pc, #400]	; (80045a0 <HAL_DMA_IRQHandler+0x404>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d03b      	beq.n	800448a <HAL_DMA_IRQHandler+0x2ee>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a63      	ldr	r2, [pc, #396]	; (80045a4 <HAL_DMA_IRQHandler+0x408>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d036      	beq.n	800448a <HAL_DMA_IRQHandler+0x2ee>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a61      	ldr	r2, [pc, #388]	; (80045a8 <HAL_DMA_IRQHandler+0x40c>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d031      	beq.n	800448a <HAL_DMA_IRQHandler+0x2ee>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a60      	ldr	r2, [pc, #384]	; (80045ac <HAL_DMA_IRQHandler+0x410>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d02c      	beq.n	800448a <HAL_DMA_IRQHandler+0x2ee>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a5e      	ldr	r2, [pc, #376]	; (80045b0 <HAL_DMA_IRQHandler+0x414>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d027      	beq.n	800448a <HAL_DMA_IRQHandler+0x2ee>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a5d      	ldr	r2, [pc, #372]	; (80045b4 <HAL_DMA_IRQHandler+0x418>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d022      	beq.n	800448a <HAL_DMA_IRQHandler+0x2ee>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a5b      	ldr	r2, [pc, #364]	; (80045b8 <HAL_DMA_IRQHandler+0x41c>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d01d      	beq.n	800448a <HAL_DMA_IRQHandler+0x2ee>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a5a      	ldr	r2, [pc, #360]	; (80045bc <HAL_DMA_IRQHandler+0x420>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d018      	beq.n	800448a <HAL_DMA_IRQHandler+0x2ee>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a58      	ldr	r2, [pc, #352]	; (80045c0 <HAL_DMA_IRQHandler+0x424>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d013      	beq.n	800448a <HAL_DMA_IRQHandler+0x2ee>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a57      	ldr	r2, [pc, #348]	; (80045c4 <HAL_DMA_IRQHandler+0x428>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d00e      	beq.n	800448a <HAL_DMA_IRQHandler+0x2ee>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a55      	ldr	r2, [pc, #340]	; (80045c8 <HAL_DMA_IRQHandler+0x42c>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d009      	beq.n	800448a <HAL_DMA_IRQHandler+0x2ee>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a54      	ldr	r2, [pc, #336]	; (80045cc <HAL_DMA_IRQHandler+0x430>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d004      	beq.n	800448a <HAL_DMA_IRQHandler+0x2ee>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a52      	ldr	r2, [pc, #328]	; (80045d0 <HAL_DMA_IRQHandler+0x434>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d10a      	bne.n	80044a0 <HAL_DMA_IRQHandler+0x304>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004494:	2b00      	cmp	r3, #0
 8004496:	bf14      	ite	ne
 8004498:	2301      	movne	r3, #1
 800449a:	2300      	moveq	r3, #0
 800449c:	b2db      	uxtb	r3, r3
 800449e:	e003      	b.n	80044a8 <HAL_DMA_IRQHandler+0x30c>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2300      	movs	r3, #0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00d      	beq.n	80044c8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b0:	f003 031f 	and.w	r3, r3, #31
 80044b4:	2201      	movs	r2, #1
 80044b6:	409a      	lsls	r2, r3
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c0:	f043 0202 	orr.w	r2, r3, #2
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044cc:	f003 031f 	and.w	r3, r3, #31
 80044d0:	2204      	movs	r2, #4
 80044d2:	409a      	lsls	r2, r3
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	4013      	ands	r3, r2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 808f 	beq.w	80045fc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a2c      	ldr	r2, [pc, #176]	; (8004594 <HAL_DMA_IRQHandler+0x3f8>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d04a      	beq.n	800457e <HAL_DMA_IRQHandler+0x3e2>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a2a      	ldr	r2, [pc, #168]	; (8004598 <HAL_DMA_IRQHandler+0x3fc>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d045      	beq.n	800457e <HAL_DMA_IRQHandler+0x3e2>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a29      	ldr	r2, [pc, #164]	; (800459c <HAL_DMA_IRQHandler+0x400>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d040      	beq.n	800457e <HAL_DMA_IRQHandler+0x3e2>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a27      	ldr	r2, [pc, #156]	; (80045a0 <HAL_DMA_IRQHandler+0x404>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d03b      	beq.n	800457e <HAL_DMA_IRQHandler+0x3e2>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a26      	ldr	r2, [pc, #152]	; (80045a4 <HAL_DMA_IRQHandler+0x408>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d036      	beq.n	800457e <HAL_DMA_IRQHandler+0x3e2>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a24      	ldr	r2, [pc, #144]	; (80045a8 <HAL_DMA_IRQHandler+0x40c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d031      	beq.n	800457e <HAL_DMA_IRQHandler+0x3e2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a23      	ldr	r2, [pc, #140]	; (80045ac <HAL_DMA_IRQHandler+0x410>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d02c      	beq.n	800457e <HAL_DMA_IRQHandler+0x3e2>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a21      	ldr	r2, [pc, #132]	; (80045b0 <HAL_DMA_IRQHandler+0x414>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d027      	beq.n	800457e <HAL_DMA_IRQHandler+0x3e2>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a20      	ldr	r2, [pc, #128]	; (80045b4 <HAL_DMA_IRQHandler+0x418>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d022      	beq.n	800457e <HAL_DMA_IRQHandler+0x3e2>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a1e      	ldr	r2, [pc, #120]	; (80045b8 <HAL_DMA_IRQHandler+0x41c>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d01d      	beq.n	800457e <HAL_DMA_IRQHandler+0x3e2>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a1d      	ldr	r2, [pc, #116]	; (80045bc <HAL_DMA_IRQHandler+0x420>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d018      	beq.n	800457e <HAL_DMA_IRQHandler+0x3e2>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a1b      	ldr	r2, [pc, #108]	; (80045c0 <HAL_DMA_IRQHandler+0x424>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d013      	beq.n	800457e <HAL_DMA_IRQHandler+0x3e2>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a1a      	ldr	r2, [pc, #104]	; (80045c4 <HAL_DMA_IRQHandler+0x428>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d00e      	beq.n	800457e <HAL_DMA_IRQHandler+0x3e2>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a18      	ldr	r2, [pc, #96]	; (80045c8 <HAL_DMA_IRQHandler+0x42c>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d009      	beq.n	800457e <HAL_DMA_IRQHandler+0x3e2>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a17      	ldr	r2, [pc, #92]	; (80045cc <HAL_DMA_IRQHandler+0x430>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d004      	beq.n	800457e <HAL_DMA_IRQHandler+0x3e2>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a15      	ldr	r2, [pc, #84]	; (80045d0 <HAL_DMA_IRQHandler+0x434>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d12a      	bne.n	80045d4 <HAL_DMA_IRQHandler+0x438>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	bf14      	ite	ne
 800458c:	2301      	movne	r3, #1
 800458e:	2300      	moveq	r3, #0
 8004590:	b2db      	uxtb	r3, r3
 8004592:	e023      	b.n	80045dc <HAL_DMA_IRQHandler+0x440>
 8004594:	40020010 	.word	0x40020010
 8004598:	40020028 	.word	0x40020028
 800459c:	40020040 	.word	0x40020040
 80045a0:	40020058 	.word	0x40020058
 80045a4:	40020070 	.word	0x40020070
 80045a8:	40020088 	.word	0x40020088
 80045ac:	400200a0 	.word	0x400200a0
 80045b0:	400200b8 	.word	0x400200b8
 80045b4:	40020410 	.word	0x40020410
 80045b8:	40020428 	.word	0x40020428
 80045bc:	40020440 	.word	0x40020440
 80045c0:	40020458 	.word	0x40020458
 80045c4:	40020470 	.word	0x40020470
 80045c8:	40020488 	.word	0x40020488
 80045cc:	400204a0 	.word	0x400204a0
 80045d0:	400204b8 	.word	0x400204b8
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2300      	movs	r3, #0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00d      	beq.n	80045fc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e4:	f003 031f 	and.w	r3, r3, #31
 80045e8:	2204      	movs	r2, #4
 80045ea:	409a      	lsls	r2, r3
 80045ec:	6a3b      	ldr	r3, [r7, #32]
 80045ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f4:	f043 0204 	orr.w	r2, r3, #4
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004600:	f003 031f 	and.w	r3, r3, #31
 8004604:	2210      	movs	r2, #16
 8004606:	409a      	lsls	r2, r3
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	4013      	ands	r3, r2
 800460c:	2b00      	cmp	r3, #0
 800460e:	f000 80a6 	beq.w	800475e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a85      	ldr	r2, [pc, #532]	; (800482c <HAL_DMA_IRQHandler+0x690>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d04a      	beq.n	80046b2 <HAL_DMA_IRQHandler+0x516>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a83      	ldr	r2, [pc, #524]	; (8004830 <HAL_DMA_IRQHandler+0x694>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d045      	beq.n	80046b2 <HAL_DMA_IRQHandler+0x516>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a82      	ldr	r2, [pc, #520]	; (8004834 <HAL_DMA_IRQHandler+0x698>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d040      	beq.n	80046b2 <HAL_DMA_IRQHandler+0x516>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a80      	ldr	r2, [pc, #512]	; (8004838 <HAL_DMA_IRQHandler+0x69c>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d03b      	beq.n	80046b2 <HAL_DMA_IRQHandler+0x516>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a7f      	ldr	r2, [pc, #508]	; (800483c <HAL_DMA_IRQHandler+0x6a0>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d036      	beq.n	80046b2 <HAL_DMA_IRQHandler+0x516>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a7d      	ldr	r2, [pc, #500]	; (8004840 <HAL_DMA_IRQHandler+0x6a4>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d031      	beq.n	80046b2 <HAL_DMA_IRQHandler+0x516>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a7c      	ldr	r2, [pc, #496]	; (8004844 <HAL_DMA_IRQHandler+0x6a8>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d02c      	beq.n	80046b2 <HAL_DMA_IRQHandler+0x516>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a7a      	ldr	r2, [pc, #488]	; (8004848 <HAL_DMA_IRQHandler+0x6ac>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d027      	beq.n	80046b2 <HAL_DMA_IRQHandler+0x516>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a79      	ldr	r2, [pc, #484]	; (800484c <HAL_DMA_IRQHandler+0x6b0>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d022      	beq.n	80046b2 <HAL_DMA_IRQHandler+0x516>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a77      	ldr	r2, [pc, #476]	; (8004850 <HAL_DMA_IRQHandler+0x6b4>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d01d      	beq.n	80046b2 <HAL_DMA_IRQHandler+0x516>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a76      	ldr	r2, [pc, #472]	; (8004854 <HAL_DMA_IRQHandler+0x6b8>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d018      	beq.n	80046b2 <HAL_DMA_IRQHandler+0x516>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a74      	ldr	r2, [pc, #464]	; (8004858 <HAL_DMA_IRQHandler+0x6bc>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d013      	beq.n	80046b2 <HAL_DMA_IRQHandler+0x516>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a73      	ldr	r2, [pc, #460]	; (800485c <HAL_DMA_IRQHandler+0x6c0>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d00e      	beq.n	80046b2 <HAL_DMA_IRQHandler+0x516>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a71      	ldr	r2, [pc, #452]	; (8004860 <HAL_DMA_IRQHandler+0x6c4>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d009      	beq.n	80046b2 <HAL_DMA_IRQHandler+0x516>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a70      	ldr	r2, [pc, #448]	; (8004864 <HAL_DMA_IRQHandler+0x6c8>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d004      	beq.n	80046b2 <HAL_DMA_IRQHandler+0x516>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a6e      	ldr	r2, [pc, #440]	; (8004868 <HAL_DMA_IRQHandler+0x6cc>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d10a      	bne.n	80046c8 <HAL_DMA_IRQHandler+0x52c>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0308 	and.w	r3, r3, #8
 80046bc:	2b00      	cmp	r3, #0
 80046be:	bf14      	ite	ne
 80046c0:	2301      	movne	r3, #1
 80046c2:	2300      	moveq	r3, #0
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	e009      	b.n	80046dc <HAL_DMA_IRQHandler+0x540>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0304 	and.w	r3, r3, #4
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	bf14      	ite	ne
 80046d6:	2301      	movne	r3, #1
 80046d8:	2300      	moveq	r3, #0
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d03e      	beq.n	800475e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e4:	f003 031f 	and.w	r3, r3, #31
 80046e8:	2210      	movs	r2, #16
 80046ea:	409a      	lsls	r2, r3
 80046ec:	6a3b      	ldr	r3, [r7, #32]
 80046ee:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d018      	beq.n	8004730 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d108      	bne.n	800471e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004710:	2b00      	cmp	r3, #0
 8004712:	d024      	beq.n	800475e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	4798      	blx	r3
 800471c:	e01f      	b.n	800475e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004722:	2b00      	cmp	r3, #0
 8004724:	d01b      	beq.n	800475e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	4798      	blx	r3
 800472e:	e016      	b.n	800475e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800473a:	2b00      	cmp	r3, #0
 800473c:	d107      	bne.n	800474e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 0208 	bic.w	r2, r2, #8
 800474c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004762:	f003 031f 	and.w	r3, r3, #31
 8004766:	2220      	movs	r2, #32
 8004768:	409a      	lsls	r2, r3
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	4013      	ands	r3, r2
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 8110 	beq.w	8004994 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a2c      	ldr	r2, [pc, #176]	; (800482c <HAL_DMA_IRQHandler+0x690>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d04a      	beq.n	8004814 <HAL_DMA_IRQHandler+0x678>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a2b      	ldr	r2, [pc, #172]	; (8004830 <HAL_DMA_IRQHandler+0x694>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d045      	beq.n	8004814 <HAL_DMA_IRQHandler+0x678>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a29      	ldr	r2, [pc, #164]	; (8004834 <HAL_DMA_IRQHandler+0x698>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d040      	beq.n	8004814 <HAL_DMA_IRQHandler+0x678>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a28      	ldr	r2, [pc, #160]	; (8004838 <HAL_DMA_IRQHandler+0x69c>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d03b      	beq.n	8004814 <HAL_DMA_IRQHandler+0x678>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a26      	ldr	r2, [pc, #152]	; (800483c <HAL_DMA_IRQHandler+0x6a0>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d036      	beq.n	8004814 <HAL_DMA_IRQHandler+0x678>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a25      	ldr	r2, [pc, #148]	; (8004840 <HAL_DMA_IRQHandler+0x6a4>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d031      	beq.n	8004814 <HAL_DMA_IRQHandler+0x678>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a23      	ldr	r2, [pc, #140]	; (8004844 <HAL_DMA_IRQHandler+0x6a8>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d02c      	beq.n	8004814 <HAL_DMA_IRQHandler+0x678>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a22      	ldr	r2, [pc, #136]	; (8004848 <HAL_DMA_IRQHandler+0x6ac>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d027      	beq.n	8004814 <HAL_DMA_IRQHandler+0x678>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a20      	ldr	r2, [pc, #128]	; (800484c <HAL_DMA_IRQHandler+0x6b0>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d022      	beq.n	8004814 <HAL_DMA_IRQHandler+0x678>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a1f      	ldr	r2, [pc, #124]	; (8004850 <HAL_DMA_IRQHandler+0x6b4>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d01d      	beq.n	8004814 <HAL_DMA_IRQHandler+0x678>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a1d      	ldr	r2, [pc, #116]	; (8004854 <HAL_DMA_IRQHandler+0x6b8>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d018      	beq.n	8004814 <HAL_DMA_IRQHandler+0x678>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a1c      	ldr	r2, [pc, #112]	; (8004858 <HAL_DMA_IRQHandler+0x6bc>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d013      	beq.n	8004814 <HAL_DMA_IRQHandler+0x678>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a1a      	ldr	r2, [pc, #104]	; (800485c <HAL_DMA_IRQHandler+0x6c0>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d00e      	beq.n	8004814 <HAL_DMA_IRQHandler+0x678>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a19      	ldr	r2, [pc, #100]	; (8004860 <HAL_DMA_IRQHandler+0x6c4>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d009      	beq.n	8004814 <HAL_DMA_IRQHandler+0x678>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a17      	ldr	r2, [pc, #92]	; (8004864 <HAL_DMA_IRQHandler+0x6c8>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d004      	beq.n	8004814 <HAL_DMA_IRQHandler+0x678>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a16      	ldr	r2, [pc, #88]	; (8004868 <HAL_DMA_IRQHandler+0x6cc>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d12b      	bne.n	800486c <HAL_DMA_IRQHandler+0x6d0>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0310 	and.w	r3, r3, #16
 800481e:	2b00      	cmp	r3, #0
 8004820:	bf14      	ite	ne
 8004822:	2301      	movne	r3, #1
 8004824:	2300      	moveq	r3, #0
 8004826:	b2db      	uxtb	r3, r3
 8004828:	e02a      	b.n	8004880 <HAL_DMA_IRQHandler+0x6e4>
 800482a:	bf00      	nop
 800482c:	40020010 	.word	0x40020010
 8004830:	40020028 	.word	0x40020028
 8004834:	40020040 	.word	0x40020040
 8004838:	40020058 	.word	0x40020058
 800483c:	40020070 	.word	0x40020070
 8004840:	40020088 	.word	0x40020088
 8004844:	400200a0 	.word	0x400200a0
 8004848:	400200b8 	.word	0x400200b8
 800484c:	40020410 	.word	0x40020410
 8004850:	40020428 	.word	0x40020428
 8004854:	40020440 	.word	0x40020440
 8004858:	40020458 	.word	0x40020458
 800485c:	40020470 	.word	0x40020470
 8004860:	40020488 	.word	0x40020488
 8004864:	400204a0 	.word	0x400204a0
 8004868:	400204b8 	.word	0x400204b8
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	bf14      	ite	ne
 800487a:	2301      	movne	r3, #1
 800487c:	2300      	moveq	r3, #0
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 8087 	beq.w	8004994 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800488a:	f003 031f 	and.w	r3, r3, #31
 800488e:	2220      	movs	r2, #32
 8004890:	409a      	lsls	r2, r3
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b04      	cmp	r3, #4
 80048a0:	d139      	bne.n	8004916 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 0216 	bic.w	r2, r2, #22
 80048b0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	695a      	ldr	r2, [r3, #20]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048c0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d103      	bne.n	80048d2 <HAL_DMA_IRQHandler+0x736>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d007      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f022 0208 	bic.w	r2, r2, #8
 80048e0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e6:	f003 031f 	and.w	r3, r3, #31
 80048ea:	223f      	movs	r2, #63	; 0x3f
 80048ec:	409a      	lsls	r2, r3
 80048ee:	6a3b      	ldr	r3, [r7, #32]
 80048f0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004906:	2b00      	cmp	r3, #0
 8004908:	f000 834a 	beq.w	8004fa0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	4798      	blx	r3
          }
          return;
 8004914:	e344      	b.n	8004fa0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d018      	beq.n	8004956 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d108      	bne.n	8004944 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004936:	2b00      	cmp	r3, #0
 8004938:	d02c      	beq.n	8004994 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	4798      	blx	r3
 8004942:	e027      	b.n	8004994 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004948:	2b00      	cmp	r3, #0
 800494a:	d023      	beq.n	8004994 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	4798      	blx	r3
 8004954:	e01e      	b.n	8004994 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004960:	2b00      	cmp	r3, #0
 8004962:	d10f      	bne.n	8004984 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 0210 	bic.w	r2, r2, #16
 8004972:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004998:	2b00      	cmp	r3, #0
 800499a:	f000 8306 	beq.w	8004faa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f000 8088 	beq.w	8004abc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2204      	movs	r2, #4
 80049b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a7a      	ldr	r2, [pc, #488]	; (8004ba4 <HAL_DMA_IRQHandler+0xa08>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d04a      	beq.n	8004a54 <HAL_DMA_IRQHandler+0x8b8>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a79      	ldr	r2, [pc, #484]	; (8004ba8 <HAL_DMA_IRQHandler+0xa0c>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d045      	beq.n	8004a54 <HAL_DMA_IRQHandler+0x8b8>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a77      	ldr	r2, [pc, #476]	; (8004bac <HAL_DMA_IRQHandler+0xa10>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d040      	beq.n	8004a54 <HAL_DMA_IRQHandler+0x8b8>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a76      	ldr	r2, [pc, #472]	; (8004bb0 <HAL_DMA_IRQHandler+0xa14>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d03b      	beq.n	8004a54 <HAL_DMA_IRQHandler+0x8b8>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a74      	ldr	r2, [pc, #464]	; (8004bb4 <HAL_DMA_IRQHandler+0xa18>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d036      	beq.n	8004a54 <HAL_DMA_IRQHandler+0x8b8>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a73      	ldr	r2, [pc, #460]	; (8004bb8 <HAL_DMA_IRQHandler+0xa1c>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d031      	beq.n	8004a54 <HAL_DMA_IRQHandler+0x8b8>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a71      	ldr	r2, [pc, #452]	; (8004bbc <HAL_DMA_IRQHandler+0xa20>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d02c      	beq.n	8004a54 <HAL_DMA_IRQHandler+0x8b8>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a70      	ldr	r2, [pc, #448]	; (8004bc0 <HAL_DMA_IRQHandler+0xa24>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d027      	beq.n	8004a54 <HAL_DMA_IRQHandler+0x8b8>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a6e      	ldr	r2, [pc, #440]	; (8004bc4 <HAL_DMA_IRQHandler+0xa28>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d022      	beq.n	8004a54 <HAL_DMA_IRQHandler+0x8b8>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a6d      	ldr	r2, [pc, #436]	; (8004bc8 <HAL_DMA_IRQHandler+0xa2c>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d01d      	beq.n	8004a54 <HAL_DMA_IRQHandler+0x8b8>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a6b      	ldr	r2, [pc, #428]	; (8004bcc <HAL_DMA_IRQHandler+0xa30>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d018      	beq.n	8004a54 <HAL_DMA_IRQHandler+0x8b8>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a6a      	ldr	r2, [pc, #424]	; (8004bd0 <HAL_DMA_IRQHandler+0xa34>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d013      	beq.n	8004a54 <HAL_DMA_IRQHandler+0x8b8>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a68      	ldr	r2, [pc, #416]	; (8004bd4 <HAL_DMA_IRQHandler+0xa38>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d00e      	beq.n	8004a54 <HAL_DMA_IRQHandler+0x8b8>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a67      	ldr	r2, [pc, #412]	; (8004bd8 <HAL_DMA_IRQHandler+0xa3c>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d009      	beq.n	8004a54 <HAL_DMA_IRQHandler+0x8b8>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a65      	ldr	r2, [pc, #404]	; (8004bdc <HAL_DMA_IRQHandler+0xa40>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d004      	beq.n	8004a54 <HAL_DMA_IRQHandler+0x8b8>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a64      	ldr	r2, [pc, #400]	; (8004be0 <HAL_DMA_IRQHandler+0xa44>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d108      	bne.n	8004a66 <HAL_DMA_IRQHandler+0x8ca>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 0201 	bic.w	r2, r2, #1
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	e007      	b.n	8004a76 <HAL_DMA_IRQHandler+0x8da>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f022 0201 	bic.w	r2, r2, #1
 8004a74:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	3301      	adds	r3, #1
 8004a7a:	60fb      	str	r3, [r7, #12]
 8004a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d307      	bcc.n	8004a92 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1f2      	bne.n	8004a76 <HAL_DMA_IRQHandler+0x8da>
 8004a90:	e000      	b.n	8004a94 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004a92:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d004      	beq.n	8004aac <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2203      	movs	r2, #3
 8004aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004aaa:	e003      	b.n	8004ab4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 8272 	beq.w	8004faa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	4798      	blx	r3
 8004ace:	e26c      	b.n	8004faa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a43      	ldr	r2, [pc, #268]	; (8004be4 <HAL_DMA_IRQHandler+0xa48>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d022      	beq.n	8004b20 <HAL_DMA_IRQHandler+0x984>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a42      	ldr	r2, [pc, #264]	; (8004be8 <HAL_DMA_IRQHandler+0xa4c>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d01d      	beq.n	8004b20 <HAL_DMA_IRQHandler+0x984>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a40      	ldr	r2, [pc, #256]	; (8004bec <HAL_DMA_IRQHandler+0xa50>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d018      	beq.n	8004b20 <HAL_DMA_IRQHandler+0x984>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a3f      	ldr	r2, [pc, #252]	; (8004bf0 <HAL_DMA_IRQHandler+0xa54>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d013      	beq.n	8004b20 <HAL_DMA_IRQHandler+0x984>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a3d      	ldr	r2, [pc, #244]	; (8004bf4 <HAL_DMA_IRQHandler+0xa58>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d00e      	beq.n	8004b20 <HAL_DMA_IRQHandler+0x984>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a3c      	ldr	r2, [pc, #240]	; (8004bf8 <HAL_DMA_IRQHandler+0xa5c>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d009      	beq.n	8004b20 <HAL_DMA_IRQHandler+0x984>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a3a      	ldr	r2, [pc, #232]	; (8004bfc <HAL_DMA_IRQHandler+0xa60>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d004      	beq.n	8004b20 <HAL_DMA_IRQHandler+0x984>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a39      	ldr	r2, [pc, #228]	; (8004c00 <HAL_DMA_IRQHandler+0xa64>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d101      	bne.n	8004b24 <HAL_DMA_IRQHandler+0x988>
 8004b20:	2301      	movs	r3, #1
 8004b22:	e000      	b.n	8004b26 <HAL_DMA_IRQHandler+0x98a>
 8004b24:	2300      	movs	r3, #0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 823f 	beq.w	8004faa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b38:	f003 031f 	and.w	r3, r3, #31
 8004b3c:	2204      	movs	r2, #4
 8004b3e:	409a      	lsls	r2, r3
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	4013      	ands	r3, r2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 80cd 	beq.w	8004ce4 <HAL_DMA_IRQHandler+0xb48>
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f003 0304 	and.w	r3, r3, #4
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f000 80c7 	beq.w	8004ce4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b5a:	f003 031f 	and.w	r3, r3, #31
 8004b5e:	2204      	movs	r2, #4
 8004b60:	409a      	lsls	r2, r3
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d049      	beq.n	8004c04 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d109      	bne.n	8004b8e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 8210 	beq.w	8004fa4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b8c:	e20a      	b.n	8004fa4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f000 8206 	beq.w	8004fa4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ba0:	e200      	b.n	8004fa4 <HAL_DMA_IRQHandler+0xe08>
 8004ba2:	bf00      	nop
 8004ba4:	40020010 	.word	0x40020010
 8004ba8:	40020028 	.word	0x40020028
 8004bac:	40020040 	.word	0x40020040
 8004bb0:	40020058 	.word	0x40020058
 8004bb4:	40020070 	.word	0x40020070
 8004bb8:	40020088 	.word	0x40020088
 8004bbc:	400200a0 	.word	0x400200a0
 8004bc0:	400200b8 	.word	0x400200b8
 8004bc4:	40020410 	.word	0x40020410
 8004bc8:	40020428 	.word	0x40020428
 8004bcc:	40020440 	.word	0x40020440
 8004bd0:	40020458 	.word	0x40020458
 8004bd4:	40020470 	.word	0x40020470
 8004bd8:	40020488 	.word	0x40020488
 8004bdc:	400204a0 	.word	0x400204a0
 8004be0:	400204b8 	.word	0x400204b8
 8004be4:	58025408 	.word	0x58025408
 8004be8:	5802541c 	.word	0x5802541c
 8004bec:	58025430 	.word	0x58025430
 8004bf0:	58025444 	.word	0x58025444
 8004bf4:	58025458 	.word	0x58025458
 8004bf8:	5802546c 	.word	0x5802546c
 8004bfc:	58025480 	.word	0x58025480
 8004c00:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	f003 0320 	and.w	r3, r3, #32
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d160      	bne.n	8004cd0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a7f      	ldr	r2, [pc, #508]	; (8004e10 <HAL_DMA_IRQHandler+0xc74>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d04a      	beq.n	8004cae <HAL_DMA_IRQHandler+0xb12>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a7d      	ldr	r2, [pc, #500]	; (8004e14 <HAL_DMA_IRQHandler+0xc78>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d045      	beq.n	8004cae <HAL_DMA_IRQHandler+0xb12>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a7c      	ldr	r2, [pc, #496]	; (8004e18 <HAL_DMA_IRQHandler+0xc7c>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d040      	beq.n	8004cae <HAL_DMA_IRQHandler+0xb12>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a7a      	ldr	r2, [pc, #488]	; (8004e1c <HAL_DMA_IRQHandler+0xc80>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d03b      	beq.n	8004cae <HAL_DMA_IRQHandler+0xb12>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a79      	ldr	r2, [pc, #484]	; (8004e20 <HAL_DMA_IRQHandler+0xc84>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d036      	beq.n	8004cae <HAL_DMA_IRQHandler+0xb12>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a77      	ldr	r2, [pc, #476]	; (8004e24 <HAL_DMA_IRQHandler+0xc88>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d031      	beq.n	8004cae <HAL_DMA_IRQHandler+0xb12>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a76      	ldr	r2, [pc, #472]	; (8004e28 <HAL_DMA_IRQHandler+0xc8c>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d02c      	beq.n	8004cae <HAL_DMA_IRQHandler+0xb12>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a74      	ldr	r2, [pc, #464]	; (8004e2c <HAL_DMA_IRQHandler+0xc90>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d027      	beq.n	8004cae <HAL_DMA_IRQHandler+0xb12>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a73      	ldr	r2, [pc, #460]	; (8004e30 <HAL_DMA_IRQHandler+0xc94>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d022      	beq.n	8004cae <HAL_DMA_IRQHandler+0xb12>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a71      	ldr	r2, [pc, #452]	; (8004e34 <HAL_DMA_IRQHandler+0xc98>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d01d      	beq.n	8004cae <HAL_DMA_IRQHandler+0xb12>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a70      	ldr	r2, [pc, #448]	; (8004e38 <HAL_DMA_IRQHandler+0xc9c>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d018      	beq.n	8004cae <HAL_DMA_IRQHandler+0xb12>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a6e      	ldr	r2, [pc, #440]	; (8004e3c <HAL_DMA_IRQHandler+0xca0>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d013      	beq.n	8004cae <HAL_DMA_IRQHandler+0xb12>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a6d      	ldr	r2, [pc, #436]	; (8004e40 <HAL_DMA_IRQHandler+0xca4>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d00e      	beq.n	8004cae <HAL_DMA_IRQHandler+0xb12>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a6b      	ldr	r2, [pc, #428]	; (8004e44 <HAL_DMA_IRQHandler+0xca8>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d009      	beq.n	8004cae <HAL_DMA_IRQHandler+0xb12>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a6a      	ldr	r2, [pc, #424]	; (8004e48 <HAL_DMA_IRQHandler+0xcac>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d004      	beq.n	8004cae <HAL_DMA_IRQHandler+0xb12>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a68      	ldr	r2, [pc, #416]	; (8004e4c <HAL_DMA_IRQHandler+0xcb0>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d108      	bne.n	8004cc0 <HAL_DMA_IRQHandler+0xb24>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f022 0208 	bic.w	r2, r2, #8
 8004cbc:	601a      	str	r2, [r3, #0]
 8004cbe:	e007      	b.n	8004cd0 <HAL_DMA_IRQHandler+0xb34>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 0204 	bic.w	r2, r2, #4
 8004cce:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 8165 	beq.w	8004fa4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ce2:	e15f      	b.n	8004fa4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce8:	f003 031f 	and.w	r3, r3, #31
 8004cec:	2202      	movs	r2, #2
 8004cee:	409a      	lsls	r2, r3
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f000 80c5 	beq.w	8004e84 <HAL_DMA_IRQHandler+0xce8>
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 80bf 	beq.w	8004e84 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d0a:	f003 031f 	and.w	r3, r3, #31
 8004d0e:	2202      	movs	r2, #2
 8004d10:	409a      	lsls	r2, r3
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d018      	beq.n	8004d52 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d109      	bne.n	8004d3e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 813a 	beq.w	8004fa8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d3c:	e134      	b.n	8004fa8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f000 8130 	beq.w	8004fa8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d50:	e12a      	b.n	8004fa8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	f003 0320 	and.w	r3, r3, #32
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f040 8089 	bne.w	8004e70 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a2b      	ldr	r2, [pc, #172]	; (8004e10 <HAL_DMA_IRQHandler+0xc74>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d04a      	beq.n	8004dfe <HAL_DMA_IRQHandler+0xc62>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a29      	ldr	r2, [pc, #164]	; (8004e14 <HAL_DMA_IRQHandler+0xc78>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d045      	beq.n	8004dfe <HAL_DMA_IRQHandler+0xc62>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a28      	ldr	r2, [pc, #160]	; (8004e18 <HAL_DMA_IRQHandler+0xc7c>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d040      	beq.n	8004dfe <HAL_DMA_IRQHandler+0xc62>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a26      	ldr	r2, [pc, #152]	; (8004e1c <HAL_DMA_IRQHandler+0xc80>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d03b      	beq.n	8004dfe <HAL_DMA_IRQHandler+0xc62>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a25      	ldr	r2, [pc, #148]	; (8004e20 <HAL_DMA_IRQHandler+0xc84>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d036      	beq.n	8004dfe <HAL_DMA_IRQHandler+0xc62>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a23      	ldr	r2, [pc, #140]	; (8004e24 <HAL_DMA_IRQHandler+0xc88>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d031      	beq.n	8004dfe <HAL_DMA_IRQHandler+0xc62>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a22      	ldr	r2, [pc, #136]	; (8004e28 <HAL_DMA_IRQHandler+0xc8c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d02c      	beq.n	8004dfe <HAL_DMA_IRQHandler+0xc62>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a20      	ldr	r2, [pc, #128]	; (8004e2c <HAL_DMA_IRQHandler+0xc90>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d027      	beq.n	8004dfe <HAL_DMA_IRQHandler+0xc62>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a1f      	ldr	r2, [pc, #124]	; (8004e30 <HAL_DMA_IRQHandler+0xc94>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d022      	beq.n	8004dfe <HAL_DMA_IRQHandler+0xc62>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a1d      	ldr	r2, [pc, #116]	; (8004e34 <HAL_DMA_IRQHandler+0xc98>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d01d      	beq.n	8004dfe <HAL_DMA_IRQHandler+0xc62>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a1c      	ldr	r2, [pc, #112]	; (8004e38 <HAL_DMA_IRQHandler+0xc9c>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d018      	beq.n	8004dfe <HAL_DMA_IRQHandler+0xc62>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a1a      	ldr	r2, [pc, #104]	; (8004e3c <HAL_DMA_IRQHandler+0xca0>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d013      	beq.n	8004dfe <HAL_DMA_IRQHandler+0xc62>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a19      	ldr	r2, [pc, #100]	; (8004e40 <HAL_DMA_IRQHandler+0xca4>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d00e      	beq.n	8004dfe <HAL_DMA_IRQHandler+0xc62>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a17      	ldr	r2, [pc, #92]	; (8004e44 <HAL_DMA_IRQHandler+0xca8>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d009      	beq.n	8004dfe <HAL_DMA_IRQHandler+0xc62>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a16      	ldr	r2, [pc, #88]	; (8004e48 <HAL_DMA_IRQHandler+0xcac>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d004      	beq.n	8004dfe <HAL_DMA_IRQHandler+0xc62>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a14      	ldr	r2, [pc, #80]	; (8004e4c <HAL_DMA_IRQHandler+0xcb0>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d128      	bne.n	8004e50 <HAL_DMA_IRQHandler+0xcb4>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 0214 	bic.w	r2, r2, #20
 8004e0c:	601a      	str	r2, [r3, #0]
 8004e0e:	e027      	b.n	8004e60 <HAL_DMA_IRQHandler+0xcc4>
 8004e10:	40020010 	.word	0x40020010
 8004e14:	40020028 	.word	0x40020028
 8004e18:	40020040 	.word	0x40020040
 8004e1c:	40020058 	.word	0x40020058
 8004e20:	40020070 	.word	0x40020070
 8004e24:	40020088 	.word	0x40020088
 8004e28:	400200a0 	.word	0x400200a0
 8004e2c:	400200b8 	.word	0x400200b8
 8004e30:	40020410 	.word	0x40020410
 8004e34:	40020428 	.word	0x40020428
 8004e38:	40020440 	.word	0x40020440
 8004e3c:	40020458 	.word	0x40020458
 8004e40:	40020470 	.word	0x40020470
 8004e44:	40020488 	.word	0x40020488
 8004e48:	400204a0 	.word	0x400204a0
 8004e4c:	400204b8 	.word	0x400204b8
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 020a 	bic.w	r2, r2, #10
 8004e5e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f000 8097 	beq.w	8004fa8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e82:	e091      	b.n	8004fa8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e88:	f003 031f 	and.w	r3, r3, #31
 8004e8c:	2208      	movs	r2, #8
 8004e8e:	409a      	lsls	r2, r3
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	4013      	ands	r3, r2
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f000 8088 	beq.w	8004faa <HAL_DMA_IRQHandler+0xe0e>
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	f003 0308 	and.w	r3, r3, #8
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 8082 	beq.w	8004faa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a41      	ldr	r2, [pc, #260]	; (8004fb0 <HAL_DMA_IRQHandler+0xe14>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d04a      	beq.n	8004f46 <HAL_DMA_IRQHandler+0xdaa>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a3f      	ldr	r2, [pc, #252]	; (8004fb4 <HAL_DMA_IRQHandler+0xe18>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d045      	beq.n	8004f46 <HAL_DMA_IRQHandler+0xdaa>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a3e      	ldr	r2, [pc, #248]	; (8004fb8 <HAL_DMA_IRQHandler+0xe1c>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d040      	beq.n	8004f46 <HAL_DMA_IRQHandler+0xdaa>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a3c      	ldr	r2, [pc, #240]	; (8004fbc <HAL_DMA_IRQHandler+0xe20>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d03b      	beq.n	8004f46 <HAL_DMA_IRQHandler+0xdaa>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a3b      	ldr	r2, [pc, #236]	; (8004fc0 <HAL_DMA_IRQHandler+0xe24>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d036      	beq.n	8004f46 <HAL_DMA_IRQHandler+0xdaa>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a39      	ldr	r2, [pc, #228]	; (8004fc4 <HAL_DMA_IRQHandler+0xe28>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d031      	beq.n	8004f46 <HAL_DMA_IRQHandler+0xdaa>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a38      	ldr	r2, [pc, #224]	; (8004fc8 <HAL_DMA_IRQHandler+0xe2c>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d02c      	beq.n	8004f46 <HAL_DMA_IRQHandler+0xdaa>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a36      	ldr	r2, [pc, #216]	; (8004fcc <HAL_DMA_IRQHandler+0xe30>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d027      	beq.n	8004f46 <HAL_DMA_IRQHandler+0xdaa>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a35      	ldr	r2, [pc, #212]	; (8004fd0 <HAL_DMA_IRQHandler+0xe34>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d022      	beq.n	8004f46 <HAL_DMA_IRQHandler+0xdaa>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a33      	ldr	r2, [pc, #204]	; (8004fd4 <HAL_DMA_IRQHandler+0xe38>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d01d      	beq.n	8004f46 <HAL_DMA_IRQHandler+0xdaa>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a32      	ldr	r2, [pc, #200]	; (8004fd8 <HAL_DMA_IRQHandler+0xe3c>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d018      	beq.n	8004f46 <HAL_DMA_IRQHandler+0xdaa>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a30      	ldr	r2, [pc, #192]	; (8004fdc <HAL_DMA_IRQHandler+0xe40>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d013      	beq.n	8004f46 <HAL_DMA_IRQHandler+0xdaa>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a2f      	ldr	r2, [pc, #188]	; (8004fe0 <HAL_DMA_IRQHandler+0xe44>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d00e      	beq.n	8004f46 <HAL_DMA_IRQHandler+0xdaa>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a2d      	ldr	r2, [pc, #180]	; (8004fe4 <HAL_DMA_IRQHandler+0xe48>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d009      	beq.n	8004f46 <HAL_DMA_IRQHandler+0xdaa>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a2c      	ldr	r2, [pc, #176]	; (8004fe8 <HAL_DMA_IRQHandler+0xe4c>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d004      	beq.n	8004f46 <HAL_DMA_IRQHandler+0xdaa>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a2a      	ldr	r2, [pc, #168]	; (8004fec <HAL_DMA_IRQHandler+0xe50>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d108      	bne.n	8004f58 <HAL_DMA_IRQHandler+0xdbc>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f022 021c 	bic.w	r2, r2, #28
 8004f54:	601a      	str	r2, [r3, #0]
 8004f56:	e007      	b.n	8004f68 <HAL_DMA_IRQHandler+0xdcc>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f022 020e 	bic.w	r2, r2, #14
 8004f66:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f6c:	f003 031f 	and.w	r3, r3, #31
 8004f70:	2201      	movs	r2, #1
 8004f72:	409a      	lsls	r2, r3
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d009      	beq.n	8004faa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	4798      	blx	r3
 8004f9e:	e004      	b.n	8004faa <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004fa0:	bf00      	nop
 8004fa2:	e002      	b.n	8004faa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fa4:	bf00      	nop
 8004fa6:	e000      	b.n	8004faa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fa8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004faa:	3728      	adds	r7, #40	; 0x28
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	40020010 	.word	0x40020010
 8004fb4:	40020028 	.word	0x40020028
 8004fb8:	40020040 	.word	0x40020040
 8004fbc:	40020058 	.word	0x40020058
 8004fc0:	40020070 	.word	0x40020070
 8004fc4:	40020088 	.word	0x40020088
 8004fc8:	400200a0 	.word	0x400200a0
 8004fcc:	400200b8 	.word	0x400200b8
 8004fd0:	40020410 	.word	0x40020410
 8004fd4:	40020428 	.word	0x40020428
 8004fd8:	40020440 	.word	0x40020440
 8004fdc:	40020458 	.word	0x40020458
 8004fe0:	40020470 	.word	0x40020470
 8004fe4:	40020488 	.word	0x40020488
 8004fe8:	400204a0 	.word	0x400204a0
 8004fec:	400204b8 	.word	0x400204b8

08004ff0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
 8004ffc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005002:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005008:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a7f      	ldr	r2, [pc, #508]	; (800520c <DMA_SetConfig+0x21c>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d072      	beq.n	80050fa <DMA_SetConfig+0x10a>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a7d      	ldr	r2, [pc, #500]	; (8005210 <DMA_SetConfig+0x220>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d06d      	beq.n	80050fa <DMA_SetConfig+0x10a>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a7c      	ldr	r2, [pc, #496]	; (8005214 <DMA_SetConfig+0x224>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d068      	beq.n	80050fa <DMA_SetConfig+0x10a>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a7a      	ldr	r2, [pc, #488]	; (8005218 <DMA_SetConfig+0x228>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d063      	beq.n	80050fa <DMA_SetConfig+0x10a>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a79      	ldr	r2, [pc, #484]	; (800521c <DMA_SetConfig+0x22c>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d05e      	beq.n	80050fa <DMA_SetConfig+0x10a>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a77      	ldr	r2, [pc, #476]	; (8005220 <DMA_SetConfig+0x230>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d059      	beq.n	80050fa <DMA_SetConfig+0x10a>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a76      	ldr	r2, [pc, #472]	; (8005224 <DMA_SetConfig+0x234>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d054      	beq.n	80050fa <DMA_SetConfig+0x10a>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a74      	ldr	r2, [pc, #464]	; (8005228 <DMA_SetConfig+0x238>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d04f      	beq.n	80050fa <DMA_SetConfig+0x10a>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a73      	ldr	r2, [pc, #460]	; (800522c <DMA_SetConfig+0x23c>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d04a      	beq.n	80050fa <DMA_SetConfig+0x10a>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a71      	ldr	r2, [pc, #452]	; (8005230 <DMA_SetConfig+0x240>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d045      	beq.n	80050fa <DMA_SetConfig+0x10a>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a70      	ldr	r2, [pc, #448]	; (8005234 <DMA_SetConfig+0x244>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d040      	beq.n	80050fa <DMA_SetConfig+0x10a>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a6e      	ldr	r2, [pc, #440]	; (8005238 <DMA_SetConfig+0x248>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d03b      	beq.n	80050fa <DMA_SetConfig+0x10a>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a6d      	ldr	r2, [pc, #436]	; (800523c <DMA_SetConfig+0x24c>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d036      	beq.n	80050fa <DMA_SetConfig+0x10a>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a6b      	ldr	r2, [pc, #428]	; (8005240 <DMA_SetConfig+0x250>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d031      	beq.n	80050fa <DMA_SetConfig+0x10a>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a6a      	ldr	r2, [pc, #424]	; (8005244 <DMA_SetConfig+0x254>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d02c      	beq.n	80050fa <DMA_SetConfig+0x10a>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a68      	ldr	r2, [pc, #416]	; (8005248 <DMA_SetConfig+0x258>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d027      	beq.n	80050fa <DMA_SetConfig+0x10a>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a67      	ldr	r2, [pc, #412]	; (800524c <DMA_SetConfig+0x25c>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d022      	beq.n	80050fa <DMA_SetConfig+0x10a>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a65      	ldr	r2, [pc, #404]	; (8005250 <DMA_SetConfig+0x260>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d01d      	beq.n	80050fa <DMA_SetConfig+0x10a>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a64      	ldr	r2, [pc, #400]	; (8005254 <DMA_SetConfig+0x264>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d018      	beq.n	80050fa <DMA_SetConfig+0x10a>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a62      	ldr	r2, [pc, #392]	; (8005258 <DMA_SetConfig+0x268>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d013      	beq.n	80050fa <DMA_SetConfig+0x10a>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a61      	ldr	r2, [pc, #388]	; (800525c <DMA_SetConfig+0x26c>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d00e      	beq.n	80050fa <DMA_SetConfig+0x10a>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a5f      	ldr	r2, [pc, #380]	; (8005260 <DMA_SetConfig+0x270>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d009      	beq.n	80050fa <DMA_SetConfig+0x10a>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a5e      	ldr	r2, [pc, #376]	; (8005264 <DMA_SetConfig+0x274>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d004      	beq.n	80050fa <DMA_SetConfig+0x10a>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a5c      	ldr	r2, [pc, #368]	; (8005268 <DMA_SetConfig+0x278>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d101      	bne.n	80050fe <DMA_SetConfig+0x10e>
 80050fa:	2301      	movs	r3, #1
 80050fc:	e000      	b.n	8005100 <DMA_SetConfig+0x110>
 80050fe:	2300      	movs	r3, #0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00d      	beq.n	8005120 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800510c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005112:	2b00      	cmp	r3, #0
 8005114:	d004      	beq.n	8005120 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800511e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a39      	ldr	r2, [pc, #228]	; (800520c <DMA_SetConfig+0x21c>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d04a      	beq.n	80051c0 <DMA_SetConfig+0x1d0>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a38      	ldr	r2, [pc, #224]	; (8005210 <DMA_SetConfig+0x220>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d045      	beq.n	80051c0 <DMA_SetConfig+0x1d0>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a36      	ldr	r2, [pc, #216]	; (8005214 <DMA_SetConfig+0x224>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d040      	beq.n	80051c0 <DMA_SetConfig+0x1d0>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a35      	ldr	r2, [pc, #212]	; (8005218 <DMA_SetConfig+0x228>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d03b      	beq.n	80051c0 <DMA_SetConfig+0x1d0>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a33      	ldr	r2, [pc, #204]	; (800521c <DMA_SetConfig+0x22c>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d036      	beq.n	80051c0 <DMA_SetConfig+0x1d0>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a32      	ldr	r2, [pc, #200]	; (8005220 <DMA_SetConfig+0x230>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d031      	beq.n	80051c0 <DMA_SetConfig+0x1d0>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a30      	ldr	r2, [pc, #192]	; (8005224 <DMA_SetConfig+0x234>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d02c      	beq.n	80051c0 <DMA_SetConfig+0x1d0>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a2f      	ldr	r2, [pc, #188]	; (8005228 <DMA_SetConfig+0x238>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d027      	beq.n	80051c0 <DMA_SetConfig+0x1d0>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a2d      	ldr	r2, [pc, #180]	; (800522c <DMA_SetConfig+0x23c>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d022      	beq.n	80051c0 <DMA_SetConfig+0x1d0>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a2c      	ldr	r2, [pc, #176]	; (8005230 <DMA_SetConfig+0x240>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d01d      	beq.n	80051c0 <DMA_SetConfig+0x1d0>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a2a      	ldr	r2, [pc, #168]	; (8005234 <DMA_SetConfig+0x244>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d018      	beq.n	80051c0 <DMA_SetConfig+0x1d0>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a29      	ldr	r2, [pc, #164]	; (8005238 <DMA_SetConfig+0x248>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d013      	beq.n	80051c0 <DMA_SetConfig+0x1d0>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a27      	ldr	r2, [pc, #156]	; (800523c <DMA_SetConfig+0x24c>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d00e      	beq.n	80051c0 <DMA_SetConfig+0x1d0>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a26      	ldr	r2, [pc, #152]	; (8005240 <DMA_SetConfig+0x250>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d009      	beq.n	80051c0 <DMA_SetConfig+0x1d0>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a24      	ldr	r2, [pc, #144]	; (8005244 <DMA_SetConfig+0x254>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d004      	beq.n	80051c0 <DMA_SetConfig+0x1d0>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a23      	ldr	r2, [pc, #140]	; (8005248 <DMA_SetConfig+0x258>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d101      	bne.n	80051c4 <DMA_SetConfig+0x1d4>
 80051c0:	2301      	movs	r3, #1
 80051c2:	e000      	b.n	80051c6 <DMA_SetConfig+0x1d6>
 80051c4:	2300      	movs	r3, #0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d059      	beq.n	800527e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ce:	f003 031f 	and.w	r3, r3, #31
 80051d2:	223f      	movs	r2, #63	; 0x3f
 80051d4:	409a      	lsls	r2, r3
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80051e8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	2b40      	cmp	r3, #64	; 0x40
 80051f8:	d138      	bne.n	800526c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800520a:	e086      	b.n	800531a <DMA_SetConfig+0x32a>
 800520c:	40020010 	.word	0x40020010
 8005210:	40020028 	.word	0x40020028
 8005214:	40020040 	.word	0x40020040
 8005218:	40020058 	.word	0x40020058
 800521c:	40020070 	.word	0x40020070
 8005220:	40020088 	.word	0x40020088
 8005224:	400200a0 	.word	0x400200a0
 8005228:	400200b8 	.word	0x400200b8
 800522c:	40020410 	.word	0x40020410
 8005230:	40020428 	.word	0x40020428
 8005234:	40020440 	.word	0x40020440
 8005238:	40020458 	.word	0x40020458
 800523c:	40020470 	.word	0x40020470
 8005240:	40020488 	.word	0x40020488
 8005244:	400204a0 	.word	0x400204a0
 8005248:	400204b8 	.word	0x400204b8
 800524c:	58025408 	.word	0x58025408
 8005250:	5802541c 	.word	0x5802541c
 8005254:	58025430 	.word	0x58025430
 8005258:	58025444 	.word	0x58025444
 800525c:	58025458 	.word	0x58025458
 8005260:	5802546c 	.word	0x5802546c
 8005264:	58025480 	.word	0x58025480
 8005268:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	60da      	str	r2, [r3, #12]
}
 800527c:	e04d      	b.n	800531a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a29      	ldr	r2, [pc, #164]	; (8005328 <DMA_SetConfig+0x338>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d022      	beq.n	80052ce <DMA_SetConfig+0x2de>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a27      	ldr	r2, [pc, #156]	; (800532c <DMA_SetConfig+0x33c>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d01d      	beq.n	80052ce <DMA_SetConfig+0x2de>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a26      	ldr	r2, [pc, #152]	; (8005330 <DMA_SetConfig+0x340>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d018      	beq.n	80052ce <DMA_SetConfig+0x2de>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a24      	ldr	r2, [pc, #144]	; (8005334 <DMA_SetConfig+0x344>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d013      	beq.n	80052ce <DMA_SetConfig+0x2de>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a23      	ldr	r2, [pc, #140]	; (8005338 <DMA_SetConfig+0x348>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d00e      	beq.n	80052ce <DMA_SetConfig+0x2de>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a21      	ldr	r2, [pc, #132]	; (800533c <DMA_SetConfig+0x34c>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d009      	beq.n	80052ce <DMA_SetConfig+0x2de>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a20      	ldr	r2, [pc, #128]	; (8005340 <DMA_SetConfig+0x350>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d004      	beq.n	80052ce <DMA_SetConfig+0x2de>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a1e      	ldr	r2, [pc, #120]	; (8005344 <DMA_SetConfig+0x354>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d101      	bne.n	80052d2 <DMA_SetConfig+0x2e2>
 80052ce:	2301      	movs	r3, #1
 80052d0:	e000      	b.n	80052d4 <DMA_SetConfig+0x2e4>
 80052d2:	2300      	movs	r3, #0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d020      	beq.n	800531a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052dc:	f003 031f 	and.w	r3, r3, #31
 80052e0:	2201      	movs	r2, #1
 80052e2:	409a      	lsls	r2, r3
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	683a      	ldr	r2, [r7, #0]
 80052ee:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	2b40      	cmp	r3, #64	; 0x40
 80052f6:	d108      	bne.n	800530a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	60da      	str	r2, [r3, #12]
}
 8005308:	e007      	b.n	800531a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	60da      	str	r2, [r3, #12]
}
 800531a:	bf00      	nop
 800531c:	371c      	adds	r7, #28
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	58025408 	.word	0x58025408
 800532c:	5802541c 	.word	0x5802541c
 8005330:	58025430 	.word	0x58025430
 8005334:	58025444 	.word	0x58025444
 8005338:	58025458 	.word	0x58025458
 800533c:	5802546c 	.word	0x5802546c
 8005340:	58025480 	.word	0x58025480
 8005344:	58025494 	.word	0x58025494

08005348 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a42      	ldr	r2, [pc, #264]	; (8005460 <DMA_CalcBaseAndBitshift+0x118>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d04a      	beq.n	80053f0 <DMA_CalcBaseAndBitshift+0xa8>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a41      	ldr	r2, [pc, #260]	; (8005464 <DMA_CalcBaseAndBitshift+0x11c>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d045      	beq.n	80053f0 <DMA_CalcBaseAndBitshift+0xa8>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a3f      	ldr	r2, [pc, #252]	; (8005468 <DMA_CalcBaseAndBitshift+0x120>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d040      	beq.n	80053f0 <DMA_CalcBaseAndBitshift+0xa8>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a3e      	ldr	r2, [pc, #248]	; (800546c <DMA_CalcBaseAndBitshift+0x124>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d03b      	beq.n	80053f0 <DMA_CalcBaseAndBitshift+0xa8>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a3c      	ldr	r2, [pc, #240]	; (8005470 <DMA_CalcBaseAndBitshift+0x128>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d036      	beq.n	80053f0 <DMA_CalcBaseAndBitshift+0xa8>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a3b      	ldr	r2, [pc, #236]	; (8005474 <DMA_CalcBaseAndBitshift+0x12c>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d031      	beq.n	80053f0 <DMA_CalcBaseAndBitshift+0xa8>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a39      	ldr	r2, [pc, #228]	; (8005478 <DMA_CalcBaseAndBitshift+0x130>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d02c      	beq.n	80053f0 <DMA_CalcBaseAndBitshift+0xa8>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a38      	ldr	r2, [pc, #224]	; (800547c <DMA_CalcBaseAndBitshift+0x134>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d027      	beq.n	80053f0 <DMA_CalcBaseAndBitshift+0xa8>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a36      	ldr	r2, [pc, #216]	; (8005480 <DMA_CalcBaseAndBitshift+0x138>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d022      	beq.n	80053f0 <DMA_CalcBaseAndBitshift+0xa8>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a35      	ldr	r2, [pc, #212]	; (8005484 <DMA_CalcBaseAndBitshift+0x13c>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d01d      	beq.n	80053f0 <DMA_CalcBaseAndBitshift+0xa8>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a33      	ldr	r2, [pc, #204]	; (8005488 <DMA_CalcBaseAndBitshift+0x140>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d018      	beq.n	80053f0 <DMA_CalcBaseAndBitshift+0xa8>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a32      	ldr	r2, [pc, #200]	; (800548c <DMA_CalcBaseAndBitshift+0x144>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d013      	beq.n	80053f0 <DMA_CalcBaseAndBitshift+0xa8>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a30      	ldr	r2, [pc, #192]	; (8005490 <DMA_CalcBaseAndBitshift+0x148>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d00e      	beq.n	80053f0 <DMA_CalcBaseAndBitshift+0xa8>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a2f      	ldr	r2, [pc, #188]	; (8005494 <DMA_CalcBaseAndBitshift+0x14c>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d009      	beq.n	80053f0 <DMA_CalcBaseAndBitshift+0xa8>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a2d      	ldr	r2, [pc, #180]	; (8005498 <DMA_CalcBaseAndBitshift+0x150>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d004      	beq.n	80053f0 <DMA_CalcBaseAndBitshift+0xa8>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a2c      	ldr	r2, [pc, #176]	; (800549c <DMA_CalcBaseAndBitshift+0x154>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d101      	bne.n	80053f4 <DMA_CalcBaseAndBitshift+0xac>
 80053f0:	2301      	movs	r3, #1
 80053f2:	e000      	b.n	80053f6 <DMA_CalcBaseAndBitshift+0xae>
 80053f4:	2300      	movs	r3, #0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d024      	beq.n	8005444 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	3b10      	subs	r3, #16
 8005402:	4a27      	ldr	r2, [pc, #156]	; (80054a0 <DMA_CalcBaseAndBitshift+0x158>)
 8005404:	fba2 2303 	umull	r2, r3, r2, r3
 8005408:	091b      	lsrs	r3, r3, #4
 800540a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f003 0307 	and.w	r3, r3, #7
 8005412:	4a24      	ldr	r2, [pc, #144]	; (80054a4 <DMA_CalcBaseAndBitshift+0x15c>)
 8005414:	5cd3      	ldrb	r3, [r2, r3]
 8005416:	461a      	mov	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2b03      	cmp	r3, #3
 8005420:	d908      	bls.n	8005434 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	461a      	mov	r2, r3
 8005428:	4b1f      	ldr	r3, [pc, #124]	; (80054a8 <DMA_CalcBaseAndBitshift+0x160>)
 800542a:	4013      	ands	r3, r2
 800542c:	1d1a      	adds	r2, r3, #4
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	659a      	str	r2, [r3, #88]	; 0x58
 8005432:	e00d      	b.n	8005450 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	461a      	mov	r2, r3
 800543a:	4b1b      	ldr	r3, [pc, #108]	; (80054a8 <DMA_CalcBaseAndBitshift+0x160>)
 800543c:	4013      	ands	r3, r2
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	6593      	str	r3, [r2, #88]	; 0x58
 8005442:	e005      	b.n	8005450 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005454:	4618      	mov	r0, r3
 8005456:	3714      	adds	r7, #20
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr
 8005460:	40020010 	.word	0x40020010
 8005464:	40020028 	.word	0x40020028
 8005468:	40020040 	.word	0x40020040
 800546c:	40020058 	.word	0x40020058
 8005470:	40020070 	.word	0x40020070
 8005474:	40020088 	.word	0x40020088
 8005478:	400200a0 	.word	0x400200a0
 800547c:	400200b8 	.word	0x400200b8
 8005480:	40020410 	.word	0x40020410
 8005484:	40020428 	.word	0x40020428
 8005488:	40020440 	.word	0x40020440
 800548c:	40020458 	.word	0x40020458
 8005490:	40020470 	.word	0x40020470
 8005494:	40020488 	.word	0x40020488
 8005498:	400204a0 	.word	0x400204a0
 800549c:	400204b8 	.word	0x400204b8
 80054a0:	aaaaaaab 	.word	0xaaaaaaab
 80054a4:	0800ee78 	.word	0x0800ee78
 80054a8:	fffffc00 	.word	0xfffffc00

080054ac <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054b4:	2300      	movs	r3, #0
 80054b6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d120      	bne.n	8005502 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c4:	2b03      	cmp	r3, #3
 80054c6:	d858      	bhi.n	800557a <DMA_CheckFifoParam+0xce>
 80054c8:	a201      	add	r2, pc, #4	; (adr r2, 80054d0 <DMA_CheckFifoParam+0x24>)
 80054ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ce:	bf00      	nop
 80054d0:	080054e1 	.word	0x080054e1
 80054d4:	080054f3 	.word	0x080054f3
 80054d8:	080054e1 	.word	0x080054e1
 80054dc:	0800557b 	.word	0x0800557b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d048      	beq.n	800557e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80054f0:	e045      	b.n	800557e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80054fa:	d142      	bne.n	8005582 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005500:	e03f      	b.n	8005582 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800550a:	d123      	bne.n	8005554 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005510:	2b03      	cmp	r3, #3
 8005512:	d838      	bhi.n	8005586 <DMA_CheckFifoParam+0xda>
 8005514:	a201      	add	r2, pc, #4	; (adr r2, 800551c <DMA_CheckFifoParam+0x70>)
 8005516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551a:	bf00      	nop
 800551c:	0800552d 	.word	0x0800552d
 8005520:	08005533 	.word	0x08005533
 8005524:	0800552d 	.word	0x0800552d
 8005528:	08005545 	.word	0x08005545
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	73fb      	strb	r3, [r7, #15]
        break;
 8005530:	e030      	b.n	8005594 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005536:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d025      	beq.n	800558a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005542:	e022      	b.n	800558a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005548:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800554c:	d11f      	bne.n	800558e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005552:	e01c      	b.n	800558e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005558:	2b02      	cmp	r3, #2
 800555a:	d902      	bls.n	8005562 <DMA_CheckFifoParam+0xb6>
 800555c:	2b03      	cmp	r3, #3
 800555e:	d003      	beq.n	8005568 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005560:	e018      	b.n	8005594 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	73fb      	strb	r3, [r7, #15]
        break;
 8005566:	e015      	b.n	8005594 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d00e      	beq.n	8005592 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	73fb      	strb	r3, [r7, #15]
    break;
 8005578:	e00b      	b.n	8005592 <DMA_CheckFifoParam+0xe6>
        break;
 800557a:	bf00      	nop
 800557c:	e00a      	b.n	8005594 <DMA_CheckFifoParam+0xe8>
        break;
 800557e:	bf00      	nop
 8005580:	e008      	b.n	8005594 <DMA_CheckFifoParam+0xe8>
        break;
 8005582:	bf00      	nop
 8005584:	e006      	b.n	8005594 <DMA_CheckFifoParam+0xe8>
        break;
 8005586:	bf00      	nop
 8005588:	e004      	b.n	8005594 <DMA_CheckFifoParam+0xe8>
        break;
 800558a:	bf00      	nop
 800558c:	e002      	b.n	8005594 <DMA_CheckFifoParam+0xe8>
        break;
 800558e:	bf00      	nop
 8005590:	e000      	b.n	8005594 <DMA_CheckFifoParam+0xe8>
    break;
 8005592:	bf00      	nop
    }
  }

  return status;
 8005594:	7bfb      	ldrb	r3, [r7, #15]
}
 8005596:	4618      	mov	r0, r3
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop

080055a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a38      	ldr	r2, [pc, #224]	; (8005698 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d022      	beq.n	8005602 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a36      	ldr	r2, [pc, #216]	; (800569c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d01d      	beq.n	8005602 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a35      	ldr	r2, [pc, #212]	; (80056a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d018      	beq.n	8005602 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a33      	ldr	r2, [pc, #204]	; (80056a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d013      	beq.n	8005602 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a32      	ldr	r2, [pc, #200]	; (80056a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d00e      	beq.n	8005602 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a30      	ldr	r2, [pc, #192]	; (80056ac <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d009      	beq.n	8005602 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a2f      	ldr	r2, [pc, #188]	; (80056b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d004      	beq.n	8005602 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a2d      	ldr	r2, [pc, #180]	; (80056b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d101      	bne.n	8005606 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005602:	2301      	movs	r3, #1
 8005604:	e000      	b.n	8005608 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005606:	2300      	movs	r3, #0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d01a      	beq.n	8005642 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	b2db      	uxtb	r3, r3
 8005612:	3b08      	subs	r3, #8
 8005614:	4a28      	ldr	r2, [pc, #160]	; (80056b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005616:	fba2 2303 	umull	r2, r3, r2, r3
 800561a:	091b      	lsrs	r3, r3, #4
 800561c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	4b26      	ldr	r3, [pc, #152]	; (80056bc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005622:	4413      	add	r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	461a      	mov	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a24      	ldr	r2, [pc, #144]	; (80056c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005630:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f003 031f 	and.w	r3, r3, #31
 8005638:	2201      	movs	r2, #1
 800563a:	409a      	lsls	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005640:	e024      	b.n	800568c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	b2db      	uxtb	r3, r3
 8005648:	3b10      	subs	r3, #16
 800564a:	4a1e      	ldr	r2, [pc, #120]	; (80056c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800564c:	fba2 2303 	umull	r2, r3, r2, r3
 8005650:	091b      	lsrs	r3, r3, #4
 8005652:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	4a1c      	ldr	r2, [pc, #112]	; (80056c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d806      	bhi.n	800566a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	4a1b      	ldr	r2, [pc, #108]	; (80056cc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d902      	bls.n	800566a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	3308      	adds	r3, #8
 8005668:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	4b18      	ldr	r3, [pc, #96]	; (80056d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800566e:	4413      	add	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	461a      	mov	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a16      	ldr	r2, [pc, #88]	; (80056d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800567c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f003 031f 	and.w	r3, r3, #31
 8005684:	2201      	movs	r2, #1
 8005686:	409a      	lsls	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800568c:	bf00      	nop
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	58025408 	.word	0x58025408
 800569c:	5802541c 	.word	0x5802541c
 80056a0:	58025430 	.word	0x58025430
 80056a4:	58025444 	.word	0x58025444
 80056a8:	58025458 	.word	0x58025458
 80056ac:	5802546c 	.word	0x5802546c
 80056b0:	58025480 	.word	0x58025480
 80056b4:	58025494 	.word	0x58025494
 80056b8:	cccccccd 	.word	0xcccccccd
 80056bc:	16009600 	.word	0x16009600
 80056c0:	58025880 	.word	0x58025880
 80056c4:	aaaaaaab 	.word	0xaaaaaaab
 80056c8:	400204b8 	.word	0x400204b8
 80056cc:	4002040f 	.word	0x4002040f
 80056d0:	10008200 	.word	0x10008200
 80056d4:	40020880 	.word	0x40020880

080056d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d04a      	beq.n	8005784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2b08      	cmp	r3, #8
 80056f2:	d847      	bhi.n	8005784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a25      	ldr	r2, [pc, #148]	; (8005790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d022      	beq.n	8005744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a24      	ldr	r2, [pc, #144]	; (8005794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d01d      	beq.n	8005744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a22      	ldr	r2, [pc, #136]	; (8005798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d018      	beq.n	8005744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a21      	ldr	r2, [pc, #132]	; (800579c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d013      	beq.n	8005744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a1f      	ldr	r2, [pc, #124]	; (80057a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d00e      	beq.n	8005744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a1e      	ldr	r2, [pc, #120]	; (80057a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d009      	beq.n	8005744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a1c      	ldr	r2, [pc, #112]	; (80057a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d004      	beq.n	8005744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a1b      	ldr	r2, [pc, #108]	; (80057ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d101      	bne.n	8005748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005744:	2301      	movs	r3, #1
 8005746:	e000      	b.n	800574a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005748:	2300      	movs	r3, #0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00a      	beq.n	8005764 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	4b17      	ldr	r3, [pc, #92]	; (80057b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005752:	4413      	add	r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	461a      	mov	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a15      	ldr	r2, [pc, #84]	; (80057b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005760:	671a      	str	r2, [r3, #112]	; 0x70
 8005762:	e009      	b.n	8005778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	4b14      	ldr	r3, [pc, #80]	; (80057b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005768:	4413      	add	r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	461a      	mov	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a11      	ldr	r2, [pc, #68]	; (80057bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005776:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	3b01      	subs	r3, #1
 800577c:	2201      	movs	r2, #1
 800577e:	409a      	lsls	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005784:	bf00      	nop
 8005786:	3714      	adds	r7, #20
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr
 8005790:	58025408 	.word	0x58025408
 8005794:	5802541c 	.word	0x5802541c
 8005798:	58025430 	.word	0x58025430
 800579c:	58025444 	.word	0x58025444
 80057a0:	58025458 	.word	0x58025458
 80057a4:	5802546c 	.word	0x5802546c
 80057a8:	58025480 	.word	0x58025480
 80057ac:	58025494 	.word	0x58025494
 80057b0:	1600963f 	.word	0x1600963f
 80057b4:	58025940 	.word	0x58025940
 80057b8:	1000823f 	.word	0x1000823f
 80057bc:	40020940 	.word	0x40020940

080057c0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e0cf      	b.n	8005972 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d106      	bne.n	80057ea <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2223      	movs	r2, #35	; 0x23
 80057e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f7fb f851 	bl	800088c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057ea:	4b64      	ldr	r3, [pc, #400]	; (800597c <HAL_ETH_Init+0x1bc>)
 80057ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80057f0:	4a62      	ldr	r2, [pc, #392]	; (800597c <HAL_ETH_Init+0x1bc>)
 80057f2:	f043 0302 	orr.w	r3, r3, #2
 80057f6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80057fa:	4b60      	ldr	r3, [pc, #384]	; (800597c <HAL_ETH_Init+0x1bc>)
 80057fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	60bb      	str	r3, [r7, #8]
 8005806:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	7a1b      	ldrb	r3, [r3, #8]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d103      	bne.n	8005818 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005810:	2000      	movs	r0, #0
 8005812:	f7fc f939 	bl	8001a88 <HAL_SYSCFG_ETHInterfaceSelect>
 8005816:	e003      	b.n	8005820 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005818:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800581c:	f7fc f934 	bl	8001a88 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8005820:	4b57      	ldr	r3, [pc, #348]	; (8005980 <HAL_ETH_Init+0x1c0>)
 8005822:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	6812      	ldr	r2, [r2, #0]
 8005832:	f043 0301 	orr.w	r3, r3, #1
 8005836:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800583a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800583c:	f7fc f8e8 	bl	8001a10 <HAL_GetTick>
 8005840:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005842:	e011      	b.n	8005868 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8005844:	f7fc f8e4 	bl	8001a10 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005852:	d909      	bls.n	8005868 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2204      	movs	r2, #4
 8005858:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	22e0      	movs	r2, #224	; 0xe0
 8005860:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e084      	b.n	8005972 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1e4      	bne.n	8005844 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f886 	bl	800598c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005880:	f002 fdd8 	bl	8008434 <HAL_RCC_GetHCLKFreq>
 8005884:	4603      	mov	r3, r0
 8005886:	4a3f      	ldr	r2, [pc, #252]	; (8005984 <HAL_ETH_Init+0x1c4>)
 8005888:	fba2 2303 	umull	r2, r3, r2, r3
 800588c:	0c9a      	lsrs	r2, r3, #18
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	3a01      	subs	r2, #1
 8005894:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 fa71 	bl	8005d80 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058a6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80058aa:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	6812      	ldr	r2, [r2, #0]
 80058b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80058ba:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	f003 0303 	and.w	r3, r3, #3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d009      	beq.n	80058de <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	22e0      	movs	r2, #224	; 0xe0
 80058d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e049      	b.n	8005972 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058e6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80058ea:	4b27      	ldr	r3, [pc, #156]	; (8005988 <HAL_ETH_Init+0x1c8>)
 80058ec:	4013      	ands	r3, r2
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	6952      	ldr	r2, [r2, #20]
 80058f2:	0051      	lsls	r1, r2, #1
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	6812      	ldr	r2, [r2, #0]
 80058f8:	430b      	orrs	r3, r1
 80058fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80058fe:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 fad9 	bl	8005eba <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 fb1f 	bl	8005f4c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	3305      	adds	r3, #5
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	021a      	lsls	r2, r3, #8
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	3304      	adds	r3, #4
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	4619      	mov	r1, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	430a      	orrs	r2, r1
 8005928:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	3303      	adds	r3, #3
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	061a      	lsls	r2, r3, #24
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	3302      	adds	r3, #2
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	041b      	lsls	r3, r3, #16
 8005940:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	3301      	adds	r3, #1
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800594c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800595a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800595c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2210      	movs	r2, #16
 800596c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	58024400 	.word	0x58024400
 8005980:	58000400 	.word	0x58000400
 8005984:	431bde83 	.word	0x431bde83
 8005988:	ffff8001 	.word	0xffff8001

0800598c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800599c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80059a4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80059a6:	f002 fd45 	bl	8008434 <HAL_RCC_GetHCLKFreq>
 80059aa:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	4a1e      	ldr	r2, [pc, #120]	; (8005a28 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d908      	bls.n	80059c6 <HAL_ETH_SetMDIOClockRange+0x3a>
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	4a1d      	ldr	r2, [pc, #116]	; (8005a2c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d804      	bhi.n	80059c6 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80059c2:	60fb      	str	r3, [r7, #12]
 80059c4:	e027      	b.n	8005a16 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	4a18      	ldr	r2, [pc, #96]	; (8005a2c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d908      	bls.n	80059e0 <HAL_ETH_SetMDIOClockRange+0x54>
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	4a17      	ldr	r2, [pc, #92]	; (8005a30 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d204      	bcs.n	80059e0 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80059dc:	60fb      	str	r3, [r7, #12]
 80059de:	e01a      	b.n	8005a16 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	4a13      	ldr	r2, [pc, #76]	; (8005a30 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d303      	bcc.n	80059f0 <HAL_ETH_SetMDIOClockRange+0x64>
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	4a12      	ldr	r2, [pc, #72]	; (8005a34 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d911      	bls.n	8005a14 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	4a10      	ldr	r2, [pc, #64]	; (8005a34 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d908      	bls.n	8005a0a <HAL_ETH_SetMDIOClockRange+0x7e>
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	4a0f      	ldr	r2, [pc, #60]	; (8005a38 <HAL_ETH_SetMDIOClockRange+0xac>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d804      	bhi.n	8005a0a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a06:	60fb      	str	r3, [r7, #12]
 8005a08:	e005      	b.n	8005a16 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a10:	60fb      	str	r3, [r7, #12]
 8005a12:	e000      	b.n	8005a16 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005a14:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005a20:	bf00      	nop
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	01312cff 	.word	0x01312cff
 8005a2c:	02160ebf 	.word	0x02160ebf
 8005a30:	03938700 	.word	0x03938700
 8005a34:	05f5e0ff 	.word	0x05f5e0ff
 8005a38:	08f0d17f 	.word	0x08f0d17f

08005a3c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8005a4e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	791b      	ldrb	r3, [r3, #4]
 8005a54:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8005a56:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	7b1b      	ldrb	r3, [r3, #12]
 8005a5c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005a5e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	7b5b      	ldrb	r3, [r3, #13]
 8005a64:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005a66:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	7b9b      	ldrb	r3, [r3, #14]
 8005a6c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005a6e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	7bdb      	ldrb	r3, [r3, #15]
 8005a74:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005a76:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005a78:	683a      	ldr	r2, [r7, #0]
 8005a7a:	7c12      	ldrb	r2, [r2, #16]
 8005a7c:	2a00      	cmp	r2, #0
 8005a7e:	d102      	bne.n	8005a86 <ETH_SetMACConfig+0x4a>
 8005a80:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005a84:	e000      	b.n	8005a88 <ETH_SetMACConfig+0x4c>
 8005a86:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005a88:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	7c52      	ldrb	r2, [r2, #17]
 8005a8e:	2a00      	cmp	r2, #0
 8005a90:	d102      	bne.n	8005a98 <ETH_SetMACConfig+0x5c>
 8005a92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005a96:	e000      	b.n	8005a9a <ETH_SetMACConfig+0x5e>
 8005a98:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005a9a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	7c9b      	ldrb	r3, [r3, #18]
 8005aa0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005aa2:	431a      	orrs	r2, r3
               macconf->Speed |
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8005aa8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8005aae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	7f1b      	ldrb	r3, [r3, #28]
 8005ab4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8005ab6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	7f5b      	ldrb	r3, [r3, #29]
 8005abc:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005abe:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005ac0:	683a      	ldr	r2, [r7, #0]
 8005ac2:	7f92      	ldrb	r2, [r2, #30]
 8005ac4:	2a00      	cmp	r2, #0
 8005ac6:	d102      	bne.n	8005ace <ETH_SetMACConfig+0x92>
 8005ac8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005acc:	e000      	b.n	8005ad0 <ETH_SetMACConfig+0x94>
 8005ace:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005ad0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	7fdb      	ldrb	r3, [r3, #31]
 8005ad6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005ad8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005ada:	683a      	ldr	r2, [r7, #0]
 8005adc:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005ae0:	2a00      	cmp	r2, #0
 8005ae2:	d102      	bne.n	8005aea <ETH_SetMACConfig+0xae>
 8005ae4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ae8:	e000      	b.n	8005aec <ETH_SetMACConfig+0xb0>
 8005aea:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005aec:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005af2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005afa:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8005afc:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8005b02:	4313      	orrs	r3, r2
 8005b04:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	4b56      	ldr	r3, [pc, #344]	; (8005c68 <ETH_SetMACConfig+0x22c>)
 8005b0e:	4013      	ands	r3, r2
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	6812      	ldr	r2, [r2, #0]
 8005b14:	68f9      	ldr	r1, [r7, #12]
 8005b16:	430b      	orrs	r3, r1
 8005b18:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b26:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005b28:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b30:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005b32:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005b3a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005b3c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005b44:	2a00      	cmp	r2, #0
 8005b46:	d102      	bne.n	8005b4e <ETH_SetMACConfig+0x112>
 8005b48:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005b4c:	e000      	b.n	8005b50 <ETH_SetMACConfig+0x114>
 8005b4e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005b50:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005b56:	4313      	orrs	r3, r2
 8005b58:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	685a      	ldr	r2, [r3, #4]
 8005b60:	4b42      	ldr	r3, [pc, #264]	; (8005c6c <ETH_SetMACConfig+0x230>)
 8005b62:	4013      	ands	r3, r2
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	6812      	ldr	r2, [r2, #0]
 8005b68:	68f9      	ldr	r1, [r7, #12]
 8005b6a:	430b      	orrs	r3, r1
 8005b6c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b74:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68da      	ldr	r2, [r3, #12]
 8005b84:	4b3a      	ldr	r3, [pc, #232]	; (8005c70 <ETH_SetMACConfig+0x234>)
 8005b86:	4013      	ands	r3, r2
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	6812      	ldr	r2, [r2, #0]
 8005b8c:	68f9      	ldr	r1, [r7, #12]
 8005b8e:	430b      	orrs	r3, r1
 8005b90:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005b98:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005b9e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8005ba0:	683a      	ldr	r2, [r7, #0]
 8005ba2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005ba6:	2a00      	cmp	r2, #0
 8005ba8:	d101      	bne.n	8005bae <ETH_SetMACConfig+0x172>
 8005baa:	2280      	movs	r2, #128	; 0x80
 8005bac:	e000      	b.n	8005bb0 <ETH_SetMACConfig+0x174>
 8005bae:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005bb0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bb6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005bc2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	6812      	ldr	r2, [r2, #0]
 8005bcc:	68f9      	ldr	r1, [r7, #12]
 8005bce:	430b      	orrs	r3, r1
 8005bd0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005bd8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005be0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005be2:	4313      	orrs	r3, r2
 8005be4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bee:	f023 0103 	bic.w	r1, r3, #3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005c06:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	430a      	orrs	r2, r1
 8005c14:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005c1c:	683a      	ldr	r2, [r7, #0]
 8005c1e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8005c22:	2a00      	cmp	r2, #0
 8005c24:	d101      	bne.n	8005c2a <ETH_SetMACConfig+0x1ee>
 8005c26:	2240      	movs	r2, #64	; 0x40
 8005c28:	e000      	b.n	8005c2c <ETH_SetMACConfig+0x1f0>
 8005c2a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005c2c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005c34:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005c36:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005c3e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005c40:	4313      	orrs	r3, r2
 8005c42:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005c4c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	430a      	orrs	r2, r1
 8005c58:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8005c5c:	bf00      	nop
 8005c5e:	3714      	adds	r7, #20
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr
 8005c68:	00048083 	.word	0x00048083
 8005c6c:	c0f88000 	.word	0xc0f88000
 8005c70:	fffffef0 	.word	0xfffffef0

08005c74 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	4b38      	ldr	r3, [pc, #224]	; (8005d6c <ETH_SetDMAConfig+0xf8>)
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	683a      	ldr	r2, [r7, #0]
 8005c8e:	6811      	ldr	r1, [r2, #0]
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	6812      	ldr	r2, [r2, #0]
 8005c94:	430b      	orrs	r3, r1
 8005c96:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005c9a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	791b      	ldrb	r3, [r3, #4]
 8005ca0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005ca6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	7b1b      	ldrb	r3, [r3, #12]
 8005cac:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	4b2c      	ldr	r3, [pc, #176]	; (8005d70 <ETH_SetDMAConfig+0xfc>)
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	6812      	ldr	r2, [r2, #0]
 8005cc4:	68f9      	ldr	r1, [r7, #12]
 8005cc6:	430b      	orrs	r3, r1
 8005cc8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005ccc:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	7b5b      	ldrb	r3, [r3, #13]
 8005cd2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ce4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8005ce8:	4b22      	ldr	r3, [pc, #136]	; (8005d74 <ETH_SetDMAConfig+0x100>)
 8005cea:	4013      	ands	r3, r2
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	6812      	ldr	r2, [r2, #0]
 8005cf0:	68f9      	ldr	r1, [r7, #12]
 8005cf2:	430b      	orrs	r3, r1
 8005cf4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005cf8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	7d1b      	ldrb	r3, [r3, #20]
 8005d04:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005d06:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	7f5b      	ldrb	r3, [r3, #29]
 8005d0c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d1a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8005d1e:	4b16      	ldr	r3, [pc, #88]	; (8005d78 <ETH_SetDMAConfig+0x104>)
 8005d20:	4013      	ands	r3, r2
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	6812      	ldr	r2, [r2, #0]
 8005d26:	68f9      	ldr	r1, [r7, #12]
 8005d28:	430b      	orrs	r3, r1
 8005d2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005d2e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	7f1b      	ldrb	r3, [r3, #28]
 8005d36:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d48:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8005d4c:	4b0b      	ldr	r3, [pc, #44]	; (8005d7c <ETH_SetDMAConfig+0x108>)
 8005d4e:	4013      	ands	r3, r2
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	6812      	ldr	r2, [r2, #0]
 8005d54:	68f9      	ldr	r1, [r7, #12]
 8005d56:	430b      	orrs	r3, r1
 8005d58:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005d5c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8005d60:	bf00      	nop
 8005d62:	3714      	adds	r7, #20
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr
 8005d6c:	ffff87fd 	.word	0xffff87fd
 8005d70:	ffff2ffe 	.word	0xffff2ffe
 8005d74:	fffec000 	.word	0xfffec000
 8005d78:	ffc0efef 	.word	0xffc0efef
 8005d7c:	7fc0ffff 	.word	0x7fc0ffff

08005d80 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b0a4      	sub	sp, #144	; 0x90
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005d92:	2300      	movs	r3, #0
 8005d94:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005da4:	2301      	movs	r3, #1
 8005da6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005daa:	2301      	movs	r3, #1
 8005dac:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005db0:	2300      	movs	r3, #0
 8005db2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005db6:	2301      	movs	r3, #1
 8005db8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005dbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005dc0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005dd8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005ddc:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005dde:	2300      	movs	r3, #0
 8005de0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005de4:	2300      	movs	r3, #0
 8005de6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005de8:	2301      	movs	r3, #1
 8005dea:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005dee:	2300      	movs	r3, #0
 8005df0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005df4:	2300      	movs	r3, #0
 8005df6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005e02:	2300      	movs	r3, #0
 8005e04:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005e06:	2300      	movs	r3, #0
 8005e08:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005e12:	2301      	movs	r3, #1
 8005e14:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005e18:	2320      	movs	r3, #32
 8005e1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005e24:	2300      	movs	r3, #0
 8005e26:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005e2a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8005e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005e30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e34:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005e36:	2300      	movs	r3, #0
 8005e38:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005e3c:	2302      	movs	r3, #2
 8005e3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005e42:	2300      	movs	r3, #0
 8005e44:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005e54:	2301      	movs	r3, #1
 8005e56:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005e64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e68:	4619      	mov	r1, r3
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f7ff fde6 	bl	8005a3c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005e70:	2301      	movs	r3, #1
 8005e72:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005e74:	2301      	movs	r3, #1
 8005e76:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005e82:	2300      	movs	r3, #0
 8005e84:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005e86:	2300      	movs	r3, #0
 8005e88:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005e8a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005e8e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005e90:	2300      	movs	r3, #0
 8005e92:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005e94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005e98:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005ea0:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005ea4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005ea6:	f107 0308 	add.w	r3, r7, #8
 8005eaa:	4619      	mov	r1, r3
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f7ff fee1 	bl	8005c74 <ETH_SetDMAConfig>
}
 8005eb2:	bf00      	nop
 8005eb4:	3790      	adds	r7, #144	; 0x90
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005eba:	b480      	push	{r7}
 8005ebc:	b085      	sub	sp, #20
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	60fb      	str	r3, [r7, #12]
 8005ec6:	e01d      	b.n	8005f04 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	68d9      	ldr	r1, [r3, #12]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	005b      	lsls	r3, r3, #1
 8005ed2:	4413      	add	r3, r2
 8005ed4:	00db      	lsls	r3, r3, #3
 8005ed6:	440b      	add	r3, r1
 8005ed8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	2200      	movs	r2, #0
 8005ede:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005ef2:	68b9      	ldr	r1, [r7, #8]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	3206      	adds	r2, #6
 8005efa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	3301      	adds	r3, #1
 8005f02:	60fb      	str	r3, [r7, #12]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2b03      	cmp	r3, #3
 8005f08:	d9de      	bls.n	8005ec8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f18:	461a      	mov	r2, r3
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	68da      	ldr	r2, [r3, #12]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f2c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	68da      	ldr	r2, [r3, #12]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f3c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8005f40:	bf00      	nop
 8005f42:	3714      	adds	r7, #20
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005f54:	2300      	movs	r3, #0
 8005f56:	60fb      	str	r3, [r7, #12]
 8005f58:	e023      	b.n	8005fa2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6919      	ldr	r1, [r3, #16]
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	4613      	mov	r3, r2
 8005f62:	005b      	lsls	r3, r3, #1
 8005f64:	4413      	add	r3, r2
 8005f66:	00db      	lsls	r3, r3, #3
 8005f68:	440b      	add	r3, r1
 8005f6a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	2200      	movs	r2, #0
 8005f76:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	2200      	movs	r2, #0
 8005f82:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2200      	movs	r2, #0
 8005f88:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005f90:	68b9      	ldr	r1, [r7, #8]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	3212      	adds	r2, #18
 8005f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	60fb      	str	r3, [r7, #12]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2b03      	cmp	r3, #3
 8005fa6:	d9d8      	bls.n	8005f5a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fce:	461a      	mov	r2, r3
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	691a      	ldr	r2, [r3, #16]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fe2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ff6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8005ffa:	bf00      	nop
 8005ffc:	3714      	adds	r7, #20
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
	...

08006008 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006008:	b480      	push	{r7}
 800600a:	b089      	sub	sp, #36	; 0x24
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006012:	2300      	movs	r3, #0
 8006014:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006016:	4b89      	ldr	r3, [pc, #548]	; (800623c <HAL_GPIO_Init+0x234>)
 8006018:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800601a:	e194      	b.n	8006346 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	2101      	movs	r1, #1
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	fa01 f303 	lsl.w	r3, r1, r3
 8006028:	4013      	ands	r3, r2
 800602a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	2b00      	cmp	r3, #0
 8006030:	f000 8186 	beq.w	8006340 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	f003 0303 	and.w	r3, r3, #3
 800603c:	2b01      	cmp	r3, #1
 800603e:	d005      	beq.n	800604c <HAL_GPIO_Init+0x44>
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f003 0303 	and.w	r3, r3, #3
 8006048:	2b02      	cmp	r3, #2
 800604a:	d130      	bne.n	80060ae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	005b      	lsls	r3, r3, #1
 8006056:	2203      	movs	r2, #3
 8006058:	fa02 f303 	lsl.w	r3, r2, r3
 800605c:	43db      	mvns	r3, r3
 800605e:	69ba      	ldr	r2, [r7, #24]
 8006060:	4013      	ands	r3, r2
 8006062:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	68da      	ldr	r2, [r3, #12]
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	005b      	lsls	r3, r3, #1
 800606c:	fa02 f303 	lsl.w	r3, r2, r3
 8006070:	69ba      	ldr	r2, [r7, #24]
 8006072:	4313      	orrs	r3, r2
 8006074:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	69ba      	ldr	r2, [r7, #24]
 800607a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006082:	2201      	movs	r2, #1
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	fa02 f303 	lsl.w	r3, r2, r3
 800608a:	43db      	mvns	r3, r3
 800608c:	69ba      	ldr	r2, [r7, #24]
 800608e:	4013      	ands	r3, r2
 8006090:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	091b      	lsrs	r3, r3, #4
 8006098:	f003 0201 	and.w	r2, r3, #1
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	fa02 f303 	lsl.w	r3, r2, r3
 80060a2:	69ba      	ldr	r2, [r7, #24]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	69ba      	ldr	r2, [r7, #24]
 80060ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	f003 0303 	and.w	r3, r3, #3
 80060b6:	2b03      	cmp	r3, #3
 80060b8:	d017      	beq.n	80060ea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	005b      	lsls	r3, r3, #1
 80060c4:	2203      	movs	r2, #3
 80060c6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ca:	43db      	mvns	r3, r3
 80060cc:	69ba      	ldr	r2, [r7, #24]
 80060ce:	4013      	ands	r3, r2
 80060d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	689a      	ldr	r2, [r3, #8]
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	005b      	lsls	r3, r3, #1
 80060da:	fa02 f303 	lsl.w	r3, r2, r3
 80060de:	69ba      	ldr	r2, [r7, #24]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	69ba      	ldr	r2, [r7, #24]
 80060e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	f003 0303 	and.w	r3, r3, #3
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d123      	bne.n	800613e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	08da      	lsrs	r2, r3, #3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	3208      	adds	r2, #8
 80060fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006102:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	f003 0307 	and.w	r3, r3, #7
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	220f      	movs	r2, #15
 800610e:	fa02 f303 	lsl.w	r3, r2, r3
 8006112:	43db      	mvns	r3, r3
 8006114:	69ba      	ldr	r2, [r7, #24]
 8006116:	4013      	ands	r3, r2
 8006118:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	691a      	ldr	r2, [r3, #16]
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	f003 0307 	and.w	r3, r3, #7
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	fa02 f303 	lsl.w	r3, r2, r3
 800612a:	69ba      	ldr	r2, [r7, #24]
 800612c:	4313      	orrs	r3, r2
 800612e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	08da      	lsrs	r2, r3, #3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	3208      	adds	r2, #8
 8006138:	69b9      	ldr	r1, [r7, #24]
 800613a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	005b      	lsls	r3, r3, #1
 8006148:	2203      	movs	r2, #3
 800614a:	fa02 f303 	lsl.w	r3, r2, r3
 800614e:	43db      	mvns	r3, r3
 8006150:	69ba      	ldr	r2, [r7, #24]
 8006152:	4013      	ands	r3, r2
 8006154:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	f003 0203 	and.w	r2, r3, #3
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	005b      	lsls	r3, r3, #1
 8006162:	fa02 f303 	lsl.w	r3, r2, r3
 8006166:	69ba      	ldr	r2, [r7, #24]
 8006168:	4313      	orrs	r3, r2
 800616a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	69ba      	ldr	r2, [r7, #24]
 8006170:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800617a:	2b00      	cmp	r3, #0
 800617c:	f000 80e0 	beq.w	8006340 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006180:	4b2f      	ldr	r3, [pc, #188]	; (8006240 <HAL_GPIO_Init+0x238>)
 8006182:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006186:	4a2e      	ldr	r2, [pc, #184]	; (8006240 <HAL_GPIO_Init+0x238>)
 8006188:	f043 0302 	orr.w	r3, r3, #2
 800618c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006190:	4b2b      	ldr	r3, [pc, #172]	; (8006240 <HAL_GPIO_Init+0x238>)
 8006192:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006196:	f003 0302 	and.w	r3, r3, #2
 800619a:	60fb      	str	r3, [r7, #12]
 800619c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800619e:	4a29      	ldr	r2, [pc, #164]	; (8006244 <HAL_GPIO_Init+0x23c>)
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	089b      	lsrs	r3, r3, #2
 80061a4:	3302      	adds	r3, #2
 80061a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	f003 0303 	and.w	r3, r3, #3
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	220f      	movs	r2, #15
 80061b6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ba:	43db      	mvns	r3, r3
 80061bc:	69ba      	ldr	r2, [r7, #24]
 80061be:	4013      	ands	r3, r2
 80061c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a20      	ldr	r2, [pc, #128]	; (8006248 <HAL_GPIO_Init+0x240>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d052      	beq.n	8006270 <HAL_GPIO_Init+0x268>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a1f      	ldr	r2, [pc, #124]	; (800624c <HAL_GPIO_Init+0x244>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d031      	beq.n	8006236 <HAL_GPIO_Init+0x22e>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a1e      	ldr	r2, [pc, #120]	; (8006250 <HAL_GPIO_Init+0x248>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d02b      	beq.n	8006232 <HAL_GPIO_Init+0x22a>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a1d      	ldr	r2, [pc, #116]	; (8006254 <HAL_GPIO_Init+0x24c>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d025      	beq.n	800622e <HAL_GPIO_Init+0x226>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a1c      	ldr	r2, [pc, #112]	; (8006258 <HAL_GPIO_Init+0x250>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d01f      	beq.n	800622a <HAL_GPIO_Init+0x222>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a1b      	ldr	r2, [pc, #108]	; (800625c <HAL_GPIO_Init+0x254>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d019      	beq.n	8006226 <HAL_GPIO_Init+0x21e>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a1a      	ldr	r2, [pc, #104]	; (8006260 <HAL_GPIO_Init+0x258>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d013      	beq.n	8006222 <HAL_GPIO_Init+0x21a>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a19      	ldr	r2, [pc, #100]	; (8006264 <HAL_GPIO_Init+0x25c>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d00d      	beq.n	800621e <HAL_GPIO_Init+0x216>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a18      	ldr	r2, [pc, #96]	; (8006268 <HAL_GPIO_Init+0x260>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d007      	beq.n	800621a <HAL_GPIO_Init+0x212>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a17      	ldr	r2, [pc, #92]	; (800626c <HAL_GPIO_Init+0x264>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d101      	bne.n	8006216 <HAL_GPIO_Init+0x20e>
 8006212:	2309      	movs	r3, #9
 8006214:	e02d      	b.n	8006272 <HAL_GPIO_Init+0x26a>
 8006216:	230a      	movs	r3, #10
 8006218:	e02b      	b.n	8006272 <HAL_GPIO_Init+0x26a>
 800621a:	2308      	movs	r3, #8
 800621c:	e029      	b.n	8006272 <HAL_GPIO_Init+0x26a>
 800621e:	2307      	movs	r3, #7
 8006220:	e027      	b.n	8006272 <HAL_GPIO_Init+0x26a>
 8006222:	2306      	movs	r3, #6
 8006224:	e025      	b.n	8006272 <HAL_GPIO_Init+0x26a>
 8006226:	2305      	movs	r3, #5
 8006228:	e023      	b.n	8006272 <HAL_GPIO_Init+0x26a>
 800622a:	2304      	movs	r3, #4
 800622c:	e021      	b.n	8006272 <HAL_GPIO_Init+0x26a>
 800622e:	2303      	movs	r3, #3
 8006230:	e01f      	b.n	8006272 <HAL_GPIO_Init+0x26a>
 8006232:	2302      	movs	r3, #2
 8006234:	e01d      	b.n	8006272 <HAL_GPIO_Init+0x26a>
 8006236:	2301      	movs	r3, #1
 8006238:	e01b      	b.n	8006272 <HAL_GPIO_Init+0x26a>
 800623a:	bf00      	nop
 800623c:	58000080 	.word	0x58000080
 8006240:	58024400 	.word	0x58024400
 8006244:	58000400 	.word	0x58000400
 8006248:	58020000 	.word	0x58020000
 800624c:	58020400 	.word	0x58020400
 8006250:	58020800 	.word	0x58020800
 8006254:	58020c00 	.word	0x58020c00
 8006258:	58021000 	.word	0x58021000
 800625c:	58021400 	.word	0x58021400
 8006260:	58021800 	.word	0x58021800
 8006264:	58021c00 	.word	0x58021c00
 8006268:	58022000 	.word	0x58022000
 800626c:	58022400 	.word	0x58022400
 8006270:	2300      	movs	r3, #0
 8006272:	69fa      	ldr	r2, [r7, #28]
 8006274:	f002 0203 	and.w	r2, r2, #3
 8006278:	0092      	lsls	r2, r2, #2
 800627a:	4093      	lsls	r3, r2
 800627c:	69ba      	ldr	r2, [r7, #24]
 800627e:	4313      	orrs	r3, r2
 8006280:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006282:	4938      	ldr	r1, [pc, #224]	; (8006364 <HAL_GPIO_Init+0x35c>)
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	089b      	lsrs	r3, r3, #2
 8006288:	3302      	adds	r3, #2
 800628a:	69ba      	ldr	r2, [r7, #24]
 800628c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	43db      	mvns	r3, r3
 800629c:	69ba      	ldr	r2, [r7, #24]
 800629e:	4013      	ands	r3, r2
 80062a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80062ae:	69ba      	ldr	r2, [r7, #24]
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80062b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80062be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	43db      	mvns	r3, r3
 80062ca:	69ba      	ldr	r2, [r7, #24]
 80062cc:	4013      	ands	r3, r2
 80062ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d003      	beq.n	80062e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80062dc:	69ba      	ldr	r2, [r7, #24]
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80062e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	43db      	mvns	r3, r3
 80062f6:	69ba      	ldr	r2, [r7, #24]
 80062f8:	4013      	ands	r3, r2
 80062fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006304:	2b00      	cmp	r3, #0
 8006306:	d003      	beq.n	8006310 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	4313      	orrs	r3, r2
 800630e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	69ba      	ldr	r2, [r7, #24]
 8006314:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	43db      	mvns	r3, r3
 8006320:	69ba      	ldr	r2, [r7, #24]
 8006322:	4013      	ands	r3, r2
 8006324:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006332:	69ba      	ldr	r2, [r7, #24]
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	4313      	orrs	r3, r2
 8006338:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	69ba      	ldr	r2, [r7, #24]
 800633e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	3301      	adds	r3, #1
 8006344:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	fa22 f303 	lsr.w	r3, r2, r3
 8006350:	2b00      	cmp	r3, #0
 8006352:	f47f ae63 	bne.w	800601c <HAL_GPIO_Init+0x14>
  }
}
 8006356:	bf00      	nop
 8006358:	bf00      	nop
 800635a:	3724      	adds	r7, #36	; 0x24
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr
 8006364:	58000400 	.word	0x58000400

08006368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	460b      	mov	r3, r1
 8006372:	807b      	strh	r3, [r7, #2]
 8006374:	4613      	mov	r3, r2
 8006376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006378:	787b      	ldrb	r3, [r7, #1]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d003      	beq.n	8006386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800637e:	887a      	ldrh	r2, [r7, #2]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006384:	e003      	b.n	800638e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006386:	887b      	ldrh	r3, [r7, #2]
 8006388:	041a      	lsls	r2, r3, #16
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	619a      	str	r2, [r3, #24]
}
 800638e:	bf00      	nop
 8006390:	370c      	adds	r7, #12
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
	...

0800639c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d101      	bne.n	80063ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e07f      	b.n	80064ae <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d106      	bne.n	80063c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f7fa fc32 	bl	8000c2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2224      	movs	r2, #36	; 0x24
 80063cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f022 0201 	bic.w	r2, r2, #1
 80063de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685a      	ldr	r2, [r3, #4]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80063ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	689a      	ldr	r2, [r3, #8]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d107      	bne.n	8006416 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	689a      	ldr	r2, [r3, #8]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006412:	609a      	str	r2, [r3, #8]
 8006414:	e006      	b.n	8006424 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	689a      	ldr	r2, [r3, #8]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006422:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	2b02      	cmp	r3, #2
 800642a:	d104      	bne.n	8006436 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006434:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	6859      	ldr	r1, [r3, #4]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	4b1d      	ldr	r3, [pc, #116]	; (80064b8 <HAL_I2C_Init+0x11c>)
 8006442:	430b      	orrs	r3, r1
 8006444:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68da      	ldr	r2, [r3, #12]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006454:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	691a      	ldr	r2, [r3, #16]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	695b      	ldr	r3, [r3, #20]
 800645e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	430a      	orrs	r2, r1
 800646e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	69d9      	ldr	r1, [r3, #28]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6a1a      	ldr	r2, [r3, #32]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	430a      	orrs	r2, r1
 800647e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f042 0201 	orr.w	r2, r2, #1
 800648e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2220      	movs	r2, #32
 800649a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3708      	adds	r7, #8
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	02008000 	.word	0x02008000

080064bc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b088      	sub	sp, #32
 80064c0:	af02      	add	r7, sp, #8
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	4608      	mov	r0, r1
 80064c6:	4611      	mov	r1, r2
 80064c8:	461a      	mov	r2, r3
 80064ca:	4603      	mov	r3, r0
 80064cc:	817b      	strh	r3, [r7, #10]
 80064ce:	460b      	mov	r3, r1
 80064d0:	813b      	strh	r3, [r7, #8]
 80064d2:	4613      	mov	r3, r2
 80064d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	2b20      	cmp	r3, #32
 80064e0:	f040 80f9 	bne.w	80066d6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80064e4:	6a3b      	ldr	r3, [r7, #32]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d002      	beq.n	80064f0 <HAL_I2C_Mem_Write+0x34>
 80064ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d105      	bne.n	80064fc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064f6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e0ed      	b.n	80066d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006502:	2b01      	cmp	r3, #1
 8006504:	d101      	bne.n	800650a <HAL_I2C_Mem_Write+0x4e>
 8006506:	2302      	movs	r3, #2
 8006508:	e0e6      	b.n	80066d8 <HAL_I2C_Mem_Write+0x21c>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2201      	movs	r2, #1
 800650e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006512:	f7fb fa7d 	bl	8001a10 <HAL_GetTick>
 8006516:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	2319      	movs	r3, #25
 800651e:	2201      	movs	r2, #1
 8006520:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f000 fbe5 	bl	8006cf4 <I2C_WaitOnFlagUntilTimeout>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d001      	beq.n	8006534 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e0d1      	b.n	80066d8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2221      	movs	r2, #33	; 0x21
 8006538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2240      	movs	r2, #64	; 0x40
 8006540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6a3a      	ldr	r2, [r7, #32]
 800654e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006554:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800655c:	88f8      	ldrh	r0, [r7, #6]
 800655e:	893a      	ldrh	r2, [r7, #8]
 8006560:	8979      	ldrh	r1, [r7, #10]
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	9301      	str	r3, [sp, #4]
 8006566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006568:	9300      	str	r3, [sp, #0]
 800656a:	4603      	mov	r3, r0
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f000 faf5 	bl	8006b5c <I2C_RequestMemoryWrite>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d005      	beq.n	8006584 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e0a9      	b.n	80066d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006588:	b29b      	uxth	r3, r3
 800658a:	2bff      	cmp	r3, #255	; 0xff
 800658c:	d90e      	bls.n	80065ac <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	22ff      	movs	r2, #255	; 0xff
 8006592:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006598:	b2da      	uxtb	r2, r3
 800659a:	8979      	ldrh	r1, [r7, #10]
 800659c:	2300      	movs	r3, #0
 800659e:	9300      	str	r3, [sp, #0]
 80065a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f000 fd5f 	bl	8007068 <I2C_TransferConfig>
 80065aa:	e00f      	b.n	80065cc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ba:	b2da      	uxtb	r2, r3
 80065bc:	8979      	ldrh	r1, [r7, #10]
 80065be:	2300      	movs	r3, #0
 80065c0:	9300      	str	r3, [sp, #0]
 80065c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	f000 fd4e 	bl	8007068 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065cc:	697a      	ldr	r2, [r7, #20]
 80065ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f000 fbde 	bl	8006d92 <I2C_WaitOnTXISFlagUntilTimeout>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d001      	beq.n	80065e0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e07b      	b.n	80066d8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e4:	781a      	ldrb	r2, [r3, #0]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f0:	1c5a      	adds	r2, r3, #1
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	3b01      	subs	r3, #1
 80065fe:	b29a      	uxth	r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006608:	3b01      	subs	r3, #1
 800660a:	b29a      	uxth	r2, r3
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006614:	b29b      	uxth	r3, r3
 8006616:	2b00      	cmp	r3, #0
 8006618:	d034      	beq.n	8006684 <HAL_I2C_Mem_Write+0x1c8>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800661e:	2b00      	cmp	r3, #0
 8006620:	d130      	bne.n	8006684 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	9300      	str	r3, [sp, #0]
 8006626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006628:	2200      	movs	r2, #0
 800662a:	2180      	movs	r1, #128	; 0x80
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	f000 fb61 	bl	8006cf4 <I2C_WaitOnFlagUntilTimeout>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d001      	beq.n	800663c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	e04d      	b.n	80066d8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006640:	b29b      	uxth	r3, r3
 8006642:	2bff      	cmp	r3, #255	; 0xff
 8006644:	d90e      	bls.n	8006664 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	22ff      	movs	r2, #255	; 0xff
 800664a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006650:	b2da      	uxtb	r2, r3
 8006652:	8979      	ldrh	r1, [r7, #10]
 8006654:	2300      	movs	r3, #0
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f000 fd03 	bl	8007068 <I2C_TransferConfig>
 8006662:	e00f      	b.n	8006684 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006668:	b29a      	uxth	r2, r3
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006672:	b2da      	uxtb	r2, r3
 8006674:	8979      	ldrh	r1, [r7, #10]
 8006676:	2300      	movs	r3, #0
 8006678:	9300      	str	r3, [sp, #0]
 800667a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	f000 fcf2 	bl	8007068 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006688:	b29b      	uxth	r3, r3
 800668a:	2b00      	cmp	r3, #0
 800668c:	d19e      	bne.n	80065cc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f000 fbc4 	bl	8006e20 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d001      	beq.n	80066a2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e01a      	b.n	80066d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2220      	movs	r2, #32
 80066a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	6859      	ldr	r1, [r3, #4]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	4b0a      	ldr	r3, [pc, #40]	; (80066e0 <HAL_I2C_Mem_Write+0x224>)
 80066b6:	400b      	ands	r3, r1
 80066b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2220      	movs	r2, #32
 80066be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80066d2:	2300      	movs	r3, #0
 80066d4:	e000      	b.n	80066d8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80066d6:	2302      	movs	r3, #2
  }
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3718      	adds	r7, #24
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	fe00e800 	.word	0xfe00e800

080066e4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b088      	sub	sp, #32
 80066e8:	af02      	add	r7, sp, #8
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	4608      	mov	r0, r1
 80066ee:	4611      	mov	r1, r2
 80066f0:	461a      	mov	r2, r3
 80066f2:	4603      	mov	r3, r0
 80066f4:	817b      	strh	r3, [r7, #10]
 80066f6:	460b      	mov	r3, r1
 80066f8:	813b      	strh	r3, [r7, #8]
 80066fa:	4613      	mov	r3, r2
 80066fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006704:	b2db      	uxtb	r3, r3
 8006706:	2b20      	cmp	r3, #32
 8006708:	f040 80fd 	bne.w	8006906 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800670c:	6a3b      	ldr	r3, [r7, #32]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d002      	beq.n	8006718 <HAL_I2C_Mem_Read+0x34>
 8006712:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006714:	2b00      	cmp	r3, #0
 8006716:	d105      	bne.n	8006724 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800671e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e0f1      	b.n	8006908 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800672a:	2b01      	cmp	r3, #1
 800672c:	d101      	bne.n	8006732 <HAL_I2C_Mem_Read+0x4e>
 800672e:	2302      	movs	r3, #2
 8006730:	e0ea      	b.n	8006908 <HAL_I2C_Mem_Read+0x224>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2201      	movs	r2, #1
 8006736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800673a:	f7fb f969 	bl	8001a10 <HAL_GetTick>
 800673e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	2319      	movs	r3, #25
 8006746:	2201      	movs	r2, #1
 8006748:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f000 fad1 	bl	8006cf4 <I2C_WaitOnFlagUntilTimeout>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d001      	beq.n	800675c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e0d5      	b.n	8006908 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2222      	movs	r2, #34	; 0x22
 8006760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2240      	movs	r2, #64	; 0x40
 8006768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6a3a      	ldr	r2, [r7, #32]
 8006776:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800677c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006784:	88f8      	ldrh	r0, [r7, #6]
 8006786:	893a      	ldrh	r2, [r7, #8]
 8006788:	8979      	ldrh	r1, [r7, #10]
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	9301      	str	r3, [sp, #4]
 800678e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006790:	9300      	str	r3, [sp, #0]
 8006792:	4603      	mov	r3, r0
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f000 fa35 	bl	8006c04 <I2C_RequestMemoryRead>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d005      	beq.n	80067ac <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e0ad      	b.n	8006908 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	2bff      	cmp	r3, #255	; 0xff
 80067b4:	d90e      	bls.n	80067d4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	22ff      	movs	r2, #255	; 0xff
 80067ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067c0:	b2da      	uxtb	r2, r3
 80067c2:	8979      	ldrh	r1, [r7, #10]
 80067c4:	4b52      	ldr	r3, [pc, #328]	; (8006910 <HAL_I2C_Mem_Read+0x22c>)
 80067c6:	9300      	str	r3, [sp, #0]
 80067c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f000 fc4b 	bl	8007068 <I2C_TransferConfig>
 80067d2:	e00f      	b.n	80067f4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067d8:	b29a      	uxth	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067e2:	b2da      	uxtb	r2, r3
 80067e4:	8979      	ldrh	r1, [r7, #10]
 80067e6:	4b4a      	ldr	r3, [pc, #296]	; (8006910 <HAL_I2C_Mem_Read+0x22c>)
 80067e8:	9300      	str	r3, [sp, #0]
 80067ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f000 fc3a 	bl	8007068 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	9300      	str	r3, [sp, #0]
 80067f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fa:	2200      	movs	r2, #0
 80067fc:	2104      	movs	r1, #4
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	f000 fa78 	bl	8006cf4 <I2C_WaitOnFlagUntilTimeout>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d001      	beq.n	800680e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e07c      	b.n	8006908 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006818:	b2d2      	uxtb	r2, r2
 800681a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006820:	1c5a      	adds	r2, r3, #1
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800682a:	3b01      	subs	r3, #1
 800682c:	b29a      	uxth	r2, r3
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006836:	b29b      	uxth	r3, r3
 8006838:	3b01      	subs	r3, #1
 800683a:	b29a      	uxth	r2, r3
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006844:	b29b      	uxth	r3, r3
 8006846:	2b00      	cmp	r3, #0
 8006848:	d034      	beq.n	80068b4 <HAL_I2C_Mem_Read+0x1d0>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800684e:	2b00      	cmp	r3, #0
 8006850:	d130      	bne.n	80068b4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	9300      	str	r3, [sp, #0]
 8006856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006858:	2200      	movs	r2, #0
 800685a:	2180      	movs	r1, #128	; 0x80
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f000 fa49 	bl	8006cf4 <I2C_WaitOnFlagUntilTimeout>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d001      	beq.n	800686c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e04d      	b.n	8006908 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006870:	b29b      	uxth	r3, r3
 8006872:	2bff      	cmp	r3, #255	; 0xff
 8006874:	d90e      	bls.n	8006894 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	22ff      	movs	r2, #255	; 0xff
 800687a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006880:	b2da      	uxtb	r2, r3
 8006882:	8979      	ldrh	r1, [r7, #10]
 8006884:	2300      	movs	r3, #0
 8006886:	9300      	str	r3, [sp, #0]
 8006888:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f000 fbeb 	bl	8007068 <I2C_TransferConfig>
 8006892:	e00f      	b.n	80068b4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006898:	b29a      	uxth	r2, r3
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068a2:	b2da      	uxtb	r2, r3
 80068a4:	8979      	ldrh	r1, [r7, #10]
 80068a6:	2300      	movs	r3, #0
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	f000 fbda 	bl	8007068 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d19a      	bne.n	80067f4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	f000 faac 	bl	8006e20 <I2C_WaitOnSTOPFlagUntilTimeout>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d001      	beq.n	80068d2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e01a      	b.n	8006908 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2220      	movs	r2, #32
 80068d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	6859      	ldr	r1, [r3, #4]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	4b0b      	ldr	r3, [pc, #44]	; (8006914 <HAL_I2C_Mem_Read+0x230>)
 80068e6:	400b      	ands	r3, r1
 80068e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2220      	movs	r2, #32
 80068ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006902:	2300      	movs	r3, #0
 8006904:	e000      	b.n	8006908 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006906:	2302      	movs	r3, #2
  }
}
 8006908:	4618      	mov	r0, r3
 800690a:	3718      	adds	r7, #24
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}
 8006910:	80002400 	.word	0x80002400
 8006914:	fe00e800 	.word	0xfe00e800

08006918 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b08a      	sub	sp, #40	; 0x28
 800691c:	af02      	add	r7, sp, #8
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	607a      	str	r2, [r7, #4]
 8006922:	603b      	str	r3, [r7, #0]
 8006924:	460b      	mov	r3, r1
 8006926:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8006928:	2300      	movs	r3, #0
 800692a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006932:	b2db      	uxtb	r3, r3
 8006934:	2b20      	cmp	r3, #32
 8006936:	f040 80ef 	bne.w	8006b18 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	699b      	ldr	r3, [r3, #24]
 8006940:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006944:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006948:	d101      	bne.n	800694e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800694a:	2302      	movs	r3, #2
 800694c:	e0e5      	b.n	8006b1a <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006954:	2b01      	cmp	r3, #1
 8006956:	d101      	bne.n	800695c <HAL_I2C_IsDeviceReady+0x44>
 8006958:	2302      	movs	r3, #2
 800695a:	e0de      	b.n	8006b1a <HAL_I2C_IsDeviceReady+0x202>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2224      	movs	r2, #36	; 0x24
 8006968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	2b01      	cmp	r3, #1
 8006978:	d105      	bne.n	8006986 <HAL_I2C_IsDeviceReady+0x6e>
 800697a:	897b      	ldrh	r3, [r7, #10]
 800697c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006980:	4b68      	ldr	r3, [pc, #416]	; (8006b24 <HAL_I2C_IsDeviceReady+0x20c>)
 8006982:	4313      	orrs	r3, r2
 8006984:	e004      	b.n	8006990 <HAL_I2C_IsDeviceReady+0x78>
 8006986:	897b      	ldrh	r3, [r7, #10]
 8006988:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800698c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	6812      	ldr	r2, [r2, #0]
 8006994:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8006996:	f7fb f83b 	bl	8001a10 <HAL_GetTick>
 800699a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	699b      	ldr	r3, [r3, #24]
 80069a2:	f003 0320 	and.w	r3, r3, #32
 80069a6:	2b20      	cmp	r3, #32
 80069a8:	bf0c      	ite	eq
 80069aa:	2301      	moveq	r3, #1
 80069ac:	2300      	movne	r3, #0
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	f003 0310 	and.w	r3, r3, #16
 80069bc:	2b10      	cmp	r3, #16
 80069be:	bf0c      	ite	eq
 80069c0:	2301      	moveq	r3, #1
 80069c2:	2300      	movne	r3, #0
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80069c8:	e034      	b.n	8006a34 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d0:	d01a      	beq.n	8006a08 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80069d2:	f7fb f81d 	bl	8001a10 <HAL_GetTick>
 80069d6:	4602      	mov	r2, r0
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	683a      	ldr	r2, [r7, #0]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d302      	bcc.n	80069e8 <HAL_I2C_IsDeviceReady+0xd0>
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d10f      	bne.n	8006a08 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2220      	movs	r2, #32
 80069ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f4:	f043 0220 	orr.w	r2, r3, #32
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e088      	b.n	8006b1a <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	f003 0320 	and.w	r3, r3, #32
 8006a12:	2b20      	cmp	r3, #32
 8006a14:	bf0c      	ite	eq
 8006a16:	2301      	moveq	r3, #1
 8006a18:	2300      	movne	r3, #0
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	699b      	ldr	r3, [r3, #24]
 8006a24:	f003 0310 	and.w	r3, r3, #16
 8006a28:	2b10      	cmp	r3, #16
 8006a2a:	bf0c      	ite	eq
 8006a2c:	2301      	moveq	r3, #1
 8006a2e:	2300      	movne	r3, #0
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006a34:	7ffb      	ldrb	r3, [r7, #31]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d102      	bne.n	8006a40 <HAL_I2C_IsDeviceReady+0x128>
 8006a3a:	7fbb      	ldrb	r3, [r7, #30]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d0c4      	beq.n	80069ca <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	699b      	ldr	r3, [r3, #24]
 8006a46:	f003 0310 	and.w	r3, r3, #16
 8006a4a:	2b10      	cmp	r3, #16
 8006a4c:	d01a      	beq.n	8006a84 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	9300      	str	r3, [sp, #0]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	2200      	movs	r2, #0
 8006a56:	2120      	movs	r1, #32
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	f000 f94b 	bl	8006cf4 <I2C_WaitOnFlagUntilTimeout>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d001      	beq.n	8006a68 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	e058      	b.n	8006b1a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2220      	movs	r2, #32
 8006a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8006a80:	2300      	movs	r3, #0
 8006a82:	e04a      	b.n	8006b1a <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	9300      	str	r3, [sp, #0]
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	2120      	movs	r1, #32
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	f000 f930 	bl	8006cf4 <I2C_WaitOnFlagUntilTimeout>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d001      	beq.n	8006a9e <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e03d      	b.n	8006b1a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2210      	movs	r2, #16
 8006aa4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2220      	movs	r2, #32
 8006aac:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d118      	bne.n	8006ae8 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	685a      	ldr	r2, [r3, #4]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ac4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	9300      	str	r3, [sp, #0]
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	2200      	movs	r2, #0
 8006ace:	2120      	movs	r1, #32
 8006ad0:	68f8      	ldr	r0, [r7, #12]
 8006ad2:	f000 f90f 	bl	8006cf4 <I2C_WaitOnFlagUntilTimeout>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d001      	beq.n	8006ae0 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e01c      	b.n	8006b1a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2220      	movs	r2, #32
 8006ae6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	3301      	adds	r3, #1
 8006aec:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	f63f af3d 	bhi.w	8006972 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2220      	movs	r2, #32
 8006afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b04:	f043 0220 	orr.w	r2, r3, #32
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	e000      	b.n	8006b1a <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8006b18:	2302      	movs	r3, #2
  }
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3720      	adds	r7, #32
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	02002000 	.word	0x02002000

08006b28 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d005      	beq.n	8006b54 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	68f9      	ldr	r1, [r7, #12]
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	4798      	blx	r3
  }
}
 8006b54:	bf00      	nop
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b086      	sub	sp, #24
 8006b60:	af02      	add	r7, sp, #8
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	4608      	mov	r0, r1
 8006b66:	4611      	mov	r1, r2
 8006b68:	461a      	mov	r2, r3
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	817b      	strh	r3, [r7, #10]
 8006b6e:	460b      	mov	r3, r1
 8006b70:	813b      	strh	r3, [r7, #8]
 8006b72:	4613      	mov	r3, r2
 8006b74:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006b76:	88fb      	ldrh	r3, [r7, #6]
 8006b78:	b2da      	uxtb	r2, r3
 8006b7a:	8979      	ldrh	r1, [r7, #10]
 8006b7c:	4b20      	ldr	r3, [pc, #128]	; (8006c00 <I2C_RequestMemoryWrite+0xa4>)
 8006b7e:	9300      	str	r3, [sp, #0]
 8006b80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f000 fa6f 	bl	8007068 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b8a:	69fa      	ldr	r2, [r7, #28]
 8006b8c:	69b9      	ldr	r1, [r7, #24]
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f000 f8ff 	bl	8006d92 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d001      	beq.n	8006b9e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e02c      	b.n	8006bf8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b9e:	88fb      	ldrh	r3, [r7, #6]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d105      	bne.n	8006bb0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006ba4:	893b      	ldrh	r3, [r7, #8]
 8006ba6:	b2da      	uxtb	r2, r3
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	629a      	str	r2, [r3, #40]	; 0x28
 8006bae:	e015      	b.n	8006bdc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006bb0:	893b      	ldrh	r3, [r7, #8]
 8006bb2:	0a1b      	lsrs	r3, r3, #8
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	b2da      	uxtb	r2, r3
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bbe:	69fa      	ldr	r2, [r7, #28]
 8006bc0:	69b9      	ldr	r1, [r7, #24]
 8006bc2:	68f8      	ldr	r0, [r7, #12]
 8006bc4:	f000 f8e5 	bl	8006d92 <I2C_WaitOnTXISFlagUntilTimeout>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d001      	beq.n	8006bd2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e012      	b.n	8006bf8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006bd2:	893b      	ldrh	r3, [r7, #8]
 8006bd4:	b2da      	uxtb	r2, r3
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	2200      	movs	r2, #0
 8006be4:	2180      	movs	r1, #128	; 0x80
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f000 f884 	bl	8006cf4 <I2C_WaitOnFlagUntilTimeout>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d001      	beq.n	8006bf6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e000      	b.n	8006bf8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3710      	adds	r7, #16
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	80002000 	.word	0x80002000

08006c04 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b086      	sub	sp, #24
 8006c08:	af02      	add	r7, sp, #8
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	4608      	mov	r0, r1
 8006c0e:	4611      	mov	r1, r2
 8006c10:	461a      	mov	r2, r3
 8006c12:	4603      	mov	r3, r0
 8006c14:	817b      	strh	r3, [r7, #10]
 8006c16:	460b      	mov	r3, r1
 8006c18:	813b      	strh	r3, [r7, #8]
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006c1e:	88fb      	ldrh	r3, [r7, #6]
 8006c20:	b2da      	uxtb	r2, r3
 8006c22:	8979      	ldrh	r1, [r7, #10]
 8006c24:	4b20      	ldr	r3, [pc, #128]	; (8006ca8 <I2C_RequestMemoryRead+0xa4>)
 8006c26:	9300      	str	r3, [sp, #0]
 8006c28:	2300      	movs	r3, #0
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f000 fa1c 	bl	8007068 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c30:	69fa      	ldr	r2, [r7, #28]
 8006c32:	69b9      	ldr	r1, [r7, #24]
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f000 f8ac 	bl	8006d92 <I2C_WaitOnTXISFlagUntilTimeout>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d001      	beq.n	8006c44 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e02c      	b.n	8006c9e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c44:	88fb      	ldrh	r3, [r7, #6]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d105      	bne.n	8006c56 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c4a:	893b      	ldrh	r3, [r7, #8]
 8006c4c:	b2da      	uxtb	r2, r3
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	629a      	str	r2, [r3, #40]	; 0x28
 8006c54:	e015      	b.n	8006c82 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006c56:	893b      	ldrh	r3, [r7, #8]
 8006c58:	0a1b      	lsrs	r3, r3, #8
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	b2da      	uxtb	r2, r3
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c64:	69fa      	ldr	r2, [r7, #28]
 8006c66:	69b9      	ldr	r1, [r7, #24]
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f000 f892 	bl	8006d92 <I2C_WaitOnTXISFlagUntilTimeout>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d001      	beq.n	8006c78 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e012      	b.n	8006c9e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c78:	893b      	ldrh	r3, [r7, #8]
 8006c7a:	b2da      	uxtb	r2, r3
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	2140      	movs	r1, #64	; 0x40
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	f000 f831 	bl	8006cf4 <I2C_WaitOnFlagUntilTimeout>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d001      	beq.n	8006c9c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e000      	b.n	8006c9e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	80002000 	.word	0x80002000

08006cac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	f003 0302 	and.w	r3, r3, #2
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d103      	bne.n	8006cca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	699b      	ldr	r3, [r3, #24]
 8006cd0:	f003 0301 	and.w	r3, r3, #1
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d007      	beq.n	8006ce8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	699a      	ldr	r2, [r3, #24]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f042 0201 	orr.w	r2, r2, #1
 8006ce6:	619a      	str	r2, [r3, #24]
  }
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	603b      	str	r3, [r7, #0]
 8006d00:	4613      	mov	r3, r2
 8006d02:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d04:	e031      	b.n	8006d6a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d0c:	d02d      	beq.n	8006d6a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d0e:	f7fa fe7f 	bl	8001a10 <HAL_GetTick>
 8006d12:	4602      	mov	r2, r0
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	683a      	ldr	r2, [r7, #0]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d302      	bcc.n	8006d24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d122      	bne.n	8006d6a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	699a      	ldr	r2, [r3, #24]
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	68ba      	ldr	r2, [r7, #8]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	bf0c      	ite	eq
 8006d34:	2301      	moveq	r3, #1
 8006d36:	2300      	movne	r3, #0
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	79fb      	ldrb	r3, [r7, #7]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d113      	bne.n	8006d6a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d46:	f043 0220 	orr.w	r2, r3, #32
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2220      	movs	r2, #32
 8006d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e00f      	b.n	8006d8a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	699a      	ldr	r2, [r3, #24]
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	4013      	ands	r3, r2
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	bf0c      	ite	eq
 8006d7a:	2301      	moveq	r3, #1
 8006d7c:	2300      	movne	r3, #0
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	461a      	mov	r2, r3
 8006d82:	79fb      	ldrb	r3, [r7, #7]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d0be      	beq.n	8006d06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3710      	adds	r7, #16
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b084      	sub	sp, #16
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	60f8      	str	r0, [r7, #12]
 8006d9a:	60b9      	str	r1, [r7, #8]
 8006d9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006d9e:	e033      	b.n	8006e08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	68b9      	ldr	r1, [r7, #8]
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f000 f87f 	bl	8006ea8 <I2C_IsErrorOccurred>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d001      	beq.n	8006db4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	e031      	b.n	8006e18 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dba:	d025      	beq.n	8006e08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dbc:	f7fa fe28 	bl	8001a10 <HAL_GetTick>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	68ba      	ldr	r2, [r7, #8]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d302      	bcc.n	8006dd2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d11a      	bne.n	8006e08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	f003 0302 	and.w	r3, r3, #2
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d013      	beq.n	8006e08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006de4:	f043 0220 	orr.w	r2, r3, #32
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2220      	movs	r2, #32
 8006df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e007      	b.n	8006e18 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	699b      	ldr	r3, [r3, #24]
 8006e0e:	f003 0302 	and.w	r3, r3, #2
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d1c4      	bne.n	8006da0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3710      	adds	r7, #16
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e2c:	e02f      	b.n	8006e8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	68b9      	ldr	r1, [r7, #8]
 8006e32:	68f8      	ldr	r0, [r7, #12]
 8006e34:	f000 f838 	bl	8006ea8 <I2C_IsErrorOccurred>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d001      	beq.n	8006e42 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e02d      	b.n	8006e9e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e42:	f7fa fde5 	bl	8001a10 <HAL_GetTick>
 8006e46:	4602      	mov	r2, r0
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	68ba      	ldr	r2, [r7, #8]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d302      	bcc.n	8006e58 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d11a      	bne.n	8006e8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	699b      	ldr	r3, [r3, #24]
 8006e5e:	f003 0320 	and.w	r3, r3, #32
 8006e62:	2b20      	cmp	r3, #32
 8006e64:	d013      	beq.n	8006e8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e6a:	f043 0220 	orr.w	r2, r3, #32
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2220      	movs	r2, #32
 8006e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e007      	b.n	8006e9e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	f003 0320 	and.w	r3, r3, #32
 8006e98:	2b20      	cmp	r3, #32
 8006e9a:	d1c8      	bne.n	8006e2e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
	...

08006ea8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b08a      	sub	sp, #40	; 0x28
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	f003 0310 	and.w	r3, r3, #16
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d068      	beq.n	8006fa6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2210      	movs	r2, #16
 8006eda:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006edc:	e049      	b.n	8006f72 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee4:	d045      	beq.n	8006f72 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006ee6:	f7fa fd93 	bl	8001a10 <HAL_GetTick>
 8006eea:	4602      	mov	r2, r0
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	68ba      	ldr	r2, [r7, #8]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d302      	bcc.n	8006efc <I2C_IsErrorOccurred+0x54>
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d13a      	bne.n	8006f72 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f06:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f0e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f1e:	d121      	bne.n	8006f64 <I2C_IsErrorOccurred+0xbc>
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f26:	d01d      	beq.n	8006f64 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006f28:	7cfb      	ldrb	r3, [r7, #19]
 8006f2a:	2b20      	cmp	r3, #32
 8006f2c:	d01a      	beq.n	8006f64 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	685a      	ldr	r2, [r3, #4]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f3c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006f3e:	f7fa fd67 	bl	8001a10 <HAL_GetTick>
 8006f42:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f44:	e00e      	b.n	8006f64 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006f46:	f7fa fd63 	bl	8001a10 <HAL_GetTick>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	2b19      	cmp	r3, #25
 8006f52:	d907      	bls.n	8006f64 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006f54:	6a3b      	ldr	r3, [r7, #32]
 8006f56:	f043 0320 	orr.w	r3, r3, #32
 8006f5a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006f62:	e006      	b.n	8006f72 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	f003 0320 	and.w	r3, r3, #32
 8006f6e:	2b20      	cmp	r3, #32
 8006f70:	d1e9      	bne.n	8006f46 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	699b      	ldr	r3, [r3, #24]
 8006f78:	f003 0320 	and.w	r3, r3, #32
 8006f7c:	2b20      	cmp	r3, #32
 8006f7e:	d003      	beq.n	8006f88 <I2C_IsErrorOccurred+0xe0>
 8006f80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d0aa      	beq.n	8006ede <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006f88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d103      	bne.n	8006f98 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2220      	movs	r2, #32
 8006f96:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006f98:	6a3b      	ldr	r3, [r7, #32]
 8006f9a:	f043 0304 	orr.w	r3, r3, #4
 8006f9e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	699b      	ldr	r3, [r3, #24]
 8006fac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00b      	beq.n	8006fd0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006fb8:	6a3b      	ldr	r3, [r7, #32]
 8006fba:	f043 0301 	orr.w	r3, r3, #1
 8006fbe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006fc8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00b      	beq.n	8006ff2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006fda:	6a3b      	ldr	r3, [r7, #32]
 8006fdc:	f043 0308 	orr.w	r3, r3, #8
 8006fe0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006fea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00b      	beq.n	8007014 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006ffc:	6a3b      	ldr	r3, [r7, #32]
 8006ffe:	f043 0302 	orr.w	r3, r3, #2
 8007002:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800700c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007014:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007018:	2b00      	cmp	r3, #0
 800701a:	d01c      	beq.n	8007056 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f7ff fe45 	bl	8006cac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	6859      	ldr	r1, [r3, #4]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	4b0d      	ldr	r3, [pc, #52]	; (8007064 <I2C_IsErrorOccurred+0x1bc>)
 800702e:	400b      	ands	r3, r1
 8007030:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007036:	6a3b      	ldr	r3, [r7, #32]
 8007038:	431a      	orrs	r2, r3
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2220      	movs	r2, #32
 8007042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007056:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800705a:	4618      	mov	r0, r3
 800705c:	3728      	adds	r7, #40	; 0x28
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	fe00e800 	.word	0xfe00e800

08007068 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007068:	b480      	push	{r7}
 800706a:	b087      	sub	sp, #28
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	607b      	str	r3, [r7, #4]
 8007072:	460b      	mov	r3, r1
 8007074:	817b      	strh	r3, [r7, #10]
 8007076:	4613      	mov	r3, r2
 8007078:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800707a:	897b      	ldrh	r3, [r7, #10]
 800707c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007080:	7a7b      	ldrb	r3, [r7, #9]
 8007082:	041b      	lsls	r3, r3, #16
 8007084:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007088:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800708e:	6a3b      	ldr	r3, [r7, #32]
 8007090:	4313      	orrs	r3, r2
 8007092:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007096:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	685a      	ldr	r2, [r3, #4]
 800709e:	6a3b      	ldr	r3, [r7, #32]
 80070a0:	0d5b      	lsrs	r3, r3, #21
 80070a2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80070a6:	4b08      	ldr	r3, [pc, #32]	; (80070c8 <I2C_TransferConfig+0x60>)
 80070a8:	430b      	orrs	r3, r1
 80070aa:	43db      	mvns	r3, r3
 80070ac:	ea02 0103 	and.w	r1, r2, r3
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	697a      	ldr	r2, [r7, #20]
 80070b6:	430a      	orrs	r2, r1
 80070b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80070ba:	bf00      	nop
 80070bc:	371c      	adds	r7, #28
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	03ff63ff 	.word	0x03ff63ff

080070cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	2b20      	cmp	r3, #32
 80070e0:	d138      	bne.n	8007154 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d101      	bne.n	80070f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80070ec:	2302      	movs	r3, #2
 80070ee:	e032      	b.n	8007156 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2224      	movs	r2, #36	; 0x24
 80070fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f022 0201 	bic.w	r2, r2, #1
 800710e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800711e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	6819      	ldr	r1, [r3, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	683a      	ldr	r2, [r7, #0]
 800712c:	430a      	orrs	r2, r1
 800712e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f042 0201 	orr.w	r2, r2, #1
 800713e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2220      	movs	r2, #32
 8007144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007150:	2300      	movs	r3, #0
 8007152:	e000      	b.n	8007156 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007154:	2302      	movs	r3, #2
  }
}
 8007156:	4618      	mov	r0, r3
 8007158:	370c      	adds	r7, #12
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007162:	b480      	push	{r7}
 8007164:	b085      	sub	sp, #20
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
 800716a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007172:	b2db      	uxtb	r3, r3
 8007174:	2b20      	cmp	r3, #32
 8007176:	d139      	bne.n	80071ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800717e:	2b01      	cmp	r3, #1
 8007180:	d101      	bne.n	8007186 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007182:	2302      	movs	r3, #2
 8007184:	e033      	b.n	80071ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2224      	movs	r2, #36	; 0x24
 8007192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f022 0201 	bic.w	r2, r2, #1
 80071a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80071b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	021b      	lsls	r3, r3, #8
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	4313      	orrs	r3, r2
 80071be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f042 0201 	orr.w	r2, r2, #1
 80071d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2220      	movs	r2, #32
 80071dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80071e8:	2300      	movs	r3, #0
 80071ea:	e000      	b.n	80071ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80071ec:	2302      	movs	r3, #2
  }
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3714      	adds	r7, #20
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr

080071fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80071fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071fc:	b08f      	sub	sp, #60	; 0x3c
 80071fe:	af0a      	add	r7, sp, #40	; 0x28
 8007200:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d101      	bne.n	800720c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	e116      	b.n	800743a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8007218:	b2db      	uxtb	r3, r3
 800721a:	2b00      	cmp	r3, #0
 800721c:	d106      	bne.n	800722c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f7fa fac6 	bl	80017b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2203      	movs	r2, #3
 8007230:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800723c:	2b00      	cmp	r3, #0
 800723e:	d102      	bne.n	8007246 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4618      	mov	r0, r3
 800724c:	f006 fc80 	bl	800db50 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	603b      	str	r3, [r7, #0]
 8007256:	687e      	ldr	r6, [r7, #4]
 8007258:	466d      	mov	r5, sp
 800725a:	f106 0410 	add.w	r4, r6, #16
 800725e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007260:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007262:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007264:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007266:	e894 0003 	ldmia.w	r4, {r0, r1}
 800726a:	e885 0003 	stmia.w	r5, {r0, r1}
 800726e:	1d33      	adds	r3, r6, #4
 8007270:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007272:	6838      	ldr	r0, [r7, #0]
 8007274:	f006 fbfe 	bl	800da74 <USB_CoreInit>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d005      	beq.n	800728a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2202      	movs	r2, #2
 8007282:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e0d7      	b.n	800743a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2100      	movs	r1, #0
 8007290:	4618      	mov	r0, r3
 8007292:	f006 fc6e 	bl	800db72 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007296:	2300      	movs	r3, #0
 8007298:	73fb      	strb	r3, [r7, #15]
 800729a:	e04a      	b.n	8007332 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800729c:	7bfa      	ldrb	r2, [r7, #15]
 800729e:	6879      	ldr	r1, [r7, #4]
 80072a0:	4613      	mov	r3, r2
 80072a2:	00db      	lsls	r3, r3, #3
 80072a4:	4413      	add	r3, r2
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	440b      	add	r3, r1
 80072aa:	333d      	adds	r3, #61	; 0x3d
 80072ac:	2201      	movs	r2, #1
 80072ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80072b0:	7bfa      	ldrb	r2, [r7, #15]
 80072b2:	6879      	ldr	r1, [r7, #4]
 80072b4:	4613      	mov	r3, r2
 80072b6:	00db      	lsls	r3, r3, #3
 80072b8:	4413      	add	r3, r2
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	440b      	add	r3, r1
 80072be:	333c      	adds	r3, #60	; 0x3c
 80072c0:	7bfa      	ldrb	r2, [r7, #15]
 80072c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80072c4:	7bfa      	ldrb	r2, [r7, #15]
 80072c6:	7bfb      	ldrb	r3, [r7, #15]
 80072c8:	b298      	uxth	r0, r3
 80072ca:	6879      	ldr	r1, [r7, #4]
 80072cc:	4613      	mov	r3, r2
 80072ce:	00db      	lsls	r3, r3, #3
 80072d0:	4413      	add	r3, r2
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	440b      	add	r3, r1
 80072d6:	3356      	adds	r3, #86	; 0x56
 80072d8:	4602      	mov	r2, r0
 80072da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80072dc:	7bfa      	ldrb	r2, [r7, #15]
 80072de:	6879      	ldr	r1, [r7, #4]
 80072e0:	4613      	mov	r3, r2
 80072e2:	00db      	lsls	r3, r3, #3
 80072e4:	4413      	add	r3, r2
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	440b      	add	r3, r1
 80072ea:	3340      	adds	r3, #64	; 0x40
 80072ec:	2200      	movs	r2, #0
 80072ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80072f0:	7bfa      	ldrb	r2, [r7, #15]
 80072f2:	6879      	ldr	r1, [r7, #4]
 80072f4:	4613      	mov	r3, r2
 80072f6:	00db      	lsls	r3, r3, #3
 80072f8:	4413      	add	r3, r2
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	440b      	add	r3, r1
 80072fe:	3344      	adds	r3, #68	; 0x44
 8007300:	2200      	movs	r2, #0
 8007302:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007304:	7bfa      	ldrb	r2, [r7, #15]
 8007306:	6879      	ldr	r1, [r7, #4]
 8007308:	4613      	mov	r3, r2
 800730a:	00db      	lsls	r3, r3, #3
 800730c:	4413      	add	r3, r2
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	440b      	add	r3, r1
 8007312:	3348      	adds	r3, #72	; 0x48
 8007314:	2200      	movs	r2, #0
 8007316:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007318:	7bfa      	ldrb	r2, [r7, #15]
 800731a:	6879      	ldr	r1, [r7, #4]
 800731c:	4613      	mov	r3, r2
 800731e:	00db      	lsls	r3, r3, #3
 8007320:	4413      	add	r3, r2
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	440b      	add	r3, r1
 8007326:	334c      	adds	r3, #76	; 0x4c
 8007328:	2200      	movs	r2, #0
 800732a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800732c:	7bfb      	ldrb	r3, [r7, #15]
 800732e:	3301      	adds	r3, #1
 8007330:	73fb      	strb	r3, [r7, #15]
 8007332:	7bfa      	ldrb	r2, [r7, #15]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	429a      	cmp	r2, r3
 800733a:	d3af      	bcc.n	800729c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800733c:	2300      	movs	r3, #0
 800733e:	73fb      	strb	r3, [r7, #15]
 8007340:	e044      	b.n	80073cc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007342:	7bfa      	ldrb	r2, [r7, #15]
 8007344:	6879      	ldr	r1, [r7, #4]
 8007346:	4613      	mov	r3, r2
 8007348:	00db      	lsls	r3, r3, #3
 800734a:	4413      	add	r3, r2
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	440b      	add	r3, r1
 8007350:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8007354:	2200      	movs	r2, #0
 8007356:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007358:	7bfa      	ldrb	r2, [r7, #15]
 800735a:	6879      	ldr	r1, [r7, #4]
 800735c:	4613      	mov	r3, r2
 800735e:	00db      	lsls	r3, r3, #3
 8007360:	4413      	add	r3, r2
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	440b      	add	r3, r1
 8007366:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800736a:	7bfa      	ldrb	r2, [r7, #15]
 800736c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800736e:	7bfa      	ldrb	r2, [r7, #15]
 8007370:	6879      	ldr	r1, [r7, #4]
 8007372:	4613      	mov	r3, r2
 8007374:	00db      	lsls	r3, r3, #3
 8007376:	4413      	add	r3, r2
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	440b      	add	r3, r1
 800737c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007380:	2200      	movs	r2, #0
 8007382:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007384:	7bfa      	ldrb	r2, [r7, #15]
 8007386:	6879      	ldr	r1, [r7, #4]
 8007388:	4613      	mov	r3, r2
 800738a:	00db      	lsls	r3, r3, #3
 800738c:	4413      	add	r3, r2
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	440b      	add	r3, r1
 8007392:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8007396:	2200      	movs	r2, #0
 8007398:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800739a:	7bfa      	ldrb	r2, [r7, #15]
 800739c:	6879      	ldr	r1, [r7, #4]
 800739e:	4613      	mov	r3, r2
 80073a0:	00db      	lsls	r3, r3, #3
 80073a2:	4413      	add	r3, r2
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	440b      	add	r3, r1
 80073a8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80073ac:	2200      	movs	r2, #0
 80073ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80073b0:	7bfa      	ldrb	r2, [r7, #15]
 80073b2:	6879      	ldr	r1, [r7, #4]
 80073b4:	4613      	mov	r3, r2
 80073b6:	00db      	lsls	r3, r3, #3
 80073b8:	4413      	add	r3, r2
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	440b      	add	r3, r1
 80073be:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80073c2:	2200      	movs	r2, #0
 80073c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073c6:	7bfb      	ldrb	r3, [r7, #15]
 80073c8:	3301      	adds	r3, #1
 80073ca:	73fb      	strb	r3, [r7, #15]
 80073cc:	7bfa      	ldrb	r2, [r7, #15]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d3b5      	bcc.n	8007342 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	603b      	str	r3, [r7, #0]
 80073dc:	687e      	ldr	r6, [r7, #4]
 80073de:	466d      	mov	r5, sp
 80073e0:	f106 0410 	add.w	r4, r6, #16
 80073e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80073e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80073e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80073ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80073ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80073f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80073f4:	1d33      	adds	r3, r6, #4
 80073f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80073f8:	6838      	ldr	r0, [r7, #0]
 80073fa:	f006 fc07 	bl	800dc0c <USB_DevInit>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d005      	beq.n	8007410 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2202      	movs	r2, #2
 8007408:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	e014      	b.n	800743a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007424:	2b01      	cmp	r3, #1
 8007426:	d102      	bne.n	800742e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 f80b 	bl	8007444 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4618      	mov	r0, r3
 8007434:	f006 fdc5 	bl	800dfc2 <USB_DevDisconnect>

  return HAL_OK;
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3714      	adds	r7, #20
 800743e:	46bd      	mov	sp, r7
 8007440:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007444 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007444:	b480      	push	{r7}
 8007446:	b085      	sub	sp, #20
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2201      	movs	r2, #1
 8007456:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	699b      	ldr	r3, [r3, #24]
 8007466:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007472:	4b05      	ldr	r3, [pc, #20]	; (8007488 <HAL_PCDEx_ActivateLPM+0x44>)
 8007474:	4313      	orrs	r3, r2
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3714      	adds	r7, #20
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr
 8007488:	10000003 	.word	0x10000003

0800748c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007494:	4b19      	ldr	r3, [pc, #100]	; (80074fc <HAL_PWREx_ConfigSupply+0x70>)
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	f003 0304 	and.w	r3, r3, #4
 800749c:	2b04      	cmp	r3, #4
 800749e:	d00a      	beq.n	80074b6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80074a0:	4b16      	ldr	r3, [pc, #88]	; (80074fc <HAL_PWREx_ConfigSupply+0x70>)
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	f003 0307 	and.w	r3, r3, #7
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d001      	beq.n	80074b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e01f      	b.n	80074f2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80074b2:	2300      	movs	r3, #0
 80074b4:	e01d      	b.n	80074f2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80074b6:	4b11      	ldr	r3, [pc, #68]	; (80074fc <HAL_PWREx_ConfigSupply+0x70>)
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	f023 0207 	bic.w	r2, r3, #7
 80074be:	490f      	ldr	r1, [pc, #60]	; (80074fc <HAL_PWREx_ConfigSupply+0x70>)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80074c6:	f7fa faa3 	bl	8001a10 <HAL_GetTick>
 80074ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80074cc:	e009      	b.n	80074e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80074ce:	f7fa fa9f 	bl	8001a10 <HAL_GetTick>
 80074d2:	4602      	mov	r2, r0
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	1ad3      	subs	r3, r2, r3
 80074d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074dc:	d901      	bls.n	80074e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e007      	b.n	80074f2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80074e2:	4b06      	ldr	r3, [pc, #24]	; (80074fc <HAL_PWREx_ConfigSupply+0x70>)
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074ee:	d1ee      	bne.n	80074ce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	58024800 	.word	0x58024800

08007500 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007500:	b480      	push	{r7}
 8007502:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007504:	4b05      	ldr	r3, [pc, #20]	; (800751c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	4a04      	ldr	r2, [pc, #16]	; (800751c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800750a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800750e:	60d3      	str	r3, [r2, #12]
}
 8007510:	bf00      	nop
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	58024800 	.word	0x58024800

08007520 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b08c      	sub	sp, #48	; 0x30
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d102      	bne.n	8007534 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	f000 bc48 	b.w	8007dc4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 0301 	and.w	r3, r3, #1
 800753c:	2b00      	cmp	r3, #0
 800753e:	f000 8088 	beq.w	8007652 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007542:	4b99      	ldr	r3, [pc, #612]	; (80077a8 <HAL_RCC_OscConfig+0x288>)
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800754a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800754c:	4b96      	ldr	r3, [pc, #600]	; (80077a8 <HAL_RCC_OscConfig+0x288>)
 800754e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007550:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007554:	2b10      	cmp	r3, #16
 8007556:	d007      	beq.n	8007568 <HAL_RCC_OscConfig+0x48>
 8007558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755a:	2b18      	cmp	r3, #24
 800755c:	d111      	bne.n	8007582 <HAL_RCC_OscConfig+0x62>
 800755e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007560:	f003 0303 	and.w	r3, r3, #3
 8007564:	2b02      	cmp	r3, #2
 8007566:	d10c      	bne.n	8007582 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007568:	4b8f      	ldr	r3, [pc, #572]	; (80077a8 <HAL_RCC_OscConfig+0x288>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007570:	2b00      	cmp	r3, #0
 8007572:	d06d      	beq.n	8007650 <HAL_RCC_OscConfig+0x130>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d169      	bne.n	8007650 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	f000 bc21 	b.w	8007dc4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800758a:	d106      	bne.n	800759a <HAL_RCC_OscConfig+0x7a>
 800758c:	4b86      	ldr	r3, [pc, #536]	; (80077a8 <HAL_RCC_OscConfig+0x288>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a85      	ldr	r2, [pc, #532]	; (80077a8 <HAL_RCC_OscConfig+0x288>)
 8007592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007596:	6013      	str	r3, [r2, #0]
 8007598:	e02e      	b.n	80075f8 <HAL_RCC_OscConfig+0xd8>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10c      	bne.n	80075bc <HAL_RCC_OscConfig+0x9c>
 80075a2:	4b81      	ldr	r3, [pc, #516]	; (80077a8 <HAL_RCC_OscConfig+0x288>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a80      	ldr	r2, [pc, #512]	; (80077a8 <HAL_RCC_OscConfig+0x288>)
 80075a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075ac:	6013      	str	r3, [r2, #0]
 80075ae:	4b7e      	ldr	r3, [pc, #504]	; (80077a8 <HAL_RCC_OscConfig+0x288>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a7d      	ldr	r2, [pc, #500]	; (80077a8 <HAL_RCC_OscConfig+0x288>)
 80075b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075b8:	6013      	str	r3, [r2, #0]
 80075ba:	e01d      	b.n	80075f8 <HAL_RCC_OscConfig+0xd8>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075c4:	d10c      	bne.n	80075e0 <HAL_RCC_OscConfig+0xc0>
 80075c6:	4b78      	ldr	r3, [pc, #480]	; (80077a8 <HAL_RCC_OscConfig+0x288>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a77      	ldr	r2, [pc, #476]	; (80077a8 <HAL_RCC_OscConfig+0x288>)
 80075cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075d0:	6013      	str	r3, [r2, #0]
 80075d2:	4b75      	ldr	r3, [pc, #468]	; (80077a8 <HAL_RCC_OscConfig+0x288>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a74      	ldr	r2, [pc, #464]	; (80077a8 <HAL_RCC_OscConfig+0x288>)
 80075d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075dc:	6013      	str	r3, [r2, #0]
 80075de:	e00b      	b.n	80075f8 <HAL_RCC_OscConfig+0xd8>
 80075e0:	4b71      	ldr	r3, [pc, #452]	; (80077a8 <HAL_RCC_OscConfig+0x288>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a70      	ldr	r2, [pc, #448]	; (80077a8 <HAL_RCC_OscConfig+0x288>)
 80075e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075ea:	6013      	str	r3, [r2, #0]
 80075ec:	4b6e      	ldr	r3, [pc, #440]	; (80077a8 <HAL_RCC_OscConfig+0x288>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a6d      	ldr	r2, [pc, #436]	; (80077a8 <HAL_RCC_OscConfig+0x288>)
 80075f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d013      	beq.n	8007628 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007600:	f7fa fa06 	bl	8001a10 <HAL_GetTick>
 8007604:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007606:	e008      	b.n	800761a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007608:	f7fa fa02 	bl	8001a10 <HAL_GetTick>
 800760c:	4602      	mov	r2, r0
 800760e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007610:	1ad3      	subs	r3, r2, r3
 8007612:	2b64      	cmp	r3, #100	; 0x64
 8007614:	d901      	bls.n	800761a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007616:	2303      	movs	r3, #3
 8007618:	e3d4      	b.n	8007dc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800761a:	4b63      	ldr	r3, [pc, #396]	; (80077a8 <HAL_RCC_OscConfig+0x288>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007622:	2b00      	cmp	r3, #0
 8007624:	d0f0      	beq.n	8007608 <HAL_RCC_OscConfig+0xe8>
 8007626:	e014      	b.n	8007652 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007628:	f7fa f9f2 	bl	8001a10 <HAL_GetTick>
 800762c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800762e:	e008      	b.n	8007642 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007630:	f7fa f9ee 	bl	8001a10 <HAL_GetTick>
 8007634:	4602      	mov	r2, r0
 8007636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	2b64      	cmp	r3, #100	; 0x64
 800763c:	d901      	bls.n	8007642 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800763e:	2303      	movs	r3, #3
 8007640:	e3c0      	b.n	8007dc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007642:	4b59      	ldr	r3, [pc, #356]	; (80077a8 <HAL_RCC_OscConfig+0x288>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800764a:	2b00      	cmp	r3, #0
 800764c:	d1f0      	bne.n	8007630 <HAL_RCC_OscConfig+0x110>
 800764e:	e000      	b.n	8007652 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f003 0302 	and.w	r3, r3, #2
 800765a:	2b00      	cmp	r3, #0
 800765c:	f000 80ca 	beq.w	80077f4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007660:	4b51      	ldr	r3, [pc, #324]	; (80077a8 <HAL_RCC_OscConfig+0x288>)
 8007662:	691b      	ldr	r3, [r3, #16]
 8007664:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007668:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800766a:	4b4f      	ldr	r3, [pc, #316]	; (80077a8 <HAL_RCC_OscConfig+0x288>)
 800766c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800766e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007670:	6a3b      	ldr	r3, [r7, #32]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d007      	beq.n	8007686 <HAL_RCC_OscConfig+0x166>
 8007676:	6a3b      	ldr	r3, [r7, #32]
 8007678:	2b18      	cmp	r3, #24
 800767a:	d156      	bne.n	800772a <HAL_RCC_OscConfig+0x20a>
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	f003 0303 	and.w	r3, r3, #3
 8007682:	2b00      	cmp	r3, #0
 8007684:	d151      	bne.n	800772a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007686:	4b48      	ldr	r3, [pc, #288]	; (80077a8 <HAL_RCC_OscConfig+0x288>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 0304 	and.w	r3, r3, #4
 800768e:	2b00      	cmp	r3, #0
 8007690:	d005      	beq.n	800769e <HAL_RCC_OscConfig+0x17e>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d101      	bne.n	800769e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	e392      	b.n	8007dc4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800769e:	4b42      	ldr	r3, [pc, #264]	; (80077a8 <HAL_RCC_OscConfig+0x288>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f023 0219 	bic.w	r2, r3, #25
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	493f      	ldr	r1, [pc, #252]	; (80077a8 <HAL_RCC_OscConfig+0x288>)
 80076ac:	4313      	orrs	r3, r2
 80076ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076b0:	f7fa f9ae 	bl	8001a10 <HAL_GetTick>
 80076b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80076b6:	e008      	b.n	80076ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076b8:	f7fa f9aa 	bl	8001a10 <HAL_GetTick>
 80076bc:	4602      	mov	r2, r0
 80076be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	2b02      	cmp	r3, #2
 80076c4:	d901      	bls.n	80076ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80076c6:	2303      	movs	r3, #3
 80076c8:	e37c      	b.n	8007dc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80076ca:	4b37      	ldr	r3, [pc, #220]	; (80077a8 <HAL_RCC_OscConfig+0x288>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 0304 	and.w	r3, r3, #4
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d0f0      	beq.n	80076b8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076d6:	f7fa f9cb 	bl	8001a70 <HAL_GetREVID>
 80076da:	4603      	mov	r3, r0
 80076dc:	f241 0203 	movw	r2, #4099	; 0x1003
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d817      	bhi.n	8007714 <HAL_RCC_OscConfig+0x1f4>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	2b40      	cmp	r3, #64	; 0x40
 80076ea:	d108      	bne.n	80076fe <HAL_RCC_OscConfig+0x1de>
 80076ec:	4b2e      	ldr	r3, [pc, #184]	; (80077a8 <HAL_RCC_OscConfig+0x288>)
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80076f4:	4a2c      	ldr	r2, [pc, #176]	; (80077a8 <HAL_RCC_OscConfig+0x288>)
 80076f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076fa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80076fc:	e07a      	b.n	80077f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076fe:	4b2a      	ldr	r3, [pc, #168]	; (80077a8 <HAL_RCC_OscConfig+0x288>)
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	031b      	lsls	r3, r3, #12
 800770c:	4926      	ldr	r1, [pc, #152]	; (80077a8 <HAL_RCC_OscConfig+0x288>)
 800770e:	4313      	orrs	r3, r2
 8007710:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007712:	e06f      	b.n	80077f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007714:	4b24      	ldr	r3, [pc, #144]	; (80077a8 <HAL_RCC_OscConfig+0x288>)
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	691b      	ldr	r3, [r3, #16]
 8007720:	061b      	lsls	r3, r3, #24
 8007722:	4921      	ldr	r1, [pc, #132]	; (80077a8 <HAL_RCC_OscConfig+0x288>)
 8007724:	4313      	orrs	r3, r2
 8007726:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007728:	e064      	b.n	80077f4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d047      	beq.n	80077c2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007732:	4b1d      	ldr	r3, [pc, #116]	; (80077a8 <HAL_RCC_OscConfig+0x288>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f023 0219 	bic.w	r2, r3, #25
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	491a      	ldr	r1, [pc, #104]	; (80077a8 <HAL_RCC_OscConfig+0x288>)
 8007740:	4313      	orrs	r3, r2
 8007742:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007744:	f7fa f964 	bl	8001a10 <HAL_GetTick>
 8007748:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800774a:	e008      	b.n	800775e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800774c:	f7fa f960 	bl	8001a10 <HAL_GetTick>
 8007750:	4602      	mov	r2, r0
 8007752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	2b02      	cmp	r3, #2
 8007758:	d901      	bls.n	800775e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800775a:	2303      	movs	r3, #3
 800775c:	e332      	b.n	8007dc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800775e:	4b12      	ldr	r3, [pc, #72]	; (80077a8 <HAL_RCC_OscConfig+0x288>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f003 0304 	and.w	r3, r3, #4
 8007766:	2b00      	cmp	r3, #0
 8007768:	d0f0      	beq.n	800774c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800776a:	f7fa f981 	bl	8001a70 <HAL_GetREVID>
 800776e:	4603      	mov	r3, r0
 8007770:	f241 0203 	movw	r2, #4099	; 0x1003
 8007774:	4293      	cmp	r3, r2
 8007776:	d819      	bhi.n	80077ac <HAL_RCC_OscConfig+0x28c>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	691b      	ldr	r3, [r3, #16]
 800777c:	2b40      	cmp	r3, #64	; 0x40
 800777e:	d108      	bne.n	8007792 <HAL_RCC_OscConfig+0x272>
 8007780:	4b09      	ldr	r3, [pc, #36]	; (80077a8 <HAL_RCC_OscConfig+0x288>)
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007788:	4a07      	ldr	r2, [pc, #28]	; (80077a8 <HAL_RCC_OscConfig+0x288>)
 800778a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800778e:	6053      	str	r3, [r2, #4]
 8007790:	e030      	b.n	80077f4 <HAL_RCC_OscConfig+0x2d4>
 8007792:	4b05      	ldr	r3, [pc, #20]	; (80077a8 <HAL_RCC_OscConfig+0x288>)
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	031b      	lsls	r3, r3, #12
 80077a0:	4901      	ldr	r1, [pc, #4]	; (80077a8 <HAL_RCC_OscConfig+0x288>)
 80077a2:	4313      	orrs	r3, r2
 80077a4:	604b      	str	r3, [r1, #4]
 80077a6:	e025      	b.n	80077f4 <HAL_RCC_OscConfig+0x2d4>
 80077a8:	58024400 	.word	0x58024400
 80077ac:	4b9a      	ldr	r3, [pc, #616]	; (8007a18 <HAL_RCC_OscConfig+0x4f8>)
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	061b      	lsls	r3, r3, #24
 80077ba:	4997      	ldr	r1, [pc, #604]	; (8007a18 <HAL_RCC_OscConfig+0x4f8>)
 80077bc:	4313      	orrs	r3, r2
 80077be:	604b      	str	r3, [r1, #4]
 80077c0:	e018      	b.n	80077f4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077c2:	4b95      	ldr	r3, [pc, #596]	; (8007a18 <HAL_RCC_OscConfig+0x4f8>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a94      	ldr	r2, [pc, #592]	; (8007a18 <HAL_RCC_OscConfig+0x4f8>)
 80077c8:	f023 0301 	bic.w	r3, r3, #1
 80077cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ce:	f7fa f91f 	bl	8001a10 <HAL_GetTick>
 80077d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80077d4:	e008      	b.n	80077e8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077d6:	f7fa f91b 	bl	8001a10 <HAL_GetTick>
 80077da:	4602      	mov	r2, r0
 80077dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077de:	1ad3      	subs	r3, r2, r3
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d901      	bls.n	80077e8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80077e4:	2303      	movs	r3, #3
 80077e6:	e2ed      	b.n	8007dc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80077e8:	4b8b      	ldr	r3, [pc, #556]	; (8007a18 <HAL_RCC_OscConfig+0x4f8>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 0304 	and.w	r3, r3, #4
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d1f0      	bne.n	80077d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 0310 	and.w	r3, r3, #16
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f000 80a9 	beq.w	8007954 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007802:	4b85      	ldr	r3, [pc, #532]	; (8007a18 <HAL_RCC_OscConfig+0x4f8>)
 8007804:	691b      	ldr	r3, [r3, #16]
 8007806:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800780a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800780c:	4b82      	ldr	r3, [pc, #520]	; (8007a18 <HAL_RCC_OscConfig+0x4f8>)
 800780e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007810:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	2b08      	cmp	r3, #8
 8007816:	d007      	beq.n	8007828 <HAL_RCC_OscConfig+0x308>
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	2b18      	cmp	r3, #24
 800781c:	d13a      	bne.n	8007894 <HAL_RCC_OscConfig+0x374>
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	f003 0303 	and.w	r3, r3, #3
 8007824:	2b01      	cmp	r3, #1
 8007826:	d135      	bne.n	8007894 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007828:	4b7b      	ldr	r3, [pc, #492]	; (8007a18 <HAL_RCC_OscConfig+0x4f8>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007830:	2b00      	cmp	r3, #0
 8007832:	d005      	beq.n	8007840 <HAL_RCC_OscConfig+0x320>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	69db      	ldr	r3, [r3, #28]
 8007838:	2b80      	cmp	r3, #128	; 0x80
 800783a:	d001      	beq.n	8007840 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	e2c1      	b.n	8007dc4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007840:	f7fa f916 	bl	8001a70 <HAL_GetREVID>
 8007844:	4603      	mov	r3, r0
 8007846:	f241 0203 	movw	r2, #4099	; 0x1003
 800784a:	4293      	cmp	r3, r2
 800784c:	d817      	bhi.n	800787e <HAL_RCC_OscConfig+0x35e>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a1b      	ldr	r3, [r3, #32]
 8007852:	2b20      	cmp	r3, #32
 8007854:	d108      	bne.n	8007868 <HAL_RCC_OscConfig+0x348>
 8007856:	4b70      	ldr	r3, [pc, #448]	; (8007a18 <HAL_RCC_OscConfig+0x4f8>)
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800785e:	4a6e      	ldr	r2, [pc, #440]	; (8007a18 <HAL_RCC_OscConfig+0x4f8>)
 8007860:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007864:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007866:	e075      	b.n	8007954 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007868:	4b6b      	ldr	r3, [pc, #428]	; (8007a18 <HAL_RCC_OscConfig+0x4f8>)
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a1b      	ldr	r3, [r3, #32]
 8007874:	069b      	lsls	r3, r3, #26
 8007876:	4968      	ldr	r1, [pc, #416]	; (8007a18 <HAL_RCC_OscConfig+0x4f8>)
 8007878:	4313      	orrs	r3, r2
 800787a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800787c:	e06a      	b.n	8007954 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800787e:	4b66      	ldr	r3, [pc, #408]	; (8007a18 <HAL_RCC_OscConfig+0x4f8>)
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a1b      	ldr	r3, [r3, #32]
 800788a:	061b      	lsls	r3, r3, #24
 800788c:	4962      	ldr	r1, [pc, #392]	; (8007a18 <HAL_RCC_OscConfig+0x4f8>)
 800788e:	4313      	orrs	r3, r2
 8007890:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007892:	e05f      	b.n	8007954 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	69db      	ldr	r3, [r3, #28]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d042      	beq.n	8007922 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800789c:	4b5e      	ldr	r3, [pc, #376]	; (8007a18 <HAL_RCC_OscConfig+0x4f8>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a5d      	ldr	r2, [pc, #372]	; (8007a18 <HAL_RCC_OscConfig+0x4f8>)
 80078a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078a8:	f7fa f8b2 	bl	8001a10 <HAL_GetTick>
 80078ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80078ae:	e008      	b.n	80078c2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80078b0:	f7fa f8ae 	bl	8001a10 <HAL_GetTick>
 80078b4:	4602      	mov	r2, r0
 80078b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d901      	bls.n	80078c2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80078be:	2303      	movs	r3, #3
 80078c0:	e280      	b.n	8007dc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80078c2:	4b55      	ldr	r3, [pc, #340]	; (8007a18 <HAL_RCC_OscConfig+0x4f8>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d0f0      	beq.n	80078b0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80078ce:	f7fa f8cf 	bl	8001a70 <HAL_GetREVID>
 80078d2:	4603      	mov	r3, r0
 80078d4:	f241 0203 	movw	r2, #4099	; 0x1003
 80078d8:	4293      	cmp	r3, r2
 80078da:	d817      	bhi.n	800790c <HAL_RCC_OscConfig+0x3ec>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a1b      	ldr	r3, [r3, #32]
 80078e0:	2b20      	cmp	r3, #32
 80078e2:	d108      	bne.n	80078f6 <HAL_RCC_OscConfig+0x3d6>
 80078e4:	4b4c      	ldr	r3, [pc, #304]	; (8007a18 <HAL_RCC_OscConfig+0x4f8>)
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80078ec:	4a4a      	ldr	r2, [pc, #296]	; (8007a18 <HAL_RCC_OscConfig+0x4f8>)
 80078ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078f2:	6053      	str	r3, [r2, #4]
 80078f4:	e02e      	b.n	8007954 <HAL_RCC_OscConfig+0x434>
 80078f6:	4b48      	ldr	r3, [pc, #288]	; (8007a18 <HAL_RCC_OscConfig+0x4f8>)
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a1b      	ldr	r3, [r3, #32]
 8007902:	069b      	lsls	r3, r3, #26
 8007904:	4944      	ldr	r1, [pc, #272]	; (8007a18 <HAL_RCC_OscConfig+0x4f8>)
 8007906:	4313      	orrs	r3, r2
 8007908:	604b      	str	r3, [r1, #4]
 800790a:	e023      	b.n	8007954 <HAL_RCC_OscConfig+0x434>
 800790c:	4b42      	ldr	r3, [pc, #264]	; (8007a18 <HAL_RCC_OscConfig+0x4f8>)
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6a1b      	ldr	r3, [r3, #32]
 8007918:	061b      	lsls	r3, r3, #24
 800791a:	493f      	ldr	r1, [pc, #252]	; (8007a18 <HAL_RCC_OscConfig+0x4f8>)
 800791c:	4313      	orrs	r3, r2
 800791e:	60cb      	str	r3, [r1, #12]
 8007920:	e018      	b.n	8007954 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007922:	4b3d      	ldr	r3, [pc, #244]	; (8007a18 <HAL_RCC_OscConfig+0x4f8>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a3c      	ldr	r2, [pc, #240]	; (8007a18 <HAL_RCC_OscConfig+0x4f8>)
 8007928:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800792c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800792e:	f7fa f86f 	bl	8001a10 <HAL_GetTick>
 8007932:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007934:	e008      	b.n	8007948 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007936:	f7fa f86b 	bl	8001a10 <HAL_GetTick>
 800793a:	4602      	mov	r2, r0
 800793c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793e:	1ad3      	subs	r3, r2, r3
 8007940:	2b02      	cmp	r3, #2
 8007942:	d901      	bls.n	8007948 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007944:	2303      	movs	r3, #3
 8007946:	e23d      	b.n	8007dc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007948:	4b33      	ldr	r3, [pc, #204]	; (8007a18 <HAL_RCC_OscConfig+0x4f8>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1f0      	bne.n	8007936 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 0308 	and.w	r3, r3, #8
 800795c:	2b00      	cmp	r3, #0
 800795e:	d036      	beq.n	80079ce <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	695b      	ldr	r3, [r3, #20]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d019      	beq.n	800799c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007968:	4b2b      	ldr	r3, [pc, #172]	; (8007a18 <HAL_RCC_OscConfig+0x4f8>)
 800796a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800796c:	4a2a      	ldr	r2, [pc, #168]	; (8007a18 <HAL_RCC_OscConfig+0x4f8>)
 800796e:	f043 0301 	orr.w	r3, r3, #1
 8007972:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007974:	f7fa f84c 	bl	8001a10 <HAL_GetTick>
 8007978:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800797a:	e008      	b.n	800798e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800797c:	f7fa f848 	bl	8001a10 <HAL_GetTick>
 8007980:	4602      	mov	r2, r0
 8007982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007984:	1ad3      	subs	r3, r2, r3
 8007986:	2b02      	cmp	r3, #2
 8007988:	d901      	bls.n	800798e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800798a:	2303      	movs	r3, #3
 800798c:	e21a      	b.n	8007dc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800798e:	4b22      	ldr	r3, [pc, #136]	; (8007a18 <HAL_RCC_OscConfig+0x4f8>)
 8007990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007992:	f003 0302 	and.w	r3, r3, #2
 8007996:	2b00      	cmp	r3, #0
 8007998:	d0f0      	beq.n	800797c <HAL_RCC_OscConfig+0x45c>
 800799a:	e018      	b.n	80079ce <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800799c:	4b1e      	ldr	r3, [pc, #120]	; (8007a18 <HAL_RCC_OscConfig+0x4f8>)
 800799e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079a0:	4a1d      	ldr	r2, [pc, #116]	; (8007a18 <HAL_RCC_OscConfig+0x4f8>)
 80079a2:	f023 0301 	bic.w	r3, r3, #1
 80079a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079a8:	f7fa f832 	bl	8001a10 <HAL_GetTick>
 80079ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80079ae:	e008      	b.n	80079c2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80079b0:	f7fa f82e 	bl	8001a10 <HAL_GetTick>
 80079b4:	4602      	mov	r2, r0
 80079b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b8:	1ad3      	subs	r3, r2, r3
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	d901      	bls.n	80079c2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80079be:	2303      	movs	r3, #3
 80079c0:	e200      	b.n	8007dc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80079c2:	4b15      	ldr	r3, [pc, #84]	; (8007a18 <HAL_RCC_OscConfig+0x4f8>)
 80079c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079c6:	f003 0302 	and.w	r3, r3, #2
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1f0      	bne.n	80079b0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f003 0320 	and.w	r3, r3, #32
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d039      	beq.n	8007a4e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d01c      	beq.n	8007a1c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80079e2:	4b0d      	ldr	r3, [pc, #52]	; (8007a18 <HAL_RCC_OscConfig+0x4f8>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a0c      	ldr	r2, [pc, #48]	; (8007a18 <HAL_RCC_OscConfig+0x4f8>)
 80079e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80079ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80079ee:	f7fa f80f 	bl	8001a10 <HAL_GetTick>
 80079f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80079f4:	e008      	b.n	8007a08 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80079f6:	f7fa f80b 	bl	8001a10 <HAL_GetTick>
 80079fa:	4602      	mov	r2, r0
 80079fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fe:	1ad3      	subs	r3, r2, r3
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	d901      	bls.n	8007a08 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007a04:	2303      	movs	r3, #3
 8007a06:	e1dd      	b.n	8007dc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007a08:	4b03      	ldr	r3, [pc, #12]	; (8007a18 <HAL_RCC_OscConfig+0x4f8>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d0f0      	beq.n	80079f6 <HAL_RCC_OscConfig+0x4d6>
 8007a14:	e01b      	b.n	8007a4e <HAL_RCC_OscConfig+0x52e>
 8007a16:	bf00      	nop
 8007a18:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007a1c:	4b9b      	ldr	r3, [pc, #620]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a9a      	ldr	r2, [pc, #616]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007a22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a26:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007a28:	f7f9 fff2 	bl	8001a10 <HAL_GetTick>
 8007a2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007a2e:	e008      	b.n	8007a42 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007a30:	f7f9 ffee 	bl	8001a10 <HAL_GetTick>
 8007a34:	4602      	mov	r2, r0
 8007a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a38:	1ad3      	subs	r3, r2, r3
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d901      	bls.n	8007a42 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007a3e:	2303      	movs	r3, #3
 8007a40:	e1c0      	b.n	8007dc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007a42:	4b92      	ldr	r3, [pc, #584]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1f0      	bne.n	8007a30 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f003 0304 	and.w	r3, r3, #4
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	f000 8081 	beq.w	8007b5e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007a5c:	4b8c      	ldr	r3, [pc, #560]	; (8007c90 <HAL_RCC_OscConfig+0x770>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a8b      	ldr	r2, [pc, #556]	; (8007c90 <HAL_RCC_OscConfig+0x770>)
 8007a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a68:	f7f9 ffd2 	bl	8001a10 <HAL_GetTick>
 8007a6c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a6e:	e008      	b.n	8007a82 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a70:	f7f9 ffce 	bl	8001a10 <HAL_GetTick>
 8007a74:	4602      	mov	r2, r0
 8007a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a78:	1ad3      	subs	r3, r2, r3
 8007a7a:	2b64      	cmp	r3, #100	; 0x64
 8007a7c:	d901      	bls.n	8007a82 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007a7e:	2303      	movs	r3, #3
 8007a80:	e1a0      	b.n	8007dc4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a82:	4b83      	ldr	r3, [pc, #524]	; (8007c90 <HAL_RCC_OscConfig+0x770>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d0f0      	beq.n	8007a70 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d106      	bne.n	8007aa4 <HAL_RCC_OscConfig+0x584>
 8007a96:	4b7d      	ldr	r3, [pc, #500]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a9a:	4a7c      	ldr	r2, [pc, #496]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007a9c:	f043 0301 	orr.w	r3, r3, #1
 8007aa0:	6713      	str	r3, [r2, #112]	; 0x70
 8007aa2:	e02d      	b.n	8007b00 <HAL_RCC_OscConfig+0x5e0>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d10c      	bne.n	8007ac6 <HAL_RCC_OscConfig+0x5a6>
 8007aac:	4b77      	ldr	r3, [pc, #476]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ab0:	4a76      	ldr	r2, [pc, #472]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007ab2:	f023 0301 	bic.w	r3, r3, #1
 8007ab6:	6713      	str	r3, [r2, #112]	; 0x70
 8007ab8:	4b74      	ldr	r3, [pc, #464]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007abc:	4a73      	ldr	r2, [pc, #460]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007abe:	f023 0304 	bic.w	r3, r3, #4
 8007ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8007ac4:	e01c      	b.n	8007b00 <HAL_RCC_OscConfig+0x5e0>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	2b05      	cmp	r3, #5
 8007acc:	d10c      	bne.n	8007ae8 <HAL_RCC_OscConfig+0x5c8>
 8007ace:	4b6f      	ldr	r3, [pc, #444]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ad2:	4a6e      	ldr	r2, [pc, #440]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007ad4:	f043 0304 	orr.w	r3, r3, #4
 8007ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8007ada:	4b6c      	ldr	r3, [pc, #432]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ade:	4a6b      	ldr	r2, [pc, #428]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007ae0:	f043 0301 	orr.w	r3, r3, #1
 8007ae4:	6713      	str	r3, [r2, #112]	; 0x70
 8007ae6:	e00b      	b.n	8007b00 <HAL_RCC_OscConfig+0x5e0>
 8007ae8:	4b68      	ldr	r3, [pc, #416]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aec:	4a67      	ldr	r2, [pc, #412]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007aee:	f023 0301 	bic.w	r3, r3, #1
 8007af2:	6713      	str	r3, [r2, #112]	; 0x70
 8007af4:	4b65      	ldr	r3, [pc, #404]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007af8:	4a64      	ldr	r2, [pc, #400]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007afa:	f023 0304 	bic.w	r3, r3, #4
 8007afe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d015      	beq.n	8007b34 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b08:	f7f9 ff82 	bl	8001a10 <HAL_GetTick>
 8007b0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b0e:	e00a      	b.n	8007b26 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b10:	f7f9 ff7e 	bl	8001a10 <HAL_GetTick>
 8007b14:	4602      	mov	r2, r0
 8007b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b18:	1ad3      	subs	r3, r2, r3
 8007b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d901      	bls.n	8007b26 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007b22:	2303      	movs	r3, #3
 8007b24:	e14e      	b.n	8007dc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b26:	4b59      	ldr	r3, [pc, #356]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b2a:	f003 0302 	and.w	r3, r3, #2
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d0ee      	beq.n	8007b10 <HAL_RCC_OscConfig+0x5f0>
 8007b32:	e014      	b.n	8007b5e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b34:	f7f9 ff6c 	bl	8001a10 <HAL_GetTick>
 8007b38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007b3a:	e00a      	b.n	8007b52 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b3c:	f7f9 ff68 	bl	8001a10 <HAL_GetTick>
 8007b40:	4602      	mov	r2, r0
 8007b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b44:	1ad3      	subs	r3, r2, r3
 8007b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d901      	bls.n	8007b52 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007b4e:	2303      	movs	r3, #3
 8007b50:	e138      	b.n	8007dc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007b52:	4b4e      	ldr	r3, [pc, #312]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b56:	f003 0302 	and.w	r3, r3, #2
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d1ee      	bne.n	8007b3c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	f000 812d 	beq.w	8007dc2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007b68:	4b48      	ldr	r3, [pc, #288]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007b6a:	691b      	ldr	r3, [r3, #16]
 8007b6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b70:	2b18      	cmp	r3, #24
 8007b72:	f000 80bd 	beq.w	8007cf0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	f040 809e 	bne.w	8007cbc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b80:	4b42      	ldr	r3, [pc, #264]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a41      	ldr	r2, [pc, #260]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007b86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b8c:	f7f9 ff40 	bl	8001a10 <HAL_GetTick>
 8007b90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b92:	e008      	b.n	8007ba6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b94:	f7f9 ff3c 	bl	8001a10 <HAL_GetTick>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9c:	1ad3      	subs	r3, r2, r3
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	d901      	bls.n	8007ba6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e10e      	b.n	8007dc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ba6:	4b39      	ldr	r3, [pc, #228]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1f0      	bne.n	8007b94 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007bb2:	4b36      	ldr	r3, [pc, #216]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007bb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007bb6:	4b37      	ldr	r3, [pc, #220]	; (8007c94 <HAL_RCC_OscConfig+0x774>)
 8007bb8:	4013      	ands	r3, r2
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007bc2:	0112      	lsls	r2, r2, #4
 8007bc4:	430a      	orrs	r2, r1
 8007bc6:	4931      	ldr	r1, [pc, #196]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	628b      	str	r3, [r1, #40]	; 0x28
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd0:	3b01      	subs	r3, #1
 8007bd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	025b      	lsls	r3, r3, #9
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	431a      	orrs	r2, r3
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be6:	3b01      	subs	r3, #1
 8007be8:	041b      	lsls	r3, r3, #16
 8007bea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007bee:	431a      	orrs	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bf4:	3b01      	subs	r3, #1
 8007bf6:	061b      	lsls	r3, r3, #24
 8007bf8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007bfc:	4923      	ldr	r1, [pc, #140]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007c02:	4b22      	ldr	r3, [pc, #136]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c06:	4a21      	ldr	r2, [pc, #132]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007c08:	f023 0301 	bic.w	r3, r3, #1
 8007c0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007c0e:	4b1f      	ldr	r3, [pc, #124]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007c10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c12:	4b21      	ldr	r3, [pc, #132]	; (8007c98 <HAL_RCC_OscConfig+0x778>)
 8007c14:	4013      	ands	r3, r2
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007c1a:	00d2      	lsls	r2, r2, #3
 8007c1c:	491b      	ldr	r1, [pc, #108]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007c22:	4b1a      	ldr	r3, [pc, #104]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c26:	f023 020c 	bic.w	r2, r3, #12
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c2e:	4917      	ldr	r1, [pc, #92]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007c30:	4313      	orrs	r3, r2
 8007c32:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007c34:	4b15      	ldr	r3, [pc, #84]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c38:	f023 0202 	bic.w	r2, r3, #2
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c40:	4912      	ldr	r1, [pc, #72]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007c42:	4313      	orrs	r3, r2
 8007c44:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007c46:	4b11      	ldr	r3, [pc, #68]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c4a:	4a10      	ldr	r2, [pc, #64]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c52:	4b0e      	ldr	r3, [pc, #56]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c56:	4a0d      	ldr	r2, [pc, #52]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007c5e:	4b0b      	ldr	r3, [pc, #44]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c62:	4a0a      	ldr	r2, [pc, #40]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007c64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007c6a:	4b08      	ldr	r3, [pc, #32]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6e:	4a07      	ldr	r2, [pc, #28]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007c70:	f043 0301 	orr.w	r3, r3, #1
 8007c74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c76:	4b05      	ldr	r3, [pc, #20]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a04      	ldr	r2, [pc, #16]	; (8007c8c <HAL_RCC_OscConfig+0x76c>)
 8007c7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c82:	f7f9 fec5 	bl	8001a10 <HAL_GetTick>
 8007c86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007c88:	e011      	b.n	8007cae <HAL_RCC_OscConfig+0x78e>
 8007c8a:	bf00      	nop
 8007c8c:	58024400 	.word	0x58024400
 8007c90:	58024800 	.word	0x58024800
 8007c94:	fffffc0c 	.word	0xfffffc0c
 8007c98:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c9c:	f7f9 feb8 	bl	8001a10 <HAL_GetTick>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca4:	1ad3      	subs	r3, r2, r3
 8007ca6:	2b02      	cmp	r3, #2
 8007ca8:	d901      	bls.n	8007cae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007caa:	2303      	movs	r3, #3
 8007cac:	e08a      	b.n	8007dc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007cae:	4b47      	ldr	r3, [pc, #284]	; (8007dcc <HAL_RCC_OscConfig+0x8ac>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d0f0      	beq.n	8007c9c <HAL_RCC_OscConfig+0x77c>
 8007cba:	e082      	b.n	8007dc2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cbc:	4b43      	ldr	r3, [pc, #268]	; (8007dcc <HAL_RCC_OscConfig+0x8ac>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a42      	ldr	r2, [pc, #264]	; (8007dcc <HAL_RCC_OscConfig+0x8ac>)
 8007cc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cc8:	f7f9 fea2 	bl	8001a10 <HAL_GetTick>
 8007ccc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007cce:	e008      	b.n	8007ce2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cd0:	f7f9 fe9e 	bl	8001a10 <HAL_GetTick>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd8:	1ad3      	subs	r3, r2, r3
 8007cda:	2b02      	cmp	r3, #2
 8007cdc:	d901      	bls.n	8007ce2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007cde:	2303      	movs	r3, #3
 8007ce0:	e070      	b.n	8007dc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ce2:	4b3a      	ldr	r3, [pc, #232]	; (8007dcc <HAL_RCC_OscConfig+0x8ac>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1f0      	bne.n	8007cd0 <HAL_RCC_OscConfig+0x7b0>
 8007cee:	e068      	b.n	8007dc2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007cf0:	4b36      	ldr	r3, [pc, #216]	; (8007dcc <HAL_RCC_OscConfig+0x8ac>)
 8007cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007cf6:	4b35      	ldr	r3, [pc, #212]	; (8007dcc <HAL_RCC_OscConfig+0x8ac>)
 8007cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cfa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d031      	beq.n	8007d68 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	f003 0203 	and.w	r2, r3, #3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d12a      	bne.n	8007d68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	091b      	lsrs	r3, r3, #4
 8007d16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d122      	bne.n	8007d68 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d2c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d11a      	bne.n	8007d68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	0a5b      	lsrs	r3, r3, #9
 8007d36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d3e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d111      	bne.n	8007d68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	0c1b      	lsrs	r3, r3, #16
 8007d48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d50:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d108      	bne.n	8007d68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	0e1b      	lsrs	r3, r3, #24
 8007d5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d62:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d001      	beq.n	8007d6c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e02b      	b.n	8007dc4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007d6c:	4b17      	ldr	r3, [pc, #92]	; (8007dcc <HAL_RCC_OscConfig+0x8ac>)
 8007d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d70:	08db      	lsrs	r3, r3, #3
 8007d72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d76:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d7c:	693a      	ldr	r2, [r7, #16]
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d01f      	beq.n	8007dc2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007d82:	4b12      	ldr	r3, [pc, #72]	; (8007dcc <HAL_RCC_OscConfig+0x8ac>)
 8007d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d86:	4a11      	ldr	r2, [pc, #68]	; (8007dcc <HAL_RCC_OscConfig+0x8ac>)
 8007d88:	f023 0301 	bic.w	r3, r3, #1
 8007d8c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007d8e:	f7f9 fe3f 	bl	8001a10 <HAL_GetTick>
 8007d92:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007d94:	bf00      	nop
 8007d96:	f7f9 fe3b 	bl	8001a10 <HAL_GetTick>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d0f9      	beq.n	8007d96 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007da2:	4b0a      	ldr	r3, [pc, #40]	; (8007dcc <HAL_RCC_OscConfig+0x8ac>)
 8007da4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007da6:	4b0a      	ldr	r3, [pc, #40]	; (8007dd0 <HAL_RCC_OscConfig+0x8b0>)
 8007da8:	4013      	ands	r3, r2
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007dae:	00d2      	lsls	r2, r2, #3
 8007db0:	4906      	ldr	r1, [pc, #24]	; (8007dcc <HAL_RCC_OscConfig+0x8ac>)
 8007db2:	4313      	orrs	r3, r2
 8007db4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007db6:	4b05      	ldr	r3, [pc, #20]	; (8007dcc <HAL_RCC_OscConfig+0x8ac>)
 8007db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dba:	4a04      	ldr	r2, [pc, #16]	; (8007dcc <HAL_RCC_OscConfig+0x8ac>)
 8007dbc:	f043 0301 	orr.w	r3, r3, #1
 8007dc0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3730      	adds	r7, #48	; 0x30
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	58024400 	.word	0x58024400
 8007dd0:	ffff0007 	.word	0xffff0007

08007dd4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b086      	sub	sp, #24
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d101      	bne.n	8007de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007de4:	2301      	movs	r3, #1
 8007de6:	e19c      	b.n	8008122 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007de8:	4b8a      	ldr	r3, [pc, #552]	; (8008014 <HAL_RCC_ClockConfig+0x240>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f003 030f 	and.w	r3, r3, #15
 8007df0:	683a      	ldr	r2, [r7, #0]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d910      	bls.n	8007e18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007df6:	4b87      	ldr	r3, [pc, #540]	; (8008014 <HAL_RCC_ClockConfig+0x240>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f023 020f 	bic.w	r2, r3, #15
 8007dfe:	4985      	ldr	r1, [pc, #532]	; (8008014 <HAL_RCC_ClockConfig+0x240>)
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e06:	4b83      	ldr	r3, [pc, #524]	; (8008014 <HAL_RCC_ClockConfig+0x240>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 030f 	and.w	r3, r3, #15
 8007e0e:	683a      	ldr	r2, [r7, #0]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d001      	beq.n	8007e18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	e184      	b.n	8008122 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f003 0304 	and.w	r3, r3, #4
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d010      	beq.n	8007e46 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	691a      	ldr	r2, [r3, #16]
 8007e28:	4b7b      	ldr	r3, [pc, #492]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007e2a:	699b      	ldr	r3, [r3, #24]
 8007e2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d908      	bls.n	8007e46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007e34:	4b78      	ldr	r3, [pc, #480]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007e36:	699b      	ldr	r3, [r3, #24]
 8007e38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	691b      	ldr	r3, [r3, #16]
 8007e40:	4975      	ldr	r1, [pc, #468]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007e42:	4313      	orrs	r3, r2
 8007e44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f003 0308 	and.w	r3, r3, #8
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d010      	beq.n	8007e74 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	695a      	ldr	r2, [r3, #20]
 8007e56:	4b70      	ldr	r3, [pc, #448]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007e58:	69db      	ldr	r3, [r3, #28]
 8007e5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d908      	bls.n	8007e74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007e62:	4b6d      	ldr	r3, [pc, #436]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007e64:	69db      	ldr	r3, [r3, #28]
 8007e66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	695b      	ldr	r3, [r3, #20]
 8007e6e:	496a      	ldr	r1, [pc, #424]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007e70:	4313      	orrs	r3, r2
 8007e72:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 0310 	and.w	r3, r3, #16
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d010      	beq.n	8007ea2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	699a      	ldr	r2, [r3, #24]
 8007e84:	4b64      	ldr	r3, [pc, #400]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007e86:	69db      	ldr	r3, [r3, #28]
 8007e88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d908      	bls.n	8007ea2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007e90:	4b61      	ldr	r3, [pc, #388]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007e92:	69db      	ldr	r3, [r3, #28]
 8007e94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	699b      	ldr	r3, [r3, #24]
 8007e9c:	495e      	ldr	r1, [pc, #376]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f003 0320 	and.w	r3, r3, #32
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d010      	beq.n	8007ed0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	69da      	ldr	r2, [r3, #28]
 8007eb2:	4b59      	ldr	r3, [pc, #356]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007eb4:	6a1b      	ldr	r3, [r3, #32]
 8007eb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d908      	bls.n	8007ed0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007ebe:	4b56      	ldr	r3, [pc, #344]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007ec0:	6a1b      	ldr	r3, [r3, #32]
 8007ec2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	69db      	ldr	r3, [r3, #28]
 8007eca:	4953      	ldr	r1, [pc, #332]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 0302 	and.w	r3, r3, #2
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d010      	beq.n	8007efe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	68da      	ldr	r2, [r3, #12]
 8007ee0:	4b4d      	ldr	r3, [pc, #308]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007ee2:	699b      	ldr	r3, [r3, #24]
 8007ee4:	f003 030f 	and.w	r3, r3, #15
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d908      	bls.n	8007efe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007eec:	4b4a      	ldr	r3, [pc, #296]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007eee:	699b      	ldr	r3, [r3, #24]
 8007ef0:	f023 020f 	bic.w	r2, r3, #15
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	4947      	ldr	r1, [pc, #284]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007efa:	4313      	orrs	r3, r2
 8007efc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 0301 	and.w	r3, r3, #1
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d055      	beq.n	8007fb6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007f0a:	4b43      	ldr	r3, [pc, #268]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007f0c:	699b      	ldr	r3, [r3, #24]
 8007f0e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	4940      	ldr	r1, [pc, #256]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d107      	bne.n	8007f34 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007f24:	4b3c      	ldr	r3, [pc, #240]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d121      	bne.n	8007f74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	e0f6      	b.n	8008122 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	2b03      	cmp	r3, #3
 8007f3a:	d107      	bne.n	8007f4c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007f3c:	4b36      	ldr	r3, [pc, #216]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d115      	bne.n	8007f74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e0ea      	b.n	8008122 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d107      	bne.n	8007f64 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007f54:	4b30      	ldr	r3, [pc, #192]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d109      	bne.n	8007f74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	e0de      	b.n	8008122 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f64:	4b2c      	ldr	r3, [pc, #176]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 0304 	and.w	r3, r3, #4
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d101      	bne.n	8007f74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e0d6      	b.n	8008122 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007f74:	4b28      	ldr	r3, [pc, #160]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007f76:	691b      	ldr	r3, [r3, #16]
 8007f78:	f023 0207 	bic.w	r2, r3, #7
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	4925      	ldr	r1, [pc, #148]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007f82:	4313      	orrs	r3, r2
 8007f84:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f86:	f7f9 fd43 	bl	8001a10 <HAL_GetTick>
 8007f8a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f8c:	e00a      	b.n	8007fa4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f8e:	f7f9 fd3f 	bl	8001a10 <HAL_GetTick>
 8007f92:	4602      	mov	r2, r0
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	1ad3      	subs	r3, r2, r3
 8007f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d901      	bls.n	8007fa4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	e0be      	b.n	8008122 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fa4:	4b1c      	ldr	r3, [pc, #112]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007fa6:	691b      	ldr	r3, [r3, #16]
 8007fa8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	00db      	lsls	r3, r3, #3
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d1eb      	bne.n	8007f8e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f003 0302 	and.w	r3, r3, #2
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d010      	beq.n	8007fe4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	68da      	ldr	r2, [r3, #12]
 8007fc6:	4b14      	ldr	r3, [pc, #80]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007fc8:	699b      	ldr	r3, [r3, #24]
 8007fca:	f003 030f 	and.w	r3, r3, #15
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d208      	bcs.n	8007fe4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007fd2:	4b11      	ldr	r3, [pc, #68]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007fd4:	699b      	ldr	r3, [r3, #24]
 8007fd6:	f023 020f 	bic.w	r2, r3, #15
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	490e      	ldr	r1, [pc, #56]	; (8008018 <HAL_RCC_ClockConfig+0x244>)
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007fe4:	4b0b      	ldr	r3, [pc, #44]	; (8008014 <HAL_RCC_ClockConfig+0x240>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f003 030f 	and.w	r3, r3, #15
 8007fec:	683a      	ldr	r2, [r7, #0]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d214      	bcs.n	800801c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ff2:	4b08      	ldr	r3, [pc, #32]	; (8008014 <HAL_RCC_ClockConfig+0x240>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f023 020f 	bic.w	r2, r3, #15
 8007ffa:	4906      	ldr	r1, [pc, #24]	; (8008014 <HAL_RCC_ClockConfig+0x240>)
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	4313      	orrs	r3, r2
 8008000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008002:	4b04      	ldr	r3, [pc, #16]	; (8008014 <HAL_RCC_ClockConfig+0x240>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f003 030f 	and.w	r3, r3, #15
 800800a:	683a      	ldr	r2, [r7, #0]
 800800c:	429a      	cmp	r2, r3
 800800e:	d005      	beq.n	800801c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	e086      	b.n	8008122 <HAL_RCC_ClockConfig+0x34e>
 8008014:	52002000 	.word	0x52002000
 8008018:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f003 0304 	and.w	r3, r3, #4
 8008024:	2b00      	cmp	r3, #0
 8008026:	d010      	beq.n	800804a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	691a      	ldr	r2, [r3, #16]
 800802c:	4b3f      	ldr	r3, [pc, #252]	; (800812c <HAL_RCC_ClockConfig+0x358>)
 800802e:	699b      	ldr	r3, [r3, #24]
 8008030:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008034:	429a      	cmp	r2, r3
 8008036:	d208      	bcs.n	800804a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008038:	4b3c      	ldr	r3, [pc, #240]	; (800812c <HAL_RCC_ClockConfig+0x358>)
 800803a:	699b      	ldr	r3, [r3, #24]
 800803c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	691b      	ldr	r3, [r3, #16]
 8008044:	4939      	ldr	r1, [pc, #228]	; (800812c <HAL_RCC_ClockConfig+0x358>)
 8008046:	4313      	orrs	r3, r2
 8008048:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 0308 	and.w	r3, r3, #8
 8008052:	2b00      	cmp	r3, #0
 8008054:	d010      	beq.n	8008078 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	695a      	ldr	r2, [r3, #20]
 800805a:	4b34      	ldr	r3, [pc, #208]	; (800812c <HAL_RCC_ClockConfig+0x358>)
 800805c:	69db      	ldr	r3, [r3, #28]
 800805e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008062:	429a      	cmp	r2, r3
 8008064:	d208      	bcs.n	8008078 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008066:	4b31      	ldr	r3, [pc, #196]	; (800812c <HAL_RCC_ClockConfig+0x358>)
 8008068:	69db      	ldr	r3, [r3, #28]
 800806a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	695b      	ldr	r3, [r3, #20]
 8008072:	492e      	ldr	r1, [pc, #184]	; (800812c <HAL_RCC_ClockConfig+0x358>)
 8008074:	4313      	orrs	r3, r2
 8008076:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f003 0310 	and.w	r3, r3, #16
 8008080:	2b00      	cmp	r3, #0
 8008082:	d010      	beq.n	80080a6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	699a      	ldr	r2, [r3, #24]
 8008088:	4b28      	ldr	r3, [pc, #160]	; (800812c <HAL_RCC_ClockConfig+0x358>)
 800808a:	69db      	ldr	r3, [r3, #28]
 800808c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008090:	429a      	cmp	r2, r3
 8008092:	d208      	bcs.n	80080a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008094:	4b25      	ldr	r3, [pc, #148]	; (800812c <HAL_RCC_ClockConfig+0x358>)
 8008096:	69db      	ldr	r3, [r3, #28]
 8008098:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	699b      	ldr	r3, [r3, #24]
 80080a0:	4922      	ldr	r1, [pc, #136]	; (800812c <HAL_RCC_ClockConfig+0x358>)
 80080a2:	4313      	orrs	r3, r2
 80080a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f003 0320 	and.w	r3, r3, #32
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d010      	beq.n	80080d4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	69da      	ldr	r2, [r3, #28]
 80080b6:	4b1d      	ldr	r3, [pc, #116]	; (800812c <HAL_RCC_ClockConfig+0x358>)
 80080b8:	6a1b      	ldr	r3, [r3, #32]
 80080ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80080be:	429a      	cmp	r2, r3
 80080c0:	d208      	bcs.n	80080d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80080c2:	4b1a      	ldr	r3, [pc, #104]	; (800812c <HAL_RCC_ClockConfig+0x358>)
 80080c4:	6a1b      	ldr	r3, [r3, #32]
 80080c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	69db      	ldr	r3, [r3, #28]
 80080ce:	4917      	ldr	r1, [pc, #92]	; (800812c <HAL_RCC_ClockConfig+0x358>)
 80080d0:	4313      	orrs	r3, r2
 80080d2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80080d4:	f000 f834 	bl	8008140 <HAL_RCC_GetSysClockFreq>
 80080d8:	4602      	mov	r2, r0
 80080da:	4b14      	ldr	r3, [pc, #80]	; (800812c <HAL_RCC_ClockConfig+0x358>)
 80080dc:	699b      	ldr	r3, [r3, #24]
 80080de:	0a1b      	lsrs	r3, r3, #8
 80080e0:	f003 030f 	and.w	r3, r3, #15
 80080e4:	4912      	ldr	r1, [pc, #72]	; (8008130 <HAL_RCC_ClockConfig+0x35c>)
 80080e6:	5ccb      	ldrb	r3, [r1, r3]
 80080e8:	f003 031f 	and.w	r3, r3, #31
 80080ec:	fa22 f303 	lsr.w	r3, r2, r3
 80080f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80080f2:	4b0e      	ldr	r3, [pc, #56]	; (800812c <HAL_RCC_ClockConfig+0x358>)
 80080f4:	699b      	ldr	r3, [r3, #24]
 80080f6:	f003 030f 	and.w	r3, r3, #15
 80080fa:	4a0d      	ldr	r2, [pc, #52]	; (8008130 <HAL_RCC_ClockConfig+0x35c>)
 80080fc:	5cd3      	ldrb	r3, [r2, r3]
 80080fe:	f003 031f 	and.w	r3, r3, #31
 8008102:	693a      	ldr	r2, [r7, #16]
 8008104:	fa22 f303 	lsr.w	r3, r2, r3
 8008108:	4a0a      	ldr	r2, [pc, #40]	; (8008134 <HAL_RCC_ClockConfig+0x360>)
 800810a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800810c:	4a0a      	ldr	r2, [pc, #40]	; (8008138 <HAL_RCC_ClockConfig+0x364>)
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008112:	4b0a      	ldr	r3, [pc, #40]	; (800813c <HAL_RCC_ClockConfig+0x368>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4618      	mov	r0, r3
 8008118:	f7f9 fc30 	bl	800197c <HAL_InitTick>
 800811c:	4603      	mov	r3, r0
 800811e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008120:	7bfb      	ldrb	r3, [r7, #15]
}
 8008122:	4618      	mov	r0, r3
 8008124:	3718      	adds	r7, #24
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	58024400 	.word	0x58024400
 8008130:	0800ee68 	.word	0x0800ee68
 8008134:	24000004 	.word	0x24000004
 8008138:	24000000 	.word	0x24000000
 800813c:	24000008 	.word	0x24000008

08008140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008140:	b480      	push	{r7}
 8008142:	b089      	sub	sp, #36	; 0x24
 8008144:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008146:	4bb3      	ldr	r3, [pc, #716]	; (8008414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800814e:	2b18      	cmp	r3, #24
 8008150:	f200 8155 	bhi.w	80083fe <HAL_RCC_GetSysClockFreq+0x2be>
 8008154:	a201      	add	r2, pc, #4	; (adr r2, 800815c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800815a:	bf00      	nop
 800815c:	080081c1 	.word	0x080081c1
 8008160:	080083ff 	.word	0x080083ff
 8008164:	080083ff 	.word	0x080083ff
 8008168:	080083ff 	.word	0x080083ff
 800816c:	080083ff 	.word	0x080083ff
 8008170:	080083ff 	.word	0x080083ff
 8008174:	080083ff 	.word	0x080083ff
 8008178:	080083ff 	.word	0x080083ff
 800817c:	080081e7 	.word	0x080081e7
 8008180:	080083ff 	.word	0x080083ff
 8008184:	080083ff 	.word	0x080083ff
 8008188:	080083ff 	.word	0x080083ff
 800818c:	080083ff 	.word	0x080083ff
 8008190:	080083ff 	.word	0x080083ff
 8008194:	080083ff 	.word	0x080083ff
 8008198:	080083ff 	.word	0x080083ff
 800819c:	080081ed 	.word	0x080081ed
 80081a0:	080083ff 	.word	0x080083ff
 80081a4:	080083ff 	.word	0x080083ff
 80081a8:	080083ff 	.word	0x080083ff
 80081ac:	080083ff 	.word	0x080083ff
 80081b0:	080083ff 	.word	0x080083ff
 80081b4:	080083ff 	.word	0x080083ff
 80081b8:	080083ff 	.word	0x080083ff
 80081bc:	080081f3 	.word	0x080081f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081c0:	4b94      	ldr	r3, [pc, #592]	; (8008414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 0320 	and.w	r3, r3, #32
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d009      	beq.n	80081e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80081cc:	4b91      	ldr	r3, [pc, #580]	; (8008414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	08db      	lsrs	r3, r3, #3
 80081d2:	f003 0303 	and.w	r3, r3, #3
 80081d6:	4a90      	ldr	r2, [pc, #576]	; (8008418 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80081d8:	fa22 f303 	lsr.w	r3, r2, r3
 80081dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80081de:	e111      	b.n	8008404 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80081e0:	4b8d      	ldr	r3, [pc, #564]	; (8008418 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80081e2:	61bb      	str	r3, [r7, #24]
      break;
 80081e4:	e10e      	b.n	8008404 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80081e6:	4b8d      	ldr	r3, [pc, #564]	; (800841c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80081e8:	61bb      	str	r3, [r7, #24]
      break;
 80081ea:	e10b      	b.n	8008404 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80081ec:	4b8c      	ldr	r3, [pc, #560]	; (8008420 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80081ee:	61bb      	str	r3, [r7, #24]
      break;
 80081f0:	e108      	b.n	8008404 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081f2:	4b88      	ldr	r3, [pc, #544]	; (8008414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f6:	f003 0303 	and.w	r3, r3, #3
 80081fa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80081fc:	4b85      	ldr	r3, [pc, #532]	; (8008414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008200:	091b      	lsrs	r3, r3, #4
 8008202:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008206:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008208:	4b82      	ldr	r3, [pc, #520]	; (8008414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800820a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820c:	f003 0301 	and.w	r3, r3, #1
 8008210:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008212:	4b80      	ldr	r3, [pc, #512]	; (8008414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008216:	08db      	lsrs	r3, r3, #3
 8008218:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	fb02 f303 	mul.w	r3, r2, r3
 8008222:	ee07 3a90 	vmov	s15, r3
 8008226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800822a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	2b00      	cmp	r3, #0
 8008232:	f000 80e1 	beq.w	80083f8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	2b02      	cmp	r3, #2
 800823a:	f000 8083 	beq.w	8008344 <HAL_RCC_GetSysClockFreq+0x204>
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	2b02      	cmp	r3, #2
 8008242:	f200 80a1 	bhi.w	8008388 <HAL_RCC_GetSysClockFreq+0x248>
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d003      	beq.n	8008254 <HAL_RCC_GetSysClockFreq+0x114>
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	2b01      	cmp	r3, #1
 8008250:	d056      	beq.n	8008300 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008252:	e099      	b.n	8008388 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008254:	4b6f      	ldr	r3, [pc, #444]	; (8008414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 0320 	and.w	r3, r3, #32
 800825c:	2b00      	cmp	r3, #0
 800825e:	d02d      	beq.n	80082bc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008260:	4b6c      	ldr	r3, [pc, #432]	; (8008414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	08db      	lsrs	r3, r3, #3
 8008266:	f003 0303 	and.w	r3, r3, #3
 800826a:	4a6b      	ldr	r2, [pc, #428]	; (8008418 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800826c:	fa22 f303 	lsr.w	r3, r2, r3
 8008270:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	ee07 3a90 	vmov	s15, r3
 8008278:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	ee07 3a90 	vmov	s15, r3
 8008282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800828a:	4b62      	ldr	r3, [pc, #392]	; (8008414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800828c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800828e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008292:	ee07 3a90 	vmov	s15, r3
 8008296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800829a:	ed97 6a02 	vldr	s12, [r7, #8]
 800829e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008424 <HAL_RCC_GetSysClockFreq+0x2e4>
 80082a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082b6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80082ba:	e087      	b.n	80083cc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	ee07 3a90 	vmov	s15, r3
 80082c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082c6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008428 <HAL_RCC_GetSysClockFreq+0x2e8>
 80082ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082ce:	4b51      	ldr	r3, [pc, #324]	; (8008414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082d6:	ee07 3a90 	vmov	s15, r3
 80082da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082de:	ed97 6a02 	vldr	s12, [r7, #8]
 80082e2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008424 <HAL_RCC_GetSysClockFreq+0x2e4>
 80082e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80082fe:	e065      	b.n	80083cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	ee07 3a90 	vmov	s15, r3
 8008306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800830a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800842c <HAL_RCC_GetSysClockFreq+0x2ec>
 800830e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008312:	4b40      	ldr	r3, [pc, #256]	; (8008414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800831a:	ee07 3a90 	vmov	s15, r3
 800831e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008322:	ed97 6a02 	vldr	s12, [r7, #8]
 8008326:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008424 <HAL_RCC_GetSysClockFreq+0x2e4>
 800832a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800832e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800833a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800833e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008342:	e043      	b.n	80083cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	ee07 3a90 	vmov	s15, r3
 800834a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800834e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008430 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008356:	4b2f      	ldr	r3, [pc, #188]	; (8008414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800835a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800835e:	ee07 3a90 	vmov	s15, r3
 8008362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008366:	ed97 6a02 	vldr	s12, [r7, #8]
 800836a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008424 <HAL_RCC_GetSysClockFreq+0x2e4>
 800836e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800837a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800837e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008382:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008386:	e021      	b.n	80083cc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	ee07 3a90 	vmov	s15, r3
 800838e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008392:	eddf 6a26 	vldr	s13, [pc, #152]	; 800842c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800839a:	4b1e      	ldr	r3, [pc, #120]	; (8008414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800839c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800839e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083a2:	ee07 3a90 	vmov	s15, r3
 80083a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80083ae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008424 <HAL_RCC_GetSysClockFreq+0x2e4>
 80083b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80083ca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80083cc:	4b11      	ldr	r3, [pc, #68]	; (8008414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d0:	0a5b      	lsrs	r3, r3, #9
 80083d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083d6:	3301      	adds	r3, #1
 80083d8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	ee07 3a90 	vmov	s15, r3
 80083e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80083e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80083e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083f0:	ee17 3a90 	vmov	r3, s15
 80083f4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80083f6:	e005      	b.n	8008404 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80083f8:	2300      	movs	r3, #0
 80083fa:	61bb      	str	r3, [r7, #24]
      break;
 80083fc:	e002      	b.n	8008404 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80083fe:	4b07      	ldr	r3, [pc, #28]	; (800841c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008400:	61bb      	str	r3, [r7, #24]
      break;
 8008402:	bf00      	nop
  }

  return sysclockfreq;
 8008404:	69bb      	ldr	r3, [r7, #24]
}
 8008406:	4618      	mov	r0, r3
 8008408:	3724      	adds	r7, #36	; 0x24
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop
 8008414:	58024400 	.word	0x58024400
 8008418:	03d09000 	.word	0x03d09000
 800841c:	003d0900 	.word	0x003d0900
 8008420:	007a1200 	.word	0x007a1200
 8008424:	46000000 	.word	0x46000000
 8008428:	4c742400 	.word	0x4c742400
 800842c:	4a742400 	.word	0x4a742400
 8008430:	4af42400 	.word	0x4af42400

08008434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b082      	sub	sp, #8
 8008438:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800843a:	f7ff fe81 	bl	8008140 <HAL_RCC_GetSysClockFreq>
 800843e:	4602      	mov	r2, r0
 8008440:	4b10      	ldr	r3, [pc, #64]	; (8008484 <HAL_RCC_GetHCLKFreq+0x50>)
 8008442:	699b      	ldr	r3, [r3, #24]
 8008444:	0a1b      	lsrs	r3, r3, #8
 8008446:	f003 030f 	and.w	r3, r3, #15
 800844a:	490f      	ldr	r1, [pc, #60]	; (8008488 <HAL_RCC_GetHCLKFreq+0x54>)
 800844c:	5ccb      	ldrb	r3, [r1, r3]
 800844e:	f003 031f 	and.w	r3, r3, #31
 8008452:	fa22 f303 	lsr.w	r3, r2, r3
 8008456:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008458:	4b0a      	ldr	r3, [pc, #40]	; (8008484 <HAL_RCC_GetHCLKFreq+0x50>)
 800845a:	699b      	ldr	r3, [r3, #24]
 800845c:	f003 030f 	and.w	r3, r3, #15
 8008460:	4a09      	ldr	r2, [pc, #36]	; (8008488 <HAL_RCC_GetHCLKFreq+0x54>)
 8008462:	5cd3      	ldrb	r3, [r2, r3]
 8008464:	f003 031f 	and.w	r3, r3, #31
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	fa22 f303 	lsr.w	r3, r2, r3
 800846e:	4a07      	ldr	r2, [pc, #28]	; (800848c <HAL_RCC_GetHCLKFreq+0x58>)
 8008470:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008472:	4a07      	ldr	r2, [pc, #28]	; (8008490 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008478:	4b04      	ldr	r3, [pc, #16]	; (800848c <HAL_RCC_GetHCLKFreq+0x58>)
 800847a:	681b      	ldr	r3, [r3, #0]
}
 800847c:	4618      	mov	r0, r3
 800847e:	3708      	adds	r7, #8
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}
 8008484:	58024400 	.word	0x58024400
 8008488:	0800ee68 	.word	0x0800ee68
 800848c:	24000004 	.word	0x24000004
 8008490:	24000000 	.word	0x24000000

08008494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008498:	f7ff ffcc 	bl	8008434 <HAL_RCC_GetHCLKFreq>
 800849c:	4602      	mov	r2, r0
 800849e:	4b06      	ldr	r3, [pc, #24]	; (80084b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80084a0:	69db      	ldr	r3, [r3, #28]
 80084a2:	091b      	lsrs	r3, r3, #4
 80084a4:	f003 0307 	and.w	r3, r3, #7
 80084a8:	4904      	ldr	r1, [pc, #16]	; (80084bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80084aa:	5ccb      	ldrb	r3, [r1, r3]
 80084ac:	f003 031f 	and.w	r3, r3, #31
 80084b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	58024400 	.word	0x58024400
 80084bc:	0800ee68 	.word	0x0800ee68

080084c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80084c4:	f7ff ffb6 	bl	8008434 <HAL_RCC_GetHCLKFreq>
 80084c8:	4602      	mov	r2, r0
 80084ca:	4b06      	ldr	r3, [pc, #24]	; (80084e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80084cc:	69db      	ldr	r3, [r3, #28]
 80084ce:	0a1b      	lsrs	r3, r3, #8
 80084d0:	f003 0307 	and.w	r3, r3, #7
 80084d4:	4904      	ldr	r1, [pc, #16]	; (80084e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80084d6:	5ccb      	ldrb	r3, [r1, r3]
 80084d8:	f003 031f 	and.w	r3, r3, #31
 80084dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	58024400 	.word	0x58024400
 80084e8:	0800ee68 	.word	0x0800ee68

080084ec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80084ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084f0:	b0ca      	sub	sp, #296	; 0x128
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80084f8:	2300      	movs	r3, #0
 80084fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80084fe:	2300      	movs	r3, #0
 8008500:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8008510:	2500      	movs	r5, #0
 8008512:	ea54 0305 	orrs.w	r3, r4, r5
 8008516:	d049      	beq.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008518:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800851c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800851e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008522:	d02f      	beq.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008524:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008528:	d828      	bhi.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800852a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800852e:	d01a      	beq.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008530:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008534:	d822      	bhi.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008536:	2b00      	cmp	r3, #0
 8008538:	d003      	beq.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800853a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800853e:	d007      	beq.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008540:	e01c      	b.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008542:	4bb8      	ldr	r3, [pc, #736]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008546:	4ab7      	ldr	r2, [pc, #732]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800854c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800854e:	e01a      	b.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008550:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008554:	3308      	adds	r3, #8
 8008556:	2102      	movs	r1, #2
 8008558:	4618      	mov	r0, r3
 800855a:	f002 fb61 	bl	800ac20 <RCCEx_PLL2_Config>
 800855e:	4603      	mov	r3, r0
 8008560:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008564:	e00f      	b.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800856a:	3328      	adds	r3, #40	; 0x28
 800856c:	2102      	movs	r1, #2
 800856e:	4618      	mov	r0, r3
 8008570:	f002 fc08 	bl	800ad84 <RCCEx_PLL3_Config>
 8008574:	4603      	mov	r3, r0
 8008576:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800857a:	e004      	b.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008582:	e000      	b.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008584:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008586:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800858a:	2b00      	cmp	r3, #0
 800858c:	d10a      	bne.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800858e:	4ba5      	ldr	r3, [pc, #660]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008592:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800859a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800859c:	4aa1      	ldr	r2, [pc, #644]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800859e:	430b      	orrs	r3, r1
 80085a0:	6513      	str	r3, [r2, #80]	; 0x50
 80085a2:	e003      	b.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80085ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80085b8:	f04f 0900 	mov.w	r9, #0
 80085bc:	ea58 0309 	orrs.w	r3, r8, r9
 80085c0:	d047      	beq.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80085c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085c8:	2b04      	cmp	r3, #4
 80085ca:	d82a      	bhi.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80085cc:	a201      	add	r2, pc, #4	; (adr r2, 80085d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80085ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d2:	bf00      	nop
 80085d4:	080085e9 	.word	0x080085e9
 80085d8:	080085f7 	.word	0x080085f7
 80085dc:	0800860d 	.word	0x0800860d
 80085e0:	0800862b 	.word	0x0800862b
 80085e4:	0800862b 	.word	0x0800862b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085e8:	4b8e      	ldr	r3, [pc, #568]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80085ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ec:	4a8d      	ldr	r2, [pc, #564]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80085ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80085f4:	e01a      	b.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085fa:	3308      	adds	r3, #8
 80085fc:	2100      	movs	r1, #0
 80085fe:	4618      	mov	r0, r3
 8008600:	f002 fb0e 	bl	800ac20 <RCCEx_PLL2_Config>
 8008604:	4603      	mov	r3, r0
 8008606:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800860a:	e00f      	b.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800860c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008610:	3328      	adds	r3, #40	; 0x28
 8008612:	2100      	movs	r1, #0
 8008614:	4618      	mov	r0, r3
 8008616:	f002 fbb5 	bl	800ad84 <RCCEx_PLL3_Config>
 800861a:	4603      	mov	r3, r0
 800861c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008620:	e004      	b.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008628:	e000      	b.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800862a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800862c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008630:	2b00      	cmp	r3, #0
 8008632:	d10a      	bne.n	800864a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008634:	4b7b      	ldr	r3, [pc, #492]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008638:	f023 0107 	bic.w	r1, r3, #7
 800863c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008642:	4a78      	ldr	r2, [pc, #480]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008644:	430b      	orrs	r3, r1
 8008646:	6513      	str	r3, [r2, #80]	; 0x50
 8008648:	e003      	b.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800864a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800864e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008652:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800865e:	f04f 0b00 	mov.w	fp, #0
 8008662:	ea5a 030b 	orrs.w	r3, sl, fp
 8008666:	d04c      	beq.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008668:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800866c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800866e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008672:	d030      	beq.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008678:	d829      	bhi.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800867a:	2bc0      	cmp	r3, #192	; 0xc0
 800867c:	d02d      	beq.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800867e:	2bc0      	cmp	r3, #192	; 0xc0
 8008680:	d825      	bhi.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008682:	2b80      	cmp	r3, #128	; 0x80
 8008684:	d018      	beq.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008686:	2b80      	cmp	r3, #128	; 0x80
 8008688:	d821      	bhi.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800868a:	2b00      	cmp	r3, #0
 800868c:	d002      	beq.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800868e:	2b40      	cmp	r3, #64	; 0x40
 8008690:	d007      	beq.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008692:	e01c      	b.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008694:	4b63      	ldr	r3, [pc, #396]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008698:	4a62      	ldr	r2, [pc, #392]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800869a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800869e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80086a0:	e01c      	b.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80086a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086a6:	3308      	adds	r3, #8
 80086a8:	2100      	movs	r1, #0
 80086aa:	4618      	mov	r0, r3
 80086ac:	f002 fab8 	bl	800ac20 <RCCEx_PLL2_Config>
 80086b0:	4603      	mov	r3, r0
 80086b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80086b6:	e011      	b.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80086b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086bc:	3328      	adds	r3, #40	; 0x28
 80086be:	2100      	movs	r1, #0
 80086c0:	4618      	mov	r0, r3
 80086c2:	f002 fb5f 	bl	800ad84 <RCCEx_PLL3_Config>
 80086c6:	4603      	mov	r3, r0
 80086c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80086cc:	e006      	b.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
 80086d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80086d4:	e002      	b.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80086d6:	bf00      	nop
 80086d8:	e000      	b.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80086da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d10a      	bne.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80086e4:	4b4f      	ldr	r3, [pc, #316]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80086e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086e8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80086ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086f2:	4a4c      	ldr	r2, [pc, #304]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80086f4:	430b      	orrs	r3, r1
 80086f6:	6513      	str	r3, [r2, #80]	; 0x50
 80086f8:	e003      	b.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800870e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008712:	2300      	movs	r3, #0
 8008714:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008718:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800871c:	460b      	mov	r3, r1
 800871e:	4313      	orrs	r3, r2
 8008720:	d053      	beq.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008726:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800872a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800872e:	d035      	beq.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008730:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008734:	d82e      	bhi.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008736:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800873a:	d031      	beq.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800873c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008740:	d828      	bhi.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008742:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008746:	d01a      	beq.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008748:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800874c:	d822      	bhi.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800874e:	2b00      	cmp	r3, #0
 8008750:	d003      	beq.n	800875a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008752:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008756:	d007      	beq.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008758:	e01c      	b.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800875a:	4b32      	ldr	r3, [pc, #200]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800875c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800875e:	4a31      	ldr	r2, [pc, #196]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008764:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008766:	e01c      	b.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008768:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800876c:	3308      	adds	r3, #8
 800876e:	2100      	movs	r1, #0
 8008770:	4618      	mov	r0, r3
 8008772:	f002 fa55 	bl	800ac20 <RCCEx_PLL2_Config>
 8008776:	4603      	mov	r3, r0
 8008778:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800877c:	e011      	b.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800877e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008782:	3328      	adds	r3, #40	; 0x28
 8008784:	2100      	movs	r1, #0
 8008786:	4618      	mov	r0, r3
 8008788:	f002 fafc 	bl	800ad84 <RCCEx_PLL3_Config>
 800878c:	4603      	mov	r3, r0
 800878e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008792:	e006      	b.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008794:	2301      	movs	r3, #1
 8008796:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800879a:	e002      	b.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800879c:	bf00      	nop
 800879e:	e000      	b.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80087a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d10b      	bne.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80087aa:	4b1e      	ldr	r3, [pc, #120]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80087ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087ae:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80087b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80087ba:	4a1a      	ldr	r2, [pc, #104]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80087bc:	430b      	orrs	r3, r1
 80087be:	6593      	str	r3, [r2, #88]	; 0x58
 80087c0:	e003      	b.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80087ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80087d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80087da:	2300      	movs	r3, #0
 80087dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80087e0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80087e4:	460b      	mov	r3, r1
 80087e6:	4313      	orrs	r3, r2
 80087e8:	d056      	beq.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80087ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80087f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80087f6:	d038      	beq.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80087f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80087fc:	d831      	bhi.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80087fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008802:	d034      	beq.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008804:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008808:	d82b      	bhi.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800880a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800880e:	d01d      	beq.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008810:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008814:	d825      	bhi.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008816:	2b00      	cmp	r3, #0
 8008818:	d006      	beq.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800881a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800881e:	d00a      	beq.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008820:	e01f      	b.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008822:	bf00      	nop
 8008824:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008828:	4ba2      	ldr	r3, [pc, #648]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800882a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800882c:	4aa1      	ldr	r2, [pc, #644]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800882e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008832:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008834:	e01c      	b.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800883a:	3308      	adds	r3, #8
 800883c:	2100      	movs	r1, #0
 800883e:	4618      	mov	r0, r3
 8008840:	f002 f9ee 	bl	800ac20 <RCCEx_PLL2_Config>
 8008844:	4603      	mov	r3, r0
 8008846:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800884a:	e011      	b.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800884c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008850:	3328      	adds	r3, #40	; 0x28
 8008852:	2100      	movs	r1, #0
 8008854:	4618      	mov	r0, r3
 8008856:	f002 fa95 	bl	800ad84 <RCCEx_PLL3_Config>
 800885a:	4603      	mov	r3, r0
 800885c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008860:	e006      	b.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008868:	e002      	b.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800886a:	bf00      	nop
 800886c:	e000      	b.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800886e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008870:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008874:	2b00      	cmp	r3, #0
 8008876:	d10b      	bne.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008878:	4b8e      	ldr	r3, [pc, #568]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800887a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800887c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008880:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008884:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008888:	4a8a      	ldr	r2, [pc, #552]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800888a:	430b      	orrs	r3, r1
 800888c:	6593      	str	r3, [r2, #88]	; 0x58
 800888e:	e003      	b.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008890:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008894:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008898:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800889c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80088a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80088a8:	2300      	movs	r3, #0
 80088aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80088ae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80088b2:	460b      	mov	r3, r1
 80088b4:	4313      	orrs	r3, r2
 80088b6:	d03a      	beq.n	800892e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80088b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088be:	2b30      	cmp	r3, #48	; 0x30
 80088c0:	d01f      	beq.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80088c2:	2b30      	cmp	r3, #48	; 0x30
 80088c4:	d819      	bhi.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80088c6:	2b20      	cmp	r3, #32
 80088c8:	d00c      	beq.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80088ca:	2b20      	cmp	r3, #32
 80088cc:	d815      	bhi.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d019      	beq.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80088d2:	2b10      	cmp	r3, #16
 80088d4:	d111      	bne.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088d6:	4b77      	ldr	r3, [pc, #476]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80088d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088da:	4a76      	ldr	r2, [pc, #472]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80088dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80088e2:	e011      	b.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80088e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088e8:	3308      	adds	r3, #8
 80088ea:	2102      	movs	r1, #2
 80088ec:	4618      	mov	r0, r3
 80088ee:	f002 f997 	bl	800ac20 <RCCEx_PLL2_Config>
 80088f2:	4603      	mov	r3, r0
 80088f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80088f8:	e006      	b.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008900:	e002      	b.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008902:	bf00      	nop
 8008904:	e000      	b.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008906:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008908:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800890c:	2b00      	cmp	r3, #0
 800890e:	d10a      	bne.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008910:	4b68      	ldr	r3, [pc, #416]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008914:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8008918:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800891c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800891e:	4a65      	ldr	r2, [pc, #404]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008920:	430b      	orrs	r3, r1
 8008922:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008924:	e003      	b.n	800892e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008926:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800892a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800892e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008936:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800893a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800893e:	2300      	movs	r3, #0
 8008940:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008944:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008948:	460b      	mov	r3, r1
 800894a:	4313      	orrs	r3, r2
 800894c:	d051      	beq.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800894e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008954:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008958:	d035      	beq.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800895a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800895e:	d82e      	bhi.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008960:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008964:	d031      	beq.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008966:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800896a:	d828      	bhi.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800896c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008970:	d01a      	beq.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008976:	d822      	bhi.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008978:	2b00      	cmp	r3, #0
 800897a:	d003      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800897c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008980:	d007      	beq.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008982:	e01c      	b.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008984:	4b4b      	ldr	r3, [pc, #300]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008988:	4a4a      	ldr	r2, [pc, #296]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800898a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800898e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008990:	e01c      	b.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008996:	3308      	adds	r3, #8
 8008998:	2100      	movs	r1, #0
 800899a:	4618      	mov	r0, r3
 800899c:	f002 f940 	bl	800ac20 <RCCEx_PLL2_Config>
 80089a0:	4603      	mov	r3, r0
 80089a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80089a6:	e011      	b.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80089a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089ac:	3328      	adds	r3, #40	; 0x28
 80089ae:	2100      	movs	r1, #0
 80089b0:	4618      	mov	r0, r3
 80089b2:	f002 f9e7 	bl	800ad84 <RCCEx_PLL3_Config>
 80089b6:	4603      	mov	r3, r0
 80089b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80089bc:	e006      	b.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80089c4:	e002      	b.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80089c6:	bf00      	nop
 80089c8:	e000      	b.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80089ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d10a      	bne.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80089d4:	4b37      	ldr	r3, [pc, #220]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80089d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089d8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80089dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089e2:	4a34      	ldr	r2, [pc, #208]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80089e4:	430b      	orrs	r3, r1
 80089e6:	6513      	str	r3, [r2, #80]	; 0x50
 80089e8:	e003      	b.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80089f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fa:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80089fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008a02:	2300      	movs	r3, #0
 8008a04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008a08:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	d056      	beq.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008a1c:	d033      	beq.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008a1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008a22:	d82c      	bhi.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008a24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008a28:	d02f      	beq.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008a2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008a2e:	d826      	bhi.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008a30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008a34:	d02b      	beq.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008a36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008a3a:	d820      	bhi.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008a3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a40:	d012      	beq.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008a42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a46:	d81a      	bhi.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d022      	beq.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a50:	d115      	bne.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a56:	3308      	adds	r3, #8
 8008a58:	2101      	movs	r1, #1
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f002 f8e0 	bl	800ac20 <RCCEx_PLL2_Config>
 8008a60:	4603      	mov	r3, r0
 8008a62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008a66:	e015      	b.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a6c:	3328      	adds	r3, #40	; 0x28
 8008a6e:	2101      	movs	r1, #1
 8008a70:	4618      	mov	r0, r3
 8008a72:	f002 f987 	bl	800ad84 <RCCEx_PLL3_Config>
 8008a76:	4603      	mov	r3, r0
 8008a78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008a7c:	e00a      	b.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008a84:	e006      	b.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008a86:	bf00      	nop
 8008a88:	e004      	b.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008a8a:	bf00      	nop
 8008a8c:	e002      	b.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008a8e:	bf00      	nop
 8008a90:	e000      	b.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008a92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d10d      	bne.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008a9c:	4b05      	ldr	r3, [pc, #20]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aa0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008aa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008aaa:	4a02      	ldr	r2, [pc, #8]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008aac:	430b      	orrs	r3, r1
 8008aae:	6513      	str	r3, [r2, #80]	; 0x50
 8008ab0:	e006      	b.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008ab2:	bf00      	nop
 8008ab4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ab8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008abc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008acc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008ad6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008ada:	460b      	mov	r3, r1
 8008adc:	4313      	orrs	r3, r2
 8008ade:	d055      	beq.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ae4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008ae8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008aec:	d033      	beq.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008aee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008af2:	d82c      	bhi.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008af8:	d02f      	beq.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008afe:	d826      	bhi.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008b00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008b04:	d02b      	beq.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008b06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008b0a:	d820      	bhi.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008b0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b10:	d012      	beq.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008b12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b16:	d81a      	bhi.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d022      	beq.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008b1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b20:	d115      	bne.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b26:	3308      	adds	r3, #8
 8008b28:	2101      	movs	r1, #1
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f002 f878 	bl	800ac20 <RCCEx_PLL2_Config>
 8008b30:	4603      	mov	r3, r0
 8008b32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008b36:	e015      	b.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b3c:	3328      	adds	r3, #40	; 0x28
 8008b3e:	2101      	movs	r1, #1
 8008b40:	4618      	mov	r0, r3
 8008b42:	f002 f91f 	bl	800ad84 <RCCEx_PLL3_Config>
 8008b46:	4603      	mov	r3, r0
 8008b48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008b4c:	e00a      	b.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008b54:	e006      	b.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008b56:	bf00      	nop
 8008b58:	e004      	b.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008b5a:	bf00      	nop
 8008b5c:	e002      	b.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008b5e:	bf00      	nop
 8008b60:	e000      	b.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008b62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d10b      	bne.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008b6c:	4ba3      	ldr	r3, [pc, #652]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b70:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b7c:	4a9f      	ldr	r2, [pc, #636]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b7e:	430b      	orrs	r3, r1
 8008b80:	6593      	str	r3, [r2, #88]	; 0x58
 8008b82:	e003      	b.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b94:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008b98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008ba2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	d037      	beq.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bb6:	d00e      	beq.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008bb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bbc:	d816      	bhi.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d018      	beq.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008bc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008bc6:	d111      	bne.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bc8:	4b8c      	ldr	r3, [pc, #560]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bcc:	4a8b      	ldr	r2, [pc, #556]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008bd4:	e00f      	b.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bda:	3308      	adds	r3, #8
 8008bdc:	2101      	movs	r1, #1
 8008bde:	4618      	mov	r0, r3
 8008be0:	f002 f81e 	bl	800ac20 <RCCEx_PLL2_Config>
 8008be4:	4603      	mov	r3, r0
 8008be6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008bea:	e004      	b.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008bec:	2301      	movs	r3, #1
 8008bee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008bf2:	e000      	b.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008bf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d10a      	bne.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008bfe:	4b7f      	ldr	r3, [pc, #508]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c02:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c0c:	4a7b      	ldr	r2, [pc, #492]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c0e:	430b      	orrs	r3, r1
 8008c10:	6513      	str	r3, [r2, #80]	; 0x50
 8008c12:	e003      	b.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c24:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8008c28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008c32:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8008c36:	460b      	mov	r3, r1
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	d039      	beq.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c42:	2b03      	cmp	r3, #3
 8008c44:	d81c      	bhi.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008c46:	a201      	add	r2, pc, #4	; (adr r2, 8008c4c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c4c:	08008c89 	.word	0x08008c89
 8008c50:	08008c5d 	.word	0x08008c5d
 8008c54:	08008c6b 	.word	0x08008c6b
 8008c58:	08008c89 	.word	0x08008c89
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c5c:	4b67      	ldr	r3, [pc, #412]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c60:	4a66      	ldr	r2, [pc, #408]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008c68:	e00f      	b.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c6e:	3308      	adds	r3, #8
 8008c70:	2102      	movs	r1, #2
 8008c72:	4618      	mov	r0, r3
 8008c74:	f001 ffd4 	bl	800ac20 <RCCEx_PLL2_Config>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008c7e:	e004      	b.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008c80:	2301      	movs	r3, #1
 8008c82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008c86:	e000      	b.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008c88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d10a      	bne.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008c92:	4b5a      	ldr	r3, [pc, #360]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c96:	f023 0103 	bic.w	r1, r3, #3
 8008c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ca0:	4a56      	ldr	r2, [pc, #344]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ca2:	430b      	orrs	r3, r1
 8008ca4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008ca6:	e003      	b.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ca8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008cbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008cc6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008cca:	460b      	mov	r3, r1
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	f000 809f 	beq.w	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008cd2:	4b4b      	ldr	r3, [pc, #300]	; (8008e00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a4a      	ldr	r2, [pc, #296]	; (8008e00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cdc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008cde:	f7f8 fe97 	bl	8001a10 <HAL_GetTick>
 8008ce2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ce6:	e00b      	b.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ce8:	f7f8 fe92 	bl	8001a10 <HAL_GetTick>
 8008cec:	4602      	mov	r2, r0
 8008cee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008cf2:	1ad3      	subs	r3, r2, r3
 8008cf4:	2b64      	cmp	r3, #100	; 0x64
 8008cf6:	d903      	bls.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008cf8:	2303      	movs	r3, #3
 8008cfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008cfe:	e005      	b.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d00:	4b3f      	ldr	r3, [pc, #252]	; (8008e00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d0ed      	beq.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008d0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d179      	bne.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008d14:	4b39      	ldr	r3, [pc, #228]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008d20:	4053      	eors	r3, r2
 8008d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d015      	beq.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008d2a:	4b34      	ldr	r3, [pc, #208]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d32:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008d36:	4b31      	ldr	r3, [pc, #196]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d3a:	4a30      	ldr	r2, [pc, #192]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d40:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008d42:	4b2e      	ldr	r3, [pc, #184]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d46:	4a2d      	ldr	r2, [pc, #180]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d4c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008d4e:	4a2b      	ldr	r2, [pc, #172]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d50:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008d54:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d62:	d118      	bne.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d64:	f7f8 fe54 	bl	8001a10 <HAL_GetTick>
 8008d68:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d6c:	e00d      	b.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d6e:	f7f8 fe4f 	bl	8001a10 <HAL_GetTick>
 8008d72:	4602      	mov	r2, r0
 8008d74:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008d78:	1ad2      	subs	r2, r2, r3
 8008d7a:	f241 3388 	movw	r3, #5000	; 0x1388
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d903      	bls.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8008d82:	2303      	movs	r3, #3
 8008d84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8008d88:	e005      	b.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d8a:	4b1c      	ldr	r3, [pc, #112]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d8e:	f003 0302 	and.w	r3, r3, #2
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d0eb      	beq.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8008d96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d129      	bne.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008da2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008daa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008dae:	d10e      	bne.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008db0:	4b12      	ldr	r3, [pc, #72]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008db2:	691b      	ldr	r3, [r3, #16]
 8008db4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8008db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dbc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008dc0:	091a      	lsrs	r2, r3, #4
 8008dc2:	4b10      	ldr	r3, [pc, #64]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008dc4:	4013      	ands	r3, r2
 8008dc6:	4a0d      	ldr	r2, [pc, #52]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008dc8:	430b      	orrs	r3, r1
 8008dca:	6113      	str	r3, [r2, #16]
 8008dcc:	e005      	b.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008dce:	4b0b      	ldr	r3, [pc, #44]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008dd0:	691b      	ldr	r3, [r3, #16]
 8008dd2:	4a0a      	ldr	r2, [pc, #40]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008dd4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008dd8:	6113      	str	r3, [r2, #16]
 8008dda:	4b08      	ldr	r3, [pc, #32]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ddc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008de2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008de6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008dea:	4a04      	ldr	r2, [pc, #16]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008dec:	430b      	orrs	r3, r1
 8008dee:	6713      	str	r3, [r2, #112]	; 0x70
 8008df0:	e00e      	b.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008df2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008df6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8008dfa:	e009      	b.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008dfc:	58024400 	.word	0x58024400
 8008e00:	58024800 	.word	0x58024800
 8008e04:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e18:	f002 0301 	and.w	r3, r2, #1
 8008e1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008e20:	2300      	movs	r3, #0
 8008e22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008e26:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008e2a:	460b      	mov	r3, r1
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	f000 8089 	beq.w	8008f44 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e38:	2b28      	cmp	r3, #40	; 0x28
 8008e3a:	d86b      	bhi.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008e3c:	a201      	add	r2, pc, #4	; (adr r2, 8008e44 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e42:	bf00      	nop
 8008e44:	08008f1d 	.word	0x08008f1d
 8008e48:	08008f15 	.word	0x08008f15
 8008e4c:	08008f15 	.word	0x08008f15
 8008e50:	08008f15 	.word	0x08008f15
 8008e54:	08008f15 	.word	0x08008f15
 8008e58:	08008f15 	.word	0x08008f15
 8008e5c:	08008f15 	.word	0x08008f15
 8008e60:	08008f15 	.word	0x08008f15
 8008e64:	08008ee9 	.word	0x08008ee9
 8008e68:	08008f15 	.word	0x08008f15
 8008e6c:	08008f15 	.word	0x08008f15
 8008e70:	08008f15 	.word	0x08008f15
 8008e74:	08008f15 	.word	0x08008f15
 8008e78:	08008f15 	.word	0x08008f15
 8008e7c:	08008f15 	.word	0x08008f15
 8008e80:	08008f15 	.word	0x08008f15
 8008e84:	08008eff 	.word	0x08008eff
 8008e88:	08008f15 	.word	0x08008f15
 8008e8c:	08008f15 	.word	0x08008f15
 8008e90:	08008f15 	.word	0x08008f15
 8008e94:	08008f15 	.word	0x08008f15
 8008e98:	08008f15 	.word	0x08008f15
 8008e9c:	08008f15 	.word	0x08008f15
 8008ea0:	08008f15 	.word	0x08008f15
 8008ea4:	08008f1d 	.word	0x08008f1d
 8008ea8:	08008f15 	.word	0x08008f15
 8008eac:	08008f15 	.word	0x08008f15
 8008eb0:	08008f15 	.word	0x08008f15
 8008eb4:	08008f15 	.word	0x08008f15
 8008eb8:	08008f15 	.word	0x08008f15
 8008ebc:	08008f15 	.word	0x08008f15
 8008ec0:	08008f15 	.word	0x08008f15
 8008ec4:	08008f1d 	.word	0x08008f1d
 8008ec8:	08008f15 	.word	0x08008f15
 8008ecc:	08008f15 	.word	0x08008f15
 8008ed0:	08008f15 	.word	0x08008f15
 8008ed4:	08008f15 	.word	0x08008f15
 8008ed8:	08008f15 	.word	0x08008f15
 8008edc:	08008f15 	.word	0x08008f15
 8008ee0:	08008f15 	.word	0x08008f15
 8008ee4:	08008f1d 	.word	0x08008f1d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eec:	3308      	adds	r3, #8
 8008eee:	2101      	movs	r1, #1
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f001 fe95 	bl	800ac20 <RCCEx_PLL2_Config>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008efc:	e00f      	b.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f02:	3328      	adds	r3, #40	; 0x28
 8008f04:	2101      	movs	r1, #1
 8008f06:	4618      	mov	r0, r3
 8008f08:	f001 ff3c 	bl	800ad84 <RCCEx_PLL3_Config>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008f12:	e004      	b.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f14:	2301      	movs	r3, #1
 8008f16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008f1a:	e000      	b.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008f1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d10a      	bne.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008f26:	4bbf      	ldr	r3, [pc, #764]	; (8009224 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f2a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8008f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f34:	4abb      	ldr	r2, [pc, #748]	; (8009224 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008f36:	430b      	orrs	r3, r1
 8008f38:	6553      	str	r3, [r2, #84]	; 0x54
 8008f3a:	e003      	b.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4c:	f002 0302 	and.w	r3, r2, #2
 8008f50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008f54:	2300      	movs	r3, #0
 8008f56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008f5a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8008f5e:	460b      	mov	r3, r1
 8008f60:	4313      	orrs	r3, r2
 8008f62:	d041      	beq.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f6a:	2b05      	cmp	r3, #5
 8008f6c:	d824      	bhi.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008f6e:	a201      	add	r2, pc, #4	; (adr r2, 8008f74 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f74:	08008fc1 	.word	0x08008fc1
 8008f78:	08008f8d 	.word	0x08008f8d
 8008f7c:	08008fa3 	.word	0x08008fa3
 8008f80:	08008fc1 	.word	0x08008fc1
 8008f84:	08008fc1 	.word	0x08008fc1
 8008f88:	08008fc1 	.word	0x08008fc1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f90:	3308      	adds	r3, #8
 8008f92:	2101      	movs	r1, #1
 8008f94:	4618      	mov	r0, r3
 8008f96:	f001 fe43 	bl	800ac20 <RCCEx_PLL2_Config>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008fa0:	e00f      	b.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fa6:	3328      	adds	r3, #40	; 0x28
 8008fa8:	2101      	movs	r1, #1
 8008faa:	4618      	mov	r0, r3
 8008fac:	f001 feea 	bl	800ad84 <RCCEx_PLL3_Config>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008fb6:	e004      	b.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008fbe:	e000      	b.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008fc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d10a      	bne.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008fca:	4b96      	ldr	r3, [pc, #600]	; (8009224 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fce:	f023 0107 	bic.w	r1, r3, #7
 8008fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008fd8:	4a92      	ldr	r2, [pc, #584]	; (8009224 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008fda:	430b      	orrs	r3, r1
 8008fdc:	6553      	str	r3, [r2, #84]	; 0x54
 8008fde:	e003      	b.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fe0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fe4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff0:	f002 0304 	and.w	r3, r2, #4
 8008ff4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ffe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8009002:	460b      	mov	r3, r1
 8009004:	4313      	orrs	r3, r2
 8009006:	d044      	beq.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009008:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800900c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009010:	2b05      	cmp	r3, #5
 8009012:	d825      	bhi.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009014:	a201      	add	r2, pc, #4	; (adr r2, 800901c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800901a:	bf00      	nop
 800901c:	08009069 	.word	0x08009069
 8009020:	08009035 	.word	0x08009035
 8009024:	0800904b 	.word	0x0800904b
 8009028:	08009069 	.word	0x08009069
 800902c:	08009069 	.word	0x08009069
 8009030:	08009069 	.word	0x08009069
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009034:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009038:	3308      	adds	r3, #8
 800903a:	2101      	movs	r1, #1
 800903c:	4618      	mov	r0, r3
 800903e:	f001 fdef 	bl	800ac20 <RCCEx_PLL2_Config>
 8009042:	4603      	mov	r3, r0
 8009044:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009048:	e00f      	b.n	800906a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800904a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800904e:	3328      	adds	r3, #40	; 0x28
 8009050:	2101      	movs	r1, #1
 8009052:	4618      	mov	r0, r3
 8009054:	f001 fe96 	bl	800ad84 <RCCEx_PLL3_Config>
 8009058:	4603      	mov	r3, r0
 800905a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800905e:	e004      	b.n	800906a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009060:	2301      	movs	r3, #1
 8009062:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009066:	e000      	b.n	800906a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009068:	bf00      	nop
    }

    if (ret == HAL_OK)
 800906a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800906e:	2b00      	cmp	r3, #0
 8009070:	d10b      	bne.n	800908a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009072:	4b6c      	ldr	r3, [pc, #432]	; (8009224 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009076:	f023 0107 	bic.w	r1, r3, #7
 800907a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800907e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009082:	4a68      	ldr	r2, [pc, #416]	; (8009224 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009084:	430b      	orrs	r3, r1
 8009086:	6593      	str	r3, [r2, #88]	; 0x58
 8009088:	e003      	b.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800908a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800908e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909a:	f002 0320 	and.w	r3, r2, #32
 800909e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80090a2:	2300      	movs	r3, #0
 80090a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80090a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80090ac:	460b      	mov	r3, r1
 80090ae:	4313      	orrs	r3, r2
 80090b0:	d055      	beq.n	800915e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80090b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090be:	d033      	beq.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80090c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090c4:	d82c      	bhi.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80090c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090ca:	d02f      	beq.n	800912c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80090cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090d0:	d826      	bhi.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80090d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80090d6:	d02b      	beq.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80090d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80090dc:	d820      	bhi.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80090de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090e2:	d012      	beq.n	800910a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80090e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090e8:	d81a      	bhi.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d022      	beq.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80090ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090f2:	d115      	bne.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80090f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090f8:	3308      	adds	r3, #8
 80090fa:	2100      	movs	r1, #0
 80090fc:	4618      	mov	r0, r3
 80090fe:	f001 fd8f 	bl	800ac20 <RCCEx_PLL2_Config>
 8009102:	4603      	mov	r3, r0
 8009104:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009108:	e015      	b.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800910a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800910e:	3328      	adds	r3, #40	; 0x28
 8009110:	2102      	movs	r1, #2
 8009112:	4618      	mov	r0, r3
 8009114:	f001 fe36 	bl	800ad84 <RCCEx_PLL3_Config>
 8009118:	4603      	mov	r3, r0
 800911a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800911e:	e00a      	b.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009120:	2301      	movs	r3, #1
 8009122:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009126:	e006      	b.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009128:	bf00      	nop
 800912a:	e004      	b.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800912c:	bf00      	nop
 800912e:	e002      	b.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009130:	bf00      	nop
 8009132:	e000      	b.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009134:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009136:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800913a:	2b00      	cmp	r3, #0
 800913c:	d10b      	bne.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800913e:	4b39      	ldr	r3, [pc, #228]	; (8009224 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009142:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800914a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800914e:	4a35      	ldr	r2, [pc, #212]	; (8009224 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009150:	430b      	orrs	r3, r1
 8009152:	6553      	str	r3, [r2, #84]	; 0x54
 8009154:	e003      	b.n	800915e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009156:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800915a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800915e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009166:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800916a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800916e:	2300      	movs	r3, #0
 8009170:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009174:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009178:	460b      	mov	r3, r1
 800917a:	4313      	orrs	r3, r2
 800917c:	d058      	beq.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800917e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009182:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009186:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800918a:	d033      	beq.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800918c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009190:	d82c      	bhi.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009196:	d02f      	beq.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800919c:	d826      	bhi.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800919e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80091a2:	d02b      	beq.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80091a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80091a8:	d820      	bhi.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80091aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091ae:	d012      	beq.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80091b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091b4:	d81a      	bhi.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d022      	beq.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80091ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091be:	d115      	bne.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80091c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091c4:	3308      	adds	r3, #8
 80091c6:	2100      	movs	r1, #0
 80091c8:	4618      	mov	r0, r3
 80091ca:	f001 fd29 	bl	800ac20 <RCCEx_PLL2_Config>
 80091ce:	4603      	mov	r3, r0
 80091d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80091d4:	e015      	b.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80091d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091da:	3328      	adds	r3, #40	; 0x28
 80091dc:	2102      	movs	r1, #2
 80091de:	4618      	mov	r0, r3
 80091e0:	f001 fdd0 	bl	800ad84 <RCCEx_PLL3_Config>
 80091e4:	4603      	mov	r3, r0
 80091e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80091ea:	e00a      	b.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091ec:	2301      	movs	r3, #1
 80091ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80091f2:	e006      	b.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80091f4:	bf00      	nop
 80091f6:	e004      	b.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80091f8:	bf00      	nop
 80091fa:	e002      	b.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80091fc:	bf00      	nop
 80091fe:	e000      	b.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009200:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009202:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009206:	2b00      	cmp	r3, #0
 8009208:	d10e      	bne.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800920a:	4b06      	ldr	r3, [pc, #24]	; (8009224 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800920c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800920e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8009212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009216:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800921a:	4a02      	ldr	r2, [pc, #8]	; (8009224 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800921c:	430b      	orrs	r3, r1
 800921e:	6593      	str	r3, [r2, #88]	; 0x58
 8009220:	e006      	b.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009222:	bf00      	nop
 8009224:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009228:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800922c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009230:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009238:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800923c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009240:	2300      	movs	r3, #0
 8009242:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009246:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800924a:	460b      	mov	r3, r1
 800924c:	4313      	orrs	r3, r2
 800924e:	d055      	beq.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009250:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009254:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009258:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800925c:	d033      	beq.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800925e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009262:	d82c      	bhi.n	80092be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009268:	d02f      	beq.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800926a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800926e:	d826      	bhi.n	80092be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009270:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009274:	d02b      	beq.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009276:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800927a:	d820      	bhi.n	80092be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800927c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009280:	d012      	beq.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009282:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009286:	d81a      	bhi.n	80092be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009288:	2b00      	cmp	r3, #0
 800928a:	d022      	beq.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800928c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009290:	d115      	bne.n	80092be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009296:	3308      	adds	r3, #8
 8009298:	2100      	movs	r1, #0
 800929a:	4618      	mov	r0, r3
 800929c:	f001 fcc0 	bl	800ac20 <RCCEx_PLL2_Config>
 80092a0:	4603      	mov	r3, r0
 80092a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80092a6:	e015      	b.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80092a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092ac:	3328      	adds	r3, #40	; 0x28
 80092ae:	2102      	movs	r1, #2
 80092b0:	4618      	mov	r0, r3
 80092b2:	f001 fd67 	bl	800ad84 <RCCEx_PLL3_Config>
 80092b6:	4603      	mov	r3, r0
 80092b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80092bc:	e00a      	b.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092be:	2301      	movs	r3, #1
 80092c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80092c4:	e006      	b.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80092c6:	bf00      	nop
 80092c8:	e004      	b.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80092ca:	bf00      	nop
 80092cc:	e002      	b.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80092ce:	bf00      	nop
 80092d0:	e000      	b.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80092d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d10b      	bne.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80092dc:	4ba1      	ldr	r3, [pc, #644]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80092de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092e0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80092e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80092ec:	4a9d      	ldr	r2, [pc, #628]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80092ee:	430b      	orrs	r3, r1
 80092f0:	6593      	str	r3, [r2, #88]	; 0x58
 80092f2:	e003      	b.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80092fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009304:	f002 0308 	and.w	r3, r2, #8
 8009308:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800930c:	2300      	movs	r3, #0
 800930e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009312:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8009316:	460b      	mov	r3, r1
 8009318:	4313      	orrs	r3, r2
 800931a:	d01e      	beq.n	800935a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800931c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009320:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009328:	d10c      	bne.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800932a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800932e:	3328      	adds	r3, #40	; 0x28
 8009330:	2102      	movs	r1, #2
 8009332:	4618      	mov	r0, r3
 8009334:	f001 fd26 	bl	800ad84 <RCCEx_PLL3_Config>
 8009338:	4603      	mov	r3, r0
 800933a:	2b00      	cmp	r3, #0
 800933c:	d002      	beq.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800933e:	2301      	movs	r3, #1
 8009340:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009344:	4b87      	ldr	r3, [pc, #540]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009348:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800934c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009350:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009354:	4a83      	ldr	r2, [pc, #524]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009356:	430b      	orrs	r3, r1
 8009358:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800935a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800935e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009362:	f002 0310 	and.w	r3, r2, #16
 8009366:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800936a:	2300      	movs	r3, #0
 800936c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009370:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8009374:	460b      	mov	r3, r1
 8009376:	4313      	orrs	r3, r2
 8009378:	d01e      	beq.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800937a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800937e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009386:	d10c      	bne.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009388:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800938c:	3328      	adds	r3, #40	; 0x28
 800938e:	2102      	movs	r1, #2
 8009390:	4618      	mov	r0, r3
 8009392:	f001 fcf7 	bl	800ad84 <RCCEx_PLL3_Config>
 8009396:	4603      	mov	r3, r0
 8009398:	2b00      	cmp	r3, #0
 800939a:	d002      	beq.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800939c:	2301      	movs	r3, #1
 800939e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80093a2:	4b70      	ldr	r3, [pc, #448]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80093a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80093aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80093b2:	4a6c      	ldr	r2, [pc, #432]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80093b4:	430b      	orrs	r3, r1
 80093b6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80093b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80093c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80093c8:	2300      	movs	r3, #0
 80093ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80093ce:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80093d2:	460b      	mov	r3, r1
 80093d4:	4313      	orrs	r3, r2
 80093d6:	d03e      	beq.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80093d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80093e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80093e4:	d022      	beq.n	800942c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80093e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80093ea:	d81b      	bhi.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d003      	beq.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80093f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093f4:	d00b      	beq.n	800940e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80093f6:	e015      	b.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80093f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093fc:	3308      	adds	r3, #8
 80093fe:	2100      	movs	r1, #0
 8009400:	4618      	mov	r0, r3
 8009402:	f001 fc0d 	bl	800ac20 <RCCEx_PLL2_Config>
 8009406:	4603      	mov	r3, r0
 8009408:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800940c:	e00f      	b.n	800942e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800940e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009412:	3328      	adds	r3, #40	; 0x28
 8009414:	2102      	movs	r1, #2
 8009416:	4618      	mov	r0, r3
 8009418:	f001 fcb4 	bl	800ad84 <RCCEx_PLL3_Config>
 800941c:	4603      	mov	r3, r0
 800941e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009422:	e004      	b.n	800942e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009424:	2301      	movs	r3, #1
 8009426:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800942a:	e000      	b.n	800942e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800942c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800942e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009432:	2b00      	cmp	r3, #0
 8009434:	d10b      	bne.n	800944e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009436:	4b4b      	ldr	r3, [pc, #300]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800943a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800943e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009442:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009446:	4a47      	ldr	r2, [pc, #284]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009448:	430b      	orrs	r3, r1
 800944a:	6593      	str	r3, [r2, #88]	; 0x58
 800944c:	e003      	b.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800944e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009452:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800945a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800945e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8009462:	67bb      	str	r3, [r7, #120]	; 0x78
 8009464:	2300      	movs	r3, #0
 8009466:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009468:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800946c:	460b      	mov	r3, r1
 800946e:	4313      	orrs	r3, r2
 8009470:	d03b      	beq.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009472:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800947a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800947e:	d01f      	beq.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009480:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009484:	d818      	bhi.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009486:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800948a:	d003      	beq.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800948c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009490:	d007      	beq.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009492:	e011      	b.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009494:	4b33      	ldr	r3, [pc, #204]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009498:	4a32      	ldr	r2, [pc, #200]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800949a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800949e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80094a0:	e00f      	b.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80094a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094a6:	3328      	adds	r3, #40	; 0x28
 80094a8:	2101      	movs	r1, #1
 80094aa:	4618      	mov	r0, r3
 80094ac:	f001 fc6a 	bl	800ad84 <RCCEx_PLL3_Config>
 80094b0:	4603      	mov	r3, r0
 80094b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80094b6:	e004      	b.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094b8:	2301      	movs	r3, #1
 80094ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80094be:	e000      	b.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80094c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d10b      	bne.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80094ca:	4b26      	ldr	r3, [pc, #152]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80094cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094ce:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80094d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094da:	4a22      	ldr	r2, [pc, #136]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80094dc:	430b      	orrs	r3, r1
 80094de:	6553      	str	r3, [r2, #84]	; 0x54
 80094e0:	e003      	b.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80094ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80094f6:	673b      	str	r3, [r7, #112]	; 0x70
 80094f8:	2300      	movs	r3, #0
 80094fa:	677b      	str	r3, [r7, #116]	; 0x74
 80094fc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8009500:	460b      	mov	r3, r1
 8009502:	4313      	orrs	r3, r2
 8009504:	d034      	beq.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800950a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800950c:	2b00      	cmp	r3, #0
 800950e:	d003      	beq.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009514:	d007      	beq.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009516:	e011      	b.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009518:	4b12      	ldr	r3, [pc, #72]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800951a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800951c:	4a11      	ldr	r2, [pc, #68]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800951e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009522:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009524:	e00e      	b.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800952a:	3308      	adds	r3, #8
 800952c:	2102      	movs	r1, #2
 800952e:	4618      	mov	r0, r3
 8009530:	f001 fb76 	bl	800ac20 <RCCEx_PLL2_Config>
 8009534:	4603      	mov	r3, r0
 8009536:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800953a:	e003      	b.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800953c:	2301      	movs	r3, #1
 800953e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009542:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009544:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009548:	2b00      	cmp	r3, #0
 800954a:	d10d      	bne.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800954c:	4b05      	ldr	r3, [pc, #20]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800954e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009550:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009554:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800955a:	4a02      	ldr	r2, [pc, #8]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800955c:	430b      	orrs	r3, r1
 800955e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009560:	e006      	b.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009562:	bf00      	nop
 8009564:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009568:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800956c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009578:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800957c:	66bb      	str	r3, [r7, #104]	; 0x68
 800957e:	2300      	movs	r3, #0
 8009580:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009582:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009586:	460b      	mov	r3, r1
 8009588:	4313      	orrs	r3, r2
 800958a:	d00c      	beq.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800958c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009590:	3328      	adds	r3, #40	; 0x28
 8009592:	2102      	movs	r1, #2
 8009594:	4618      	mov	r0, r3
 8009596:	f001 fbf5 	bl	800ad84 <RCCEx_PLL3_Config>
 800959a:	4603      	mov	r3, r0
 800959c:	2b00      	cmp	r3, #0
 800959e:	d002      	beq.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80095a0:	2301      	movs	r3, #1
 80095a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80095a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ae:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80095b2:	663b      	str	r3, [r7, #96]	; 0x60
 80095b4:	2300      	movs	r3, #0
 80095b6:	667b      	str	r3, [r7, #100]	; 0x64
 80095b8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80095bc:	460b      	mov	r3, r1
 80095be:	4313      	orrs	r3, r2
 80095c0:	d038      	beq.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80095c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80095ce:	d018      	beq.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80095d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80095d4:	d811      	bhi.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80095d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095da:	d014      	beq.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80095dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095e0:	d80b      	bhi.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d011      	beq.n	800960a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80095e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095ea:	d106      	bne.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095ec:	4bc3      	ldr	r3, [pc, #780]	; (80098fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80095ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f0:	4ac2      	ldr	r2, [pc, #776]	; (80098fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80095f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80095f8:	e008      	b.n	800960c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095fa:	2301      	movs	r3, #1
 80095fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009600:	e004      	b.n	800960c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009602:	bf00      	nop
 8009604:	e002      	b.n	800960c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009606:	bf00      	nop
 8009608:	e000      	b.n	800960c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800960a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800960c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009610:	2b00      	cmp	r3, #0
 8009612:	d10b      	bne.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009614:	4bb9      	ldr	r3, [pc, #740]	; (80098fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009618:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800961c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009620:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009624:	4ab5      	ldr	r2, [pc, #724]	; (80098fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009626:	430b      	orrs	r3, r1
 8009628:	6553      	str	r3, [r2, #84]	; 0x54
 800962a:	e003      	b.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800962c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009630:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009634:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8009640:	65bb      	str	r3, [r7, #88]	; 0x58
 8009642:	2300      	movs	r3, #0
 8009644:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009646:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800964a:	460b      	mov	r3, r1
 800964c:	4313      	orrs	r3, r2
 800964e:	d009      	beq.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009650:	4baa      	ldr	r3, [pc, #680]	; (80098fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009654:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009658:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800965c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800965e:	4aa7      	ldr	r2, [pc, #668]	; (80098fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009660:	430b      	orrs	r3, r1
 8009662:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009664:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8009670:	653b      	str	r3, [r7, #80]	; 0x50
 8009672:	2300      	movs	r3, #0
 8009674:	657b      	str	r3, [r7, #84]	; 0x54
 8009676:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800967a:	460b      	mov	r3, r1
 800967c:	4313      	orrs	r3, r2
 800967e:	d00a      	beq.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009680:	4b9e      	ldr	r3, [pc, #632]	; (80098fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009682:	691b      	ldr	r3, [r3, #16]
 8009684:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8009688:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800968c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009690:	4a9a      	ldr	r2, [pc, #616]	; (80098fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009692:	430b      	orrs	r3, r1
 8009694:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800969a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80096a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80096a4:	2300      	movs	r3, #0
 80096a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80096a8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80096ac:	460b      	mov	r3, r1
 80096ae:	4313      	orrs	r3, r2
 80096b0:	d009      	beq.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80096b2:	4b92      	ldr	r3, [pc, #584]	; (80098fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80096b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096b6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80096ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096c0:	4a8e      	ldr	r2, [pc, #568]	; (80098fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80096c2:	430b      	orrs	r3, r1
 80096c4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80096c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ce:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80096d2:	643b      	str	r3, [r7, #64]	; 0x40
 80096d4:	2300      	movs	r3, #0
 80096d6:	647b      	str	r3, [r7, #68]	; 0x44
 80096d8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80096dc:	460b      	mov	r3, r1
 80096de:	4313      	orrs	r3, r2
 80096e0:	d00e      	beq.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80096e2:	4b86      	ldr	r3, [pc, #536]	; (80098fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80096e4:	691b      	ldr	r3, [r3, #16]
 80096e6:	4a85      	ldr	r2, [pc, #532]	; (80098fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80096e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80096ec:	6113      	str	r3, [r2, #16]
 80096ee:	4b83      	ldr	r3, [pc, #524]	; (80098fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80096f0:	6919      	ldr	r1, [r3, #16]
 80096f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80096fa:	4a80      	ldr	r2, [pc, #512]	; (80098fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80096fc:	430b      	orrs	r3, r1
 80096fe:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009708:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800970c:	63bb      	str	r3, [r7, #56]	; 0x38
 800970e:	2300      	movs	r3, #0
 8009710:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009712:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8009716:	460b      	mov	r3, r1
 8009718:	4313      	orrs	r3, r2
 800971a:	d009      	beq.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800971c:	4b77      	ldr	r3, [pc, #476]	; (80098fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800971e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009720:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009724:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800972a:	4a74      	ldr	r2, [pc, #464]	; (80098fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800972c:	430b      	orrs	r3, r1
 800972e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009738:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800973c:	633b      	str	r3, [r7, #48]	; 0x30
 800973e:	2300      	movs	r3, #0
 8009740:	637b      	str	r3, [r7, #52]	; 0x34
 8009742:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009746:	460b      	mov	r3, r1
 8009748:	4313      	orrs	r3, r2
 800974a:	d00a      	beq.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800974c:	4b6b      	ldr	r3, [pc, #428]	; (80098fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800974e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009750:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8009754:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009758:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800975c:	4a67      	ldr	r2, [pc, #412]	; (80098fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800975e:	430b      	orrs	r3, r1
 8009760:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976a:	2100      	movs	r1, #0
 800976c:	62b9      	str	r1, [r7, #40]	; 0x28
 800976e:	f003 0301 	and.w	r3, r3, #1
 8009772:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009774:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009778:	460b      	mov	r3, r1
 800977a:	4313      	orrs	r3, r2
 800977c:	d011      	beq.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800977e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009782:	3308      	adds	r3, #8
 8009784:	2100      	movs	r1, #0
 8009786:	4618      	mov	r0, r3
 8009788:	f001 fa4a 	bl	800ac20 <RCCEx_PLL2_Config>
 800978c:	4603      	mov	r3, r0
 800978e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009792:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009796:	2b00      	cmp	r3, #0
 8009798:	d003      	beq.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800979a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800979e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80097a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097aa:	2100      	movs	r1, #0
 80097ac:	6239      	str	r1, [r7, #32]
 80097ae:	f003 0302 	and.w	r3, r3, #2
 80097b2:	627b      	str	r3, [r7, #36]	; 0x24
 80097b4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80097b8:	460b      	mov	r3, r1
 80097ba:	4313      	orrs	r3, r2
 80097bc:	d011      	beq.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80097be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097c2:	3308      	adds	r3, #8
 80097c4:	2101      	movs	r1, #1
 80097c6:	4618      	mov	r0, r3
 80097c8:	f001 fa2a 	bl	800ac20 <RCCEx_PLL2_Config>
 80097cc:	4603      	mov	r3, r0
 80097ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80097d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d003      	beq.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80097e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ea:	2100      	movs	r1, #0
 80097ec:	61b9      	str	r1, [r7, #24]
 80097ee:	f003 0304 	and.w	r3, r3, #4
 80097f2:	61fb      	str	r3, [r7, #28]
 80097f4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80097f8:	460b      	mov	r3, r1
 80097fa:	4313      	orrs	r3, r2
 80097fc:	d011      	beq.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80097fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009802:	3308      	adds	r3, #8
 8009804:	2102      	movs	r1, #2
 8009806:	4618      	mov	r0, r3
 8009808:	f001 fa0a 	bl	800ac20 <RCCEx_PLL2_Config>
 800980c:	4603      	mov	r3, r0
 800980e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009812:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009816:	2b00      	cmp	r3, #0
 8009818:	d003      	beq.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800981a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800981e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982a:	2100      	movs	r1, #0
 800982c:	6139      	str	r1, [r7, #16]
 800982e:	f003 0308 	and.w	r3, r3, #8
 8009832:	617b      	str	r3, [r7, #20]
 8009834:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009838:	460b      	mov	r3, r1
 800983a:	4313      	orrs	r3, r2
 800983c:	d011      	beq.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800983e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009842:	3328      	adds	r3, #40	; 0x28
 8009844:	2100      	movs	r1, #0
 8009846:	4618      	mov	r0, r3
 8009848:	f001 fa9c 	bl	800ad84 <RCCEx_PLL3_Config>
 800984c:	4603      	mov	r3, r0
 800984e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8009852:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009856:	2b00      	cmp	r3, #0
 8009858:	d003      	beq.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800985a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800985e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986a:	2100      	movs	r1, #0
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	f003 0310 	and.w	r3, r3, #16
 8009872:	60fb      	str	r3, [r7, #12]
 8009874:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009878:	460b      	mov	r3, r1
 800987a:	4313      	orrs	r3, r2
 800987c:	d011      	beq.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800987e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009882:	3328      	adds	r3, #40	; 0x28
 8009884:	2101      	movs	r1, #1
 8009886:	4618      	mov	r0, r3
 8009888:	f001 fa7c 	bl	800ad84 <RCCEx_PLL3_Config>
 800988c:	4603      	mov	r3, r0
 800988e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009892:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009896:	2b00      	cmp	r3, #0
 8009898:	d003      	beq.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800989a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800989e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80098a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098aa:	2100      	movs	r1, #0
 80098ac:	6039      	str	r1, [r7, #0]
 80098ae:	f003 0320 	and.w	r3, r3, #32
 80098b2:	607b      	str	r3, [r7, #4]
 80098b4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80098b8:	460b      	mov	r3, r1
 80098ba:	4313      	orrs	r3, r2
 80098bc:	d011      	beq.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80098be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098c2:	3328      	adds	r3, #40	; 0x28
 80098c4:	2102      	movs	r1, #2
 80098c6:	4618      	mov	r0, r3
 80098c8:	f001 fa5c 	bl	800ad84 <RCCEx_PLL3_Config>
 80098cc:	4603      	mov	r3, r0
 80098ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80098d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d003      	beq.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80098e2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d101      	bne.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80098ea:	2300      	movs	r3, #0
 80098ec:	e000      	b.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80098ee:	2301      	movs	r3, #1
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80098f6:	46bd      	mov	sp, r7
 80098f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80098fc:	58024400 	.word	0x58024400

08009900 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b090      	sub	sp, #64	; 0x40
 8009904:	af00      	add	r7, sp, #0
 8009906:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800990a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800990e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8009912:	430b      	orrs	r3, r1
 8009914:	f040 8094 	bne.w	8009a40 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009918:	4b9e      	ldr	r3, [pc, #632]	; (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800991a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800991c:	f003 0307 	and.w	r3, r3, #7
 8009920:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009924:	2b04      	cmp	r3, #4
 8009926:	f200 8087 	bhi.w	8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800992a:	a201      	add	r2, pc, #4	; (adr r2, 8009930 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800992c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009930:	08009945 	.word	0x08009945
 8009934:	0800996d 	.word	0x0800996d
 8009938:	08009995 	.word	0x08009995
 800993c:	08009a31 	.word	0x08009a31
 8009940:	080099bd 	.word	0x080099bd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009944:	4b93      	ldr	r3, [pc, #588]	; (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800994c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009950:	d108      	bne.n	8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009956:	4618      	mov	r0, r3
 8009958:	f001 f810 	bl	800a97c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800995c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800995e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009960:	f000 bd45 	b.w	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009964:	2300      	movs	r3, #0
 8009966:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009968:	f000 bd41 	b.w	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800996c:	4b89      	ldr	r3, [pc, #548]	; (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009974:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009978:	d108      	bne.n	800998c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800997a:	f107 0318 	add.w	r3, r7, #24
 800997e:	4618      	mov	r0, r3
 8009980:	f000 fd54 	bl	800a42c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009984:	69bb      	ldr	r3, [r7, #24]
 8009986:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009988:	f000 bd31 	b.w	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800998c:	2300      	movs	r3, #0
 800998e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009990:	f000 bd2d 	b.w	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009994:	4b7f      	ldr	r3, [pc, #508]	; (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800999c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099a0:	d108      	bne.n	80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099a2:	f107 030c 	add.w	r3, r7, #12
 80099a6:	4618      	mov	r0, r3
 80099a8:	f000 fe94 	bl	800a6d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099b0:	f000 bd1d 	b.w	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099b4:	2300      	movs	r3, #0
 80099b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099b8:	f000 bd19 	b.w	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80099bc:	4b75      	ldr	r3, [pc, #468]	; (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80099be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80099c4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80099c6:	4b73      	ldr	r3, [pc, #460]	; (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f003 0304 	and.w	r3, r3, #4
 80099ce:	2b04      	cmp	r3, #4
 80099d0:	d10c      	bne.n	80099ec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80099d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d109      	bne.n	80099ec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80099d8:	4b6e      	ldr	r3, [pc, #440]	; (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	08db      	lsrs	r3, r3, #3
 80099de:	f003 0303 	and.w	r3, r3, #3
 80099e2:	4a6d      	ldr	r2, [pc, #436]	; (8009b98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80099e4:	fa22 f303 	lsr.w	r3, r2, r3
 80099e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099ea:	e01f      	b.n	8009a2c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80099ec:	4b69      	ldr	r3, [pc, #420]	; (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099f8:	d106      	bne.n	8009a08 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80099fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a00:	d102      	bne.n	8009a08 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009a02:	4b66      	ldr	r3, [pc, #408]	; (8009b9c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009a04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a06:	e011      	b.n	8009a2c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a08:	4b62      	ldr	r3, [pc, #392]	; (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a14:	d106      	bne.n	8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a1c:	d102      	bne.n	8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009a1e:	4b60      	ldr	r3, [pc, #384]	; (8009ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009a20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a22:	e003      	b.n	8009a2c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009a24:	2300      	movs	r3, #0
 8009a26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009a28:	f000 bce1 	b.w	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009a2c:	f000 bcdf 	b.w	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009a30:	4b5c      	ldr	r3, [pc, #368]	; (8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009a32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a34:	f000 bcdb 	b.w	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a3c:	f000 bcd7 	b.w	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009a40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a44:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8009a48:	430b      	orrs	r3, r1
 8009a4a:	f040 80ad 	bne.w	8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8009a4e:	4b51      	ldr	r3, [pc, #324]	; (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a52:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8009a56:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a5e:	d056      	beq.n	8009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8009a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a66:	f200 8090 	bhi.w	8009b8a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a6c:	2bc0      	cmp	r3, #192	; 0xc0
 8009a6e:	f000 8088 	beq.w	8009b82 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8009a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a74:	2bc0      	cmp	r3, #192	; 0xc0
 8009a76:	f200 8088 	bhi.w	8009b8a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a7c:	2b80      	cmp	r3, #128	; 0x80
 8009a7e:	d032      	beq.n	8009ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a82:	2b80      	cmp	r3, #128	; 0x80
 8009a84:	f200 8081 	bhi.w	8009b8a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d003      	beq.n	8009a96 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8009a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a90:	2b40      	cmp	r3, #64	; 0x40
 8009a92:	d014      	beq.n	8009abe <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009a94:	e079      	b.n	8009b8a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009a96:	4b3f      	ldr	r3, [pc, #252]	; (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009aa2:	d108      	bne.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f000 ff67 	bl	800a97c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ab2:	f000 bc9c 	b.w	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009aba:	f000 bc98 	b.w	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009abe:	4b35      	ldr	r3, [pc, #212]	; (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ac6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009aca:	d108      	bne.n	8009ade <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009acc:	f107 0318 	add.w	r3, r7, #24
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f000 fcab 	bl	800a42c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009ad6:	69bb      	ldr	r3, [r7, #24]
 8009ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ada:	f000 bc88 	b.w	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ae2:	f000 bc84 	b.w	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009ae6:	4b2b      	ldr	r3, [pc, #172]	; (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009aee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009af2:	d108      	bne.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009af4:	f107 030c 	add.w	r3, r7, #12
 8009af8:	4618      	mov	r0, r3
 8009afa:	f000 fdeb 	bl	800a6d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b02:	f000 bc74 	b.w	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b06:	2300      	movs	r3, #0
 8009b08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b0a:	f000 bc70 	b.w	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009b0e:	4b21      	ldr	r3, [pc, #132]	; (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009b16:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009b18:	4b1e      	ldr	r3, [pc, #120]	; (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f003 0304 	and.w	r3, r3, #4
 8009b20:	2b04      	cmp	r3, #4
 8009b22:	d10c      	bne.n	8009b3e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8009b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d109      	bne.n	8009b3e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b2a:	4b1a      	ldr	r3, [pc, #104]	; (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	08db      	lsrs	r3, r3, #3
 8009b30:	f003 0303 	and.w	r3, r3, #3
 8009b34:	4a18      	ldr	r2, [pc, #96]	; (8009b98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009b36:	fa22 f303 	lsr.w	r3, r2, r3
 8009b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b3c:	e01f      	b.n	8009b7e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009b3e:	4b15      	ldr	r3, [pc, #84]	; (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b4a:	d106      	bne.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b52:	d102      	bne.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009b54:	4b11      	ldr	r3, [pc, #68]	; (8009b9c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009b56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b58:	e011      	b.n	8009b7e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009b5a:	4b0e      	ldr	r3, [pc, #56]	; (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b66:	d106      	bne.n	8009b76 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b6e:	d102      	bne.n	8009b76 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009b70:	4b0b      	ldr	r3, [pc, #44]	; (8009ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009b72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b74:	e003      	b.n	8009b7e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009b76:	2300      	movs	r3, #0
 8009b78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009b7a:	f000 bc38 	b.w	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009b7e:	f000 bc36 	b.w	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009b82:	4b08      	ldr	r3, [pc, #32]	; (8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009b84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b86:	f000 bc32 	b.w	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b8e:	f000 bc2e 	b.w	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009b92:	bf00      	nop
 8009b94:	58024400 	.word	0x58024400
 8009b98:	03d09000 	.word	0x03d09000
 8009b9c:	003d0900 	.word	0x003d0900
 8009ba0:	007a1200 	.word	0x007a1200
 8009ba4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009ba8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bac:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8009bb0:	430b      	orrs	r3, r1
 8009bb2:	f040 809c 	bne.w	8009cee <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009bb6:	4b9e      	ldr	r3, [pc, #632]	; (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bba:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009bbe:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009bc6:	d054      	beq.n	8009c72 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009bce:	f200 808b 	bhi.w	8009ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009bd8:	f000 8083 	beq.w	8009ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bde:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009be2:	f200 8081 	bhi.w	8009ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009bec:	d02f      	beq.n	8009c4e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009bf4:	d878      	bhi.n	8009ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d004      	beq.n	8009c06 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c02:	d012      	beq.n	8009c2a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009c04:	e070      	b.n	8009ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009c06:	4b8a      	ldr	r3, [pc, #552]	; (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c12:	d107      	bne.n	8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f000 feaf 	bl	800a97c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c22:	e3e4      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c24:	2300      	movs	r3, #0
 8009c26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c28:	e3e1      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c2a:	4b81      	ldr	r3, [pc, #516]	; (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c36:	d107      	bne.n	8009c48 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c38:	f107 0318 	add.w	r3, r7, #24
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f000 fbf5 	bl	800a42c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009c42:	69bb      	ldr	r3, [r7, #24]
 8009c44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c46:	e3d2      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c4c:	e3cf      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009c4e:	4b78      	ldr	r3, [pc, #480]	; (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c5a:	d107      	bne.n	8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c5c:	f107 030c 	add.w	r3, r7, #12
 8009c60:	4618      	mov	r0, r3
 8009c62:	f000 fd37 	bl	800a6d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c6a:	e3c0      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c70:	e3bd      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009c72:	4b6f      	ldr	r3, [pc, #444]	; (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009c7a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c7c:	4b6c      	ldr	r3, [pc, #432]	; (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f003 0304 	and.w	r3, r3, #4
 8009c84:	2b04      	cmp	r3, #4
 8009c86:	d10c      	bne.n	8009ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d109      	bne.n	8009ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009c8e:	4b68      	ldr	r3, [pc, #416]	; (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	08db      	lsrs	r3, r3, #3
 8009c94:	f003 0303 	and.w	r3, r3, #3
 8009c98:	4a66      	ldr	r2, [pc, #408]	; (8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8009c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ca0:	e01e      	b.n	8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009ca2:	4b63      	ldr	r3, [pc, #396]	; (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009caa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cae:	d106      	bne.n	8009cbe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009cb6:	d102      	bne.n	8009cbe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009cb8:	4b5f      	ldr	r3, [pc, #380]	; (8009e38 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009cba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cbc:	e010      	b.n	8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009cbe:	4b5c      	ldr	r3, [pc, #368]	; (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009cca:	d106      	bne.n	8009cda <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cd2:	d102      	bne.n	8009cda <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009cd4:	4b59      	ldr	r3, [pc, #356]	; (8009e3c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cd8:	e002      	b.n	8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009cde:	e386      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009ce0:	e385      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009ce2:	4b57      	ldr	r3, [pc, #348]	; (8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ce6:	e382      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009cec:	e37f      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009cee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cf2:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8009cf6:	430b      	orrs	r3, r1
 8009cf8:	f040 80a7 	bne.w	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009cfc:	4b4c      	ldr	r3, [pc, #304]	; (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d00:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009d04:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d0c:	d055      	beq.n	8009dba <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8009d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d14:	f200 8096 	bhi.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d1a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009d1e:	f000 8084 	beq.w	8009e2a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8009d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d24:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009d28:	f200 808c 	bhi.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d32:	d030      	beq.n	8009d96 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8009d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d3a:	f200 8083 	bhi.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d004      	beq.n	8009d4e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8009d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009d4a:	d012      	beq.n	8009d72 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8009d4c:	e07a      	b.n	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009d4e:	4b38      	ldr	r3, [pc, #224]	; (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d5a:	d107      	bne.n	8009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d60:	4618      	mov	r0, r3
 8009d62:	f000 fe0b 	bl	800a97c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d6a:	e340      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d70:	e33d      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d72:	4b2f      	ldr	r3, [pc, #188]	; (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d7e:	d107      	bne.n	8009d90 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d80:	f107 0318 	add.w	r3, r7, #24
 8009d84:	4618      	mov	r0, r3
 8009d86:	f000 fb51 	bl	800a42c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009d8a:	69bb      	ldr	r3, [r7, #24]
 8009d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d8e:	e32e      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d90:	2300      	movs	r3, #0
 8009d92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d94:	e32b      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009d96:	4b26      	ldr	r3, [pc, #152]	; (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009da2:	d107      	bne.n	8009db4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009da4:	f107 030c 	add.w	r3, r7, #12
 8009da8:	4618      	mov	r0, r3
 8009daa:	f000 fc93 	bl	800a6d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009db2:	e31c      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009db4:	2300      	movs	r3, #0
 8009db6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009db8:	e319      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009dba:	4b1d      	ldr	r3, [pc, #116]	; (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dbe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009dc2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009dc4:	4b1a      	ldr	r3, [pc, #104]	; (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f003 0304 	and.w	r3, r3, #4
 8009dcc:	2b04      	cmp	r3, #4
 8009dce:	d10c      	bne.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d109      	bne.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009dd6:	4b16      	ldr	r3, [pc, #88]	; (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	08db      	lsrs	r3, r3, #3
 8009ddc:	f003 0303 	and.w	r3, r3, #3
 8009de0:	4a14      	ldr	r2, [pc, #80]	; (8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009de2:	fa22 f303 	lsr.w	r3, r2, r3
 8009de6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009de8:	e01e      	b.n	8009e28 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009dea:	4b11      	ldr	r3, [pc, #68]	; (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009df6:	d106      	bne.n	8009e06 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009dfe:	d102      	bne.n	8009e06 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009e00:	4b0d      	ldr	r3, [pc, #52]	; (8009e38 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009e02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e04:	e010      	b.n	8009e28 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e06:	4b0a      	ldr	r3, [pc, #40]	; (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e12:	d106      	bne.n	8009e22 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8009e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e1a:	d102      	bne.n	8009e22 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009e1c:	4b07      	ldr	r3, [pc, #28]	; (8009e3c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e20:	e002      	b.n	8009e28 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009e22:	2300      	movs	r3, #0
 8009e24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009e26:	e2e2      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009e28:	e2e1      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009e2a:	4b05      	ldr	r3, [pc, #20]	; (8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e2e:	e2de      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009e30:	58024400 	.word	0x58024400
 8009e34:	03d09000 	.word	0x03d09000
 8009e38:	003d0900 	.word	0x003d0900
 8009e3c:	007a1200 	.word	0x007a1200
 8009e40:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8009e44:	2300      	movs	r3, #0
 8009e46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e48:	e2d1      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009e4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e4e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8009e52:	430b      	orrs	r3, r1
 8009e54:	f040 809c 	bne.w	8009f90 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009e58:	4b93      	ldr	r3, [pc, #588]	; (800a0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e5c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009e60:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e68:	d054      	beq.n	8009f14 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e70:	f200 808b 	bhi.w	8009f8a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e76:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009e7a:	f000 8083 	beq.w	8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8009e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e80:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009e84:	f200 8081 	bhi.w	8009f8a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e8e:	d02f      	beq.n	8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e96:	d878      	bhi.n	8009f8a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d004      	beq.n	8009ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8009e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ea4:	d012      	beq.n	8009ecc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8009ea6:	e070      	b.n	8009f8a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009ea8:	4b7f      	ldr	r3, [pc, #508]	; (800a0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009eb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009eb4:	d107      	bne.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f000 fd5e 	bl	800a97c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ec4:	e293      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009eca:	e290      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ecc:	4b76      	ldr	r3, [pc, #472]	; (800a0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ed4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ed8:	d107      	bne.n	8009eea <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009eda:	f107 0318 	add.w	r3, r7, #24
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f000 faa4 	bl	800a42c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009ee4:	69bb      	ldr	r3, [r7, #24]
 8009ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ee8:	e281      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009eea:	2300      	movs	r3, #0
 8009eec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009eee:	e27e      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009ef0:	4b6d      	ldr	r3, [pc, #436]	; (800a0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ef8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009efc:	d107      	bne.n	8009f0e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009efe:	f107 030c 	add.w	r3, r7, #12
 8009f02:	4618      	mov	r0, r3
 8009f04:	f000 fbe6 	bl	800a6d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f0c:	e26f      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f12:	e26c      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009f14:	4b64      	ldr	r3, [pc, #400]	; (800a0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009f1c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f1e:	4b62      	ldr	r3, [pc, #392]	; (800a0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f003 0304 	and.w	r3, r3, #4
 8009f26:	2b04      	cmp	r3, #4
 8009f28:	d10c      	bne.n	8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8009f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d109      	bne.n	8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f30:	4b5d      	ldr	r3, [pc, #372]	; (800a0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	08db      	lsrs	r3, r3, #3
 8009f36:	f003 0303 	and.w	r3, r3, #3
 8009f3a:	4a5c      	ldr	r2, [pc, #368]	; (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8009f40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f42:	e01e      	b.n	8009f82 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009f44:	4b58      	ldr	r3, [pc, #352]	; (800a0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f50:	d106      	bne.n	8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8009f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f58:	d102      	bne.n	8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009f5a:	4b55      	ldr	r3, [pc, #340]	; (800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f5e:	e010      	b.n	8009f82 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009f60:	4b51      	ldr	r3, [pc, #324]	; (800a0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f6c:	d106      	bne.n	8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8009f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f74:	d102      	bne.n	8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009f76:	4b4f      	ldr	r3, [pc, #316]	; (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009f78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f7a:	e002      	b.n	8009f82 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009f80:	e235      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009f82:	e234      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009f84:	4b4c      	ldr	r3, [pc, #304]	; (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009f86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f88:	e231      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f8e:	e22e      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009f90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f94:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8009f98:	430b      	orrs	r3, r1
 8009f9a:	f040 808f 	bne.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009f9e:	4b42      	ldr	r3, [pc, #264]	; (800a0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fa2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8009fa6:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8009fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009faa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009fae:	d06b      	beq.n	800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009fb6:	d874      	bhi.n	800a0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009fbe:	d056      	beq.n	800a06e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009fc6:	d86c      	bhi.n	800a0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009fce:	d03b      	beq.n	800a048 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009fd6:	d864      	bhi.n	800a0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fde:	d021      	beq.n	800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fe6:	d85c      	bhi.n	800a0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d004      	beq.n	8009ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8009fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ff4:	d004      	beq.n	800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8009ff6:	e054      	b.n	800a0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009ff8:	f7fe fa4c 	bl	8008494 <HAL_RCC_GetPCLK1Freq>
 8009ffc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009ffe:	e1f6      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a000:	4b29      	ldr	r3, [pc, #164]	; (800a0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a008:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a00c:	d107      	bne.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a00e:	f107 0318 	add.w	r3, r7, #24
 800a012:	4618      	mov	r0, r3
 800a014:	f000 fa0a 	bl	800a42c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a018:	69fb      	ldr	r3, [r7, #28]
 800a01a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a01c:	e1e7      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a01e:	2300      	movs	r3, #0
 800a020:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a022:	e1e4      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a024:	4b20      	ldr	r3, [pc, #128]	; (800a0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a02c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a030:	d107      	bne.n	800a042 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a032:	f107 030c 	add.w	r3, r7, #12
 800a036:	4618      	mov	r0, r3
 800a038:	f000 fb4c 	bl	800a6d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a040:	e1d5      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a042:	2300      	movs	r3, #0
 800a044:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a046:	e1d2      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a048:	4b17      	ldr	r3, [pc, #92]	; (800a0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f003 0304 	and.w	r3, r3, #4
 800a050:	2b04      	cmp	r3, #4
 800a052:	d109      	bne.n	800a068 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a054:	4b14      	ldr	r3, [pc, #80]	; (800a0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	08db      	lsrs	r3, r3, #3
 800a05a:	f003 0303 	and.w	r3, r3, #3
 800a05e:	4a13      	ldr	r2, [pc, #76]	; (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a060:	fa22 f303 	lsr.w	r3, r2, r3
 800a064:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a066:	e1c2      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a068:	2300      	movs	r3, #0
 800a06a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a06c:	e1bf      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a06e:	4b0e      	ldr	r3, [pc, #56]	; (800a0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a07a:	d102      	bne.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a07c:	4b0c      	ldr	r3, [pc, #48]	; (800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a07e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a080:	e1b5      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a082:	2300      	movs	r3, #0
 800a084:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a086:	e1b2      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a088:	4b07      	ldr	r3, [pc, #28]	; (800a0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a090:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a094:	d102      	bne.n	800a09c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a096:	4b07      	ldr	r3, [pc, #28]	; (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a098:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a09a:	e1a8      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a09c:	2300      	movs	r3, #0
 800a09e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0a0:	e1a5      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0a6:	e1a2      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a0a8:	58024400 	.word	0x58024400
 800a0ac:	03d09000 	.word	0x03d09000
 800a0b0:	003d0900 	.word	0x003d0900
 800a0b4:	007a1200 	.word	0x007a1200
 800a0b8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a0bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0c0:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800a0c4:	430b      	orrs	r3, r1
 800a0c6:	d173      	bne.n	800a1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a0c8:	4b9c      	ldr	r3, [pc, #624]	; (800a33c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a0ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a0d0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a0d8:	d02f      	beq.n	800a13a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a0e0:	d863      	bhi.n	800a1aa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a0e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d004      	beq.n	800a0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0ee:	d012      	beq.n	800a116 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a0f0:	e05b      	b.n	800a1aa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a0f2:	4b92      	ldr	r3, [pc, #584]	; (800a33c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a0fe:	d107      	bne.n	800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a100:	f107 0318 	add.w	r3, r7, #24
 800a104:	4618      	mov	r0, r3
 800a106:	f000 f991 	bl	800a42c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a10a:	69bb      	ldr	r3, [r7, #24]
 800a10c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a10e:	e16e      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a110:	2300      	movs	r3, #0
 800a112:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a114:	e16b      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a116:	4b89      	ldr	r3, [pc, #548]	; (800a33c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a11e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a122:	d107      	bne.n	800a134 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a124:	f107 030c 	add.w	r3, r7, #12
 800a128:	4618      	mov	r0, r3
 800a12a:	f000 fad3 	bl	800a6d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a132:	e15c      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a134:	2300      	movs	r3, #0
 800a136:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a138:	e159      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a13a:	4b80      	ldr	r3, [pc, #512]	; (800a33c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a13c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a13e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a142:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a144:	4b7d      	ldr	r3, [pc, #500]	; (800a33c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f003 0304 	and.w	r3, r3, #4
 800a14c:	2b04      	cmp	r3, #4
 800a14e:	d10c      	bne.n	800a16a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a152:	2b00      	cmp	r3, #0
 800a154:	d109      	bne.n	800a16a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a156:	4b79      	ldr	r3, [pc, #484]	; (800a33c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	08db      	lsrs	r3, r3, #3
 800a15c:	f003 0303 	and.w	r3, r3, #3
 800a160:	4a77      	ldr	r2, [pc, #476]	; (800a340 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a162:	fa22 f303 	lsr.w	r3, r2, r3
 800a166:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a168:	e01e      	b.n	800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a16a:	4b74      	ldr	r3, [pc, #464]	; (800a33c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a176:	d106      	bne.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a17a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a17e:	d102      	bne.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a180:	4b70      	ldr	r3, [pc, #448]	; (800a344 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a182:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a184:	e010      	b.n	800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a186:	4b6d      	ldr	r3, [pc, #436]	; (800a33c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a18e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a192:	d106      	bne.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a196:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a19a:	d102      	bne.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a19c:	4b6a      	ldr	r3, [pc, #424]	; (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a19e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1a0:	e002      	b.n	800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a1a6:	e122      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a1a8:	e121      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1ae:	e11e      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a1b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1b4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800a1b8:	430b      	orrs	r3, r1
 800a1ba:	d133      	bne.n	800a224 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a1bc:	4b5f      	ldr	r3, [pc, #380]	; (800a33c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a1be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a1c4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d004      	beq.n	800a1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1d2:	d012      	beq.n	800a1fa <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a1d4:	e023      	b.n	800a21e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a1d6:	4b59      	ldr	r3, [pc, #356]	; (800a33c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1e2:	d107      	bne.n	800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f000 fbc7 	bl	800a97c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1f2:	e0fc      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1f8:	e0f9      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1fa:	4b50      	ldr	r3, [pc, #320]	; (800a33c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a202:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a206:	d107      	bne.n	800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a208:	f107 0318 	add.w	r3, r7, #24
 800a20c:	4618      	mov	r0, r3
 800a20e:	f000 f90d 	bl	800a42c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a212:	6a3b      	ldr	r3, [r7, #32]
 800a214:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a216:	e0ea      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a218:	2300      	movs	r3, #0
 800a21a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a21c:	e0e7      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a21e:	2300      	movs	r3, #0
 800a220:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a222:	e0e4      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a224:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a228:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800a22c:	430b      	orrs	r3, r1
 800a22e:	f040 808d 	bne.w	800a34c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a232:	4b42      	ldr	r3, [pc, #264]	; (800a33c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a236:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a23a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a23e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a242:	d06b      	beq.n	800a31c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a246:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a24a:	d874      	bhi.n	800a336 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a24e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a252:	d056      	beq.n	800a302 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a25a:	d86c      	bhi.n	800a336 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a25e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a262:	d03b      	beq.n	800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a266:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a26a:	d864      	bhi.n	800a336 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a26e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a272:	d021      	beq.n	800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a276:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a27a:	d85c      	bhi.n	800a336 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d004      	beq.n	800a28c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a284:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a288:	d004      	beq.n	800a294 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a28a:	e054      	b.n	800a336 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a28c:	f000 f8b8 	bl	800a400 <HAL_RCCEx_GetD3PCLK1Freq>
 800a290:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a292:	e0ac      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a294:	4b29      	ldr	r3, [pc, #164]	; (800a33c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a29c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a2a0:	d107      	bne.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2a2:	f107 0318 	add.w	r3, r7, #24
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f000 f8c0 	bl	800a42c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a2ac:	69fb      	ldr	r3, [r7, #28]
 800a2ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2b0:	e09d      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2b6:	e09a      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a2b8:	4b20      	ldr	r3, [pc, #128]	; (800a33c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a2c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2c4:	d107      	bne.n	800a2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2c6:	f107 030c 	add.w	r3, r7, #12
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f000 fa02 	bl	800a6d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2d4:	e08b      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2da:	e088      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a2dc:	4b17      	ldr	r3, [pc, #92]	; (800a33c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f003 0304 	and.w	r3, r3, #4
 800a2e4:	2b04      	cmp	r3, #4
 800a2e6:	d109      	bne.n	800a2fc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a2e8:	4b14      	ldr	r3, [pc, #80]	; (800a33c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	08db      	lsrs	r3, r3, #3
 800a2ee:	f003 0303 	and.w	r3, r3, #3
 800a2f2:	4a13      	ldr	r2, [pc, #76]	; (800a340 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a2f4:	fa22 f303 	lsr.w	r3, r2, r3
 800a2f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2fa:	e078      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a300:	e075      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a302:	4b0e      	ldr	r3, [pc, #56]	; (800a33c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a30a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a30e:	d102      	bne.n	800a316 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800a310:	4b0c      	ldr	r3, [pc, #48]	; (800a344 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a312:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a314:	e06b      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a316:	2300      	movs	r3, #0
 800a318:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a31a:	e068      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a31c:	4b07      	ldr	r3, [pc, #28]	; (800a33c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a324:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a328:	d102      	bne.n	800a330 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800a32a:	4b07      	ldr	r3, [pc, #28]	; (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a32c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a32e:	e05e      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a330:	2300      	movs	r3, #0
 800a332:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a334:	e05b      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a336:	2300      	movs	r3, #0
 800a338:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a33a:	e058      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a33c:	58024400 	.word	0x58024400
 800a340:	03d09000 	.word	0x03d09000
 800a344:	003d0900 	.word	0x003d0900
 800a348:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a34c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a350:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800a354:	430b      	orrs	r3, r1
 800a356:	d148      	bne.n	800a3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a358:	4b27      	ldr	r3, [pc, #156]	; (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a35a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a35c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a360:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a364:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a368:	d02a      	beq.n	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800a36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a36c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a370:	d838      	bhi.n	800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a374:	2b00      	cmp	r3, #0
 800a376:	d004      	beq.n	800a382 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a37a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a37e:	d00d      	beq.n	800a39c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800a380:	e030      	b.n	800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a382:	4b1d      	ldr	r3, [pc, #116]	; (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a38a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a38e:	d102      	bne.n	800a396 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a390:	4b1a      	ldr	r3, [pc, #104]	; (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a392:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a394:	e02b      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a396:	2300      	movs	r3, #0
 800a398:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a39a:	e028      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a39c:	4b16      	ldr	r3, [pc, #88]	; (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a3a8:	d107      	bne.n	800a3ba <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a3aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f000 fae4 	bl	800a97c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3b8:	e019      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3be:	e016      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a3c0:	4b0d      	ldr	r3, [pc, #52]	; (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a3cc:	d107      	bne.n	800a3de <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3ce:	f107 0318 	add.w	r3, r7, #24
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f000 f82a 	bl	800a42c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3dc:	e007      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3e2:	e004      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3e8:	e001      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800a3ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3740      	adds	r7, #64	; 0x40
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}
 800a3f8:	58024400 	.word	0x58024400
 800a3fc:	007a1200 	.word	0x007a1200

0800a400 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a404:	f7fe f816 	bl	8008434 <HAL_RCC_GetHCLKFreq>
 800a408:	4602      	mov	r2, r0
 800a40a:	4b06      	ldr	r3, [pc, #24]	; (800a424 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a40c:	6a1b      	ldr	r3, [r3, #32]
 800a40e:	091b      	lsrs	r3, r3, #4
 800a410:	f003 0307 	and.w	r3, r3, #7
 800a414:	4904      	ldr	r1, [pc, #16]	; (800a428 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a416:	5ccb      	ldrb	r3, [r1, r3]
 800a418:	f003 031f 	and.w	r3, r3, #31
 800a41c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a420:	4618      	mov	r0, r3
 800a422:	bd80      	pop	{r7, pc}
 800a424:	58024400 	.word	0x58024400
 800a428:	0800ee68 	.word	0x0800ee68

0800a42c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b089      	sub	sp, #36	; 0x24
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a434:	4ba1      	ldr	r3, [pc, #644]	; (800a6bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a438:	f003 0303 	and.w	r3, r3, #3
 800a43c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a43e:	4b9f      	ldr	r3, [pc, #636]	; (800a6bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a442:	0b1b      	lsrs	r3, r3, #12
 800a444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a448:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a44a:	4b9c      	ldr	r3, [pc, #624]	; (800a6bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a44c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a44e:	091b      	lsrs	r3, r3, #4
 800a450:	f003 0301 	and.w	r3, r3, #1
 800a454:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a456:	4b99      	ldr	r3, [pc, #612]	; (800a6bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a45a:	08db      	lsrs	r3, r3, #3
 800a45c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a460:	693a      	ldr	r2, [r7, #16]
 800a462:	fb02 f303 	mul.w	r3, r2, r3
 800a466:	ee07 3a90 	vmov	s15, r3
 800a46a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a46e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	2b00      	cmp	r3, #0
 800a476:	f000 8111 	beq.w	800a69c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a47a:	69bb      	ldr	r3, [r7, #24]
 800a47c:	2b02      	cmp	r3, #2
 800a47e:	f000 8083 	beq.w	800a588 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a482:	69bb      	ldr	r3, [r7, #24]
 800a484:	2b02      	cmp	r3, #2
 800a486:	f200 80a1 	bhi.w	800a5cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a48a:	69bb      	ldr	r3, [r7, #24]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d003      	beq.n	800a498 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	2b01      	cmp	r3, #1
 800a494:	d056      	beq.n	800a544 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a496:	e099      	b.n	800a5cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a498:	4b88      	ldr	r3, [pc, #544]	; (800a6bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f003 0320 	and.w	r3, r3, #32
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d02d      	beq.n	800a500 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4a4:	4b85      	ldr	r3, [pc, #532]	; (800a6bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	08db      	lsrs	r3, r3, #3
 800a4aa:	f003 0303 	and.w	r3, r3, #3
 800a4ae:	4a84      	ldr	r2, [pc, #528]	; (800a6c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a4b0:	fa22 f303 	lsr.w	r3, r2, r3
 800a4b4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	ee07 3a90 	vmov	s15, r3
 800a4bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	ee07 3a90 	vmov	s15, r3
 800a4c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4ce:	4b7b      	ldr	r3, [pc, #492]	; (800a6bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4d6:	ee07 3a90 	vmov	s15, r3
 800a4da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4de:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a4e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a4fe:	e087      	b.n	800a610 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	ee07 3a90 	vmov	s15, r3
 800a506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a50a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a50e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a512:	4b6a      	ldr	r3, [pc, #424]	; (800a6bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a51a:	ee07 3a90 	vmov	s15, r3
 800a51e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a522:	ed97 6a03 	vldr	s12, [r7, #12]
 800a526:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a52a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a52e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a532:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a53a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a53e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a542:	e065      	b.n	800a610 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	ee07 3a90 	vmov	s15, r3
 800a54a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a54e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a6cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a556:	4b59      	ldr	r3, [pc, #356]	; (800a6bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a55a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a55e:	ee07 3a90 	vmov	s15, r3
 800a562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a566:	ed97 6a03 	vldr	s12, [r7, #12]
 800a56a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a56e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a576:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a57a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a57e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a582:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a586:	e043      	b.n	800a610 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	ee07 3a90 	vmov	s15, r3
 800a58e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a592:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a59a:	4b48      	ldr	r3, [pc, #288]	; (800a6bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a59e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5a2:	ee07 3a90 	vmov	s15, r3
 800a5a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a5b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a5ca:	e021      	b.n	800a610 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	ee07 3a90 	vmov	s15, r3
 800a5d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a6cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a5da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5de:	4b37      	ldr	r3, [pc, #220]	; (800a6bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a5e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5e6:	ee07 3a90 	vmov	s15, r3
 800a5ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a5f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a60a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a60e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a610:	4b2a      	ldr	r3, [pc, #168]	; (800a6bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a614:	0a5b      	lsrs	r3, r3, #9
 800a616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a61a:	ee07 3a90 	vmov	s15, r3
 800a61e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a622:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a626:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a62a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a62e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a632:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a636:	ee17 2a90 	vmov	r2, s15
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a63e:	4b1f      	ldr	r3, [pc, #124]	; (800a6bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a642:	0c1b      	lsrs	r3, r3, #16
 800a644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a648:	ee07 3a90 	vmov	s15, r3
 800a64c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a650:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a654:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a658:	edd7 6a07 	vldr	s13, [r7, #28]
 800a65c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a664:	ee17 2a90 	vmov	r2, s15
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a66c:	4b13      	ldr	r3, [pc, #76]	; (800a6bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a66e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a670:	0e1b      	lsrs	r3, r3, #24
 800a672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a676:	ee07 3a90 	vmov	s15, r3
 800a67a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a67e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a682:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a686:	edd7 6a07 	vldr	s13, [r7, #28]
 800a68a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a68e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a692:	ee17 2a90 	vmov	r2, s15
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a69a:	e008      	b.n	800a6ae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	609a      	str	r2, [r3, #8]
}
 800a6ae:	bf00      	nop
 800a6b0:	3724      	adds	r7, #36	; 0x24
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b8:	4770      	bx	lr
 800a6ba:	bf00      	nop
 800a6bc:	58024400 	.word	0x58024400
 800a6c0:	03d09000 	.word	0x03d09000
 800a6c4:	46000000 	.word	0x46000000
 800a6c8:	4c742400 	.word	0x4c742400
 800a6cc:	4a742400 	.word	0x4a742400
 800a6d0:	4af42400 	.word	0x4af42400

0800a6d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b089      	sub	sp, #36	; 0x24
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a6dc:	4ba1      	ldr	r3, [pc, #644]	; (800a964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a6de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6e0:	f003 0303 	and.w	r3, r3, #3
 800a6e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a6e6:	4b9f      	ldr	r3, [pc, #636]	; (800a964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a6e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ea:	0d1b      	lsrs	r3, r3, #20
 800a6ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a6f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a6f2:	4b9c      	ldr	r3, [pc, #624]	; (800a964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a6f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6f6:	0a1b      	lsrs	r3, r3, #8
 800a6f8:	f003 0301 	and.w	r3, r3, #1
 800a6fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a6fe:	4b99      	ldr	r3, [pc, #612]	; (800a964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a702:	08db      	lsrs	r3, r3, #3
 800a704:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a708:	693a      	ldr	r2, [r7, #16]
 800a70a:	fb02 f303 	mul.w	r3, r2, r3
 800a70e:	ee07 3a90 	vmov	s15, r3
 800a712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a716:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	f000 8111 	beq.w	800a944 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a722:	69bb      	ldr	r3, [r7, #24]
 800a724:	2b02      	cmp	r3, #2
 800a726:	f000 8083 	beq.w	800a830 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a72a:	69bb      	ldr	r3, [r7, #24]
 800a72c:	2b02      	cmp	r3, #2
 800a72e:	f200 80a1 	bhi.w	800a874 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a732:	69bb      	ldr	r3, [r7, #24]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d003      	beq.n	800a740 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a738:	69bb      	ldr	r3, [r7, #24]
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d056      	beq.n	800a7ec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a73e:	e099      	b.n	800a874 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a740:	4b88      	ldr	r3, [pc, #544]	; (800a964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f003 0320 	and.w	r3, r3, #32
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d02d      	beq.n	800a7a8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a74c:	4b85      	ldr	r3, [pc, #532]	; (800a964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	08db      	lsrs	r3, r3, #3
 800a752:	f003 0303 	and.w	r3, r3, #3
 800a756:	4a84      	ldr	r2, [pc, #528]	; (800a968 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a758:	fa22 f303 	lsr.w	r3, r2, r3
 800a75c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	ee07 3a90 	vmov	s15, r3
 800a764:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	ee07 3a90 	vmov	s15, r3
 800a76e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a776:	4b7b      	ldr	r3, [pc, #492]	; (800a964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a77a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a77e:	ee07 3a90 	vmov	s15, r3
 800a782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a786:	ed97 6a03 	vldr	s12, [r7, #12]
 800a78a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a96c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a78e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a79a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a79e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a7a6:	e087      	b.n	800a8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	ee07 3a90 	vmov	s15, r3
 800a7ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a970 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a7b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7ba:	4b6a      	ldr	r3, [pc, #424]	; (800a964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7c2:	ee07 3a90 	vmov	s15, r3
 800a7c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a96c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a7d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a7ea:	e065      	b.n	800a8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	ee07 3a90 	vmov	s15, r3
 800a7f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a974 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a7fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7fe:	4b59      	ldr	r3, [pc, #356]	; (800a964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a806:	ee07 3a90 	vmov	s15, r3
 800a80a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a80e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a812:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a96c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a81a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a81e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a82a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a82e:	e043      	b.n	800a8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	ee07 3a90 	vmov	s15, r3
 800a836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a83a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a978 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a83e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a842:	4b48      	ldr	r3, [pc, #288]	; (800a964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a84a:	ee07 3a90 	vmov	s15, r3
 800a84e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a852:	ed97 6a03 	vldr	s12, [r7, #12]
 800a856:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a96c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a85a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a85e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a86a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a86e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a872:	e021      	b.n	800a8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	ee07 3a90 	vmov	s15, r3
 800a87a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a87e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a974 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a886:	4b37      	ldr	r3, [pc, #220]	; (800a964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a88a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a88e:	ee07 3a90 	vmov	s15, r3
 800a892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a896:	ed97 6a03 	vldr	s12, [r7, #12]
 800a89a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a96c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a89e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a8b6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a8b8:	4b2a      	ldr	r3, [pc, #168]	; (800a964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8bc:	0a5b      	lsrs	r3, r3, #9
 800a8be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8c2:	ee07 3a90 	vmov	s15, r3
 800a8c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a8ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a8d2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8de:	ee17 2a90 	vmov	r2, s15
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a8e6:	4b1f      	ldr	r3, [pc, #124]	; (800a964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ea:	0c1b      	lsrs	r3, r3, #16
 800a8ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8f0:	ee07 3a90 	vmov	s15, r3
 800a8f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a8fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a900:	edd7 6a07 	vldr	s13, [r7, #28]
 800a904:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a908:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a90c:	ee17 2a90 	vmov	r2, s15
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a914:	4b13      	ldr	r3, [pc, #76]	; (800a964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a918:	0e1b      	lsrs	r3, r3, #24
 800a91a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a91e:	ee07 3a90 	vmov	s15, r3
 800a922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a926:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a92a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a92e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a932:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a936:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a93a:	ee17 2a90 	vmov	r2, s15
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a942:	e008      	b.n	800a956 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2200      	movs	r2, #0
 800a948:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2200      	movs	r2, #0
 800a94e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2200      	movs	r2, #0
 800a954:	609a      	str	r2, [r3, #8]
}
 800a956:	bf00      	nop
 800a958:	3724      	adds	r7, #36	; 0x24
 800a95a:	46bd      	mov	sp, r7
 800a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a960:	4770      	bx	lr
 800a962:	bf00      	nop
 800a964:	58024400 	.word	0x58024400
 800a968:	03d09000 	.word	0x03d09000
 800a96c:	46000000 	.word	0x46000000
 800a970:	4c742400 	.word	0x4c742400
 800a974:	4a742400 	.word	0x4a742400
 800a978:	4af42400 	.word	0x4af42400

0800a97c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b089      	sub	sp, #36	; 0x24
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a984:	4ba0      	ldr	r3, [pc, #640]	; (800ac08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a988:	f003 0303 	and.w	r3, r3, #3
 800a98c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a98e:	4b9e      	ldr	r3, [pc, #632]	; (800ac08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a992:	091b      	lsrs	r3, r3, #4
 800a994:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a998:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a99a:	4b9b      	ldr	r3, [pc, #620]	; (800ac08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a99c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a99e:	f003 0301 	and.w	r3, r3, #1
 800a9a2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a9a4:	4b98      	ldr	r3, [pc, #608]	; (800ac08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a9a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9a8:	08db      	lsrs	r3, r3, #3
 800a9aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a9ae:	693a      	ldr	r2, [r7, #16]
 800a9b0:	fb02 f303 	mul.w	r3, r2, r3
 800a9b4:	ee07 3a90 	vmov	s15, r3
 800a9b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9bc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	f000 8111 	beq.w	800abea <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a9c8:	69bb      	ldr	r3, [r7, #24]
 800a9ca:	2b02      	cmp	r3, #2
 800a9cc:	f000 8083 	beq.w	800aad6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a9d0:	69bb      	ldr	r3, [r7, #24]
 800a9d2:	2b02      	cmp	r3, #2
 800a9d4:	f200 80a1 	bhi.w	800ab1a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a9d8:	69bb      	ldr	r3, [r7, #24]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d003      	beq.n	800a9e6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a9de:	69bb      	ldr	r3, [r7, #24]
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	d056      	beq.n	800aa92 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a9e4:	e099      	b.n	800ab1a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9e6:	4b88      	ldr	r3, [pc, #544]	; (800ac08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f003 0320 	and.w	r3, r3, #32
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d02d      	beq.n	800aa4e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a9f2:	4b85      	ldr	r3, [pc, #532]	; (800ac08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	08db      	lsrs	r3, r3, #3
 800a9f8:	f003 0303 	and.w	r3, r3, #3
 800a9fc:	4a83      	ldr	r2, [pc, #524]	; (800ac0c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a9fe:	fa22 f303 	lsr.w	r3, r2, r3
 800aa02:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	ee07 3a90 	vmov	s15, r3
 800aa0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	ee07 3a90 	vmov	s15, r3
 800aa14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa1c:	4b7a      	ldr	r3, [pc, #488]	; (800ac08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa24:	ee07 3a90 	vmov	s15, r3
 800aa28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa2c:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa30:	eddf 5a77 	vldr	s11, [pc, #476]	; 800ac10 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aa34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa48:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aa4c:	e087      	b.n	800ab5e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	ee07 3a90 	vmov	s15, r3
 800aa54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa58:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800ac14 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800aa5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa60:	4b69      	ldr	r3, [pc, #420]	; (800ac08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa68:	ee07 3a90 	vmov	s15, r3
 800aa6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa70:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa74:	eddf 5a66 	vldr	s11, [pc, #408]	; 800ac10 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aa78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa8c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa90:	e065      	b.n	800ab5e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	ee07 3a90 	vmov	s15, r3
 800aa98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa9c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800ac18 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800aaa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaa4:	4b58      	ldr	r3, [pc, #352]	; (800ac08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aaa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaac:	ee07 3a90 	vmov	s15, r3
 800aab0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aab4:	ed97 6a03 	vldr	s12, [r7, #12]
 800aab8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800ac10 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aabc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aac0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aac4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aac8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aacc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aad0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aad4:	e043      	b.n	800ab5e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	ee07 3a90 	vmov	s15, r3
 800aadc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aae0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800ac1c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800aae4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aae8:	4b47      	ldr	r3, [pc, #284]	; (800ac08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aaea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaf0:	ee07 3a90 	vmov	s15, r3
 800aaf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaf8:	ed97 6a03 	vldr	s12, [r7, #12]
 800aafc:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ac10 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ab00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab14:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab18:	e021      	b.n	800ab5e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	ee07 3a90 	vmov	s15, r3
 800ab20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab24:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800ac14 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ab28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab2c:	4b36      	ldr	r3, [pc, #216]	; (800ac08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab34:	ee07 3a90 	vmov	s15, r3
 800ab38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab3c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab40:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ac10 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ab44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab54:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab58:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab5c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800ab5e:	4b2a      	ldr	r3, [pc, #168]	; (800ac08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab62:	0a5b      	lsrs	r3, r3, #9
 800ab64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab68:	ee07 3a90 	vmov	s15, r3
 800ab6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab74:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab78:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab84:	ee17 2a90 	vmov	r2, s15
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800ab8c:	4b1e      	ldr	r3, [pc, #120]	; (800ac08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab90:	0c1b      	lsrs	r3, r3, #16
 800ab92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab96:	ee07 3a90 	vmov	s15, r3
 800ab9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aba2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aba6:	edd7 6a07 	vldr	s13, [r7, #28]
 800abaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abb2:	ee17 2a90 	vmov	r2, s15
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800abba:	4b13      	ldr	r3, [pc, #76]	; (800ac08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800abbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abbe:	0e1b      	lsrs	r3, r3, #24
 800abc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abc4:	ee07 3a90 	vmov	s15, r3
 800abc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abd4:	edd7 6a07 	vldr	s13, [r7, #28]
 800abd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abe0:	ee17 2a90 	vmov	r2, s15
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800abe8:	e008      	b.n	800abfc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2200      	movs	r2, #0
 800abee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2200      	movs	r2, #0
 800abf4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2200      	movs	r2, #0
 800abfa:	609a      	str	r2, [r3, #8]
}
 800abfc:	bf00      	nop
 800abfe:	3724      	adds	r7, #36	; 0x24
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr
 800ac08:	58024400 	.word	0x58024400
 800ac0c:	03d09000 	.word	0x03d09000
 800ac10:	46000000 	.word	0x46000000
 800ac14:	4c742400 	.word	0x4c742400
 800ac18:	4a742400 	.word	0x4a742400
 800ac1c:	4af42400 	.word	0x4af42400

0800ac20 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b084      	sub	sp, #16
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ac2e:	4b53      	ldr	r3, [pc, #332]	; (800ad7c <RCCEx_PLL2_Config+0x15c>)
 800ac30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac32:	f003 0303 	and.w	r3, r3, #3
 800ac36:	2b03      	cmp	r3, #3
 800ac38:	d101      	bne.n	800ac3e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	e099      	b.n	800ad72 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ac3e:	4b4f      	ldr	r3, [pc, #316]	; (800ad7c <RCCEx_PLL2_Config+0x15c>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	4a4e      	ldr	r2, [pc, #312]	; (800ad7c <RCCEx_PLL2_Config+0x15c>)
 800ac44:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ac48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac4a:	f7f6 fee1 	bl	8001a10 <HAL_GetTick>
 800ac4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ac50:	e008      	b.n	800ac64 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ac52:	f7f6 fedd 	bl	8001a10 <HAL_GetTick>
 800ac56:	4602      	mov	r2, r0
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	1ad3      	subs	r3, r2, r3
 800ac5c:	2b02      	cmp	r3, #2
 800ac5e:	d901      	bls.n	800ac64 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ac60:	2303      	movs	r3, #3
 800ac62:	e086      	b.n	800ad72 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ac64:	4b45      	ldr	r3, [pc, #276]	; (800ad7c <RCCEx_PLL2_Config+0x15c>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d1f0      	bne.n	800ac52 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ac70:	4b42      	ldr	r3, [pc, #264]	; (800ad7c <RCCEx_PLL2_Config+0x15c>)
 800ac72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac74:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	031b      	lsls	r3, r3, #12
 800ac7e:	493f      	ldr	r1, [pc, #252]	; (800ad7c <RCCEx_PLL2_Config+0x15c>)
 800ac80:	4313      	orrs	r3, r2
 800ac82:	628b      	str	r3, [r1, #40]	; 0x28
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	3b01      	subs	r3, #1
 800ac8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	689b      	ldr	r3, [r3, #8]
 800ac92:	3b01      	subs	r3, #1
 800ac94:	025b      	lsls	r3, r3, #9
 800ac96:	b29b      	uxth	r3, r3
 800ac98:	431a      	orrs	r2, r3
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	68db      	ldr	r3, [r3, #12]
 800ac9e:	3b01      	subs	r3, #1
 800aca0:	041b      	lsls	r3, r3, #16
 800aca2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800aca6:	431a      	orrs	r2, r3
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	691b      	ldr	r3, [r3, #16]
 800acac:	3b01      	subs	r3, #1
 800acae:	061b      	lsls	r3, r3, #24
 800acb0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800acb4:	4931      	ldr	r1, [pc, #196]	; (800ad7c <RCCEx_PLL2_Config+0x15c>)
 800acb6:	4313      	orrs	r3, r2
 800acb8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800acba:	4b30      	ldr	r3, [pc, #192]	; (800ad7c <RCCEx_PLL2_Config+0x15c>)
 800acbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acbe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	695b      	ldr	r3, [r3, #20]
 800acc6:	492d      	ldr	r1, [pc, #180]	; (800ad7c <RCCEx_PLL2_Config+0x15c>)
 800acc8:	4313      	orrs	r3, r2
 800acca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800accc:	4b2b      	ldr	r3, [pc, #172]	; (800ad7c <RCCEx_PLL2_Config+0x15c>)
 800acce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acd0:	f023 0220 	bic.w	r2, r3, #32
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	699b      	ldr	r3, [r3, #24]
 800acd8:	4928      	ldr	r1, [pc, #160]	; (800ad7c <RCCEx_PLL2_Config+0x15c>)
 800acda:	4313      	orrs	r3, r2
 800acdc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800acde:	4b27      	ldr	r3, [pc, #156]	; (800ad7c <RCCEx_PLL2_Config+0x15c>)
 800ace0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ace2:	4a26      	ldr	r2, [pc, #152]	; (800ad7c <RCCEx_PLL2_Config+0x15c>)
 800ace4:	f023 0310 	bic.w	r3, r3, #16
 800ace8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800acea:	4b24      	ldr	r3, [pc, #144]	; (800ad7c <RCCEx_PLL2_Config+0x15c>)
 800acec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800acee:	4b24      	ldr	r3, [pc, #144]	; (800ad80 <RCCEx_PLL2_Config+0x160>)
 800acf0:	4013      	ands	r3, r2
 800acf2:	687a      	ldr	r2, [r7, #4]
 800acf4:	69d2      	ldr	r2, [r2, #28]
 800acf6:	00d2      	lsls	r2, r2, #3
 800acf8:	4920      	ldr	r1, [pc, #128]	; (800ad7c <RCCEx_PLL2_Config+0x15c>)
 800acfa:	4313      	orrs	r3, r2
 800acfc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800acfe:	4b1f      	ldr	r3, [pc, #124]	; (800ad7c <RCCEx_PLL2_Config+0x15c>)
 800ad00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad02:	4a1e      	ldr	r2, [pc, #120]	; (800ad7c <RCCEx_PLL2_Config+0x15c>)
 800ad04:	f043 0310 	orr.w	r3, r3, #16
 800ad08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d106      	bne.n	800ad1e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ad10:	4b1a      	ldr	r3, [pc, #104]	; (800ad7c <RCCEx_PLL2_Config+0x15c>)
 800ad12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad14:	4a19      	ldr	r2, [pc, #100]	; (800ad7c <RCCEx_PLL2_Config+0x15c>)
 800ad16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ad1c:	e00f      	b.n	800ad3e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	2b01      	cmp	r3, #1
 800ad22:	d106      	bne.n	800ad32 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ad24:	4b15      	ldr	r3, [pc, #84]	; (800ad7c <RCCEx_PLL2_Config+0x15c>)
 800ad26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad28:	4a14      	ldr	r2, [pc, #80]	; (800ad7c <RCCEx_PLL2_Config+0x15c>)
 800ad2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ad30:	e005      	b.n	800ad3e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ad32:	4b12      	ldr	r3, [pc, #72]	; (800ad7c <RCCEx_PLL2_Config+0x15c>)
 800ad34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad36:	4a11      	ldr	r2, [pc, #68]	; (800ad7c <RCCEx_PLL2_Config+0x15c>)
 800ad38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ad3c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ad3e:	4b0f      	ldr	r3, [pc, #60]	; (800ad7c <RCCEx_PLL2_Config+0x15c>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	4a0e      	ldr	r2, [pc, #56]	; (800ad7c <RCCEx_PLL2_Config+0x15c>)
 800ad44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ad48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad4a:	f7f6 fe61 	bl	8001a10 <HAL_GetTick>
 800ad4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ad50:	e008      	b.n	800ad64 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ad52:	f7f6 fe5d 	bl	8001a10 <HAL_GetTick>
 800ad56:	4602      	mov	r2, r0
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	1ad3      	subs	r3, r2, r3
 800ad5c:	2b02      	cmp	r3, #2
 800ad5e:	d901      	bls.n	800ad64 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ad60:	2303      	movs	r3, #3
 800ad62:	e006      	b.n	800ad72 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ad64:	4b05      	ldr	r3, [pc, #20]	; (800ad7c <RCCEx_PLL2_Config+0x15c>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d0f0      	beq.n	800ad52 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ad70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3710      	adds	r7, #16
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}
 800ad7a:	bf00      	nop
 800ad7c:	58024400 	.word	0x58024400
 800ad80:	ffff0007 	.word	0xffff0007

0800ad84 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ad92:	4b53      	ldr	r3, [pc, #332]	; (800aee0 <RCCEx_PLL3_Config+0x15c>)
 800ad94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad96:	f003 0303 	and.w	r3, r3, #3
 800ad9a:	2b03      	cmp	r3, #3
 800ad9c:	d101      	bne.n	800ada2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ad9e:	2301      	movs	r3, #1
 800ada0:	e099      	b.n	800aed6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ada2:	4b4f      	ldr	r3, [pc, #316]	; (800aee0 <RCCEx_PLL3_Config+0x15c>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	4a4e      	ldr	r2, [pc, #312]	; (800aee0 <RCCEx_PLL3_Config+0x15c>)
 800ada8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800adac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800adae:	f7f6 fe2f 	bl	8001a10 <HAL_GetTick>
 800adb2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800adb4:	e008      	b.n	800adc8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800adb6:	f7f6 fe2b 	bl	8001a10 <HAL_GetTick>
 800adba:	4602      	mov	r2, r0
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	1ad3      	subs	r3, r2, r3
 800adc0:	2b02      	cmp	r3, #2
 800adc2:	d901      	bls.n	800adc8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800adc4:	2303      	movs	r3, #3
 800adc6:	e086      	b.n	800aed6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800adc8:	4b45      	ldr	r3, [pc, #276]	; (800aee0 <RCCEx_PLL3_Config+0x15c>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800add0:	2b00      	cmp	r3, #0
 800add2:	d1f0      	bne.n	800adb6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800add4:	4b42      	ldr	r3, [pc, #264]	; (800aee0 <RCCEx_PLL3_Config+0x15c>)
 800add6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800add8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	051b      	lsls	r3, r3, #20
 800ade2:	493f      	ldr	r1, [pc, #252]	; (800aee0 <RCCEx_PLL3_Config+0x15c>)
 800ade4:	4313      	orrs	r3, r2
 800ade6:	628b      	str	r3, [r1, #40]	; 0x28
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	685b      	ldr	r3, [r3, #4]
 800adec:	3b01      	subs	r3, #1
 800adee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	689b      	ldr	r3, [r3, #8]
 800adf6:	3b01      	subs	r3, #1
 800adf8:	025b      	lsls	r3, r3, #9
 800adfa:	b29b      	uxth	r3, r3
 800adfc:	431a      	orrs	r2, r3
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	68db      	ldr	r3, [r3, #12]
 800ae02:	3b01      	subs	r3, #1
 800ae04:	041b      	lsls	r3, r3, #16
 800ae06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ae0a:	431a      	orrs	r2, r3
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	691b      	ldr	r3, [r3, #16]
 800ae10:	3b01      	subs	r3, #1
 800ae12:	061b      	lsls	r3, r3, #24
 800ae14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ae18:	4931      	ldr	r1, [pc, #196]	; (800aee0 <RCCEx_PLL3_Config+0x15c>)
 800ae1a:	4313      	orrs	r3, r2
 800ae1c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ae1e:	4b30      	ldr	r3, [pc, #192]	; (800aee0 <RCCEx_PLL3_Config+0x15c>)
 800ae20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	695b      	ldr	r3, [r3, #20]
 800ae2a:	492d      	ldr	r1, [pc, #180]	; (800aee0 <RCCEx_PLL3_Config+0x15c>)
 800ae2c:	4313      	orrs	r3, r2
 800ae2e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ae30:	4b2b      	ldr	r3, [pc, #172]	; (800aee0 <RCCEx_PLL3_Config+0x15c>)
 800ae32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae34:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	699b      	ldr	r3, [r3, #24]
 800ae3c:	4928      	ldr	r1, [pc, #160]	; (800aee0 <RCCEx_PLL3_Config+0x15c>)
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ae42:	4b27      	ldr	r3, [pc, #156]	; (800aee0 <RCCEx_PLL3_Config+0x15c>)
 800ae44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae46:	4a26      	ldr	r2, [pc, #152]	; (800aee0 <RCCEx_PLL3_Config+0x15c>)
 800ae48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ae4e:	4b24      	ldr	r3, [pc, #144]	; (800aee0 <RCCEx_PLL3_Config+0x15c>)
 800ae50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae52:	4b24      	ldr	r3, [pc, #144]	; (800aee4 <RCCEx_PLL3_Config+0x160>)
 800ae54:	4013      	ands	r3, r2
 800ae56:	687a      	ldr	r2, [r7, #4]
 800ae58:	69d2      	ldr	r2, [r2, #28]
 800ae5a:	00d2      	lsls	r2, r2, #3
 800ae5c:	4920      	ldr	r1, [pc, #128]	; (800aee0 <RCCEx_PLL3_Config+0x15c>)
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ae62:	4b1f      	ldr	r3, [pc, #124]	; (800aee0 <RCCEx_PLL3_Config+0x15c>)
 800ae64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae66:	4a1e      	ldr	r2, [pc, #120]	; (800aee0 <RCCEx_PLL3_Config+0x15c>)
 800ae68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d106      	bne.n	800ae82 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ae74:	4b1a      	ldr	r3, [pc, #104]	; (800aee0 <RCCEx_PLL3_Config+0x15c>)
 800ae76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae78:	4a19      	ldr	r2, [pc, #100]	; (800aee0 <RCCEx_PLL3_Config+0x15c>)
 800ae7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ae7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ae80:	e00f      	b.n	800aea2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d106      	bne.n	800ae96 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ae88:	4b15      	ldr	r3, [pc, #84]	; (800aee0 <RCCEx_PLL3_Config+0x15c>)
 800ae8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae8c:	4a14      	ldr	r2, [pc, #80]	; (800aee0 <RCCEx_PLL3_Config+0x15c>)
 800ae8e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ae92:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ae94:	e005      	b.n	800aea2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ae96:	4b12      	ldr	r3, [pc, #72]	; (800aee0 <RCCEx_PLL3_Config+0x15c>)
 800ae98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae9a:	4a11      	ldr	r2, [pc, #68]	; (800aee0 <RCCEx_PLL3_Config+0x15c>)
 800ae9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aea0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800aea2:	4b0f      	ldr	r3, [pc, #60]	; (800aee0 <RCCEx_PLL3_Config+0x15c>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	4a0e      	ldr	r2, [pc, #56]	; (800aee0 <RCCEx_PLL3_Config+0x15c>)
 800aea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aeac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aeae:	f7f6 fdaf 	bl	8001a10 <HAL_GetTick>
 800aeb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800aeb4:	e008      	b.n	800aec8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800aeb6:	f7f6 fdab 	bl	8001a10 <HAL_GetTick>
 800aeba:	4602      	mov	r2, r0
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	1ad3      	subs	r3, r2, r3
 800aec0:	2b02      	cmp	r3, #2
 800aec2:	d901      	bls.n	800aec8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800aec4:	2303      	movs	r3, #3
 800aec6:	e006      	b.n	800aed6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800aec8:	4b05      	ldr	r3, [pc, #20]	; (800aee0 <RCCEx_PLL3_Config+0x15c>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d0f0      	beq.n	800aeb6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800aed4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3710      	adds	r7, #16
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	bf00      	nop
 800aee0:	58024400 	.word	0x58024400
 800aee4:	ffff0007 	.word	0xffff0007

0800aee8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b082      	sub	sp, #8
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d101      	bne.n	800aefa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aef6:	2301      	movs	r3, #1
 800aef8:	e049      	b.n	800af8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af00:	b2db      	uxtb	r3, r3
 800af02:	2b00      	cmp	r3, #0
 800af04:	d106      	bne.n	800af14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2200      	movs	r2, #0
 800af0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f7f6 fad4 	bl	80014bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2202      	movs	r2, #2
 800af18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681a      	ldr	r2, [r3, #0]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	3304      	adds	r3, #4
 800af24:	4619      	mov	r1, r3
 800af26:	4610      	mov	r0, r2
 800af28:	f000 ffee 	bl	800bf08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2201      	movs	r2, #1
 800af30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2201      	movs	r2, #1
 800af38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2201      	movs	r2, #1
 800af40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2201      	movs	r2, #1
 800af48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2201      	movs	r2, #1
 800af50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2201      	movs	r2, #1
 800af58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2201      	movs	r2, #1
 800af60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2201      	movs	r2, #1
 800af68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2201      	movs	r2, #1
 800af70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2201      	movs	r2, #1
 800af78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2201      	movs	r2, #1
 800af80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2201      	movs	r2, #1
 800af88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800af8c:	2300      	movs	r3, #0
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3708      	adds	r7, #8
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}

0800af96 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800af96:	b580      	push	{r7, lr}
 800af98:	b082      	sub	sp, #8
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d101      	bne.n	800afa8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800afa4:	2301      	movs	r3, #1
 800afa6:	e049      	b.n	800b03c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afae:	b2db      	uxtb	r3, r3
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d106      	bne.n	800afc2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2200      	movs	r2, #0
 800afb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f000 f841 	bl	800b044 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2202      	movs	r2, #2
 800afc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681a      	ldr	r2, [r3, #0]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	3304      	adds	r3, #4
 800afd2:	4619      	mov	r1, r3
 800afd4:	4610      	mov	r0, r2
 800afd6:	f000 ff97 	bl	800bf08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2201      	movs	r2, #1
 800afde:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2201      	movs	r2, #1
 800afe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2201      	movs	r2, #1
 800afee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2201      	movs	r2, #1
 800aff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2201      	movs	r2, #1
 800affe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2201      	movs	r2, #1
 800b006:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2201      	movs	r2, #1
 800b00e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2201      	movs	r2, #1
 800b016:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2201      	movs	r2, #1
 800b01e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2201      	movs	r2, #1
 800b026:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2201      	movs	r2, #1
 800b02e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2201      	movs	r2, #1
 800b036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b03a:	2300      	movs	r3, #0
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3708      	adds	r7, #8
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}

0800b044 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b044:	b480      	push	{r7}
 800b046:	b083      	sub	sp, #12
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b04c:	bf00      	nop
 800b04e:	370c      	adds	r7, #12
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr

0800b058 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b086      	sub	sp, #24
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	60f8      	str	r0, [r7, #12]
 800b060:	60b9      	str	r1, [r7, #8]
 800b062:	607a      	str	r2, [r7, #4]
 800b064:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800b066:	2300      	movs	r3, #0
 800b068:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d109      	bne.n	800b084 <HAL_TIM_PWM_Start_DMA+0x2c>
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b076:	b2db      	uxtb	r3, r3
 800b078:	2b02      	cmp	r3, #2
 800b07a:	bf0c      	ite	eq
 800b07c:	2301      	moveq	r3, #1
 800b07e:	2300      	movne	r3, #0
 800b080:	b2db      	uxtb	r3, r3
 800b082:	e03c      	b.n	800b0fe <HAL_TIM_PWM_Start_DMA+0xa6>
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	2b04      	cmp	r3, #4
 800b088:	d109      	bne.n	800b09e <HAL_TIM_PWM_Start_DMA+0x46>
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b090:	b2db      	uxtb	r3, r3
 800b092:	2b02      	cmp	r3, #2
 800b094:	bf0c      	ite	eq
 800b096:	2301      	moveq	r3, #1
 800b098:	2300      	movne	r3, #0
 800b09a:	b2db      	uxtb	r3, r3
 800b09c:	e02f      	b.n	800b0fe <HAL_TIM_PWM_Start_DMA+0xa6>
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	2b08      	cmp	r3, #8
 800b0a2:	d109      	bne.n	800b0b8 <HAL_TIM_PWM_Start_DMA+0x60>
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b0aa:	b2db      	uxtb	r3, r3
 800b0ac:	2b02      	cmp	r3, #2
 800b0ae:	bf0c      	ite	eq
 800b0b0:	2301      	moveq	r3, #1
 800b0b2:	2300      	movne	r3, #0
 800b0b4:	b2db      	uxtb	r3, r3
 800b0b6:	e022      	b.n	800b0fe <HAL_TIM_PWM_Start_DMA+0xa6>
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	2b0c      	cmp	r3, #12
 800b0bc:	d109      	bne.n	800b0d2 <HAL_TIM_PWM_Start_DMA+0x7a>
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b0c4:	b2db      	uxtb	r3, r3
 800b0c6:	2b02      	cmp	r3, #2
 800b0c8:	bf0c      	ite	eq
 800b0ca:	2301      	moveq	r3, #1
 800b0cc:	2300      	movne	r3, #0
 800b0ce:	b2db      	uxtb	r3, r3
 800b0d0:	e015      	b.n	800b0fe <HAL_TIM_PWM_Start_DMA+0xa6>
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	2b10      	cmp	r3, #16
 800b0d6:	d109      	bne.n	800b0ec <HAL_TIM_PWM_Start_DMA+0x94>
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b0de:	b2db      	uxtb	r3, r3
 800b0e0:	2b02      	cmp	r3, #2
 800b0e2:	bf0c      	ite	eq
 800b0e4:	2301      	moveq	r3, #1
 800b0e6:	2300      	movne	r3, #0
 800b0e8:	b2db      	uxtb	r3, r3
 800b0ea:	e008      	b.n	800b0fe <HAL_TIM_PWM_Start_DMA+0xa6>
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b0f2:	b2db      	uxtb	r3, r3
 800b0f4:	2b02      	cmp	r3, #2
 800b0f6:	bf0c      	ite	eq
 800b0f8:	2301      	moveq	r3, #1
 800b0fa:	2300      	movne	r3, #0
 800b0fc:	b2db      	uxtb	r3, r3
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d001      	beq.n	800b106 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800b102:	2302      	movs	r3, #2
 800b104:	e1b0      	b.n	800b468 <HAL_TIM_PWM_Start_DMA+0x410>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d109      	bne.n	800b120 <HAL_TIM_PWM_Start_DMA+0xc8>
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b112:	b2db      	uxtb	r3, r3
 800b114:	2b01      	cmp	r3, #1
 800b116:	bf0c      	ite	eq
 800b118:	2301      	moveq	r3, #1
 800b11a:	2300      	movne	r3, #0
 800b11c:	b2db      	uxtb	r3, r3
 800b11e:	e03c      	b.n	800b19a <HAL_TIM_PWM_Start_DMA+0x142>
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	2b04      	cmp	r3, #4
 800b124:	d109      	bne.n	800b13a <HAL_TIM_PWM_Start_DMA+0xe2>
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b12c:	b2db      	uxtb	r3, r3
 800b12e:	2b01      	cmp	r3, #1
 800b130:	bf0c      	ite	eq
 800b132:	2301      	moveq	r3, #1
 800b134:	2300      	movne	r3, #0
 800b136:	b2db      	uxtb	r3, r3
 800b138:	e02f      	b.n	800b19a <HAL_TIM_PWM_Start_DMA+0x142>
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	2b08      	cmp	r3, #8
 800b13e:	d109      	bne.n	800b154 <HAL_TIM_PWM_Start_DMA+0xfc>
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b146:	b2db      	uxtb	r3, r3
 800b148:	2b01      	cmp	r3, #1
 800b14a:	bf0c      	ite	eq
 800b14c:	2301      	moveq	r3, #1
 800b14e:	2300      	movne	r3, #0
 800b150:	b2db      	uxtb	r3, r3
 800b152:	e022      	b.n	800b19a <HAL_TIM_PWM_Start_DMA+0x142>
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	2b0c      	cmp	r3, #12
 800b158:	d109      	bne.n	800b16e <HAL_TIM_PWM_Start_DMA+0x116>
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b160:	b2db      	uxtb	r3, r3
 800b162:	2b01      	cmp	r3, #1
 800b164:	bf0c      	ite	eq
 800b166:	2301      	moveq	r3, #1
 800b168:	2300      	movne	r3, #0
 800b16a:	b2db      	uxtb	r3, r3
 800b16c:	e015      	b.n	800b19a <HAL_TIM_PWM_Start_DMA+0x142>
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	2b10      	cmp	r3, #16
 800b172:	d109      	bne.n	800b188 <HAL_TIM_PWM_Start_DMA+0x130>
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b17a:	b2db      	uxtb	r3, r3
 800b17c:	2b01      	cmp	r3, #1
 800b17e:	bf0c      	ite	eq
 800b180:	2301      	moveq	r3, #1
 800b182:	2300      	movne	r3, #0
 800b184:	b2db      	uxtb	r3, r3
 800b186:	e008      	b.n	800b19a <HAL_TIM_PWM_Start_DMA+0x142>
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b18e:	b2db      	uxtb	r3, r3
 800b190:	2b01      	cmp	r3, #1
 800b192:	bf0c      	ite	eq
 800b194:	2301      	moveq	r3, #1
 800b196:	2300      	movne	r3, #0
 800b198:	b2db      	uxtb	r3, r3
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d034      	beq.n	800b208 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d002      	beq.n	800b1aa <HAL_TIM_PWM_Start_DMA+0x152>
 800b1a4:	887b      	ldrh	r3, [r7, #2]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d101      	bne.n	800b1ae <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	e15c      	b.n	800b468 <HAL_TIM_PWM_Start_DMA+0x410>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d104      	bne.n	800b1be <HAL_TIM_PWM_Start_DMA+0x166>
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2202      	movs	r2, #2
 800b1b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b1bc:	e026      	b.n	800b20c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	2b04      	cmp	r3, #4
 800b1c2:	d104      	bne.n	800b1ce <HAL_TIM_PWM_Start_DMA+0x176>
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2202      	movs	r2, #2
 800b1c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b1cc:	e01e      	b.n	800b20c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	2b08      	cmp	r3, #8
 800b1d2:	d104      	bne.n	800b1de <HAL_TIM_PWM_Start_DMA+0x186>
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	2202      	movs	r2, #2
 800b1d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b1dc:	e016      	b.n	800b20c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	2b0c      	cmp	r3, #12
 800b1e2:	d104      	bne.n	800b1ee <HAL_TIM_PWM_Start_DMA+0x196>
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	2202      	movs	r2, #2
 800b1e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b1ec:	e00e      	b.n	800b20c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	2b10      	cmp	r3, #16
 800b1f2:	d104      	bne.n	800b1fe <HAL_TIM_PWM_Start_DMA+0x1a6>
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2202      	movs	r2, #2
 800b1f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b1fc:	e006      	b.n	800b20c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	2202      	movs	r2, #2
 800b202:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b206:	e001      	b.n	800b20c <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800b208:	2301      	movs	r3, #1
 800b20a:	e12d      	b.n	800b468 <HAL_TIM_PWM_Start_DMA+0x410>
  }

  switch (Channel)
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	2b0c      	cmp	r3, #12
 800b210:	f200 80ae 	bhi.w	800b370 <HAL_TIM_PWM_Start_DMA+0x318>
 800b214:	a201      	add	r2, pc, #4	; (adr r2, 800b21c <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800b216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b21a:	bf00      	nop
 800b21c:	0800b251 	.word	0x0800b251
 800b220:	0800b371 	.word	0x0800b371
 800b224:	0800b371 	.word	0x0800b371
 800b228:	0800b371 	.word	0x0800b371
 800b22c:	0800b299 	.word	0x0800b299
 800b230:	0800b371 	.word	0x0800b371
 800b234:	0800b371 	.word	0x0800b371
 800b238:	0800b371 	.word	0x0800b371
 800b23c:	0800b2e1 	.word	0x0800b2e1
 800b240:	0800b371 	.word	0x0800b371
 800b244:	0800b371 	.word	0x0800b371
 800b248:	0800b371 	.word	0x0800b371
 800b24c:	0800b329 	.word	0x0800b329
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b254:	4a86      	ldr	r2, [pc, #536]	; (800b470 <HAL_TIM_PWM_Start_DMA+0x418>)
 800b256:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b25c:	4a85      	ldr	r2, [pc, #532]	; (800b474 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800b25e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b264:	4a84      	ldr	r2, [pc, #528]	; (800b478 <HAL_TIM_PWM_Start_DMA+0x420>)
 800b266:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b26c:	6879      	ldr	r1, [r7, #4]
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	3334      	adds	r3, #52	; 0x34
 800b274:	461a      	mov	r2, r3
 800b276:	887b      	ldrh	r3, [r7, #2]
 800b278:	f7f8 fae0 	bl	800383c <HAL_DMA_Start_IT>
 800b27c:	4603      	mov	r3, r0
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d001      	beq.n	800b286 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b282:	2301      	movs	r3, #1
 800b284:	e0f0      	b.n	800b468 <HAL_TIM_PWM_Start_DMA+0x410>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	68da      	ldr	r2, [r3, #12]
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b294:	60da      	str	r2, [r3, #12]
      break;
 800b296:	e06e      	b.n	800b376 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b29c:	4a74      	ldr	r2, [pc, #464]	; (800b470 <HAL_TIM_PWM_Start_DMA+0x418>)
 800b29e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2a4:	4a73      	ldr	r2, [pc, #460]	; (800b474 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800b2a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2ac:	4a72      	ldr	r2, [pc, #456]	; (800b478 <HAL_TIM_PWM_Start_DMA+0x420>)
 800b2ae:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800b2b4:	6879      	ldr	r1, [r7, #4]
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	3338      	adds	r3, #56	; 0x38
 800b2bc:	461a      	mov	r2, r3
 800b2be:	887b      	ldrh	r3, [r7, #2]
 800b2c0:	f7f8 fabc 	bl	800383c <HAL_DMA_Start_IT>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d001      	beq.n	800b2ce <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	e0cc      	b.n	800b468 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	68da      	ldr	r2, [r3, #12]
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b2dc:	60da      	str	r2, [r3, #12]
      break;
 800b2de:	e04a      	b.n	800b376 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e4:	4a62      	ldr	r2, [pc, #392]	; (800b470 <HAL_TIM_PWM_Start_DMA+0x418>)
 800b2e6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ec:	4a61      	ldr	r2, [pc, #388]	; (800b474 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800b2ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2f4:	4a60      	ldr	r2, [pc, #384]	; (800b478 <HAL_TIM_PWM_Start_DMA+0x420>)
 800b2f6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800b2fc:	6879      	ldr	r1, [r7, #4]
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	333c      	adds	r3, #60	; 0x3c
 800b304:	461a      	mov	r2, r3
 800b306:	887b      	ldrh	r3, [r7, #2]
 800b308:	f7f8 fa98 	bl	800383c <HAL_DMA_Start_IT>
 800b30c:	4603      	mov	r3, r0
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d001      	beq.n	800b316 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b312:	2301      	movs	r3, #1
 800b314:	e0a8      	b.n	800b468 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	68da      	ldr	r2, [r3, #12]
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b324:	60da      	str	r2, [r3, #12]
      break;
 800b326:	e026      	b.n	800b376 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b32c:	4a50      	ldr	r2, [pc, #320]	; (800b470 <HAL_TIM_PWM_Start_DMA+0x418>)
 800b32e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b334:	4a4f      	ldr	r2, [pc, #316]	; (800b474 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800b336:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b33c:	4a4e      	ldr	r2, [pc, #312]	; (800b478 <HAL_TIM_PWM_Start_DMA+0x420>)
 800b33e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b344:	6879      	ldr	r1, [r7, #4]
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	3340      	adds	r3, #64	; 0x40
 800b34c:	461a      	mov	r2, r3
 800b34e:	887b      	ldrh	r3, [r7, #2]
 800b350:	f7f8 fa74 	bl	800383c <HAL_DMA_Start_IT>
 800b354:	4603      	mov	r3, r0
 800b356:	2b00      	cmp	r3, #0
 800b358:	d001      	beq.n	800b35e <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b35a:	2301      	movs	r3, #1
 800b35c:	e084      	b.n	800b468 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	68da      	ldr	r2, [r3, #12]
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b36c:	60da      	str	r2, [r3, #12]
      break;
 800b36e:	e002      	b.n	800b376 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800b370:	2301      	movs	r3, #1
 800b372:	75fb      	strb	r3, [r7, #23]
      break;
 800b374:	bf00      	nop
  }

  if (status == HAL_OK)
 800b376:	7dfb      	ldrb	r3, [r7, #23]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d174      	bne.n	800b466 <HAL_TIM_PWM_Start_DMA+0x40e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	2201      	movs	r2, #1
 800b382:	68b9      	ldr	r1, [r7, #8]
 800b384:	4618      	mov	r0, r3
 800b386:	f001 f9cd 	bl	800c724 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	4a3b      	ldr	r2, [pc, #236]	; (800b47c <HAL_TIM_PWM_Start_DMA+0x424>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d013      	beq.n	800b3bc <HAL_TIM_PWM_Start_DMA+0x364>
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4a39      	ldr	r2, [pc, #228]	; (800b480 <HAL_TIM_PWM_Start_DMA+0x428>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d00e      	beq.n	800b3bc <HAL_TIM_PWM_Start_DMA+0x364>
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	4a38      	ldr	r2, [pc, #224]	; (800b484 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d009      	beq.n	800b3bc <HAL_TIM_PWM_Start_DMA+0x364>
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4a36      	ldr	r2, [pc, #216]	; (800b488 <HAL_TIM_PWM_Start_DMA+0x430>)
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	d004      	beq.n	800b3bc <HAL_TIM_PWM_Start_DMA+0x364>
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	4a35      	ldr	r2, [pc, #212]	; (800b48c <HAL_TIM_PWM_Start_DMA+0x434>)
 800b3b8:	4293      	cmp	r3, r2
 800b3ba:	d101      	bne.n	800b3c0 <HAL_TIM_PWM_Start_DMA+0x368>
 800b3bc:	2301      	movs	r3, #1
 800b3be:	e000      	b.n	800b3c2 <HAL_TIM_PWM_Start_DMA+0x36a>
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d007      	beq.n	800b3d6 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b3d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4a28      	ldr	r2, [pc, #160]	; (800b47c <HAL_TIM_PWM_Start_DMA+0x424>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d022      	beq.n	800b426 <HAL_TIM_PWM_Start_DMA+0x3ce>
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3e8:	d01d      	beq.n	800b426 <HAL_TIM_PWM_Start_DMA+0x3ce>
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	4a28      	ldr	r2, [pc, #160]	; (800b490 <HAL_TIM_PWM_Start_DMA+0x438>)
 800b3f0:	4293      	cmp	r3, r2
 800b3f2:	d018      	beq.n	800b426 <HAL_TIM_PWM_Start_DMA+0x3ce>
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	4a26      	ldr	r2, [pc, #152]	; (800b494 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d013      	beq.n	800b426 <HAL_TIM_PWM_Start_DMA+0x3ce>
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	4a25      	ldr	r2, [pc, #148]	; (800b498 <HAL_TIM_PWM_Start_DMA+0x440>)
 800b404:	4293      	cmp	r3, r2
 800b406:	d00e      	beq.n	800b426 <HAL_TIM_PWM_Start_DMA+0x3ce>
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	4a1c      	ldr	r2, [pc, #112]	; (800b480 <HAL_TIM_PWM_Start_DMA+0x428>)
 800b40e:	4293      	cmp	r3, r2
 800b410:	d009      	beq.n	800b426 <HAL_TIM_PWM_Start_DMA+0x3ce>
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	4a21      	ldr	r2, [pc, #132]	; (800b49c <HAL_TIM_PWM_Start_DMA+0x444>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d004      	beq.n	800b426 <HAL_TIM_PWM_Start_DMA+0x3ce>
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4a18      	ldr	r2, [pc, #96]	; (800b484 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800b422:	4293      	cmp	r3, r2
 800b424:	d115      	bne.n	800b452 <HAL_TIM_PWM_Start_DMA+0x3fa>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	689a      	ldr	r2, [r3, #8]
 800b42c:	4b1c      	ldr	r3, [pc, #112]	; (800b4a0 <HAL_TIM_PWM_Start_DMA+0x448>)
 800b42e:	4013      	ands	r3, r2
 800b430:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	2b06      	cmp	r3, #6
 800b436:	d015      	beq.n	800b464 <HAL_TIM_PWM_Start_DMA+0x40c>
 800b438:	693b      	ldr	r3, [r7, #16]
 800b43a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b43e:	d011      	beq.n	800b464 <HAL_TIM_PWM_Start_DMA+0x40c>
      {
        __HAL_TIM_ENABLE(htim);
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	681a      	ldr	r2, [r3, #0]
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f042 0201 	orr.w	r2, r2, #1
 800b44e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b450:	e008      	b.n	800b464 <HAL_TIM_PWM_Start_DMA+0x40c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	681a      	ldr	r2, [r3, #0]
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f042 0201 	orr.w	r2, r2, #1
 800b460:	601a      	str	r2, [r3, #0]
 800b462:	e000      	b.n	800b466 <HAL_TIM_PWM_Start_DMA+0x40e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b464:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800b466:	7dfb      	ldrb	r3, [r7, #23]
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3718      	adds	r7, #24
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}
 800b470:	0800bdf7 	.word	0x0800bdf7
 800b474:	0800be9f 	.word	0x0800be9f
 800b478:	0800bd65 	.word	0x0800bd65
 800b47c:	40010000 	.word	0x40010000
 800b480:	40010400 	.word	0x40010400
 800b484:	40014000 	.word	0x40014000
 800b488:	40014400 	.word	0x40014400
 800b48c:	40014800 	.word	0x40014800
 800b490:	40000400 	.word	0x40000400
 800b494:	40000800 	.word	0x40000800
 800b498:	40000c00 	.word	0x40000c00
 800b49c:	40001800 	.word	0x40001800
 800b4a0:	00010007 	.word	0x00010007

0800b4a4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b084      	sub	sp, #16
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	2b0c      	cmp	r3, #12
 800b4b6:	d855      	bhi.n	800b564 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800b4b8:	a201      	add	r2, pc, #4	; (adr r2, 800b4c0 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800b4ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4be:	bf00      	nop
 800b4c0:	0800b4f5 	.word	0x0800b4f5
 800b4c4:	0800b565 	.word	0x0800b565
 800b4c8:	0800b565 	.word	0x0800b565
 800b4cc:	0800b565 	.word	0x0800b565
 800b4d0:	0800b511 	.word	0x0800b511
 800b4d4:	0800b565 	.word	0x0800b565
 800b4d8:	0800b565 	.word	0x0800b565
 800b4dc:	0800b565 	.word	0x0800b565
 800b4e0:	0800b52d 	.word	0x0800b52d
 800b4e4:	0800b565 	.word	0x0800b565
 800b4e8:	0800b565 	.word	0x0800b565
 800b4ec:	0800b565 	.word	0x0800b565
 800b4f0:	0800b549 	.word	0x0800b549
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	68da      	ldr	r2, [r3, #12]
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b502:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b508:	4618      	mov	r0, r3
 800b50a:	f7f8 fc01 	bl	8003d10 <HAL_DMA_Abort_IT>
      break;
 800b50e:	e02c      	b.n	800b56a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	68da      	ldr	r2, [r3, #12]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b51e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b524:	4618      	mov	r0, r3
 800b526:	f7f8 fbf3 	bl	8003d10 <HAL_DMA_Abort_IT>
      break;
 800b52a:	e01e      	b.n	800b56a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	68da      	ldr	r2, [r3, #12]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b53a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b540:	4618      	mov	r0, r3
 800b542:	f7f8 fbe5 	bl	8003d10 <HAL_DMA_Abort_IT>
      break;
 800b546:	e010      	b.n	800b56a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	68da      	ldr	r2, [r3, #12]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b556:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b55c:	4618      	mov	r0, r3
 800b55e:	f7f8 fbd7 	bl	8003d10 <HAL_DMA_Abort_IT>
      break;
 800b562:	e002      	b.n	800b56a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800b564:	2301      	movs	r3, #1
 800b566:	73fb      	strb	r3, [r7, #15]
      break;
 800b568:	bf00      	nop
  }

  if (status == HAL_OK)
 800b56a:	7bfb      	ldrb	r3, [r7, #15]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	f040 8081 	bne.w	800b674 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	2200      	movs	r2, #0
 800b578:	6839      	ldr	r1, [r7, #0]
 800b57a:	4618      	mov	r0, r3
 800b57c:	f001 f8d2 	bl	800c724 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	4a3e      	ldr	r2, [pc, #248]	; (800b680 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 800b586:	4293      	cmp	r3, r2
 800b588:	d013      	beq.n	800b5b2 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	4a3d      	ldr	r2, [pc, #244]	; (800b684 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 800b590:	4293      	cmp	r3, r2
 800b592:	d00e      	beq.n	800b5b2 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	4a3b      	ldr	r2, [pc, #236]	; (800b688 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d009      	beq.n	800b5b2 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	4a3a      	ldr	r2, [pc, #232]	; (800b68c <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 800b5a4:	4293      	cmp	r3, r2
 800b5a6:	d004      	beq.n	800b5b2 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	4a38      	ldr	r2, [pc, #224]	; (800b690 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d101      	bne.n	800b5b6 <HAL_TIM_PWM_Stop_DMA+0x112>
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	e000      	b.n	800b5b8 <HAL_TIM_PWM_Stop_DMA+0x114>
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d017      	beq.n	800b5ec <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	6a1a      	ldr	r2, [r3, #32]
 800b5c2:	f241 1311 	movw	r3, #4369	; 0x1111
 800b5c6:	4013      	ands	r3, r2
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d10f      	bne.n	800b5ec <HAL_TIM_PWM_Stop_DMA+0x148>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	6a1a      	ldr	r2, [r3, #32]
 800b5d2:	f240 4344 	movw	r3, #1092	; 0x444
 800b5d6:	4013      	ands	r3, r2
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d107      	bne.n	800b5ec <HAL_TIM_PWM_Stop_DMA+0x148>
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b5ea:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	6a1a      	ldr	r2, [r3, #32]
 800b5f2:	f241 1311 	movw	r3, #4369	; 0x1111
 800b5f6:	4013      	ands	r3, r2
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d10f      	bne.n	800b61c <HAL_TIM_PWM_Stop_DMA+0x178>
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	6a1a      	ldr	r2, [r3, #32]
 800b602:	f240 4344 	movw	r3, #1092	; 0x444
 800b606:	4013      	ands	r3, r2
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d107      	bne.n	800b61c <HAL_TIM_PWM_Stop_DMA+0x178>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	681a      	ldr	r2, [r3, #0]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f022 0201 	bic.w	r2, r2, #1
 800b61a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d104      	bne.n	800b62c <HAL_TIM_PWM_Stop_DMA+0x188>
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2201      	movs	r2, #1
 800b626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b62a:	e023      	b.n	800b674 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	2b04      	cmp	r3, #4
 800b630:	d104      	bne.n	800b63c <HAL_TIM_PWM_Stop_DMA+0x198>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2201      	movs	r2, #1
 800b636:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b63a:	e01b      	b.n	800b674 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	2b08      	cmp	r3, #8
 800b640:	d104      	bne.n	800b64c <HAL_TIM_PWM_Stop_DMA+0x1a8>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2201      	movs	r2, #1
 800b646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b64a:	e013      	b.n	800b674 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	2b0c      	cmp	r3, #12
 800b650:	d104      	bne.n	800b65c <HAL_TIM_PWM_Stop_DMA+0x1b8>
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2201      	movs	r2, #1
 800b656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b65a:	e00b      	b.n	800b674 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	2b10      	cmp	r3, #16
 800b660:	d104      	bne.n	800b66c <HAL_TIM_PWM_Stop_DMA+0x1c8>
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2201      	movs	r2, #1
 800b666:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b66a:	e003      	b.n	800b674 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2201      	movs	r2, #1
 800b670:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800b674:	7bfb      	ldrb	r3, [r7, #15]
}
 800b676:	4618      	mov	r0, r3
 800b678:	3710      	adds	r7, #16
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}
 800b67e:	bf00      	nop
 800b680:	40010000 	.word	0x40010000
 800b684:	40010400 	.word	0x40010400
 800b688:	40014000 	.word	0x40014000
 800b68c:	40014400 	.word	0x40014400
 800b690:	40014800 	.word	0x40014800

0800b694 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	691b      	ldr	r3, [r3, #16]
 800b6a2:	f003 0302 	and.w	r3, r3, #2
 800b6a6:	2b02      	cmp	r3, #2
 800b6a8:	d122      	bne.n	800b6f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	68db      	ldr	r3, [r3, #12]
 800b6b0:	f003 0302 	and.w	r3, r3, #2
 800b6b4:	2b02      	cmp	r3, #2
 800b6b6:	d11b      	bne.n	800b6f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f06f 0202 	mvn.w	r2, #2
 800b6c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2201      	movs	r2, #1
 800b6c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	699b      	ldr	r3, [r3, #24]
 800b6ce:	f003 0303 	and.w	r3, r3, #3
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d003      	beq.n	800b6de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f000 fb1c 	bl	800bd14 <HAL_TIM_IC_CaptureCallback>
 800b6dc:	e005      	b.n	800b6ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f000 fb0e 	bl	800bd00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f7f5 fc29 	bl	8000f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	691b      	ldr	r3, [r3, #16]
 800b6f6:	f003 0304 	and.w	r3, r3, #4
 800b6fa:	2b04      	cmp	r3, #4
 800b6fc:	d122      	bne.n	800b744 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	68db      	ldr	r3, [r3, #12]
 800b704:	f003 0304 	and.w	r3, r3, #4
 800b708:	2b04      	cmp	r3, #4
 800b70a:	d11b      	bne.n	800b744 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f06f 0204 	mvn.w	r2, #4
 800b714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2202      	movs	r2, #2
 800b71a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	699b      	ldr	r3, [r3, #24]
 800b722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b726:	2b00      	cmp	r3, #0
 800b728:	d003      	beq.n	800b732 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f000 faf2 	bl	800bd14 <HAL_TIM_IC_CaptureCallback>
 800b730:	e005      	b.n	800b73e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 fae4 	bl	800bd00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f7f5 fbff 	bl	8000f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2200      	movs	r2, #0
 800b742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	691b      	ldr	r3, [r3, #16]
 800b74a:	f003 0308 	and.w	r3, r3, #8
 800b74e:	2b08      	cmp	r3, #8
 800b750:	d122      	bne.n	800b798 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	68db      	ldr	r3, [r3, #12]
 800b758:	f003 0308 	and.w	r3, r3, #8
 800b75c:	2b08      	cmp	r3, #8
 800b75e:	d11b      	bne.n	800b798 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f06f 0208 	mvn.w	r2, #8
 800b768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2204      	movs	r2, #4
 800b76e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	69db      	ldr	r3, [r3, #28]
 800b776:	f003 0303 	and.w	r3, r3, #3
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d003      	beq.n	800b786 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f000 fac8 	bl	800bd14 <HAL_TIM_IC_CaptureCallback>
 800b784:	e005      	b.n	800b792 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f000 faba 	bl	800bd00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f7f5 fbd5 	bl	8000f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2200      	movs	r2, #0
 800b796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	691b      	ldr	r3, [r3, #16]
 800b79e:	f003 0310 	and.w	r3, r3, #16
 800b7a2:	2b10      	cmp	r3, #16
 800b7a4:	d122      	bne.n	800b7ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	68db      	ldr	r3, [r3, #12]
 800b7ac:	f003 0310 	and.w	r3, r3, #16
 800b7b0:	2b10      	cmp	r3, #16
 800b7b2:	d11b      	bne.n	800b7ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f06f 0210 	mvn.w	r2, #16
 800b7bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2208      	movs	r2, #8
 800b7c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	69db      	ldr	r3, [r3, #28]
 800b7ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d003      	beq.n	800b7da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f000 fa9e 	bl	800bd14 <HAL_TIM_IC_CaptureCallback>
 800b7d8:	e005      	b.n	800b7e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f000 fa90 	bl	800bd00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f7f5 fbab 	bl	8000f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	691b      	ldr	r3, [r3, #16]
 800b7f2:	f003 0301 	and.w	r3, r3, #1
 800b7f6:	2b01      	cmp	r3, #1
 800b7f8:	d10e      	bne.n	800b818 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	68db      	ldr	r3, [r3, #12]
 800b800:	f003 0301 	and.w	r3, r3, #1
 800b804:	2b01      	cmp	r3, #1
 800b806:	d107      	bne.n	800b818 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f06f 0201 	mvn.w	r2, #1
 800b810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f000 fa6a 	bl	800bcec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	691b      	ldr	r3, [r3, #16]
 800b81e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b822:	2b80      	cmp	r3, #128	; 0x80
 800b824:	d10e      	bne.n	800b844 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	68db      	ldr	r3, [r3, #12]
 800b82c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b830:	2b80      	cmp	r3, #128	; 0x80
 800b832:	d107      	bne.n	800b844 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b83c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f001 f82e 	bl	800c8a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	691b      	ldr	r3, [r3, #16]
 800b84a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b84e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b852:	d10e      	bne.n	800b872 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	68db      	ldr	r3, [r3, #12]
 800b85a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b85e:	2b80      	cmp	r3, #128	; 0x80
 800b860:	d107      	bne.n	800b872 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b86a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f001 f821 	bl	800c8b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	691b      	ldr	r3, [r3, #16]
 800b878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b87c:	2b40      	cmp	r3, #64	; 0x40
 800b87e:	d10e      	bne.n	800b89e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	68db      	ldr	r3, [r3, #12]
 800b886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b88a:	2b40      	cmp	r3, #64	; 0x40
 800b88c:	d107      	bne.n	800b89e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f000 fa4f 	bl	800bd3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	691b      	ldr	r3, [r3, #16]
 800b8a4:	f003 0320 	and.w	r3, r3, #32
 800b8a8:	2b20      	cmp	r3, #32
 800b8aa:	d10e      	bne.n	800b8ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	68db      	ldr	r3, [r3, #12]
 800b8b2:	f003 0320 	and.w	r3, r3, #32
 800b8b6:	2b20      	cmp	r3, #32
 800b8b8:	d107      	bne.n	800b8ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f06f 0220 	mvn.w	r2, #32
 800b8c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f000 ffe1 	bl	800c88c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b8ca:	bf00      	nop
 800b8cc:	3708      	adds	r7, #8
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}
	...

0800b8d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b086      	sub	sp, #24
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	60f8      	str	r0, [r7, #12]
 800b8dc:	60b9      	str	r1, [r7, #8]
 800b8de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b8ea:	2b01      	cmp	r3, #1
 800b8ec:	d101      	bne.n	800b8f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b8ee:	2302      	movs	r3, #2
 800b8f0:	e0ff      	b.n	800baf2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	2201      	movs	r2, #1
 800b8f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2b14      	cmp	r3, #20
 800b8fe:	f200 80f0 	bhi.w	800bae2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b902:	a201      	add	r2, pc, #4	; (adr r2, 800b908 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b908:	0800b95d 	.word	0x0800b95d
 800b90c:	0800bae3 	.word	0x0800bae3
 800b910:	0800bae3 	.word	0x0800bae3
 800b914:	0800bae3 	.word	0x0800bae3
 800b918:	0800b99d 	.word	0x0800b99d
 800b91c:	0800bae3 	.word	0x0800bae3
 800b920:	0800bae3 	.word	0x0800bae3
 800b924:	0800bae3 	.word	0x0800bae3
 800b928:	0800b9df 	.word	0x0800b9df
 800b92c:	0800bae3 	.word	0x0800bae3
 800b930:	0800bae3 	.word	0x0800bae3
 800b934:	0800bae3 	.word	0x0800bae3
 800b938:	0800ba1f 	.word	0x0800ba1f
 800b93c:	0800bae3 	.word	0x0800bae3
 800b940:	0800bae3 	.word	0x0800bae3
 800b944:	0800bae3 	.word	0x0800bae3
 800b948:	0800ba61 	.word	0x0800ba61
 800b94c:	0800bae3 	.word	0x0800bae3
 800b950:	0800bae3 	.word	0x0800bae3
 800b954:	0800bae3 	.word	0x0800bae3
 800b958:	0800baa1 	.word	0x0800baa1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	68b9      	ldr	r1, [r7, #8]
 800b962:	4618      	mov	r0, r3
 800b964:	f000 fb6a 	bl	800c03c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	699a      	ldr	r2, [r3, #24]
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f042 0208 	orr.w	r2, r2, #8
 800b976:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	699a      	ldr	r2, [r3, #24]
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f022 0204 	bic.w	r2, r2, #4
 800b986:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	6999      	ldr	r1, [r3, #24]
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	691a      	ldr	r2, [r3, #16]
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	430a      	orrs	r2, r1
 800b998:	619a      	str	r2, [r3, #24]
      break;
 800b99a:	e0a5      	b.n	800bae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	68b9      	ldr	r1, [r7, #8]
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f000 fbda 	bl	800c15c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	699a      	ldr	r2, [r3, #24]
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b9b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	699a      	ldr	r2, [r3, #24]
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b9c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	6999      	ldr	r1, [r3, #24]
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	691b      	ldr	r3, [r3, #16]
 800b9d2:	021a      	lsls	r2, r3, #8
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	430a      	orrs	r2, r1
 800b9da:	619a      	str	r2, [r3, #24]
      break;
 800b9dc:	e084      	b.n	800bae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	68b9      	ldr	r1, [r7, #8]
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f000 fc43 	bl	800c270 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	69da      	ldr	r2, [r3, #28]
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f042 0208 	orr.w	r2, r2, #8
 800b9f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	69da      	ldr	r2, [r3, #28]
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f022 0204 	bic.w	r2, r2, #4
 800ba08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	69d9      	ldr	r1, [r3, #28]
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	691a      	ldr	r2, [r3, #16]
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	430a      	orrs	r2, r1
 800ba1a:	61da      	str	r2, [r3, #28]
      break;
 800ba1c:	e064      	b.n	800bae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	68b9      	ldr	r1, [r7, #8]
 800ba24:	4618      	mov	r0, r3
 800ba26:	f000 fcab 	bl	800c380 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	69da      	ldr	r2, [r3, #28]
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ba38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	69da      	ldr	r2, [r3, #28]
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	69d9      	ldr	r1, [r3, #28]
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	691b      	ldr	r3, [r3, #16]
 800ba54:	021a      	lsls	r2, r3, #8
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	430a      	orrs	r2, r1
 800ba5c:	61da      	str	r2, [r3, #28]
      break;
 800ba5e:	e043      	b.n	800bae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	68b9      	ldr	r1, [r7, #8]
 800ba66:	4618      	mov	r0, r3
 800ba68:	f000 fcf4 	bl	800c454 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	f042 0208 	orr.w	r2, r2, #8
 800ba7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f022 0204 	bic.w	r2, r2, #4
 800ba8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	691a      	ldr	r2, [r3, #16]
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	430a      	orrs	r2, r1
 800ba9c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ba9e:	e023      	b.n	800bae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	68b9      	ldr	r1, [r7, #8]
 800baa6:	4618      	mov	r0, r3
 800baa8:	f000 fd38 	bl	800c51c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800baba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800baca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	691b      	ldr	r3, [r3, #16]
 800bad6:	021a      	lsls	r2, r3, #8
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	430a      	orrs	r2, r1
 800bade:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bae0:	e002      	b.n	800bae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bae2:	2301      	movs	r3, #1
 800bae4:	75fb      	strb	r3, [r7, #23]
      break;
 800bae6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2200      	movs	r2, #0
 800baec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800baf0:	7dfb      	ldrb	r3, [r7, #23]
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3718      	adds	r7, #24
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}
 800bafa:	bf00      	nop

0800bafc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b084      	sub	sp, #16
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
 800bb04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bb06:	2300      	movs	r3, #0
 800bb08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb10:	2b01      	cmp	r3, #1
 800bb12:	d101      	bne.n	800bb18 <HAL_TIM_ConfigClockSource+0x1c>
 800bb14:	2302      	movs	r3, #2
 800bb16:	e0dc      	b.n	800bcd2 <HAL_TIM_ConfigClockSource+0x1d6>
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2201      	movs	r2, #1
 800bb1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2202      	movs	r2, #2
 800bb24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	689b      	ldr	r3, [r3, #8]
 800bb2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bb30:	68ba      	ldr	r2, [r7, #8]
 800bb32:	4b6a      	ldr	r3, [pc, #424]	; (800bcdc <HAL_TIM_ConfigClockSource+0x1e0>)
 800bb34:	4013      	ands	r3, r2
 800bb36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bb3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	68ba      	ldr	r2, [r7, #8]
 800bb46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	4a64      	ldr	r2, [pc, #400]	; (800bce0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	f000 80a9 	beq.w	800bca6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bb54:	4a62      	ldr	r2, [pc, #392]	; (800bce0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bb56:	4293      	cmp	r3, r2
 800bb58:	f200 80ae 	bhi.w	800bcb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb5c:	4a61      	ldr	r2, [pc, #388]	; (800bce4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	f000 80a1 	beq.w	800bca6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bb64:	4a5f      	ldr	r2, [pc, #380]	; (800bce4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800bb66:	4293      	cmp	r3, r2
 800bb68:	f200 80a6 	bhi.w	800bcb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb6c:	4a5e      	ldr	r2, [pc, #376]	; (800bce8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bb6e:	4293      	cmp	r3, r2
 800bb70:	f000 8099 	beq.w	800bca6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bb74:	4a5c      	ldr	r2, [pc, #368]	; (800bce8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bb76:	4293      	cmp	r3, r2
 800bb78:	f200 809e 	bhi.w	800bcb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb7c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bb80:	f000 8091 	beq.w	800bca6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bb84:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bb88:	f200 8096 	bhi.w	800bcb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb90:	f000 8089 	beq.w	800bca6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bb94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb98:	f200 808e 	bhi.w	800bcb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bba0:	d03e      	beq.n	800bc20 <HAL_TIM_ConfigClockSource+0x124>
 800bba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bba6:	f200 8087 	bhi.w	800bcb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bbaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbae:	f000 8086 	beq.w	800bcbe <HAL_TIM_ConfigClockSource+0x1c2>
 800bbb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbb6:	d87f      	bhi.n	800bcb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bbb8:	2b70      	cmp	r3, #112	; 0x70
 800bbba:	d01a      	beq.n	800bbf2 <HAL_TIM_ConfigClockSource+0xf6>
 800bbbc:	2b70      	cmp	r3, #112	; 0x70
 800bbbe:	d87b      	bhi.n	800bcb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bbc0:	2b60      	cmp	r3, #96	; 0x60
 800bbc2:	d050      	beq.n	800bc66 <HAL_TIM_ConfigClockSource+0x16a>
 800bbc4:	2b60      	cmp	r3, #96	; 0x60
 800bbc6:	d877      	bhi.n	800bcb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bbc8:	2b50      	cmp	r3, #80	; 0x50
 800bbca:	d03c      	beq.n	800bc46 <HAL_TIM_ConfigClockSource+0x14a>
 800bbcc:	2b50      	cmp	r3, #80	; 0x50
 800bbce:	d873      	bhi.n	800bcb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bbd0:	2b40      	cmp	r3, #64	; 0x40
 800bbd2:	d058      	beq.n	800bc86 <HAL_TIM_ConfigClockSource+0x18a>
 800bbd4:	2b40      	cmp	r3, #64	; 0x40
 800bbd6:	d86f      	bhi.n	800bcb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bbd8:	2b30      	cmp	r3, #48	; 0x30
 800bbda:	d064      	beq.n	800bca6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bbdc:	2b30      	cmp	r3, #48	; 0x30
 800bbde:	d86b      	bhi.n	800bcb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bbe0:	2b20      	cmp	r3, #32
 800bbe2:	d060      	beq.n	800bca6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bbe4:	2b20      	cmp	r3, #32
 800bbe6:	d867      	bhi.n	800bcb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d05c      	beq.n	800bca6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bbec:	2b10      	cmp	r3, #16
 800bbee:	d05a      	beq.n	800bca6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bbf0:	e062      	b.n	800bcb8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6818      	ldr	r0, [r3, #0]
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	6899      	ldr	r1, [r3, #8]
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	685a      	ldr	r2, [r3, #4]
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	68db      	ldr	r3, [r3, #12]
 800bc02:	f000 fd6f 	bl	800c6e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	689b      	ldr	r3, [r3, #8]
 800bc0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bc14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	68ba      	ldr	r2, [r7, #8]
 800bc1c:	609a      	str	r2, [r3, #8]
      break;
 800bc1e:	e04f      	b.n	800bcc0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	6818      	ldr	r0, [r3, #0]
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	6899      	ldr	r1, [r3, #8]
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	685a      	ldr	r2, [r3, #4]
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	68db      	ldr	r3, [r3, #12]
 800bc30:	f000 fd58 	bl	800c6e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	689a      	ldr	r2, [r3, #8]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bc42:	609a      	str	r2, [r3, #8]
      break;
 800bc44:	e03c      	b.n	800bcc0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6818      	ldr	r0, [r3, #0]
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	6859      	ldr	r1, [r3, #4]
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	68db      	ldr	r3, [r3, #12]
 800bc52:	461a      	mov	r2, r3
 800bc54:	f000 fcc8 	bl	800c5e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	2150      	movs	r1, #80	; 0x50
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f000 fd22 	bl	800c6a8 <TIM_ITRx_SetConfig>
      break;
 800bc64:	e02c      	b.n	800bcc0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6818      	ldr	r0, [r3, #0]
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	6859      	ldr	r1, [r3, #4]
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	68db      	ldr	r3, [r3, #12]
 800bc72:	461a      	mov	r2, r3
 800bc74:	f000 fce7 	bl	800c646 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	2160      	movs	r1, #96	; 0x60
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f000 fd12 	bl	800c6a8 <TIM_ITRx_SetConfig>
      break;
 800bc84:	e01c      	b.n	800bcc0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6818      	ldr	r0, [r3, #0]
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	6859      	ldr	r1, [r3, #4]
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	68db      	ldr	r3, [r3, #12]
 800bc92:	461a      	mov	r2, r3
 800bc94:	f000 fca8 	bl	800c5e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	2140      	movs	r1, #64	; 0x40
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f000 fd02 	bl	800c6a8 <TIM_ITRx_SetConfig>
      break;
 800bca4:	e00c      	b.n	800bcc0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681a      	ldr	r2, [r3, #0]
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	4619      	mov	r1, r3
 800bcb0:	4610      	mov	r0, r2
 800bcb2:	f000 fcf9 	bl	800c6a8 <TIM_ITRx_SetConfig>
      break;
 800bcb6:	e003      	b.n	800bcc0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800bcb8:	2301      	movs	r3, #1
 800bcba:	73fb      	strb	r3, [r7, #15]
      break;
 800bcbc:	e000      	b.n	800bcc0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800bcbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2200      	movs	r2, #0
 800bccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bcd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3710      	adds	r7, #16
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}
 800bcda:	bf00      	nop
 800bcdc:	ffceff88 	.word	0xffceff88
 800bce0:	00100040 	.word	0x00100040
 800bce4:	00100030 	.word	0x00100030
 800bce8:	00100020 	.word	0x00100020

0800bcec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bcec:	b480      	push	{r7}
 800bcee:	b083      	sub	sp, #12
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800bcf4:	bf00      	nop
 800bcf6:	370c      	adds	r7, #12
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfe:	4770      	bx	lr

0800bd00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bd00:	b480      	push	{r7}
 800bd02:	b083      	sub	sp, #12
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bd08:	bf00      	nop
 800bd0a:	370c      	adds	r7, #12
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd12:	4770      	bx	lr

0800bd14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b083      	sub	sp, #12
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bd1c:	bf00      	nop
 800bd1e:	370c      	adds	r7, #12
 800bd20:	46bd      	mov	sp, r7
 800bd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd26:	4770      	bx	lr

0800bd28 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800bd28:	b480      	push	{r7}
 800bd2a:	b083      	sub	sp, #12
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800bd30:	bf00      	nop
 800bd32:	370c      	adds	r7, #12
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	4770      	bx	lr

0800bd3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b083      	sub	sp, #12
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bd44:	bf00      	nop
 800bd46:	370c      	adds	r7, #12
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4e:	4770      	bx	lr

0800bd50 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800bd50:	b480      	push	{r7}
 800bd52:	b083      	sub	sp, #12
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800bd58:	bf00      	nop
 800bd5a:	370c      	adds	r7, #12
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd62:	4770      	bx	lr

0800bd64 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b084      	sub	sp, #16
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd70:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd76:	687a      	ldr	r2, [r7, #4]
 800bd78:	429a      	cmp	r2, r3
 800bd7a:	d107      	bne.n	800bd8c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	2201      	movs	r2, #1
 800bd80:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	2201      	movs	r2, #1
 800bd86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bd8a:	e02a      	b.n	800bde2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd90:	687a      	ldr	r2, [r7, #4]
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d107      	bne.n	800bda6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	2202      	movs	r2, #2
 800bd9a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	2201      	movs	r2, #1
 800bda0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bda4:	e01d      	b.n	800bde2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdaa:	687a      	ldr	r2, [r7, #4]
 800bdac:	429a      	cmp	r2, r3
 800bdae:	d107      	bne.n	800bdc0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	2204      	movs	r2, #4
 800bdb4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	2201      	movs	r2, #1
 800bdba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bdbe:	e010      	b.n	800bde2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdc4:	687a      	ldr	r2, [r7, #4]
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	d107      	bne.n	800bdda <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	2208      	movs	r2, #8
 800bdce:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	2201      	movs	r2, #1
 800bdd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bdd8:	e003      	b.n	800bde2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	2201      	movs	r2, #1
 800bdde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800bde2:	68f8      	ldr	r0, [r7, #12]
 800bde4:	f7ff ffb4 	bl	800bd50 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	2200      	movs	r2, #0
 800bdec:	771a      	strb	r2, [r3, #28]
}
 800bdee:	bf00      	nop
 800bdf0:	3710      	adds	r7, #16
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}

0800bdf6 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800bdf6:	b580      	push	{r7, lr}
 800bdf8:	b084      	sub	sp, #16
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be02:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be08:	687a      	ldr	r2, [r7, #4]
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d10b      	bne.n	800be26 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	2201      	movs	r2, #1
 800be12:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	69db      	ldr	r3, [r3, #28]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d136      	bne.n	800be8a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2201      	movs	r2, #1
 800be20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800be24:	e031      	b.n	800be8a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be2a:	687a      	ldr	r2, [r7, #4]
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d10b      	bne.n	800be48 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	2202      	movs	r2, #2
 800be34:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	69db      	ldr	r3, [r3, #28]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d125      	bne.n	800be8a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	2201      	movs	r2, #1
 800be42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800be46:	e020      	b.n	800be8a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be4c:	687a      	ldr	r2, [r7, #4]
 800be4e:	429a      	cmp	r2, r3
 800be50:	d10b      	bne.n	800be6a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	2204      	movs	r2, #4
 800be56:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	69db      	ldr	r3, [r3, #28]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d114      	bne.n	800be8a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2201      	movs	r2, #1
 800be64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800be68:	e00f      	b.n	800be8a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be6e:	687a      	ldr	r2, [r7, #4]
 800be70:	429a      	cmp	r2, r3
 800be72:	d10a      	bne.n	800be8a <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	2208      	movs	r2, #8
 800be78:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	69db      	ldr	r3, [r3, #28]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d103      	bne.n	800be8a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	2201      	movs	r2, #1
 800be86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be8a:	68f8      	ldr	r0, [r7, #12]
 800be8c:	f7f5 f856 	bl	8000f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	2200      	movs	r2, #0
 800be94:	771a      	strb	r2, [r3, #28]
}
 800be96:	bf00      	nop
 800be98:	3710      	adds	r7, #16
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}

0800be9e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800be9e:	b580      	push	{r7, lr}
 800bea0:	b084      	sub	sp, #16
 800bea2:	af00      	add	r7, sp, #0
 800bea4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beaa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beb0:	687a      	ldr	r2, [r7, #4]
 800beb2:	429a      	cmp	r2, r3
 800beb4:	d103      	bne.n	800bebe <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2201      	movs	r2, #1
 800beba:	771a      	strb	r2, [r3, #28]
 800bebc:	e019      	b.n	800bef2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bec2:	687a      	ldr	r2, [r7, #4]
 800bec4:	429a      	cmp	r2, r3
 800bec6:	d103      	bne.n	800bed0 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2202      	movs	r2, #2
 800becc:	771a      	strb	r2, [r3, #28]
 800bece:	e010      	b.n	800bef2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bed4:	687a      	ldr	r2, [r7, #4]
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d103      	bne.n	800bee2 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	2204      	movs	r2, #4
 800bede:	771a      	strb	r2, [r3, #28]
 800bee0:	e007      	b.n	800bef2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bee6:	687a      	ldr	r2, [r7, #4]
 800bee8:	429a      	cmp	r2, r3
 800beea:	d102      	bne.n	800bef2 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2208      	movs	r2, #8
 800bef0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800bef2:	68f8      	ldr	r0, [r7, #12]
 800bef4:	f7ff ff18 	bl	800bd28 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	2200      	movs	r2, #0
 800befc:	771a      	strb	r2, [r3, #28]
}
 800befe:	bf00      	nop
 800bf00:	3710      	adds	r7, #16
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}
	...

0800bf08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b085      	sub	sp, #20
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	4a40      	ldr	r2, [pc, #256]	; (800c01c <TIM_Base_SetConfig+0x114>)
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	d013      	beq.n	800bf48 <TIM_Base_SetConfig+0x40>
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf26:	d00f      	beq.n	800bf48 <TIM_Base_SetConfig+0x40>
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	4a3d      	ldr	r2, [pc, #244]	; (800c020 <TIM_Base_SetConfig+0x118>)
 800bf2c:	4293      	cmp	r3, r2
 800bf2e:	d00b      	beq.n	800bf48 <TIM_Base_SetConfig+0x40>
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	4a3c      	ldr	r2, [pc, #240]	; (800c024 <TIM_Base_SetConfig+0x11c>)
 800bf34:	4293      	cmp	r3, r2
 800bf36:	d007      	beq.n	800bf48 <TIM_Base_SetConfig+0x40>
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	4a3b      	ldr	r2, [pc, #236]	; (800c028 <TIM_Base_SetConfig+0x120>)
 800bf3c:	4293      	cmp	r3, r2
 800bf3e:	d003      	beq.n	800bf48 <TIM_Base_SetConfig+0x40>
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	4a3a      	ldr	r2, [pc, #232]	; (800c02c <TIM_Base_SetConfig+0x124>)
 800bf44:	4293      	cmp	r3, r2
 800bf46:	d108      	bne.n	800bf5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	685b      	ldr	r3, [r3, #4]
 800bf54:	68fa      	ldr	r2, [r7, #12]
 800bf56:	4313      	orrs	r3, r2
 800bf58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	4a2f      	ldr	r2, [pc, #188]	; (800c01c <TIM_Base_SetConfig+0x114>)
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	d01f      	beq.n	800bfa2 <TIM_Base_SetConfig+0x9a>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf68:	d01b      	beq.n	800bfa2 <TIM_Base_SetConfig+0x9a>
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	4a2c      	ldr	r2, [pc, #176]	; (800c020 <TIM_Base_SetConfig+0x118>)
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	d017      	beq.n	800bfa2 <TIM_Base_SetConfig+0x9a>
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	4a2b      	ldr	r2, [pc, #172]	; (800c024 <TIM_Base_SetConfig+0x11c>)
 800bf76:	4293      	cmp	r3, r2
 800bf78:	d013      	beq.n	800bfa2 <TIM_Base_SetConfig+0x9a>
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	4a2a      	ldr	r2, [pc, #168]	; (800c028 <TIM_Base_SetConfig+0x120>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d00f      	beq.n	800bfa2 <TIM_Base_SetConfig+0x9a>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	4a29      	ldr	r2, [pc, #164]	; (800c02c <TIM_Base_SetConfig+0x124>)
 800bf86:	4293      	cmp	r3, r2
 800bf88:	d00b      	beq.n	800bfa2 <TIM_Base_SetConfig+0x9a>
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	4a28      	ldr	r2, [pc, #160]	; (800c030 <TIM_Base_SetConfig+0x128>)
 800bf8e:	4293      	cmp	r3, r2
 800bf90:	d007      	beq.n	800bfa2 <TIM_Base_SetConfig+0x9a>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	4a27      	ldr	r2, [pc, #156]	; (800c034 <TIM_Base_SetConfig+0x12c>)
 800bf96:	4293      	cmp	r3, r2
 800bf98:	d003      	beq.n	800bfa2 <TIM_Base_SetConfig+0x9a>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	4a26      	ldr	r2, [pc, #152]	; (800c038 <TIM_Base_SetConfig+0x130>)
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	d108      	bne.n	800bfb4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bfa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	68db      	ldr	r3, [r3, #12]
 800bfae:	68fa      	ldr	r2, [r7, #12]
 800bfb0:	4313      	orrs	r3, r2
 800bfb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	695b      	ldr	r3, [r3, #20]
 800bfbe:	4313      	orrs	r3, r2
 800bfc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	68fa      	ldr	r2, [r7, #12]
 800bfc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	689a      	ldr	r2, [r3, #8]
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	681a      	ldr	r2, [r3, #0]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	4a10      	ldr	r2, [pc, #64]	; (800c01c <TIM_Base_SetConfig+0x114>)
 800bfdc:	4293      	cmp	r3, r2
 800bfde:	d00f      	beq.n	800c000 <TIM_Base_SetConfig+0xf8>
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	4a12      	ldr	r2, [pc, #72]	; (800c02c <TIM_Base_SetConfig+0x124>)
 800bfe4:	4293      	cmp	r3, r2
 800bfe6:	d00b      	beq.n	800c000 <TIM_Base_SetConfig+0xf8>
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	4a11      	ldr	r2, [pc, #68]	; (800c030 <TIM_Base_SetConfig+0x128>)
 800bfec:	4293      	cmp	r3, r2
 800bfee:	d007      	beq.n	800c000 <TIM_Base_SetConfig+0xf8>
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	4a10      	ldr	r2, [pc, #64]	; (800c034 <TIM_Base_SetConfig+0x12c>)
 800bff4:	4293      	cmp	r3, r2
 800bff6:	d003      	beq.n	800c000 <TIM_Base_SetConfig+0xf8>
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	4a0f      	ldr	r2, [pc, #60]	; (800c038 <TIM_Base_SetConfig+0x130>)
 800bffc:	4293      	cmp	r3, r2
 800bffe:	d103      	bne.n	800c008 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	691a      	ldr	r2, [r3, #16]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2201      	movs	r2, #1
 800c00c:	615a      	str	r2, [r3, #20]
}
 800c00e:	bf00      	nop
 800c010:	3714      	adds	r7, #20
 800c012:	46bd      	mov	sp, r7
 800c014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c018:	4770      	bx	lr
 800c01a:	bf00      	nop
 800c01c:	40010000 	.word	0x40010000
 800c020:	40000400 	.word	0x40000400
 800c024:	40000800 	.word	0x40000800
 800c028:	40000c00 	.word	0x40000c00
 800c02c:	40010400 	.word	0x40010400
 800c030:	40014000 	.word	0x40014000
 800c034:	40014400 	.word	0x40014400
 800c038:	40014800 	.word	0x40014800

0800c03c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c03c:	b480      	push	{r7}
 800c03e:	b087      	sub	sp, #28
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6a1b      	ldr	r3, [r3, #32]
 800c04a:	f023 0201 	bic.w	r2, r3, #1
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6a1b      	ldr	r3, [r3, #32]
 800c056:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	685b      	ldr	r3, [r3, #4]
 800c05c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	699b      	ldr	r3, [r3, #24]
 800c062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c064:	68fa      	ldr	r2, [r7, #12]
 800c066:	4b37      	ldr	r3, [pc, #220]	; (800c144 <TIM_OC1_SetConfig+0x108>)
 800c068:	4013      	ands	r3, r2
 800c06a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	f023 0303 	bic.w	r3, r3, #3
 800c072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	68fa      	ldr	r2, [r7, #12]
 800c07a:	4313      	orrs	r3, r2
 800c07c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	f023 0302 	bic.w	r3, r3, #2
 800c084:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	689b      	ldr	r3, [r3, #8]
 800c08a:	697a      	ldr	r2, [r7, #20]
 800c08c:	4313      	orrs	r3, r2
 800c08e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	4a2d      	ldr	r2, [pc, #180]	; (800c148 <TIM_OC1_SetConfig+0x10c>)
 800c094:	4293      	cmp	r3, r2
 800c096:	d00f      	beq.n	800c0b8 <TIM_OC1_SetConfig+0x7c>
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	4a2c      	ldr	r2, [pc, #176]	; (800c14c <TIM_OC1_SetConfig+0x110>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d00b      	beq.n	800c0b8 <TIM_OC1_SetConfig+0x7c>
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	4a2b      	ldr	r2, [pc, #172]	; (800c150 <TIM_OC1_SetConfig+0x114>)
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	d007      	beq.n	800c0b8 <TIM_OC1_SetConfig+0x7c>
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	4a2a      	ldr	r2, [pc, #168]	; (800c154 <TIM_OC1_SetConfig+0x118>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d003      	beq.n	800c0b8 <TIM_OC1_SetConfig+0x7c>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	4a29      	ldr	r2, [pc, #164]	; (800c158 <TIM_OC1_SetConfig+0x11c>)
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	d10c      	bne.n	800c0d2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	f023 0308 	bic.w	r3, r3, #8
 800c0be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	68db      	ldr	r3, [r3, #12]
 800c0c4:	697a      	ldr	r2, [r7, #20]
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c0ca:	697b      	ldr	r3, [r7, #20]
 800c0cc:	f023 0304 	bic.w	r3, r3, #4
 800c0d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	4a1c      	ldr	r2, [pc, #112]	; (800c148 <TIM_OC1_SetConfig+0x10c>)
 800c0d6:	4293      	cmp	r3, r2
 800c0d8:	d00f      	beq.n	800c0fa <TIM_OC1_SetConfig+0xbe>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	4a1b      	ldr	r2, [pc, #108]	; (800c14c <TIM_OC1_SetConfig+0x110>)
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d00b      	beq.n	800c0fa <TIM_OC1_SetConfig+0xbe>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	4a1a      	ldr	r2, [pc, #104]	; (800c150 <TIM_OC1_SetConfig+0x114>)
 800c0e6:	4293      	cmp	r3, r2
 800c0e8:	d007      	beq.n	800c0fa <TIM_OC1_SetConfig+0xbe>
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	4a19      	ldr	r2, [pc, #100]	; (800c154 <TIM_OC1_SetConfig+0x118>)
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	d003      	beq.n	800c0fa <TIM_OC1_SetConfig+0xbe>
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	4a18      	ldr	r2, [pc, #96]	; (800c158 <TIM_OC1_SetConfig+0x11c>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d111      	bne.n	800c11e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c100:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c108:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	695b      	ldr	r3, [r3, #20]
 800c10e:	693a      	ldr	r2, [r7, #16]
 800c110:	4313      	orrs	r3, r2
 800c112:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	699b      	ldr	r3, [r3, #24]
 800c118:	693a      	ldr	r2, [r7, #16]
 800c11a:	4313      	orrs	r3, r2
 800c11c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	693a      	ldr	r2, [r7, #16]
 800c122:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	68fa      	ldr	r2, [r7, #12]
 800c128:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	685a      	ldr	r2, [r3, #4]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	697a      	ldr	r2, [r7, #20]
 800c136:	621a      	str	r2, [r3, #32]
}
 800c138:	bf00      	nop
 800c13a:	371c      	adds	r7, #28
 800c13c:	46bd      	mov	sp, r7
 800c13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c142:	4770      	bx	lr
 800c144:	fffeff8f 	.word	0xfffeff8f
 800c148:	40010000 	.word	0x40010000
 800c14c:	40010400 	.word	0x40010400
 800c150:	40014000 	.word	0x40014000
 800c154:	40014400 	.word	0x40014400
 800c158:	40014800 	.word	0x40014800

0800c15c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c15c:	b480      	push	{r7}
 800c15e:	b087      	sub	sp, #28
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6a1b      	ldr	r3, [r3, #32]
 800c16a:	f023 0210 	bic.w	r2, r3, #16
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6a1b      	ldr	r3, [r3, #32]
 800c176:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	685b      	ldr	r3, [r3, #4]
 800c17c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	699b      	ldr	r3, [r3, #24]
 800c182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c184:	68fa      	ldr	r2, [r7, #12]
 800c186:	4b34      	ldr	r3, [pc, #208]	; (800c258 <TIM_OC2_SetConfig+0xfc>)
 800c188:	4013      	ands	r3, r2
 800c18a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c192:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	021b      	lsls	r3, r3, #8
 800c19a:	68fa      	ldr	r2, [r7, #12]
 800c19c:	4313      	orrs	r3, r2
 800c19e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	f023 0320 	bic.w	r3, r3, #32
 800c1a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	689b      	ldr	r3, [r3, #8]
 800c1ac:	011b      	lsls	r3, r3, #4
 800c1ae:	697a      	ldr	r2, [r7, #20]
 800c1b0:	4313      	orrs	r3, r2
 800c1b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	4a29      	ldr	r2, [pc, #164]	; (800c25c <TIM_OC2_SetConfig+0x100>)
 800c1b8:	4293      	cmp	r3, r2
 800c1ba:	d003      	beq.n	800c1c4 <TIM_OC2_SetConfig+0x68>
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	4a28      	ldr	r2, [pc, #160]	; (800c260 <TIM_OC2_SetConfig+0x104>)
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d10d      	bne.n	800c1e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c1ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	68db      	ldr	r3, [r3, #12]
 800c1d0:	011b      	lsls	r3, r3, #4
 800c1d2:	697a      	ldr	r2, [r7, #20]
 800c1d4:	4313      	orrs	r3, r2
 800c1d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c1de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	4a1e      	ldr	r2, [pc, #120]	; (800c25c <TIM_OC2_SetConfig+0x100>)
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	d00f      	beq.n	800c208 <TIM_OC2_SetConfig+0xac>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	4a1d      	ldr	r2, [pc, #116]	; (800c260 <TIM_OC2_SetConfig+0x104>)
 800c1ec:	4293      	cmp	r3, r2
 800c1ee:	d00b      	beq.n	800c208 <TIM_OC2_SetConfig+0xac>
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	4a1c      	ldr	r2, [pc, #112]	; (800c264 <TIM_OC2_SetConfig+0x108>)
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	d007      	beq.n	800c208 <TIM_OC2_SetConfig+0xac>
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	4a1b      	ldr	r2, [pc, #108]	; (800c268 <TIM_OC2_SetConfig+0x10c>)
 800c1fc:	4293      	cmp	r3, r2
 800c1fe:	d003      	beq.n	800c208 <TIM_OC2_SetConfig+0xac>
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	4a1a      	ldr	r2, [pc, #104]	; (800c26c <TIM_OC2_SetConfig+0x110>)
 800c204:	4293      	cmp	r3, r2
 800c206:	d113      	bne.n	800c230 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c20e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c216:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	695b      	ldr	r3, [r3, #20]
 800c21c:	009b      	lsls	r3, r3, #2
 800c21e:	693a      	ldr	r2, [r7, #16]
 800c220:	4313      	orrs	r3, r2
 800c222:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	699b      	ldr	r3, [r3, #24]
 800c228:	009b      	lsls	r3, r3, #2
 800c22a:	693a      	ldr	r2, [r7, #16]
 800c22c:	4313      	orrs	r3, r2
 800c22e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	693a      	ldr	r2, [r7, #16]
 800c234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	68fa      	ldr	r2, [r7, #12]
 800c23a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	685a      	ldr	r2, [r3, #4]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	697a      	ldr	r2, [r7, #20]
 800c248:	621a      	str	r2, [r3, #32]
}
 800c24a:	bf00      	nop
 800c24c:	371c      	adds	r7, #28
 800c24e:	46bd      	mov	sp, r7
 800c250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c254:	4770      	bx	lr
 800c256:	bf00      	nop
 800c258:	feff8fff 	.word	0xfeff8fff
 800c25c:	40010000 	.word	0x40010000
 800c260:	40010400 	.word	0x40010400
 800c264:	40014000 	.word	0x40014000
 800c268:	40014400 	.word	0x40014400
 800c26c:	40014800 	.word	0x40014800

0800c270 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c270:	b480      	push	{r7}
 800c272:	b087      	sub	sp, #28
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6a1b      	ldr	r3, [r3, #32]
 800c27e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6a1b      	ldr	r3, [r3, #32]
 800c28a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	685b      	ldr	r3, [r3, #4]
 800c290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	69db      	ldr	r3, [r3, #28]
 800c296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c298:	68fa      	ldr	r2, [r7, #12]
 800c29a:	4b33      	ldr	r3, [pc, #204]	; (800c368 <TIM_OC3_SetConfig+0xf8>)
 800c29c:	4013      	ands	r3, r2
 800c29e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	f023 0303 	bic.w	r3, r3, #3
 800c2a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	68fa      	ldr	r2, [r7, #12]
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c2b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	689b      	ldr	r3, [r3, #8]
 800c2be:	021b      	lsls	r3, r3, #8
 800c2c0:	697a      	ldr	r2, [r7, #20]
 800c2c2:	4313      	orrs	r3, r2
 800c2c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	4a28      	ldr	r2, [pc, #160]	; (800c36c <TIM_OC3_SetConfig+0xfc>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d003      	beq.n	800c2d6 <TIM_OC3_SetConfig+0x66>
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	4a27      	ldr	r2, [pc, #156]	; (800c370 <TIM_OC3_SetConfig+0x100>)
 800c2d2:	4293      	cmp	r3, r2
 800c2d4:	d10d      	bne.n	800c2f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c2dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	68db      	ldr	r3, [r3, #12]
 800c2e2:	021b      	lsls	r3, r3, #8
 800c2e4:	697a      	ldr	r2, [r7, #20]
 800c2e6:	4313      	orrs	r3, r2
 800c2e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c2f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	4a1d      	ldr	r2, [pc, #116]	; (800c36c <TIM_OC3_SetConfig+0xfc>)
 800c2f6:	4293      	cmp	r3, r2
 800c2f8:	d00f      	beq.n	800c31a <TIM_OC3_SetConfig+0xaa>
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	4a1c      	ldr	r2, [pc, #112]	; (800c370 <TIM_OC3_SetConfig+0x100>)
 800c2fe:	4293      	cmp	r3, r2
 800c300:	d00b      	beq.n	800c31a <TIM_OC3_SetConfig+0xaa>
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	4a1b      	ldr	r2, [pc, #108]	; (800c374 <TIM_OC3_SetConfig+0x104>)
 800c306:	4293      	cmp	r3, r2
 800c308:	d007      	beq.n	800c31a <TIM_OC3_SetConfig+0xaa>
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	4a1a      	ldr	r2, [pc, #104]	; (800c378 <TIM_OC3_SetConfig+0x108>)
 800c30e:	4293      	cmp	r3, r2
 800c310:	d003      	beq.n	800c31a <TIM_OC3_SetConfig+0xaa>
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	4a19      	ldr	r2, [pc, #100]	; (800c37c <TIM_OC3_SetConfig+0x10c>)
 800c316:	4293      	cmp	r3, r2
 800c318:	d113      	bne.n	800c342 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c320:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c322:	693b      	ldr	r3, [r7, #16]
 800c324:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c328:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	695b      	ldr	r3, [r3, #20]
 800c32e:	011b      	lsls	r3, r3, #4
 800c330:	693a      	ldr	r2, [r7, #16]
 800c332:	4313      	orrs	r3, r2
 800c334:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	699b      	ldr	r3, [r3, #24]
 800c33a:	011b      	lsls	r3, r3, #4
 800c33c:	693a      	ldr	r2, [r7, #16]
 800c33e:	4313      	orrs	r3, r2
 800c340:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	693a      	ldr	r2, [r7, #16]
 800c346:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	68fa      	ldr	r2, [r7, #12]
 800c34c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	685a      	ldr	r2, [r3, #4]
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	697a      	ldr	r2, [r7, #20]
 800c35a:	621a      	str	r2, [r3, #32]
}
 800c35c:	bf00      	nop
 800c35e:	371c      	adds	r7, #28
 800c360:	46bd      	mov	sp, r7
 800c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c366:	4770      	bx	lr
 800c368:	fffeff8f 	.word	0xfffeff8f
 800c36c:	40010000 	.word	0x40010000
 800c370:	40010400 	.word	0x40010400
 800c374:	40014000 	.word	0x40014000
 800c378:	40014400 	.word	0x40014400
 800c37c:	40014800 	.word	0x40014800

0800c380 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c380:	b480      	push	{r7}
 800c382:	b087      	sub	sp, #28
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
 800c388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6a1b      	ldr	r3, [r3, #32]
 800c38e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6a1b      	ldr	r3, [r3, #32]
 800c39a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	685b      	ldr	r3, [r3, #4]
 800c3a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	69db      	ldr	r3, [r3, #28]
 800c3a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c3a8:	68fa      	ldr	r2, [r7, #12]
 800c3aa:	4b24      	ldr	r3, [pc, #144]	; (800c43c <TIM_OC4_SetConfig+0xbc>)
 800c3ac:	4013      	ands	r3, r2
 800c3ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c3b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	021b      	lsls	r3, r3, #8
 800c3be:	68fa      	ldr	r2, [r7, #12]
 800c3c0:	4313      	orrs	r3, r2
 800c3c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c3c4:	693b      	ldr	r3, [r7, #16]
 800c3c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c3ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	689b      	ldr	r3, [r3, #8]
 800c3d0:	031b      	lsls	r3, r3, #12
 800c3d2:	693a      	ldr	r2, [r7, #16]
 800c3d4:	4313      	orrs	r3, r2
 800c3d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	4a19      	ldr	r2, [pc, #100]	; (800c440 <TIM_OC4_SetConfig+0xc0>)
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	d00f      	beq.n	800c400 <TIM_OC4_SetConfig+0x80>
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	4a18      	ldr	r2, [pc, #96]	; (800c444 <TIM_OC4_SetConfig+0xc4>)
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	d00b      	beq.n	800c400 <TIM_OC4_SetConfig+0x80>
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	4a17      	ldr	r2, [pc, #92]	; (800c448 <TIM_OC4_SetConfig+0xc8>)
 800c3ec:	4293      	cmp	r3, r2
 800c3ee:	d007      	beq.n	800c400 <TIM_OC4_SetConfig+0x80>
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	4a16      	ldr	r2, [pc, #88]	; (800c44c <TIM_OC4_SetConfig+0xcc>)
 800c3f4:	4293      	cmp	r3, r2
 800c3f6:	d003      	beq.n	800c400 <TIM_OC4_SetConfig+0x80>
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	4a15      	ldr	r2, [pc, #84]	; (800c450 <TIM_OC4_SetConfig+0xd0>)
 800c3fc:	4293      	cmp	r3, r2
 800c3fe:	d109      	bne.n	800c414 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c400:	697b      	ldr	r3, [r7, #20]
 800c402:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c406:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	695b      	ldr	r3, [r3, #20]
 800c40c:	019b      	lsls	r3, r3, #6
 800c40e:	697a      	ldr	r2, [r7, #20]
 800c410:	4313      	orrs	r3, r2
 800c412:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	697a      	ldr	r2, [r7, #20]
 800c418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	68fa      	ldr	r2, [r7, #12]
 800c41e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	685a      	ldr	r2, [r3, #4]
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	693a      	ldr	r2, [r7, #16]
 800c42c:	621a      	str	r2, [r3, #32]
}
 800c42e:	bf00      	nop
 800c430:	371c      	adds	r7, #28
 800c432:	46bd      	mov	sp, r7
 800c434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c438:	4770      	bx	lr
 800c43a:	bf00      	nop
 800c43c:	feff8fff 	.word	0xfeff8fff
 800c440:	40010000 	.word	0x40010000
 800c444:	40010400 	.word	0x40010400
 800c448:	40014000 	.word	0x40014000
 800c44c:	40014400 	.word	0x40014400
 800c450:	40014800 	.word	0x40014800

0800c454 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c454:	b480      	push	{r7}
 800c456:	b087      	sub	sp, #28
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
 800c45c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6a1b      	ldr	r3, [r3, #32]
 800c462:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6a1b      	ldr	r3, [r3, #32]
 800c46e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	685b      	ldr	r3, [r3, #4]
 800c474:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c47a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c47c:	68fa      	ldr	r2, [r7, #12]
 800c47e:	4b21      	ldr	r3, [pc, #132]	; (800c504 <TIM_OC5_SetConfig+0xb0>)
 800c480:	4013      	ands	r3, r2
 800c482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	68fa      	ldr	r2, [r7, #12]
 800c48a:	4313      	orrs	r3, r2
 800c48c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c494:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	689b      	ldr	r3, [r3, #8]
 800c49a:	041b      	lsls	r3, r3, #16
 800c49c:	693a      	ldr	r2, [r7, #16]
 800c49e:	4313      	orrs	r3, r2
 800c4a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	4a18      	ldr	r2, [pc, #96]	; (800c508 <TIM_OC5_SetConfig+0xb4>)
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d00f      	beq.n	800c4ca <TIM_OC5_SetConfig+0x76>
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	4a17      	ldr	r2, [pc, #92]	; (800c50c <TIM_OC5_SetConfig+0xb8>)
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	d00b      	beq.n	800c4ca <TIM_OC5_SetConfig+0x76>
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	4a16      	ldr	r2, [pc, #88]	; (800c510 <TIM_OC5_SetConfig+0xbc>)
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d007      	beq.n	800c4ca <TIM_OC5_SetConfig+0x76>
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	4a15      	ldr	r2, [pc, #84]	; (800c514 <TIM_OC5_SetConfig+0xc0>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d003      	beq.n	800c4ca <TIM_OC5_SetConfig+0x76>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	4a14      	ldr	r2, [pc, #80]	; (800c518 <TIM_OC5_SetConfig+0xc4>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d109      	bne.n	800c4de <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c4ca:	697b      	ldr	r3, [r7, #20]
 800c4cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c4d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	695b      	ldr	r3, [r3, #20]
 800c4d6:	021b      	lsls	r3, r3, #8
 800c4d8:	697a      	ldr	r2, [r7, #20]
 800c4da:	4313      	orrs	r3, r2
 800c4dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	697a      	ldr	r2, [r7, #20]
 800c4e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	68fa      	ldr	r2, [r7, #12]
 800c4e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	685a      	ldr	r2, [r3, #4]
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	693a      	ldr	r2, [r7, #16]
 800c4f6:	621a      	str	r2, [r3, #32]
}
 800c4f8:	bf00      	nop
 800c4fa:	371c      	adds	r7, #28
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c502:	4770      	bx	lr
 800c504:	fffeff8f 	.word	0xfffeff8f
 800c508:	40010000 	.word	0x40010000
 800c50c:	40010400 	.word	0x40010400
 800c510:	40014000 	.word	0x40014000
 800c514:	40014400 	.word	0x40014400
 800c518:	40014800 	.word	0x40014800

0800c51c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c51c:	b480      	push	{r7}
 800c51e:	b087      	sub	sp, #28
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
 800c524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6a1b      	ldr	r3, [r3, #32]
 800c52a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6a1b      	ldr	r3, [r3, #32]
 800c536:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	685b      	ldr	r3, [r3, #4]
 800c53c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c544:	68fa      	ldr	r2, [r7, #12]
 800c546:	4b22      	ldr	r3, [pc, #136]	; (800c5d0 <TIM_OC6_SetConfig+0xb4>)
 800c548:	4013      	ands	r3, r2
 800c54a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	021b      	lsls	r3, r3, #8
 800c552:	68fa      	ldr	r2, [r7, #12]
 800c554:	4313      	orrs	r3, r2
 800c556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c55e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	689b      	ldr	r3, [r3, #8]
 800c564:	051b      	lsls	r3, r3, #20
 800c566:	693a      	ldr	r2, [r7, #16]
 800c568:	4313      	orrs	r3, r2
 800c56a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	4a19      	ldr	r2, [pc, #100]	; (800c5d4 <TIM_OC6_SetConfig+0xb8>)
 800c570:	4293      	cmp	r3, r2
 800c572:	d00f      	beq.n	800c594 <TIM_OC6_SetConfig+0x78>
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	4a18      	ldr	r2, [pc, #96]	; (800c5d8 <TIM_OC6_SetConfig+0xbc>)
 800c578:	4293      	cmp	r3, r2
 800c57a:	d00b      	beq.n	800c594 <TIM_OC6_SetConfig+0x78>
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	4a17      	ldr	r2, [pc, #92]	; (800c5dc <TIM_OC6_SetConfig+0xc0>)
 800c580:	4293      	cmp	r3, r2
 800c582:	d007      	beq.n	800c594 <TIM_OC6_SetConfig+0x78>
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	4a16      	ldr	r2, [pc, #88]	; (800c5e0 <TIM_OC6_SetConfig+0xc4>)
 800c588:	4293      	cmp	r3, r2
 800c58a:	d003      	beq.n	800c594 <TIM_OC6_SetConfig+0x78>
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	4a15      	ldr	r2, [pc, #84]	; (800c5e4 <TIM_OC6_SetConfig+0xc8>)
 800c590:	4293      	cmp	r3, r2
 800c592:	d109      	bne.n	800c5a8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c59a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	695b      	ldr	r3, [r3, #20]
 800c5a0:	029b      	lsls	r3, r3, #10
 800c5a2:	697a      	ldr	r2, [r7, #20]
 800c5a4:	4313      	orrs	r3, r2
 800c5a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	697a      	ldr	r2, [r7, #20]
 800c5ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	68fa      	ldr	r2, [r7, #12]
 800c5b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	685a      	ldr	r2, [r3, #4]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	693a      	ldr	r2, [r7, #16]
 800c5c0:	621a      	str	r2, [r3, #32]
}
 800c5c2:	bf00      	nop
 800c5c4:	371c      	adds	r7, #28
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5cc:	4770      	bx	lr
 800c5ce:	bf00      	nop
 800c5d0:	feff8fff 	.word	0xfeff8fff
 800c5d4:	40010000 	.word	0x40010000
 800c5d8:	40010400 	.word	0x40010400
 800c5dc:	40014000 	.word	0x40014000
 800c5e0:	40014400 	.word	0x40014400
 800c5e4:	40014800 	.word	0x40014800

0800c5e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c5e8:	b480      	push	{r7}
 800c5ea:	b087      	sub	sp, #28
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	60f8      	str	r0, [r7, #12]
 800c5f0:	60b9      	str	r1, [r7, #8]
 800c5f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	6a1b      	ldr	r3, [r3, #32]
 800c5f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	6a1b      	ldr	r3, [r3, #32]
 800c5fe:	f023 0201 	bic.w	r2, r3, #1
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	699b      	ldr	r3, [r3, #24]
 800c60a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c60c:	693b      	ldr	r3, [r7, #16]
 800c60e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c612:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	011b      	lsls	r3, r3, #4
 800c618:	693a      	ldr	r2, [r7, #16]
 800c61a:	4313      	orrs	r3, r2
 800c61c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	f023 030a 	bic.w	r3, r3, #10
 800c624:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c626:	697a      	ldr	r2, [r7, #20]
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	4313      	orrs	r3, r2
 800c62c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	693a      	ldr	r2, [r7, #16]
 800c632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	697a      	ldr	r2, [r7, #20]
 800c638:	621a      	str	r2, [r3, #32]
}
 800c63a:	bf00      	nop
 800c63c:	371c      	adds	r7, #28
 800c63e:	46bd      	mov	sp, r7
 800c640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c644:	4770      	bx	lr

0800c646 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c646:	b480      	push	{r7}
 800c648:	b087      	sub	sp, #28
 800c64a:	af00      	add	r7, sp, #0
 800c64c:	60f8      	str	r0, [r7, #12]
 800c64e:	60b9      	str	r1, [r7, #8]
 800c650:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	6a1b      	ldr	r3, [r3, #32]
 800c656:	f023 0210 	bic.w	r2, r3, #16
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	699b      	ldr	r3, [r3, #24]
 800c662:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	6a1b      	ldr	r3, [r3, #32]
 800c668:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c66a:	697b      	ldr	r3, [r7, #20]
 800c66c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c670:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	031b      	lsls	r3, r3, #12
 800c676:	697a      	ldr	r2, [r7, #20]
 800c678:	4313      	orrs	r3, r2
 800c67a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c682:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	011b      	lsls	r3, r3, #4
 800c688:	693a      	ldr	r2, [r7, #16]
 800c68a:	4313      	orrs	r3, r2
 800c68c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	697a      	ldr	r2, [r7, #20]
 800c692:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	693a      	ldr	r2, [r7, #16]
 800c698:	621a      	str	r2, [r3, #32]
}
 800c69a:	bf00      	nop
 800c69c:	371c      	adds	r7, #28
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a4:	4770      	bx	lr
	...

0800c6a8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b085      	sub	sp, #20
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
 800c6b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	689b      	ldr	r3, [r3, #8]
 800c6b6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c6b8:	68fa      	ldr	r2, [r7, #12]
 800c6ba:	4b09      	ldr	r3, [pc, #36]	; (800c6e0 <TIM_ITRx_SetConfig+0x38>)
 800c6bc:	4013      	ands	r3, r2
 800c6be:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c6c0:	683a      	ldr	r2, [r7, #0]
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	4313      	orrs	r3, r2
 800c6c6:	f043 0307 	orr.w	r3, r3, #7
 800c6ca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	68fa      	ldr	r2, [r7, #12]
 800c6d0:	609a      	str	r2, [r3, #8]
}
 800c6d2:	bf00      	nop
 800c6d4:	3714      	adds	r7, #20
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6dc:	4770      	bx	lr
 800c6de:	bf00      	nop
 800c6e0:	ffcfff8f 	.word	0xffcfff8f

0800c6e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	b087      	sub	sp, #28
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	60f8      	str	r0, [r7, #12]
 800c6ec:	60b9      	str	r1, [r7, #8]
 800c6ee:	607a      	str	r2, [r7, #4]
 800c6f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	689b      	ldr	r3, [r3, #8]
 800c6f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c6fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	021a      	lsls	r2, r3, #8
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	431a      	orrs	r2, r3
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	4313      	orrs	r3, r2
 800c70c:	697a      	ldr	r2, [r7, #20]
 800c70e:	4313      	orrs	r3, r2
 800c710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	697a      	ldr	r2, [r7, #20]
 800c716:	609a      	str	r2, [r3, #8]
}
 800c718:	bf00      	nop
 800c71a:	371c      	adds	r7, #28
 800c71c:	46bd      	mov	sp, r7
 800c71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c722:	4770      	bx	lr

0800c724 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c724:	b480      	push	{r7}
 800c726:	b087      	sub	sp, #28
 800c728:	af00      	add	r7, sp, #0
 800c72a:	60f8      	str	r0, [r7, #12]
 800c72c:	60b9      	str	r1, [r7, #8]
 800c72e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	f003 031f 	and.w	r3, r3, #31
 800c736:	2201      	movs	r2, #1
 800c738:	fa02 f303 	lsl.w	r3, r2, r3
 800c73c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	6a1a      	ldr	r2, [r3, #32]
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	43db      	mvns	r3, r3
 800c746:	401a      	ands	r2, r3
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	6a1a      	ldr	r2, [r3, #32]
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	f003 031f 	and.w	r3, r3, #31
 800c756:	6879      	ldr	r1, [r7, #4]
 800c758:	fa01 f303 	lsl.w	r3, r1, r3
 800c75c:	431a      	orrs	r2, r3
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	621a      	str	r2, [r3, #32]
}
 800c762:	bf00      	nop
 800c764:	371c      	adds	r7, #28
 800c766:	46bd      	mov	sp, r7
 800c768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76c:	4770      	bx	lr
	...

0800c770 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c770:	b480      	push	{r7}
 800c772:	b085      	sub	sp, #20
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
 800c778:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c780:	2b01      	cmp	r3, #1
 800c782:	d101      	bne.n	800c788 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c784:	2302      	movs	r3, #2
 800c786:	e06d      	b.n	800c864 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2201      	movs	r2, #1
 800c78c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2202      	movs	r2, #2
 800c794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	685b      	ldr	r3, [r3, #4]
 800c79e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	689b      	ldr	r3, [r3, #8]
 800c7a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	4a30      	ldr	r2, [pc, #192]	; (800c870 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d004      	beq.n	800c7bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	4a2f      	ldr	r2, [pc, #188]	; (800c874 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c7b8:	4293      	cmp	r3, r2
 800c7ba:	d108      	bne.n	800c7ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c7c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	685b      	ldr	r3, [r3, #4]
 800c7c8:	68fa      	ldr	r2, [r7, #12]
 800c7ca:	4313      	orrs	r3, r2
 800c7cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	68fa      	ldr	r2, [r7, #12]
 800c7dc:	4313      	orrs	r3, r2
 800c7de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	68fa      	ldr	r2, [r7, #12]
 800c7e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	4a20      	ldr	r2, [pc, #128]	; (800c870 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c7ee:	4293      	cmp	r3, r2
 800c7f0:	d022      	beq.n	800c838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7fa:	d01d      	beq.n	800c838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	4a1d      	ldr	r2, [pc, #116]	; (800c878 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c802:	4293      	cmp	r3, r2
 800c804:	d018      	beq.n	800c838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	4a1c      	ldr	r2, [pc, #112]	; (800c87c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c80c:	4293      	cmp	r3, r2
 800c80e:	d013      	beq.n	800c838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	4a1a      	ldr	r2, [pc, #104]	; (800c880 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c816:	4293      	cmp	r3, r2
 800c818:	d00e      	beq.n	800c838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	4a15      	ldr	r2, [pc, #84]	; (800c874 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c820:	4293      	cmp	r3, r2
 800c822:	d009      	beq.n	800c838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	4a16      	ldr	r2, [pc, #88]	; (800c884 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c82a:	4293      	cmp	r3, r2
 800c82c:	d004      	beq.n	800c838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	4a15      	ldr	r2, [pc, #84]	; (800c888 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c834:	4293      	cmp	r3, r2
 800c836:	d10c      	bne.n	800c852 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c83e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	689b      	ldr	r3, [r3, #8]
 800c844:	68ba      	ldr	r2, [r7, #8]
 800c846:	4313      	orrs	r3, r2
 800c848:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	68ba      	ldr	r2, [r7, #8]
 800c850:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2201      	movs	r2, #1
 800c856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2200      	movs	r2, #0
 800c85e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c862:	2300      	movs	r3, #0
}
 800c864:	4618      	mov	r0, r3
 800c866:	3714      	adds	r7, #20
 800c868:	46bd      	mov	sp, r7
 800c86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86e:	4770      	bx	lr
 800c870:	40010000 	.word	0x40010000
 800c874:	40010400 	.word	0x40010400
 800c878:	40000400 	.word	0x40000400
 800c87c:	40000800 	.word	0x40000800
 800c880:	40000c00 	.word	0x40000c00
 800c884:	40001800 	.word	0x40001800
 800c888:	40014000 	.word	0x40014000

0800c88c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c88c:	b480      	push	{r7}
 800c88e:	b083      	sub	sp, #12
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c894:	bf00      	nop
 800c896:	370c      	adds	r7, #12
 800c898:	46bd      	mov	sp, r7
 800c89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89e:	4770      	bx	lr

0800c8a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b083      	sub	sp, #12
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c8a8:	bf00      	nop
 800c8aa:	370c      	adds	r7, #12
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b2:	4770      	bx	lr

0800c8b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	b083      	sub	sp, #12
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c8bc:	bf00      	nop
 800c8be:	370c      	adds	r7, #12
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c6:	4770      	bx	lr

0800c8c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b082      	sub	sp, #8
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d101      	bne.n	800c8da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	e042      	b.n	800c960 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d106      	bne.n	800c8f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f7f4 fec7 	bl	8001680 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2224      	movs	r2, #36	; 0x24
 800c8f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	681a      	ldr	r2, [r3, #0]
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	f022 0201 	bic.w	r2, r2, #1
 800c908:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f000 f82c 	bl	800c968 <UART_SetConfig>
 800c910:	4603      	mov	r3, r0
 800c912:	2b01      	cmp	r3, #1
 800c914:	d101      	bne.n	800c91a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c916:	2301      	movs	r3, #1
 800c918:	e022      	b.n	800c960 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d002      	beq.n	800c928 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f000 fd88 	bl	800d438 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	685a      	ldr	r2, [r3, #4]
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c936:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	689a      	ldr	r2, [r3, #8]
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c946:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	681a      	ldr	r2, [r3, #0]
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f042 0201 	orr.w	r2, r2, #1
 800c956:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f000 fe0f 	bl	800d57c <UART_CheckIdleState>
 800c95e:	4603      	mov	r3, r0
}
 800c960:	4618      	mov	r0, r3
 800c962:	3708      	adds	r7, #8
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}

0800c968 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c96c:	b092      	sub	sp, #72	; 0x48
 800c96e:	af00      	add	r7, sp, #0
 800c970:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c972:	2300      	movs	r3, #0
 800c974:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	689a      	ldr	r2, [r3, #8]
 800c97c:	697b      	ldr	r3, [r7, #20]
 800c97e:	691b      	ldr	r3, [r3, #16]
 800c980:	431a      	orrs	r2, r3
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	695b      	ldr	r3, [r3, #20]
 800c986:	431a      	orrs	r2, r3
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	69db      	ldr	r3, [r3, #28]
 800c98c:	4313      	orrs	r3, r2
 800c98e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c990:	697b      	ldr	r3, [r7, #20]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	681a      	ldr	r2, [r3, #0]
 800c996:	4bbe      	ldr	r3, [pc, #760]	; (800cc90 <UART_SetConfig+0x328>)
 800c998:	4013      	ands	r3, r2
 800c99a:	697a      	ldr	r2, [r7, #20]
 800c99c:	6812      	ldr	r2, [r2, #0]
 800c99e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c9a0:	430b      	orrs	r3, r1
 800c9a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	685b      	ldr	r3, [r3, #4]
 800c9aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c9ae:	697b      	ldr	r3, [r7, #20]
 800c9b0:	68da      	ldr	r2, [r3, #12]
 800c9b2:	697b      	ldr	r3, [r7, #20]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	430a      	orrs	r2, r1
 800c9b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	699b      	ldr	r3, [r3, #24]
 800c9be:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c9c0:	697b      	ldr	r3, [r7, #20]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	4ab3      	ldr	r2, [pc, #716]	; (800cc94 <UART_SetConfig+0x32c>)
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	d004      	beq.n	800c9d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	6a1b      	ldr	r3, [r3, #32]
 800c9ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c9d0:	4313      	orrs	r3, r2
 800c9d2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	689a      	ldr	r2, [r3, #8]
 800c9da:	4baf      	ldr	r3, [pc, #700]	; (800cc98 <UART_SetConfig+0x330>)
 800c9dc:	4013      	ands	r3, r2
 800c9de:	697a      	ldr	r2, [r7, #20]
 800c9e0:	6812      	ldr	r2, [r2, #0]
 800c9e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c9e4:	430b      	orrs	r3, r1
 800c9e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ee:	f023 010f 	bic.w	r1, r3, #15
 800c9f2:	697b      	ldr	r3, [r7, #20]
 800c9f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c9f6:	697b      	ldr	r3, [r7, #20]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	430a      	orrs	r2, r1
 800c9fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	4aa6      	ldr	r2, [pc, #664]	; (800cc9c <UART_SetConfig+0x334>)
 800ca04:	4293      	cmp	r3, r2
 800ca06:	d177      	bne.n	800caf8 <UART_SetConfig+0x190>
 800ca08:	4ba5      	ldr	r3, [pc, #660]	; (800cca0 <UART_SetConfig+0x338>)
 800ca0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ca10:	2b28      	cmp	r3, #40	; 0x28
 800ca12:	d86d      	bhi.n	800caf0 <UART_SetConfig+0x188>
 800ca14:	a201      	add	r2, pc, #4	; (adr r2, 800ca1c <UART_SetConfig+0xb4>)
 800ca16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca1a:	bf00      	nop
 800ca1c:	0800cac1 	.word	0x0800cac1
 800ca20:	0800caf1 	.word	0x0800caf1
 800ca24:	0800caf1 	.word	0x0800caf1
 800ca28:	0800caf1 	.word	0x0800caf1
 800ca2c:	0800caf1 	.word	0x0800caf1
 800ca30:	0800caf1 	.word	0x0800caf1
 800ca34:	0800caf1 	.word	0x0800caf1
 800ca38:	0800caf1 	.word	0x0800caf1
 800ca3c:	0800cac9 	.word	0x0800cac9
 800ca40:	0800caf1 	.word	0x0800caf1
 800ca44:	0800caf1 	.word	0x0800caf1
 800ca48:	0800caf1 	.word	0x0800caf1
 800ca4c:	0800caf1 	.word	0x0800caf1
 800ca50:	0800caf1 	.word	0x0800caf1
 800ca54:	0800caf1 	.word	0x0800caf1
 800ca58:	0800caf1 	.word	0x0800caf1
 800ca5c:	0800cad1 	.word	0x0800cad1
 800ca60:	0800caf1 	.word	0x0800caf1
 800ca64:	0800caf1 	.word	0x0800caf1
 800ca68:	0800caf1 	.word	0x0800caf1
 800ca6c:	0800caf1 	.word	0x0800caf1
 800ca70:	0800caf1 	.word	0x0800caf1
 800ca74:	0800caf1 	.word	0x0800caf1
 800ca78:	0800caf1 	.word	0x0800caf1
 800ca7c:	0800cad9 	.word	0x0800cad9
 800ca80:	0800caf1 	.word	0x0800caf1
 800ca84:	0800caf1 	.word	0x0800caf1
 800ca88:	0800caf1 	.word	0x0800caf1
 800ca8c:	0800caf1 	.word	0x0800caf1
 800ca90:	0800caf1 	.word	0x0800caf1
 800ca94:	0800caf1 	.word	0x0800caf1
 800ca98:	0800caf1 	.word	0x0800caf1
 800ca9c:	0800cae1 	.word	0x0800cae1
 800caa0:	0800caf1 	.word	0x0800caf1
 800caa4:	0800caf1 	.word	0x0800caf1
 800caa8:	0800caf1 	.word	0x0800caf1
 800caac:	0800caf1 	.word	0x0800caf1
 800cab0:	0800caf1 	.word	0x0800caf1
 800cab4:	0800caf1 	.word	0x0800caf1
 800cab8:	0800caf1 	.word	0x0800caf1
 800cabc:	0800cae9 	.word	0x0800cae9
 800cac0:	2301      	movs	r3, #1
 800cac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cac6:	e222      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cac8:	2304      	movs	r3, #4
 800caca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cace:	e21e      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cad0:	2308      	movs	r3, #8
 800cad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cad6:	e21a      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cad8:	2310      	movs	r3, #16
 800cada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cade:	e216      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cae0:	2320      	movs	r3, #32
 800cae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cae6:	e212      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cae8:	2340      	movs	r3, #64	; 0x40
 800caea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800caee:	e20e      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800caf0:	2380      	movs	r3, #128	; 0x80
 800caf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800caf6:	e20a      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800caf8:	697b      	ldr	r3, [r7, #20]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	4a69      	ldr	r2, [pc, #420]	; (800cca4 <UART_SetConfig+0x33c>)
 800cafe:	4293      	cmp	r3, r2
 800cb00:	d130      	bne.n	800cb64 <UART_SetConfig+0x1fc>
 800cb02:	4b67      	ldr	r3, [pc, #412]	; (800cca0 <UART_SetConfig+0x338>)
 800cb04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb06:	f003 0307 	and.w	r3, r3, #7
 800cb0a:	2b05      	cmp	r3, #5
 800cb0c:	d826      	bhi.n	800cb5c <UART_SetConfig+0x1f4>
 800cb0e:	a201      	add	r2, pc, #4	; (adr r2, 800cb14 <UART_SetConfig+0x1ac>)
 800cb10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb14:	0800cb2d 	.word	0x0800cb2d
 800cb18:	0800cb35 	.word	0x0800cb35
 800cb1c:	0800cb3d 	.word	0x0800cb3d
 800cb20:	0800cb45 	.word	0x0800cb45
 800cb24:	0800cb4d 	.word	0x0800cb4d
 800cb28:	0800cb55 	.word	0x0800cb55
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb32:	e1ec      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cb34:	2304      	movs	r3, #4
 800cb36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb3a:	e1e8      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cb3c:	2308      	movs	r3, #8
 800cb3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb42:	e1e4      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cb44:	2310      	movs	r3, #16
 800cb46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb4a:	e1e0      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cb4c:	2320      	movs	r3, #32
 800cb4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb52:	e1dc      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cb54:	2340      	movs	r3, #64	; 0x40
 800cb56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb5a:	e1d8      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cb5c:	2380      	movs	r3, #128	; 0x80
 800cb5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb62:	e1d4      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cb64:	697b      	ldr	r3, [r7, #20]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	4a4f      	ldr	r2, [pc, #316]	; (800cca8 <UART_SetConfig+0x340>)
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d130      	bne.n	800cbd0 <UART_SetConfig+0x268>
 800cb6e:	4b4c      	ldr	r3, [pc, #304]	; (800cca0 <UART_SetConfig+0x338>)
 800cb70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb72:	f003 0307 	and.w	r3, r3, #7
 800cb76:	2b05      	cmp	r3, #5
 800cb78:	d826      	bhi.n	800cbc8 <UART_SetConfig+0x260>
 800cb7a:	a201      	add	r2, pc, #4	; (adr r2, 800cb80 <UART_SetConfig+0x218>)
 800cb7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb80:	0800cb99 	.word	0x0800cb99
 800cb84:	0800cba1 	.word	0x0800cba1
 800cb88:	0800cba9 	.word	0x0800cba9
 800cb8c:	0800cbb1 	.word	0x0800cbb1
 800cb90:	0800cbb9 	.word	0x0800cbb9
 800cb94:	0800cbc1 	.word	0x0800cbc1
 800cb98:	2300      	movs	r3, #0
 800cb9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb9e:	e1b6      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cba0:	2304      	movs	r3, #4
 800cba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cba6:	e1b2      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cba8:	2308      	movs	r3, #8
 800cbaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbae:	e1ae      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cbb0:	2310      	movs	r3, #16
 800cbb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbb6:	e1aa      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cbb8:	2320      	movs	r3, #32
 800cbba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbbe:	e1a6      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cbc0:	2340      	movs	r3, #64	; 0x40
 800cbc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbc6:	e1a2      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cbc8:	2380      	movs	r3, #128	; 0x80
 800cbca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbce:	e19e      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	4a35      	ldr	r2, [pc, #212]	; (800ccac <UART_SetConfig+0x344>)
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d130      	bne.n	800cc3c <UART_SetConfig+0x2d4>
 800cbda:	4b31      	ldr	r3, [pc, #196]	; (800cca0 <UART_SetConfig+0x338>)
 800cbdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbde:	f003 0307 	and.w	r3, r3, #7
 800cbe2:	2b05      	cmp	r3, #5
 800cbe4:	d826      	bhi.n	800cc34 <UART_SetConfig+0x2cc>
 800cbe6:	a201      	add	r2, pc, #4	; (adr r2, 800cbec <UART_SetConfig+0x284>)
 800cbe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbec:	0800cc05 	.word	0x0800cc05
 800cbf0:	0800cc0d 	.word	0x0800cc0d
 800cbf4:	0800cc15 	.word	0x0800cc15
 800cbf8:	0800cc1d 	.word	0x0800cc1d
 800cbfc:	0800cc25 	.word	0x0800cc25
 800cc00:	0800cc2d 	.word	0x0800cc2d
 800cc04:	2300      	movs	r3, #0
 800cc06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc0a:	e180      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cc0c:	2304      	movs	r3, #4
 800cc0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc12:	e17c      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cc14:	2308      	movs	r3, #8
 800cc16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc1a:	e178      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cc1c:	2310      	movs	r3, #16
 800cc1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc22:	e174      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cc24:	2320      	movs	r3, #32
 800cc26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc2a:	e170      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cc2c:	2340      	movs	r3, #64	; 0x40
 800cc2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc32:	e16c      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cc34:	2380      	movs	r3, #128	; 0x80
 800cc36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc3a:	e168      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cc3c:	697b      	ldr	r3, [r7, #20]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	4a1b      	ldr	r2, [pc, #108]	; (800ccb0 <UART_SetConfig+0x348>)
 800cc42:	4293      	cmp	r3, r2
 800cc44:	d142      	bne.n	800cccc <UART_SetConfig+0x364>
 800cc46:	4b16      	ldr	r3, [pc, #88]	; (800cca0 <UART_SetConfig+0x338>)
 800cc48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc4a:	f003 0307 	and.w	r3, r3, #7
 800cc4e:	2b05      	cmp	r3, #5
 800cc50:	d838      	bhi.n	800ccc4 <UART_SetConfig+0x35c>
 800cc52:	a201      	add	r2, pc, #4	; (adr r2, 800cc58 <UART_SetConfig+0x2f0>)
 800cc54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc58:	0800cc71 	.word	0x0800cc71
 800cc5c:	0800cc79 	.word	0x0800cc79
 800cc60:	0800cc81 	.word	0x0800cc81
 800cc64:	0800cc89 	.word	0x0800cc89
 800cc68:	0800ccb5 	.word	0x0800ccb5
 800cc6c:	0800ccbd 	.word	0x0800ccbd
 800cc70:	2300      	movs	r3, #0
 800cc72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc76:	e14a      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cc78:	2304      	movs	r3, #4
 800cc7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc7e:	e146      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cc80:	2308      	movs	r3, #8
 800cc82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc86:	e142      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cc88:	2310      	movs	r3, #16
 800cc8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc8e:	e13e      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cc90:	cfff69f3 	.word	0xcfff69f3
 800cc94:	58000c00 	.word	0x58000c00
 800cc98:	11fff4ff 	.word	0x11fff4ff
 800cc9c:	40011000 	.word	0x40011000
 800cca0:	58024400 	.word	0x58024400
 800cca4:	40004400 	.word	0x40004400
 800cca8:	40004800 	.word	0x40004800
 800ccac:	40004c00 	.word	0x40004c00
 800ccb0:	40005000 	.word	0x40005000
 800ccb4:	2320      	movs	r3, #32
 800ccb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccba:	e128      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800ccbc:	2340      	movs	r3, #64	; 0x40
 800ccbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccc2:	e124      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800ccc4:	2380      	movs	r3, #128	; 0x80
 800ccc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccca:	e120      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cccc:	697b      	ldr	r3, [r7, #20]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	4acb      	ldr	r2, [pc, #812]	; (800d000 <UART_SetConfig+0x698>)
 800ccd2:	4293      	cmp	r3, r2
 800ccd4:	d176      	bne.n	800cdc4 <UART_SetConfig+0x45c>
 800ccd6:	4bcb      	ldr	r3, [pc, #812]	; (800d004 <UART_SetConfig+0x69c>)
 800ccd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ccde:	2b28      	cmp	r3, #40	; 0x28
 800cce0:	d86c      	bhi.n	800cdbc <UART_SetConfig+0x454>
 800cce2:	a201      	add	r2, pc, #4	; (adr r2, 800cce8 <UART_SetConfig+0x380>)
 800cce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cce8:	0800cd8d 	.word	0x0800cd8d
 800ccec:	0800cdbd 	.word	0x0800cdbd
 800ccf0:	0800cdbd 	.word	0x0800cdbd
 800ccf4:	0800cdbd 	.word	0x0800cdbd
 800ccf8:	0800cdbd 	.word	0x0800cdbd
 800ccfc:	0800cdbd 	.word	0x0800cdbd
 800cd00:	0800cdbd 	.word	0x0800cdbd
 800cd04:	0800cdbd 	.word	0x0800cdbd
 800cd08:	0800cd95 	.word	0x0800cd95
 800cd0c:	0800cdbd 	.word	0x0800cdbd
 800cd10:	0800cdbd 	.word	0x0800cdbd
 800cd14:	0800cdbd 	.word	0x0800cdbd
 800cd18:	0800cdbd 	.word	0x0800cdbd
 800cd1c:	0800cdbd 	.word	0x0800cdbd
 800cd20:	0800cdbd 	.word	0x0800cdbd
 800cd24:	0800cdbd 	.word	0x0800cdbd
 800cd28:	0800cd9d 	.word	0x0800cd9d
 800cd2c:	0800cdbd 	.word	0x0800cdbd
 800cd30:	0800cdbd 	.word	0x0800cdbd
 800cd34:	0800cdbd 	.word	0x0800cdbd
 800cd38:	0800cdbd 	.word	0x0800cdbd
 800cd3c:	0800cdbd 	.word	0x0800cdbd
 800cd40:	0800cdbd 	.word	0x0800cdbd
 800cd44:	0800cdbd 	.word	0x0800cdbd
 800cd48:	0800cda5 	.word	0x0800cda5
 800cd4c:	0800cdbd 	.word	0x0800cdbd
 800cd50:	0800cdbd 	.word	0x0800cdbd
 800cd54:	0800cdbd 	.word	0x0800cdbd
 800cd58:	0800cdbd 	.word	0x0800cdbd
 800cd5c:	0800cdbd 	.word	0x0800cdbd
 800cd60:	0800cdbd 	.word	0x0800cdbd
 800cd64:	0800cdbd 	.word	0x0800cdbd
 800cd68:	0800cdad 	.word	0x0800cdad
 800cd6c:	0800cdbd 	.word	0x0800cdbd
 800cd70:	0800cdbd 	.word	0x0800cdbd
 800cd74:	0800cdbd 	.word	0x0800cdbd
 800cd78:	0800cdbd 	.word	0x0800cdbd
 800cd7c:	0800cdbd 	.word	0x0800cdbd
 800cd80:	0800cdbd 	.word	0x0800cdbd
 800cd84:	0800cdbd 	.word	0x0800cdbd
 800cd88:	0800cdb5 	.word	0x0800cdb5
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd92:	e0bc      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cd94:	2304      	movs	r3, #4
 800cd96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd9a:	e0b8      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cd9c:	2308      	movs	r3, #8
 800cd9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cda2:	e0b4      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cda4:	2310      	movs	r3, #16
 800cda6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdaa:	e0b0      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cdac:	2320      	movs	r3, #32
 800cdae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdb2:	e0ac      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cdb4:	2340      	movs	r3, #64	; 0x40
 800cdb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdba:	e0a8      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cdbc:	2380      	movs	r3, #128	; 0x80
 800cdbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdc2:	e0a4      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	4a8f      	ldr	r2, [pc, #572]	; (800d008 <UART_SetConfig+0x6a0>)
 800cdca:	4293      	cmp	r3, r2
 800cdcc:	d130      	bne.n	800ce30 <UART_SetConfig+0x4c8>
 800cdce:	4b8d      	ldr	r3, [pc, #564]	; (800d004 <UART_SetConfig+0x69c>)
 800cdd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdd2:	f003 0307 	and.w	r3, r3, #7
 800cdd6:	2b05      	cmp	r3, #5
 800cdd8:	d826      	bhi.n	800ce28 <UART_SetConfig+0x4c0>
 800cdda:	a201      	add	r2, pc, #4	; (adr r2, 800cde0 <UART_SetConfig+0x478>)
 800cddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cde0:	0800cdf9 	.word	0x0800cdf9
 800cde4:	0800ce01 	.word	0x0800ce01
 800cde8:	0800ce09 	.word	0x0800ce09
 800cdec:	0800ce11 	.word	0x0800ce11
 800cdf0:	0800ce19 	.word	0x0800ce19
 800cdf4:	0800ce21 	.word	0x0800ce21
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdfe:	e086      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800ce00:	2304      	movs	r3, #4
 800ce02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce06:	e082      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800ce08:	2308      	movs	r3, #8
 800ce0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce0e:	e07e      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800ce10:	2310      	movs	r3, #16
 800ce12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce16:	e07a      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800ce18:	2320      	movs	r3, #32
 800ce1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce1e:	e076      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800ce20:	2340      	movs	r3, #64	; 0x40
 800ce22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce26:	e072      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800ce28:	2380      	movs	r3, #128	; 0x80
 800ce2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce2e:	e06e      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	4a75      	ldr	r2, [pc, #468]	; (800d00c <UART_SetConfig+0x6a4>)
 800ce36:	4293      	cmp	r3, r2
 800ce38:	d130      	bne.n	800ce9c <UART_SetConfig+0x534>
 800ce3a:	4b72      	ldr	r3, [pc, #456]	; (800d004 <UART_SetConfig+0x69c>)
 800ce3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce3e:	f003 0307 	and.w	r3, r3, #7
 800ce42:	2b05      	cmp	r3, #5
 800ce44:	d826      	bhi.n	800ce94 <UART_SetConfig+0x52c>
 800ce46:	a201      	add	r2, pc, #4	; (adr r2, 800ce4c <UART_SetConfig+0x4e4>)
 800ce48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce4c:	0800ce65 	.word	0x0800ce65
 800ce50:	0800ce6d 	.word	0x0800ce6d
 800ce54:	0800ce75 	.word	0x0800ce75
 800ce58:	0800ce7d 	.word	0x0800ce7d
 800ce5c:	0800ce85 	.word	0x0800ce85
 800ce60:	0800ce8d 	.word	0x0800ce8d
 800ce64:	2300      	movs	r3, #0
 800ce66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce6a:	e050      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800ce6c:	2304      	movs	r3, #4
 800ce6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce72:	e04c      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800ce74:	2308      	movs	r3, #8
 800ce76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce7a:	e048      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800ce7c:	2310      	movs	r3, #16
 800ce7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce82:	e044      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800ce84:	2320      	movs	r3, #32
 800ce86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce8a:	e040      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800ce8c:	2340      	movs	r3, #64	; 0x40
 800ce8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce92:	e03c      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800ce94:	2380      	movs	r3, #128	; 0x80
 800ce96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce9a:	e038      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	4a5b      	ldr	r2, [pc, #364]	; (800d010 <UART_SetConfig+0x6a8>)
 800cea2:	4293      	cmp	r3, r2
 800cea4:	d130      	bne.n	800cf08 <UART_SetConfig+0x5a0>
 800cea6:	4b57      	ldr	r3, [pc, #348]	; (800d004 <UART_SetConfig+0x69c>)
 800cea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ceaa:	f003 0307 	and.w	r3, r3, #7
 800ceae:	2b05      	cmp	r3, #5
 800ceb0:	d826      	bhi.n	800cf00 <UART_SetConfig+0x598>
 800ceb2:	a201      	add	r2, pc, #4	; (adr r2, 800ceb8 <UART_SetConfig+0x550>)
 800ceb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceb8:	0800ced1 	.word	0x0800ced1
 800cebc:	0800ced9 	.word	0x0800ced9
 800cec0:	0800cee1 	.word	0x0800cee1
 800cec4:	0800cee9 	.word	0x0800cee9
 800cec8:	0800cef1 	.word	0x0800cef1
 800cecc:	0800cef9 	.word	0x0800cef9
 800ced0:	2302      	movs	r3, #2
 800ced2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ced6:	e01a      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800ced8:	2304      	movs	r3, #4
 800ceda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cede:	e016      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cee0:	2308      	movs	r3, #8
 800cee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cee6:	e012      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cee8:	2310      	movs	r3, #16
 800ceea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ceee:	e00e      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cef0:	2320      	movs	r3, #32
 800cef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cef6:	e00a      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cef8:	2340      	movs	r3, #64	; 0x40
 800cefa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cefe:	e006      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cf00:	2380      	movs	r3, #128	; 0x80
 800cf02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf06:	e002      	b.n	800cf0e <UART_SetConfig+0x5a6>
 800cf08:	2380      	movs	r3, #128	; 0x80
 800cf0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	4a3f      	ldr	r2, [pc, #252]	; (800d010 <UART_SetConfig+0x6a8>)
 800cf14:	4293      	cmp	r3, r2
 800cf16:	f040 80f8 	bne.w	800d10a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cf1a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cf1e:	2b20      	cmp	r3, #32
 800cf20:	dc46      	bgt.n	800cfb0 <UART_SetConfig+0x648>
 800cf22:	2b02      	cmp	r3, #2
 800cf24:	f2c0 8082 	blt.w	800d02c <UART_SetConfig+0x6c4>
 800cf28:	3b02      	subs	r3, #2
 800cf2a:	2b1e      	cmp	r3, #30
 800cf2c:	d87e      	bhi.n	800d02c <UART_SetConfig+0x6c4>
 800cf2e:	a201      	add	r2, pc, #4	; (adr r2, 800cf34 <UART_SetConfig+0x5cc>)
 800cf30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf34:	0800cfb7 	.word	0x0800cfb7
 800cf38:	0800d02d 	.word	0x0800d02d
 800cf3c:	0800cfbf 	.word	0x0800cfbf
 800cf40:	0800d02d 	.word	0x0800d02d
 800cf44:	0800d02d 	.word	0x0800d02d
 800cf48:	0800d02d 	.word	0x0800d02d
 800cf4c:	0800cfcf 	.word	0x0800cfcf
 800cf50:	0800d02d 	.word	0x0800d02d
 800cf54:	0800d02d 	.word	0x0800d02d
 800cf58:	0800d02d 	.word	0x0800d02d
 800cf5c:	0800d02d 	.word	0x0800d02d
 800cf60:	0800d02d 	.word	0x0800d02d
 800cf64:	0800d02d 	.word	0x0800d02d
 800cf68:	0800d02d 	.word	0x0800d02d
 800cf6c:	0800cfdf 	.word	0x0800cfdf
 800cf70:	0800d02d 	.word	0x0800d02d
 800cf74:	0800d02d 	.word	0x0800d02d
 800cf78:	0800d02d 	.word	0x0800d02d
 800cf7c:	0800d02d 	.word	0x0800d02d
 800cf80:	0800d02d 	.word	0x0800d02d
 800cf84:	0800d02d 	.word	0x0800d02d
 800cf88:	0800d02d 	.word	0x0800d02d
 800cf8c:	0800d02d 	.word	0x0800d02d
 800cf90:	0800d02d 	.word	0x0800d02d
 800cf94:	0800d02d 	.word	0x0800d02d
 800cf98:	0800d02d 	.word	0x0800d02d
 800cf9c:	0800d02d 	.word	0x0800d02d
 800cfa0:	0800d02d 	.word	0x0800d02d
 800cfa4:	0800d02d 	.word	0x0800d02d
 800cfa8:	0800d02d 	.word	0x0800d02d
 800cfac:	0800d01f 	.word	0x0800d01f
 800cfb0:	2b40      	cmp	r3, #64	; 0x40
 800cfb2:	d037      	beq.n	800d024 <UART_SetConfig+0x6bc>
 800cfb4:	e03a      	b.n	800d02c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cfb6:	f7fd fa23 	bl	800a400 <HAL_RCCEx_GetD3PCLK1Freq>
 800cfba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cfbc:	e03c      	b.n	800d038 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cfbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f7fd fa32 	bl	800a42c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cfc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfcc:	e034      	b.n	800d038 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cfce:	f107 0318 	add.w	r3, r7, #24
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f7fd fb7e 	bl	800a6d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cfd8:	69fb      	ldr	r3, [r7, #28]
 800cfda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfdc:	e02c      	b.n	800d038 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cfde:	4b09      	ldr	r3, [pc, #36]	; (800d004 <UART_SetConfig+0x69c>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	f003 0320 	and.w	r3, r3, #32
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d016      	beq.n	800d018 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cfea:	4b06      	ldr	r3, [pc, #24]	; (800d004 <UART_SetConfig+0x69c>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	08db      	lsrs	r3, r3, #3
 800cff0:	f003 0303 	and.w	r3, r3, #3
 800cff4:	4a07      	ldr	r2, [pc, #28]	; (800d014 <UART_SetConfig+0x6ac>)
 800cff6:	fa22 f303 	lsr.w	r3, r2, r3
 800cffa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cffc:	e01c      	b.n	800d038 <UART_SetConfig+0x6d0>
 800cffe:	bf00      	nop
 800d000:	40011400 	.word	0x40011400
 800d004:	58024400 	.word	0x58024400
 800d008:	40007800 	.word	0x40007800
 800d00c:	40007c00 	.word	0x40007c00
 800d010:	58000c00 	.word	0x58000c00
 800d014:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d018:	4b9d      	ldr	r3, [pc, #628]	; (800d290 <UART_SetConfig+0x928>)
 800d01a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d01c:	e00c      	b.n	800d038 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d01e:	4b9d      	ldr	r3, [pc, #628]	; (800d294 <UART_SetConfig+0x92c>)
 800d020:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d022:	e009      	b.n	800d038 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d024:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d028:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d02a:	e005      	b.n	800d038 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d02c:	2300      	movs	r3, #0
 800d02e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d030:	2301      	movs	r3, #1
 800d032:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d036:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	f000 81de 	beq.w	800d3fc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d040:	697b      	ldr	r3, [r7, #20]
 800d042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d044:	4a94      	ldr	r2, [pc, #592]	; (800d298 <UART_SetConfig+0x930>)
 800d046:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d04a:	461a      	mov	r2, r3
 800d04c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d04e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d052:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d054:	697b      	ldr	r3, [r7, #20]
 800d056:	685a      	ldr	r2, [r3, #4]
 800d058:	4613      	mov	r3, r2
 800d05a:	005b      	lsls	r3, r3, #1
 800d05c:	4413      	add	r3, r2
 800d05e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d060:	429a      	cmp	r2, r3
 800d062:	d305      	bcc.n	800d070 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d064:	697b      	ldr	r3, [r7, #20]
 800d066:	685b      	ldr	r3, [r3, #4]
 800d068:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d06a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d06c:	429a      	cmp	r2, r3
 800d06e:	d903      	bls.n	800d078 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d070:	2301      	movs	r3, #1
 800d072:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d076:	e1c1      	b.n	800d3fc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d07a:	2200      	movs	r2, #0
 800d07c:	60bb      	str	r3, [r7, #8]
 800d07e:	60fa      	str	r2, [r7, #12]
 800d080:	697b      	ldr	r3, [r7, #20]
 800d082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d084:	4a84      	ldr	r2, [pc, #528]	; (800d298 <UART_SetConfig+0x930>)
 800d086:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d08a:	b29b      	uxth	r3, r3
 800d08c:	2200      	movs	r2, #0
 800d08e:	603b      	str	r3, [r7, #0]
 800d090:	607a      	str	r2, [r7, #4]
 800d092:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d096:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d09a:	f7f3 f91d 	bl	80002d8 <__aeabi_uldivmod>
 800d09e:	4602      	mov	r2, r0
 800d0a0:	460b      	mov	r3, r1
 800d0a2:	4610      	mov	r0, r2
 800d0a4:	4619      	mov	r1, r3
 800d0a6:	f04f 0200 	mov.w	r2, #0
 800d0aa:	f04f 0300 	mov.w	r3, #0
 800d0ae:	020b      	lsls	r3, r1, #8
 800d0b0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d0b4:	0202      	lsls	r2, r0, #8
 800d0b6:	6979      	ldr	r1, [r7, #20]
 800d0b8:	6849      	ldr	r1, [r1, #4]
 800d0ba:	0849      	lsrs	r1, r1, #1
 800d0bc:	2000      	movs	r0, #0
 800d0be:	460c      	mov	r4, r1
 800d0c0:	4605      	mov	r5, r0
 800d0c2:	eb12 0804 	adds.w	r8, r2, r4
 800d0c6:	eb43 0905 	adc.w	r9, r3, r5
 800d0ca:	697b      	ldr	r3, [r7, #20]
 800d0cc:	685b      	ldr	r3, [r3, #4]
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	469a      	mov	sl, r3
 800d0d2:	4693      	mov	fp, r2
 800d0d4:	4652      	mov	r2, sl
 800d0d6:	465b      	mov	r3, fp
 800d0d8:	4640      	mov	r0, r8
 800d0da:	4649      	mov	r1, r9
 800d0dc:	f7f3 f8fc 	bl	80002d8 <__aeabi_uldivmod>
 800d0e0:	4602      	mov	r2, r0
 800d0e2:	460b      	mov	r3, r1
 800d0e4:	4613      	mov	r3, r2
 800d0e6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d0ee:	d308      	bcc.n	800d102 <UART_SetConfig+0x79a>
 800d0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d0f6:	d204      	bcs.n	800d102 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d0f8:	697b      	ldr	r3, [r7, #20]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d0fe:	60da      	str	r2, [r3, #12]
 800d100:	e17c      	b.n	800d3fc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d102:	2301      	movs	r3, #1
 800d104:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d108:	e178      	b.n	800d3fc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	69db      	ldr	r3, [r3, #28]
 800d10e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d112:	f040 80c5 	bne.w	800d2a0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d116:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d11a:	2b20      	cmp	r3, #32
 800d11c:	dc48      	bgt.n	800d1b0 <UART_SetConfig+0x848>
 800d11e:	2b00      	cmp	r3, #0
 800d120:	db7b      	blt.n	800d21a <UART_SetConfig+0x8b2>
 800d122:	2b20      	cmp	r3, #32
 800d124:	d879      	bhi.n	800d21a <UART_SetConfig+0x8b2>
 800d126:	a201      	add	r2, pc, #4	; (adr r2, 800d12c <UART_SetConfig+0x7c4>)
 800d128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d12c:	0800d1b7 	.word	0x0800d1b7
 800d130:	0800d1bf 	.word	0x0800d1bf
 800d134:	0800d21b 	.word	0x0800d21b
 800d138:	0800d21b 	.word	0x0800d21b
 800d13c:	0800d1c7 	.word	0x0800d1c7
 800d140:	0800d21b 	.word	0x0800d21b
 800d144:	0800d21b 	.word	0x0800d21b
 800d148:	0800d21b 	.word	0x0800d21b
 800d14c:	0800d1d7 	.word	0x0800d1d7
 800d150:	0800d21b 	.word	0x0800d21b
 800d154:	0800d21b 	.word	0x0800d21b
 800d158:	0800d21b 	.word	0x0800d21b
 800d15c:	0800d21b 	.word	0x0800d21b
 800d160:	0800d21b 	.word	0x0800d21b
 800d164:	0800d21b 	.word	0x0800d21b
 800d168:	0800d21b 	.word	0x0800d21b
 800d16c:	0800d1e7 	.word	0x0800d1e7
 800d170:	0800d21b 	.word	0x0800d21b
 800d174:	0800d21b 	.word	0x0800d21b
 800d178:	0800d21b 	.word	0x0800d21b
 800d17c:	0800d21b 	.word	0x0800d21b
 800d180:	0800d21b 	.word	0x0800d21b
 800d184:	0800d21b 	.word	0x0800d21b
 800d188:	0800d21b 	.word	0x0800d21b
 800d18c:	0800d21b 	.word	0x0800d21b
 800d190:	0800d21b 	.word	0x0800d21b
 800d194:	0800d21b 	.word	0x0800d21b
 800d198:	0800d21b 	.word	0x0800d21b
 800d19c:	0800d21b 	.word	0x0800d21b
 800d1a0:	0800d21b 	.word	0x0800d21b
 800d1a4:	0800d21b 	.word	0x0800d21b
 800d1a8:	0800d21b 	.word	0x0800d21b
 800d1ac:	0800d20d 	.word	0x0800d20d
 800d1b0:	2b40      	cmp	r3, #64	; 0x40
 800d1b2:	d02e      	beq.n	800d212 <UART_SetConfig+0x8aa>
 800d1b4:	e031      	b.n	800d21a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d1b6:	f7fb f96d 	bl	8008494 <HAL_RCC_GetPCLK1Freq>
 800d1ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d1bc:	e033      	b.n	800d226 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d1be:	f7fb f97f 	bl	80084c0 <HAL_RCC_GetPCLK2Freq>
 800d1c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d1c4:	e02f      	b.n	800d226 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d1c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f7fd f92e 	bl	800a42c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1d4:	e027      	b.n	800d226 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d1d6:	f107 0318 	add.w	r3, r7, #24
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f7fd fa7a 	bl	800a6d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d1e0:	69fb      	ldr	r3, [r7, #28]
 800d1e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1e4:	e01f      	b.n	800d226 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d1e6:	4b2d      	ldr	r3, [pc, #180]	; (800d29c <UART_SetConfig+0x934>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	f003 0320 	and.w	r3, r3, #32
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d009      	beq.n	800d206 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d1f2:	4b2a      	ldr	r3, [pc, #168]	; (800d29c <UART_SetConfig+0x934>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	08db      	lsrs	r3, r3, #3
 800d1f8:	f003 0303 	and.w	r3, r3, #3
 800d1fc:	4a24      	ldr	r2, [pc, #144]	; (800d290 <UART_SetConfig+0x928>)
 800d1fe:	fa22 f303 	lsr.w	r3, r2, r3
 800d202:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d204:	e00f      	b.n	800d226 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d206:	4b22      	ldr	r3, [pc, #136]	; (800d290 <UART_SetConfig+0x928>)
 800d208:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d20a:	e00c      	b.n	800d226 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d20c:	4b21      	ldr	r3, [pc, #132]	; (800d294 <UART_SetConfig+0x92c>)
 800d20e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d210:	e009      	b.n	800d226 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d216:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d218:	e005      	b.n	800d226 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d21a:	2300      	movs	r3, #0
 800d21c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d21e:	2301      	movs	r3, #1
 800d220:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d224:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d228:	2b00      	cmp	r3, #0
 800d22a:	f000 80e7 	beq.w	800d3fc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d22e:	697b      	ldr	r3, [r7, #20]
 800d230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d232:	4a19      	ldr	r2, [pc, #100]	; (800d298 <UART_SetConfig+0x930>)
 800d234:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d238:	461a      	mov	r2, r3
 800d23a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d23c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d240:	005a      	lsls	r2, r3, #1
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	685b      	ldr	r3, [r3, #4]
 800d246:	085b      	lsrs	r3, r3, #1
 800d248:	441a      	add	r2, r3
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	685b      	ldr	r3, [r3, #4]
 800d24e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d252:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d256:	2b0f      	cmp	r3, #15
 800d258:	d916      	bls.n	800d288 <UART_SetConfig+0x920>
 800d25a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d25c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d260:	d212      	bcs.n	800d288 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d264:	b29b      	uxth	r3, r3
 800d266:	f023 030f 	bic.w	r3, r3, #15
 800d26a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d26e:	085b      	lsrs	r3, r3, #1
 800d270:	b29b      	uxth	r3, r3
 800d272:	f003 0307 	and.w	r3, r3, #7
 800d276:	b29a      	uxth	r2, r3
 800d278:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d27a:	4313      	orrs	r3, r2
 800d27c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d284:	60da      	str	r2, [r3, #12]
 800d286:	e0b9      	b.n	800d3fc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d288:	2301      	movs	r3, #1
 800d28a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d28e:	e0b5      	b.n	800d3fc <UART_SetConfig+0xa94>
 800d290:	03d09000 	.word	0x03d09000
 800d294:	003d0900 	.word	0x003d0900
 800d298:	0800ee80 	.word	0x0800ee80
 800d29c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d2a0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d2a4:	2b20      	cmp	r3, #32
 800d2a6:	dc49      	bgt.n	800d33c <UART_SetConfig+0x9d4>
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	db7c      	blt.n	800d3a6 <UART_SetConfig+0xa3e>
 800d2ac:	2b20      	cmp	r3, #32
 800d2ae:	d87a      	bhi.n	800d3a6 <UART_SetConfig+0xa3e>
 800d2b0:	a201      	add	r2, pc, #4	; (adr r2, 800d2b8 <UART_SetConfig+0x950>)
 800d2b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2b6:	bf00      	nop
 800d2b8:	0800d343 	.word	0x0800d343
 800d2bc:	0800d34b 	.word	0x0800d34b
 800d2c0:	0800d3a7 	.word	0x0800d3a7
 800d2c4:	0800d3a7 	.word	0x0800d3a7
 800d2c8:	0800d353 	.word	0x0800d353
 800d2cc:	0800d3a7 	.word	0x0800d3a7
 800d2d0:	0800d3a7 	.word	0x0800d3a7
 800d2d4:	0800d3a7 	.word	0x0800d3a7
 800d2d8:	0800d363 	.word	0x0800d363
 800d2dc:	0800d3a7 	.word	0x0800d3a7
 800d2e0:	0800d3a7 	.word	0x0800d3a7
 800d2e4:	0800d3a7 	.word	0x0800d3a7
 800d2e8:	0800d3a7 	.word	0x0800d3a7
 800d2ec:	0800d3a7 	.word	0x0800d3a7
 800d2f0:	0800d3a7 	.word	0x0800d3a7
 800d2f4:	0800d3a7 	.word	0x0800d3a7
 800d2f8:	0800d373 	.word	0x0800d373
 800d2fc:	0800d3a7 	.word	0x0800d3a7
 800d300:	0800d3a7 	.word	0x0800d3a7
 800d304:	0800d3a7 	.word	0x0800d3a7
 800d308:	0800d3a7 	.word	0x0800d3a7
 800d30c:	0800d3a7 	.word	0x0800d3a7
 800d310:	0800d3a7 	.word	0x0800d3a7
 800d314:	0800d3a7 	.word	0x0800d3a7
 800d318:	0800d3a7 	.word	0x0800d3a7
 800d31c:	0800d3a7 	.word	0x0800d3a7
 800d320:	0800d3a7 	.word	0x0800d3a7
 800d324:	0800d3a7 	.word	0x0800d3a7
 800d328:	0800d3a7 	.word	0x0800d3a7
 800d32c:	0800d3a7 	.word	0x0800d3a7
 800d330:	0800d3a7 	.word	0x0800d3a7
 800d334:	0800d3a7 	.word	0x0800d3a7
 800d338:	0800d399 	.word	0x0800d399
 800d33c:	2b40      	cmp	r3, #64	; 0x40
 800d33e:	d02e      	beq.n	800d39e <UART_SetConfig+0xa36>
 800d340:	e031      	b.n	800d3a6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d342:	f7fb f8a7 	bl	8008494 <HAL_RCC_GetPCLK1Freq>
 800d346:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d348:	e033      	b.n	800d3b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d34a:	f7fb f8b9 	bl	80084c0 <HAL_RCC_GetPCLK2Freq>
 800d34e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d350:	e02f      	b.n	800d3b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d356:	4618      	mov	r0, r3
 800d358:	f7fd f868 	bl	800a42c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d35e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d360:	e027      	b.n	800d3b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d362:	f107 0318 	add.w	r3, r7, #24
 800d366:	4618      	mov	r0, r3
 800d368:	f7fd f9b4 	bl	800a6d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d36c:	69fb      	ldr	r3, [r7, #28]
 800d36e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d370:	e01f      	b.n	800d3b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d372:	4b2d      	ldr	r3, [pc, #180]	; (800d428 <UART_SetConfig+0xac0>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	f003 0320 	and.w	r3, r3, #32
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d009      	beq.n	800d392 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d37e:	4b2a      	ldr	r3, [pc, #168]	; (800d428 <UART_SetConfig+0xac0>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	08db      	lsrs	r3, r3, #3
 800d384:	f003 0303 	and.w	r3, r3, #3
 800d388:	4a28      	ldr	r2, [pc, #160]	; (800d42c <UART_SetConfig+0xac4>)
 800d38a:	fa22 f303 	lsr.w	r3, r2, r3
 800d38e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d390:	e00f      	b.n	800d3b2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d392:	4b26      	ldr	r3, [pc, #152]	; (800d42c <UART_SetConfig+0xac4>)
 800d394:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d396:	e00c      	b.n	800d3b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d398:	4b25      	ldr	r3, [pc, #148]	; (800d430 <UART_SetConfig+0xac8>)
 800d39a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d39c:	e009      	b.n	800d3b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d39e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d3a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3a4:	e005      	b.n	800d3b2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d3b0:	bf00      	nop
    }

    if (pclk != 0U)
 800d3b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d021      	beq.n	800d3fc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d3b8:	697b      	ldr	r3, [r7, #20]
 800d3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3bc:	4a1d      	ldr	r2, [pc, #116]	; (800d434 <UART_SetConfig+0xacc>)
 800d3be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d3c2:	461a      	mov	r2, r3
 800d3c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3c6:	fbb3 f2f2 	udiv	r2, r3, r2
 800d3ca:	697b      	ldr	r3, [r7, #20]
 800d3cc:	685b      	ldr	r3, [r3, #4]
 800d3ce:	085b      	lsrs	r3, r3, #1
 800d3d0:	441a      	add	r2, r3
 800d3d2:	697b      	ldr	r3, [r7, #20]
 800d3d4:	685b      	ldr	r3, [r3, #4]
 800d3d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3da:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3de:	2b0f      	cmp	r3, #15
 800d3e0:	d909      	bls.n	800d3f6 <UART_SetConfig+0xa8e>
 800d3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d3e8:	d205      	bcs.n	800d3f6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ec:	b29a      	uxth	r2, r3
 800d3ee:	697b      	ldr	r3, [r7, #20]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	60da      	str	r2, [r3, #12]
 800d3f4:	e002      	b.n	800d3fc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d3f6:	2301      	movs	r3, #1
 800d3f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d3fc:	697b      	ldr	r3, [r7, #20]
 800d3fe:	2201      	movs	r2, #1
 800d400:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d404:	697b      	ldr	r3, [r7, #20]
 800d406:	2201      	movs	r2, #1
 800d408:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d40c:	697b      	ldr	r3, [r7, #20]
 800d40e:	2200      	movs	r2, #0
 800d410:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	2200      	movs	r2, #0
 800d416:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800d418:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d41c:	4618      	mov	r0, r3
 800d41e:	3748      	adds	r7, #72	; 0x48
 800d420:	46bd      	mov	sp, r7
 800d422:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d426:	bf00      	nop
 800d428:	58024400 	.word	0x58024400
 800d42c:	03d09000 	.word	0x03d09000
 800d430:	003d0900 	.word	0x003d0900
 800d434:	0800ee80 	.word	0x0800ee80

0800d438 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d438:	b480      	push	{r7}
 800d43a:	b083      	sub	sp, #12
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d444:	f003 0301 	and.w	r3, r3, #1
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d00a      	beq.n	800d462 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	685b      	ldr	r3, [r3, #4]
 800d452:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	430a      	orrs	r2, r1
 800d460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d466:	f003 0302 	and.w	r3, r3, #2
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d00a      	beq.n	800d484 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	685b      	ldr	r3, [r3, #4]
 800d474:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	430a      	orrs	r2, r1
 800d482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d488:	f003 0304 	and.w	r3, r3, #4
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d00a      	beq.n	800d4a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	685b      	ldr	r3, [r3, #4]
 800d496:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	430a      	orrs	r2, r1
 800d4a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4aa:	f003 0308 	and.w	r3, r3, #8
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d00a      	beq.n	800d4c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	685b      	ldr	r3, [r3, #4]
 800d4b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	430a      	orrs	r2, r1
 800d4c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4cc:	f003 0310 	and.w	r3, r3, #16
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d00a      	beq.n	800d4ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	689b      	ldr	r3, [r3, #8]
 800d4da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	430a      	orrs	r2, r1
 800d4e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4ee:	f003 0320 	and.w	r3, r3, #32
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d00a      	beq.n	800d50c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	689b      	ldr	r3, [r3, #8]
 800d4fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	430a      	orrs	r2, r1
 800d50a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d514:	2b00      	cmp	r3, #0
 800d516:	d01a      	beq.n	800d54e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	685b      	ldr	r3, [r3, #4]
 800d51e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	430a      	orrs	r2, r1
 800d52c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d532:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d536:	d10a      	bne.n	800d54e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	685b      	ldr	r3, [r3, #4]
 800d53e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	430a      	orrs	r2, r1
 800d54c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d556:	2b00      	cmp	r3, #0
 800d558:	d00a      	beq.n	800d570 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	685b      	ldr	r3, [r3, #4]
 800d560:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	430a      	orrs	r2, r1
 800d56e:	605a      	str	r2, [r3, #4]
  }
}
 800d570:	bf00      	nop
 800d572:	370c      	adds	r7, #12
 800d574:	46bd      	mov	sp, r7
 800d576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57a:	4770      	bx	lr

0800d57c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b098      	sub	sp, #96	; 0x60
 800d580:	af02      	add	r7, sp, #8
 800d582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2200      	movs	r2, #0
 800d588:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d58c:	f7f4 fa40 	bl	8001a10 <HAL_GetTick>
 800d590:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	f003 0308 	and.w	r3, r3, #8
 800d59c:	2b08      	cmp	r3, #8
 800d59e:	d12f      	bne.n	800d600 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d5a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d5a4:	9300      	str	r3, [sp, #0]
 800d5a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f000 f88e 	bl	800d6d0 <UART_WaitOnFlagUntilTimeout>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d022      	beq.n	800d600 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5c2:	e853 3f00 	ldrex	r3, [r3]
 800d5c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d5c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d5ce:	653b      	str	r3, [r7, #80]	; 0x50
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	461a      	mov	r2, r3
 800d5d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5d8:	647b      	str	r3, [r7, #68]	; 0x44
 800d5da:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d5de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d5e0:	e841 2300 	strex	r3, r2, [r1]
 800d5e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d5e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d1e6      	bne.n	800d5ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2220      	movs	r2, #32
 800d5f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d5fc:	2303      	movs	r3, #3
 800d5fe:	e063      	b.n	800d6c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	f003 0304 	and.w	r3, r3, #4
 800d60a:	2b04      	cmp	r3, #4
 800d60c:	d149      	bne.n	800d6a2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d60e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d612:	9300      	str	r3, [sp, #0]
 800d614:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d616:	2200      	movs	r2, #0
 800d618:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	f000 f857 	bl	800d6d0 <UART_WaitOnFlagUntilTimeout>
 800d622:	4603      	mov	r3, r0
 800d624:	2b00      	cmp	r3, #0
 800d626:	d03c      	beq.n	800d6a2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d630:	e853 3f00 	ldrex	r3, [r3]
 800d634:	623b      	str	r3, [r7, #32]
   return(result);
 800d636:	6a3b      	ldr	r3, [r7, #32]
 800d638:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d63c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	461a      	mov	r2, r3
 800d644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d646:	633b      	str	r3, [r7, #48]	; 0x30
 800d648:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d64a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d64c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d64e:	e841 2300 	strex	r3, r2, [r1]
 800d652:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d656:	2b00      	cmp	r3, #0
 800d658:	d1e6      	bne.n	800d628 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	3308      	adds	r3, #8
 800d660:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d662:	693b      	ldr	r3, [r7, #16]
 800d664:	e853 3f00 	ldrex	r3, [r3]
 800d668:	60fb      	str	r3, [r7, #12]
   return(result);
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	f023 0301 	bic.w	r3, r3, #1
 800d670:	64bb      	str	r3, [r7, #72]	; 0x48
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	3308      	adds	r3, #8
 800d678:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d67a:	61fa      	str	r2, [r7, #28]
 800d67c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d67e:	69b9      	ldr	r1, [r7, #24]
 800d680:	69fa      	ldr	r2, [r7, #28]
 800d682:	e841 2300 	strex	r3, r2, [r1]
 800d686:	617b      	str	r3, [r7, #20]
   return(result);
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d1e5      	bne.n	800d65a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2220      	movs	r2, #32
 800d692:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2200      	movs	r2, #0
 800d69a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d69e:	2303      	movs	r3, #3
 800d6a0:	e012      	b.n	800d6c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	2220      	movs	r2, #32
 800d6a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2220      	movs	r2, #32
 800d6ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d6c6:	2300      	movs	r3, #0
}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	3758      	adds	r7, #88	; 0x58
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}

0800d6d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b084      	sub	sp, #16
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	60f8      	str	r0, [r7, #12]
 800d6d8:	60b9      	str	r1, [r7, #8]
 800d6da:	603b      	str	r3, [r7, #0]
 800d6dc:	4613      	mov	r3, r2
 800d6de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d6e0:	e049      	b.n	800d776 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d6e2:	69bb      	ldr	r3, [r7, #24]
 800d6e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6e8:	d045      	beq.n	800d776 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d6ea:	f7f4 f991 	bl	8001a10 <HAL_GetTick>
 800d6ee:	4602      	mov	r2, r0
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	1ad3      	subs	r3, r2, r3
 800d6f4:	69ba      	ldr	r2, [r7, #24]
 800d6f6:	429a      	cmp	r2, r3
 800d6f8:	d302      	bcc.n	800d700 <UART_WaitOnFlagUntilTimeout+0x30>
 800d6fa:	69bb      	ldr	r3, [r7, #24]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d101      	bne.n	800d704 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d700:	2303      	movs	r3, #3
 800d702:	e048      	b.n	800d796 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	f003 0304 	and.w	r3, r3, #4
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d031      	beq.n	800d776 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	69db      	ldr	r3, [r3, #28]
 800d718:	f003 0308 	and.w	r3, r3, #8
 800d71c:	2b08      	cmp	r3, #8
 800d71e:	d110      	bne.n	800d742 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	2208      	movs	r2, #8
 800d726:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800d728:	68f8      	ldr	r0, [r7, #12]
 800d72a:	f000 f839 	bl	800d7a0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	2208      	movs	r2, #8
 800d732:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	2200      	movs	r2, #0
 800d73a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800d73e:	2301      	movs	r3, #1
 800d740:	e029      	b.n	800d796 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	69db      	ldr	r3, [r3, #28]
 800d748:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d74c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d750:	d111      	bne.n	800d776 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d75a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d75c:	68f8      	ldr	r0, [r7, #12]
 800d75e:	f000 f81f 	bl	800d7a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	2220      	movs	r2, #32
 800d766:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	2200      	movs	r2, #0
 800d76e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800d772:	2303      	movs	r3, #3
 800d774:	e00f      	b.n	800d796 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	69da      	ldr	r2, [r3, #28]
 800d77c:	68bb      	ldr	r3, [r7, #8]
 800d77e:	4013      	ands	r3, r2
 800d780:	68ba      	ldr	r2, [r7, #8]
 800d782:	429a      	cmp	r2, r3
 800d784:	bf0c      	ite	eq
 800d786:	2301      	moveq	r3, #1
 800d788:	2300      	movne	r3, #0
 800d78a:	b2db      	uxtb	r3, r3
 800d78c:	461a      	mov	r2, r3
 800d78e:	79fb      	ldrb	r3, [r7, #7]
 800d790:	429a      	cmp	r2, r3
 800d792:	d0a6      	beq.n	800d6e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d794:	2300      	movs	r3, #0
}
 800d796:	4618      	mov	r0, r3
 800d798:	3710      	adds	r7, #16
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bd80      	pop	{r7, pc}
	...

0800d7a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d7a0:	b480      	push	{r7}
 800d7a2:	b095      	sub	sp, #84	; 0x54
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7b0:	e853 3f00 	ldrex	r3, [r3]
 800d7b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d7bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	461a      	mov	r2, r3
 800d7c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7c6:	643b      	str	r3, [r7, #64]	; 0x40
 800d7c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d7cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d7ce:	e841 2300 	strex	r3, r2, [r1]
 800d7d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d1e6      	bne.n	800d7a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	3308      	adds	r3, #8
 800d7e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7e2:	6a3b      	ldr	r3, [r7, #32]
 800d7e4:	e853 3f00 	ldrex	r3, [r3]
 800d7e8:	61fb      	str	r3, [r7, #28]
   return(result);
 800d7ea:	69fa      	ldr	r2, [r7, #28]
 800d7ec:	4b1e      	ldr	r3, [pc, #120]	; (800d868 <UART_EndRxTransfer+0xc8>)
 800d7ee:	4013      	ands	r3, r2
 800d7f0:	64bb      	str	r3, [r7, #72]	; 0x48
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	3308      	adds	r3, #8
 800d7f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d7fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d7fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d800:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d802:	e841 2300 	strex	r3, r2, [r1]
 800d806:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d1e5      	bne.n	800d7da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d812:	2b01      	cmp	r3, #1
 800d814:	d118      	bne.n	800d848 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	e853 3f00 	ldrex	r3, [r3]
 800d822:	60bb      	str	r3, [r7, #8]
   return(result);
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	f023 0310 	bic.w	r3, r3, #16
 800d82a:	647b      	str	r3, [r7, #68]	; 0x44
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	461a      	mov	r2, r3
 800d832:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d834:	61bb      	str	r3, [r7, #24]
 800d836:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d838:	6979      	ldr	r1, [r7, #20]
 800d83a:	69ba      	ldr	r2, [r7, #24]
 800d83c:	e841 2300 	strex	r3, r2, [r1]
 800d840:	613b      	str	r3, [r7, #16]
   return(result);
 800d842:	693b      	ldr	r3, [r7, #16]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d1e6      	bne.n	800d816 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2220      	movs	r2, #32
 800d84c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2200      	movs	r2, #0
 800d854:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	2200      	movs	r2, #0
 800d85a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800d85c:	bf00      	nop
 800d85e:	3754      	adds	r7, #84	; 0x54
 800d860:	46bd      	mov	sp, r7
 800d862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d866:	4770      	bx	lr
 800d868:	effffffe 	.word	0xeffffffe

0800d86c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d86c:	b480      	push	{r7}
 800d86e:	b085      	sub	sp, #20
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d87a:	2b01      	cmp	r3, #1
 800d87c:	d101      	bne.n	800d882 <HAL_UARTEx_DisableFifoMode+0x16>
 800d87e:	2302      	movs	r3, #2
 800d880:	e027      	b.n	800d8d2 <HAL_UARTEx_DisableFifoMode+0x66>
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2201      	movs	r2, #1
 800d886:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2224      	movs	r2, #36	; 0x24
 800d88e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	681a      	ldr	r2, [r3, #0]
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	f022 0201 	bic.w	r2, r2, #1
 800d8a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d8b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	68fa      	ldr	r2, [r7, #12]
 800d8be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2220      	movs	r2, #32
 800d8c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d8d0:	2300      	movs	r3, #0
}
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	3714      	adds	r7, #20
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8dc:	4770      	bx	lr

0800d8de <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d8de:	b580      	push	{r7, lr}
 800d8e0:	b084      	sub	sp, #16
 800d8e2:	af00      	add	r7, sp, #0
 800d8e4:	6078      	str	r0, [r7, #4]
 800d8e6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d8ee:	2b01      	cmp	r3, #1
 800d8f0:	d101      	bne.n	800d8f6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d8f2:	2302      	movs	r3, #2
 800d8f4:	e02d      	b.n	800d952 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	2201      	movs	r2, #1
 800d8fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	2224      	movs	r2, #36	; 0x24
 800d902:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	681a      	ldr	r2, [r3, #0]
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	f022 0201 	bic.w	r2, r2, #1
 800d91c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	689b      	ldr	r3, [r3, #8]
 800d924:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	683a      	ldr	r2, [r7, #0]
 800d92e:	430a      	orrs	r2, r1
 800d930:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	f000 f850 	bl	800d9d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	68fa      	ldr	r2, [r7, #12]
 800d93e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	2220      	movs	r2, #32
 800d944:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2200      	movs	r2, #0
 800d94c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d950:	2300      	movs	r3, #0
}
 800d952:	4618      	mov	r0, r3
 800d954:	3710      	adds	r7, #16
 800d956:	46bd      	mov	sp, r7
 800d958:	bd80      	pop	{r7, pc}

0800d95a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d95a:	b580      	push	{r7, lr}
 800d95c:	b084      	sub	sp, #16
 800d95e:	af00      	add	r7, sp, #0
 800d960:	6078      	str	r0, [r7, #4]
 800d962:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d96a:	2b01      	cmp	r3, #1
 800d96c:	d101      	bne.n	800d972 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d96e:	2302      	movs	r3, #2
 800d970:	e02d      	b.n	800d9ce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2201      	movs	r2, #1
 800d976:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2224      	movs	r2, #36	; 0x24
 800d97e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	681a      	ldr	r2, [r3, #0]
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	f022 0201 	bic.w	r2, r2, #1
 800d998:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	689b      	ldr	r3, [r3, #8]
 800d9a0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	683a      	ldr	r2, [r7, #0]
 800d9aa:	430a      	orrs	r2, r1
 800d9ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d9ae:	6878      	ldr	r0, [r7, #4]
 800d9b0:	f000 f812 	bl	800d9d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	68fa      	ldr	r2, [r7, #12]
 800d9ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2220      	movs	r2, #32
 800d9c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d9cc:	2300      	movs	r3, #0
}
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	3710      	adds	r7, #16
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}
	...

0800d9d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d9d8:	b480      	push	{r7}
 800d9da:	b085      	sub	sp, #20
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d108      	bne.n	800d9fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	2201      	movs	r2, #1
 800d9ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2201      	movs	r2, #1
 800d9f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d9f8:	e031      	b.n	800da5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d9fa:	2310      	movs	r3, #16
 800d9fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d9fe:	2310      	movs	r3, #16
 800da00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	689b      	ldr	r3, [r3, #8]
 800da08:	0e5b      	lsrs	r3, r3, #25
 800da0a:	b2db      	uxtb	r3, r3
 800da0c:	f003 0307 	and.w	r3, r3, #7
 800da10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	689b      	ldr	r3, [r3, #8]
 800da18:	0f5b      	lsrs	r3, r3, #29
 800da1a:	b2db      	uxtb	r3, r3
 800da1c:	f003 0307 	and.w	r3, r3, #7
 800da20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800da22:	7bbb      	ldrb	r3, [r7, #14]
 800da24:	7b3a      	ldrb	r2, [r7, #12]
 800da26:	4911      	ldr	r1, [pc, #68]	; (800da6c <UARTEx_SetNbDataToProcess+0x94>)
 800da28:	5c8a      	ldrb	r2, [r1, r2]
 800da2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800da2e:	7b3a      	ldrb	r2, [r7, #12]
 800da30:	490f      	ldr	r1, [pc, #60]	; (800da70 <UARTEx_SetNbDataToProcess+0x98>)
 800da32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800da34:	fb93 f3f2 	sdiv	r3, r3, r2
 800da38:	b29a      	uxth	r2, r3
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800da40:	7bfb      	ldrb	r3, [r7, #15]
 800da42:	7b7a      	ldrb	r2, [r7, #13]
 800da44:	4909      	ldr	r1, [pc, #36]	; (800da6c <UARTEx_SetNbDataToProcess+0x94>)
 800da46:	5c8a      	ldrb	r2, [r1, r2]
 800da48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800da4c:	7b7a      	ldrb	r2, [r7, #13]
 800da4e:	4908      	ldr	r1, [pc, #32]	; (800da70 <UARTEx_SetNbDataToProcess+0x98>)
 800da50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800da52:	fb93 f3f2 	sdiv	r3, r3, r2
 800da56:	b29a      	uxth	r2, r3
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800da5e:	bf00      	nop
 800da60:	3714      	adds	r7, #20
 800da62:	46bd      	mov	sp, r7
 800da64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da68:	4770      	bx	lr
 800da6a:	bf00      	nop
 800da6c:	0800ee98 	.word	0x0800ee98
 800da70:	0800eea0 	.word	0x0800eea0

0800da74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800da74:	b084      	sub	sp, #16
 800da76:	b580      	push	{r7, lr}
 800da78:	b084      	sub	sp, #16
 800da7a:	af00      	add	r7, sp, #0
 800da7c:	6078      	str	r0, [r7, #4]
 800da7e:	f107 001c 	add.w	r0, r7, #28
 800da82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800da86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da88:	2b01      	cmp	r3, #1
 800da8a:	d120      	bne.n	800dace <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	68da      	ldr	r2, [r3, #12]
 800da9c:	4b2a      	ldr	r3, [pc, #168]	; (800db48 <USB_CoreInit+0xd4>)
 800da9e:	4013      	ands	r3, r2
 800daa0:	687a      	ldr	r2, [r7, #4]
 800daa2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	68db      	ldr	r3, [r3, #12]
 800daa8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800dab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dab2:	2b01      	cmp	r3, #1
 800dab4:	d105      	bne.n	800dac2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	68db      	ldr	r3, [r3, #12]
 800daba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f000 faac 	bl	800e020 <USB_CoreReset>
 800dac8:	4603      	mov	r3, r0
 800daca:	73fb      	strb	r3, [r7, #15]
 800dacc:	e01a      	b.n	800db04 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	68db      	ldr	r3, [r3, #12]
 800dad2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dada:	6878      	ldr	r0, [r7, #4]
 800dadc:	f000 faa0 	bl	800e020 <USB_CoreReset>
 800dae0:	4603      	mov	r3, r0
 800dae2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800dae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d106      	bne.n	800daf8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	639a      	str	r2, [r3, #56]	; 0x38
 800daf6:	e005      	b.n	800db04 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dafc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800db04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db06:	2b01      	cmp	r3, #1
 800db08:	d116      	bne.n	800db38 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db0e:	b29a      	uxth	r2, r3
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800db18:	4b0c      	ldr	r3, [pc, #48]	; (800db4c <USB_CoreInit+0xd8>)
 800db1a:	4313      	orrs	r3, r2
 800db1c:	687a      	ldr	r2, [r7, #4]
 800db1e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	689b      	ldr	r3, [r3, #8]
 800db24:	f043 0206 	orr.w	r2, r3, #6
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	689b      	ldr	r3, [r3, #8]
 800db30:	f043 0220 	orr.w	r2, r3, #32
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800db38:	7bfb      	ldrb	r3, [r7, #15]
}
 800db3a:	4618      	mov	r0, r3
 800db3c:	3710      	adds	r7, #16
 800db3e:	46bd      	mov	sp, r7
 800db40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800db44:	b004      	add	sp, #16
 800db46:	4770      	bx	lr
 800db48:	ffbdffbf 	.word	0xffbdffbf
 800db4c:	03ee0000 	.word	0x03ee0000

0800db50 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800db50:	b480      	push	{r7}
 800db52:	b083      	sub	sp, #12
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	689b      	ldr	r3, [r3, #8]
 800db5c:	f023 0201 	bic.w	r2, r3, #1
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800db64:	2300      	movs	r3, #0
}
 800db66:	4618      	mov	r0, r3
 800db68:	370c      	adds	r7, #12
 800db6a:	46bd      	mov	sp, r7
 800db6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db70:	4770      	bx	lr

0800db72 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800db72:	b580      	push	{r7, lr}
 800db74:	b084      	sub	sp, #16
 800db76:	af00      	add	r7, sp, #0
 800db78:	6078      	str	r0, [r7, #4]
 800db7a:	460b      	mov	r3, r1
 800db7c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800db7e:	2300      	movs	r3, #0
 800db80:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	68db      	ldr	r3, [r3, #12]
 800db86:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800db8e:	78fb      	ldrb	r3, [r7, #3]
 800db90:	2b01      	cmp	r3, #1
 800db92:	d115      	bne.n	800dbc0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	68db      	ldr	r3, [r3, #12]
 800db98:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800dba0:	2001      	movs	r0, #1
 800dba2:	f7f3 ff41 	bl	8001a28 <HAL_Delay>
      ms++;
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	3301      	adds	r3, #1
 800dbaa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f000 fa29 	bl	800e004 <USB_GetMode>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	2b01      	cmp	r3, #1
 800dbb6:	d01e      	beq.n	800dbf6 <USB_SetCurrentMode+0x84>
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	2b31      	cmp	r3, #49	; 0x31
 800dbbc:	d9f0      	bls.n	800dba0 <USB_SetCurrentMode+0x2e>
 800dbbe:	e01a      	b.n	800dbf6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800dbc0:	78fb      	ldrb	r3, [r7, #3]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d115      	bne.n	800dbf2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	68db      	ldr	r3, [r3, #12]
 800dbca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800dbd2:	2001      	movs	r0, #1
 800dbd4:	f7f3 ff28 	bl	8001a28 <HAL_Delay>
      ms++;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	3301      	adds	r3, #1
 800dbdc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800dbde:	6878      	ldr	r0, [r7, #4]
 800dbe0:	f000 fa10 	bl	800e004 <USB_GetMode>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d005      	beq.n	800dbf6 <USB_SetCurrentMode+0x84>
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	2b31      	cmp	r3, #49	; 0x31
 800dbee:	d9f0      	bls.n	800dbd2 <USB_SetCurrentMode+0x60>
 800dbf0:	e001      	b.n	800dbf6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800dbf2:	2301      	movs	r3, #1
 800dbf4:	e005      	b.n	800dc02 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	2b32      	cmp	r3, #50	; 0x32
 800dbfa:	d101      	bne.n	800dc00 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800dbfc:	2301      	movs	r3, #1
 800dbfe:	e000      	b.n	800dc02 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800dc00:	2300      	movs	r3, #0
}
 800dc02:	4618      	mov	r0, r3
 800dc04:	3710      	adds	r7, #16
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}
	...

0800dc0c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dc0c:	b084      	sub	sp, #16
 800dc0e:	b580      	push	{r7, lr}
 800dc10:	b086      	sub	sp, #24
 800dc12:	af00      	add	r7, sp, #0
 800dc14:	6078      	str	r0, [r7, #4]
 800dc16:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800dc1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800dc26:	2300      	movs	r3, #0
 800dc28:	613b      	str	r3, [r7, #16]
 800dc2a:	e009      	b.n	800dc40 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800dc2c:	687a      	ldr	r2, [r7, #4]
 800dc2e:	693b      	ldr	r3, [r7, #16]
 800dc30:	3340      	adds	r3, #64	; 0x40
 800dc32:	009b      	lsls	r3, r3, #2
 800dc34:	4413      	add	r3, r2
 800dc36:	2200      	movs	r2, #0
 800dc38:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800dc3a:	693b      	ldr	r3, [r7, #16]
 800dc3c:	3301      	adds	r3, #1
 800dc3e:	613b      	str	r3, [r7, #16]
 800dc40:	693b      	ldr	r3, [r7, #16]
 800dc42:	2b0e      	cmp	r3, #14
 800dc44:	d9f2      	bls.n	800dc2c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800dc46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d11c      	bne.n	800dc86 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc52:	685b      	ldr	r3, [r3, #4]
 800dc54:	68fa      	ldr	r2, [r7, #12]
 800dc56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dc5a:	f043 0302 	orr.w	r3, r3, #2
 800dc5e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc64:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	601a      	str	r2, [r3, #0]
 800dc84:	e005      	b.n	800dc92 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc8a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dc98:	461a      	mov	r2, r3
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dca4:	4619      	mov	r1, r3
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dcac:	461a      	mov	r2, r3
 800dcae:	680b      	ldr	r3, [r1, #0]
 800dcb0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dcb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcb4:	2b01      	cmp	r3, #1
 800dcb6:	d10c      	bne.n	800dcd2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800dcb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d104      	bne.n	800dcc8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800dcbe:	2100      	movs	r1, #0
 800dcc0:	6878      	ldr	r0, [r7, #4]
 800dcc2:	f000 f965 	bl	800df90 <USB_SetDevSpeed>
 800dcc6:	e008      	b.n	800dcda <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800dcc8:	2101      	movs	r1, #1
 800dcca:	6878      	ldr	r0, [r7, #4]
 800dccc:	f000 f960 	bl	800df90 <USB_SetDevSpeed>
 800dcd0:	e003      	b.n	800dcda <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800dcd2:	2103      	movs	r1, #3
 800dcd4:	6878      	ldr	r0, [r7, #4]
 800dcd6:	f000 f95b 	bl	800df90 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800dcda:	2110      	movs	r1, #16
 800dcdc:	6878      	ldr	r0, [r7, #4]
 800dcde:	f000 f8f3 	bl	800dec8 <USB_FlushTxFifo>
 800dce2:	4603      	mov	r3, r0
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d001      	beq.n	800dcec <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800dce8:	2301      	movs	r3, #1
 800dcea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800dcec:	6878      	ldr	r0, [r7, #4]
 800dcee:	f000 f91f 	bl	800df30 <USB_FlushRxFifo>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d001      	beq.n	800dcfc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd02:	461a      	mov	r2, r3
 800dd04:	2300      	movs	r3, #0
 800dd06:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd0e:	461a      	mov	r2, r3
 800dd10:	2300      	movs	r3, #0
 800dd12:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd1a:	461a      	mov	r2, r3
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dd20:	2300      	movs	r3, #0
 800dd22:	613b      	str	r3, [r7, #16]
 800dd24:	e043      	b.n	800ddae <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dd26:	693b      	ldr	r3, [r7, #16]
 800dd28:	015a      	lsls	r2, r3, #5
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	4413      	add	r3, r2
 800dd2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dd38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dd3c:	d118      	bne.n	800dd70 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800dd3e:	693b      	ldr	r3, [r7, #16]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d10a      	bne.n	800dd5a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800dd44:	693b      	ldr	r3, [r7, #16]
 800dd46:	015a      	lsls	r2, r3, #5
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	4413      	add	r3, r2
 800dd4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd50:	461a      	mov	r2, r3
 800dd52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dd56:	6013      	str	r3, [r2, #0]
 800dd58:	e013      	b.n	800dd82 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800dd5a:	693b      	ldr	r3, [r7, #16]
 800dd5c:	015a      	lsls	r2, r3, #5
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	4413      	add	r3, r2
 800dd62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd66:	461a      	mov	r2, r3
 800dd68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800dd6c:	6013      	str	r3, [r2, #0]
 800dd6e:	e008      	b.n	800dd82 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800dd70:	693b      	ldr	r3, [r7, #16]
 800dd72:	015a      	lsls	r2, r3, #5
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	4413      	add	r3, r2
 800dd78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd7c:	461a      	mov	r2, r3
 800dd7e:	2300      	movs	r3, #0
 800dd80:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800dd82:	693b      	ldr	r3, [r7, #16]
 800dd84:	015a      	lsls	r2, r3, #5
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	4413      	add	r3, r2
 800dd8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd8e:	461a      	mov	r2, r3
 800dd90:	2300      	movs	r3, #0
 800dd92:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800dd94:	693b      	ldr	r3, [r7, #16]
 800dd96:	015a      	lsls	r2, r3, #5
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	4413      	add	r3, r2
 800dd9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dda0:	461a      	mov	r2, r3
 800dda2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800dda6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dda8:	693b      	ldr	r3, [r7, #16]
 800ddaa:	3301      	adds	r3, #1
 800ddac:	613b      	str	r3, [r7, #16]
 800ddae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddb0:	693a      	ldr	r2, [r7, #16]
 800ddb2:	429a      	cmp	r2, r3
 800ddb4:	d3b7      	bcc.n	800dd26 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	613b      	str	r3, [r7, #16]
 800ddba:	e043      	b.n	800de44 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ddbc:	693b      	ldr	r3, [r7, #16]
 800ddbe:	015a      	lsls	r2, r3, #5
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	4413      	add	r3, r2
 800ddc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ddce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ddd2:	d118      	bne.n	800de06 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ddd4:	693b      	ldr	r3, [r7, #16]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d10a      	bne.n	800ddf0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ddda:	693b      	ldr	r3, [r7, #16]
 800dddc:	015a      	lsls	r2, r3, #5
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	4413      	add	r3, r2
 800dde2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dde6:	461a      	mov	r2, r3
 800dde8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ddec:	6013      	str	r3, [r2, #0]
 800ddee:	e013      	b.n	800de18 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ddf0:	693b      	ldr	r3, [r7, #16]
 800ddf2:	015a      	lsls	r2, r3, #5
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	4413      	add	r3, r2
 800ddf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddfc:	461a      	mov	r2, r3
 800ddfe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800de02:	6013      	str	r3, [r2, #0]
 800de04:	e008      	b.n	800de18 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800de06:	693b      	ldr	r3, [r7, #16]
 800de08:	015a      	lsls	r2, r3, #5
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	4413      	add	r3, r2
 800de0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de12:	461a      	mov	r2, r3
 800de14:	2300      	movs	r3, #0
 800de16:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800de18:	693b      	ldr	r3, [r7, #16]
 800de1a:	015a      	lsls	r2, r3, #5
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	4413      	add	r3, r2
 800de20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de24:	461a      	mov	r2, r3
 800de26:	2300      	movs	r3, #0
 800de28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800de2a:	693b      	ldr	r3, [r7, #16]
 800de2c:	015a      	lsls	r2, r3, #5
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	4413      	add	r3, r2
 800de32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de36:	461a      	mov	r2, r3
 800de38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800de3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	3301      	adds	r3, #1
 800de42:	613b      	str	r3, [r7, #16]
 800de44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de46:	693a      	ldr	r2, [r7, #16]
 800de48:	429a      	cmp	r2, r3
 800de4a:	d3b7      	bcc.n	800ddbc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de52:	691b      	ldr	r3, [r3, #16]
 800de54:	68fa      	ldr	r2, [r7, #12]
 800de56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800de5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800de5e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2200      	movs	r2, #0
 800de64:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800de6c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800de6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de70:	2b00      	cmp	r3, #0
 800de72:	d105      	bne.n	800de80 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	699b      	ldr	r3, [r3, #24]
 800de78:	f043 0210 	orr.w	r2, r3, #16
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	699a      	ldr	r2, [r3, #24]
 800de84:	4b0e      	ldr	r3, [pc, #56]	; (800dec0 <USB_DevInit+0x2b4>)
 800de86:	4313      	orrs	r3, r2
 800de88:	687a      	ldr	r2, [r7, #4]
 800de8a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800de8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d005      	beq.n	800de9e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	699b      	ldr	r3, [r3, #24]
 800de96:	f043 0208 	orr.w	r2, r3, #8
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800de9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dea0:	2b01      	cmp	r3, #1
 800dea2:	d105      	bne.n	800deb0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	699a      	ldr	r2, [r3, #24]
 800dea8:	4b06      	ldr	r3, [pc, #24]	; (800dec4 <USB_DevInit+0x2b8>)
 800deaa:	4313      	orrs	r3, r2
 800deac:	687a      	ldr	r2, [r7, #4]
 800deae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800deb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800deb2:	4618      	mov	r0, r3
 800deb4:	3718      	adds	r7, #24
 800deb6:	46bd      	mov	sp, r7
 800deb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800debc:	b004      	add	sp, #16
 800debe:	4770      	bx	lr
 800dec0:	803c3800 	.word	0x803c3800
 800dec4:	40000004 	.word	0x40000004

0800dec8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800dec8:	b480      	push	{r7}
 800deca:	b085      	sub	sp, #20
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
 800ded0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ded2:	2300      	movs	r3, #0
 800ded4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	3301      	adds	r3, #1
 800deda:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	4a13      	ldr	r2, [pc, #76]	; (800df2c <USB_FlushTxFifo+0x64>)
 800dee0:	4293      	cmp	r3, r2
 800dee2:	d901      	bls.n	800dee8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800dee4:	2303      	movs	r3, #3
 800dee6:	e01b      	b.n	800df20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	691b      	ldr	r3, [r3, #16]
 800deec:	2b00      	cmp	r3, #0
 800deee:	daf2      	bge.n	800ded6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800def0:	2300      	movs	r3, #0
 800def2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	019b      	lsls	r3, r3, #6
 800def8:	f043 0220 	orr.w	r2, r3, #32
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	3301      	adds	r3, #1
 800df04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	4a08      	ldr	r2, [pc, #32]	; (800df2c <USB_FlushTxFifo+0x64>)
 800df0a:	4293      	cmp	r3, r2
 800df0c:	d901      	bls.n	800df12 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800df0e:	2303      	movs	r3, #3
 800df10:	e006      	b.n	800df20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	691b      	ldr	r3, [r3, #16]
 800df16:	f003 0320 	and.w	r3, r3, #32
 800df1a:	2b20      	cmp	r3, #32
 800df1c:	d0f0      	beq.n	800df00 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800df1e:	2300      	movs	r3, #0
}
 800df20:	4618      	mov	r0, r3
 800df22:	3714      	adds	r7, #20
 800df24:	46bd      	mov	sp, r7
 800df26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2a:	4770      	bx	lr
 800df2c:	00030d40 	.word	0x00030d40

0800df30 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800df30:	b480      	push	{r7}
 800df32:	b085      	sub	sp, #20
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800df38:	2300      	movs	r3, #0
 800df3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	3301      	adds	r3, #1
 800df40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	4a11      	ldr	r2, [pc, #68]	; (800df8c <USB_FlushRxFifo+0x5c>)
 800df46:	4293      	cmp	r3, r2
 800df48:	d901      	bls.n	800df4e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800df4a:	2303      	movs	r3, #3
 800df4c:	e018      	b.n	800df80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	691b      	ldr	r3, [r3, #16]
 800df52:	2b00      	cmp	r3, #0
 800df54:	daf2      	bge.n	800df3c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800df56:	2300      	movs	r3, #0
 800df58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2210      	movs	r2, #16
 800df5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	3301      	adds	r3, #1
 800df64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	4a08      	ldr	r2, [pc, #32]	; (800df8c <USB_FlushRxFifo+0x5c>)
 800df6a:	4293      	cmp	r3, r2
 800df6c:	d901      	bls.n	800df72 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800df6e:	2303      	movs	r3, #3
 800df70:	e006      	b.n	800df80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	691b      	ldr	r3, [r3, #16]
 800df76:	f003 0310 	and.w	r3, r3, #16
 800df7a:	2b10      	cmp	r3, #16
 800df7c:	d0f0      	beq.n	800df60 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800df7e:	2300      	movs	r3, #0
}
 800df80:	4618      	mov	r0, r3
 800df82:	3714      	adds	r7, #20
 800df84:	46bd      	mov	sp, r7
 800df86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8a:	4770      	bx	lr
 800df8c:	00030d40 	.word	0x00030d40

0800df90 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800df90:	b480      	push	{r7}
 800df92:	b085      	sub	sp, #20
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
 800df98:	460b      	mov	r3, r1
 800df9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dfa6:	681a      	ldr	r2, [r3, #0]
 800dfa8:	78fb      	ldrb	r3, [r7, #3]
 800dfaa:	68f9      	ldr	r1, [r7, #12]
 800dfac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dfb0:	4313      	orrs	r3, r2
 800dfb2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800dfb4:	2300      	movs	r3, #0
}
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	3714      	adds	r7, #20
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc0:	4770      	bx	lr

0800dfc2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800dfc2:	b480      	push	{r7}
 800dfc4:	b085      	sub	sp, #20
 800dfc6:	af00      	add	r7, sp, #0
 800dfc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	68fa      	ldr	r2, [r7, #12]
 800dfd8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dfdc:	f023 0303 	bic.w	r3, r3, #3
 800dfe0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dfe8:	685b      	ldr	r3, [r3, #4]
 800dfea:	68fa      	ldr	r2, [r7, #12]
 800dfec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dff0:	f043 0302 	orr.w	r3, r3, #2
 800dff4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dff6:	2300      	movs	r3, #0
}
 800dff8:	4618      	mov	r0, r3
 800dffa:	3714      	adds	r7, #20
 800dffc:	46bd      	mov	sp, r7
 800dffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e002:	4770      	bx	lr

0800e004 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e004:	b480      	push	{r7}
 800e006:	b083      	sub	sp, #12
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	695b      	ldr	r3, [r3, #20]
 800e010:	f003 0301 	and.w	r3, r3, #1
}
 800e014:	4618      	mov	r0, r3
 800e016:	370c      	adds	r7, #12
 800e018:	46bd      	mov	sp, r7
 800e01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01e:	4770      	bx	lr

0800e020 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e020:	b480      	push	{r7}
 800e022:	b085      	sub	sp, #20
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e028:	2300      	movs	r3, #0
 800e02a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	3301      	adds	r3, #1
 800e030:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	4a13      	ldr	r2, [pc, #76]	; (800e084 <USB_CoreReset+0x64>)
 800e036:	4293      	cmp	r3, r2
 800e038:	d901      	bls.n	800e03e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e03a:	2303      	movs	r3, #3
 800e03c:	e01b      	b.n	800e076 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	691b      	ldr	r3, [r3, #16]
 800e042:	2b00      	cmp	r3, #0
 800e044:	daf2      	bge.n	800e02c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e046:	2300      	movs	r3, #0
 800e048:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	691b      	ldr	r3, [r3, #16]
 800e04e:	f043 0201 	orr.w	r2, r3, #1
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	3301      	adds	r3, #1
 800e05a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	4a09      	ldr	r2, [pc, #36]	; (800e084 <USB_CoreReset+0x64>)
 800e060:	4293      	cmp	r3, r2
 800e062:	d901      	bls.n	800e068 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e064:	2303      	movs	r3, #3
 800e066:	e006      	b.n	800e076 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	691b      	ldr	r3, [r3, #16]
 800e06c:	f003 0301 	and.w	r3, r3, #1
 800e070:	2b01      	cmp	r3, #1
 800e072:	d0f0      	beq.n	800e056 <USB_CoreReset+0x36>

  return HAL_OK;
 800e074:	2300      	movs	r3, #0
}
 800e076:	4618      	mov	r0, r3
 800e078:	3714      	adds	r7, #20
 800e07a:	46bd      	mov	sp, r7
 800e07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e080:	4770      	bx	lr
 800e082:	bf00      	nop
 800e084:	00030d40 	.word	0x00030d40

0800e088 <isl76682_init>:

#define DEV_RANGE    ISL76682_RANGE_16K
#define DEV_MODE     ISL76682_MODE_AMBIENT

int isl76682_init(uint16_t addr)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b088      	sub	sp, #32
 800e08c:	af04      	add	r7, sp, #16
 800e08e:	4603      	mov	r3, r0
 800e090:	80fb      	strh	r3, [r7, #6]
	int res;
	uint8_t config;

	/* initialize device descriptor */

	lux_fac = (float)((1 << (10 + (2 * DEV_RANGE))) - 1) / 0xffff;
 800e092:	4b16      	ldr	r3, [pc, #88]	; (800e0ec <isl76682_init+0x64>)
 800e094:	4a16      	ldr	r2, [pc, #88]	; (800e0f0 <isl76682_init+0x68>)
 800e096:	601a      	str	r2, [r3, #0]

	/* acquire access to device */
	if (HAL_I2C_IsDeviceReady(&hi2c4, addr, 3, 1000) != HAL_OK) // shift karena ada start bit
 800e098:	88f9      	ldrh	r1, [r7, #6]
 800e09a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e09e:	2203      	movs	r2, #3
 800e0a0:	4814      	ldr	r0, [pc, #80]	; (800e0f4 <isl76682_init+0x6c>)
 800e0a2:	f7f8 fc39 	bl	8006918 <HAL_I2C_IsDeviceReady>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d002      	beq.n	800e0b2 <isl76682_init+0x2a>
	{
	  /* Return false */
	  return -1;
 800e0ac:	f04f 33ff 	mov.w	r3, #4294967295
 800e0b0:	e018      	b.n	800e0e4 <isl76682_init+0x5c>
	}

	/* configure and enable the sensor */

	config = (ISL76682_CMD_EN | ISL76682_CMD_MODE |
 800e0b2:	23c2      	movs	r3, #194	; 0xc2
 800e0b4:	72fb      	strb	r3, [r7, #11]
	    ISL76682_RES_INT_16 | DEV_RANGE | (DEV_MODE << 5));
	res = HAL_I2C_Mem_Write(&hi2c4, addr, ISL76682_REG_CMD,
 800e0b6:	88f9      	ldrh	r1, [r7, #6]
 800e0b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e0bc:	9302      	str	r3, [sp, #8]
 800e0be:	2301      	movs	r3, #1
 800e0c0:	9301      	str	r3, [sp, #4]
 800e0c2:	f107 030b 	add.w	r3, r7, #11
 800e0c6:	9300      	str	r3, [sp, #0]
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	4809      	ldr	r0, [pc, #36]	; (800e0f4 <isl76682_init+0x6c>)
 800e0ce:	f7f8 f9f5 	bl	80064bc <HAL_I2C_Mem_Write>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	60fb      	str	r3, [r7, #12]
	                        I2C_MEMADD_SIZE_8BIT, &config, sizeof(config), 1000);
	if (res < 0)
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	da02      	bge.n	800e0e2 <isl76682_init+0x5a>
	{
	  return -1;
 800e0dc:	f04f 33ff 	mov.w	r3, #4294967295
 800e0e0:	e000      	b.n	800e0e4 <isl76682_init+0x5c>
	}

	return 0;
 800e0e2:	2300      	movs	r3, #0
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3710      	adds	r7, #16
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}
 800e0ec:	24000b9c 	.word	0x24000b9c
 800e0f0:	3e7ffd00 	.word	0x3e7ffd00
 800e0f4:	24000240 	.word	0x24000240

0800e0f8 <isl76682_read>:

int isl76682_read(const uint16_t addr)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b088      	sub	sp, #32
 800e0fc:	af04      	add	r7, sp, #16
 800e0fe:	4603      	mov	r3, r0
 800e100:	80fb      	strh	r3, [r7, #6]
  uint8_t low, high;
  uint16_t res;
  int ret;

  /* read lighting value */
  ret = HAL_I2C_Mem_Read(&hi2c4, addr, ISL76682_REG_LDATA,
 800e102:	88f9      	ldrh	r1, [r7, #6]
 800e104:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e108:	9302      	str	r3, [sp, #8]
 800e10a:	2301      	movs	r3, #1
 800e10c:	9301      	str	r3, [sp, #4]
 800e10e:	f107 0309 	add.w	r3, r7, #9
 800e112:	9300      	str	r3, [sp, #0]
 800e114:	2301      	movs	r3, #1
 800e116:	2201      	movs	r2, #1
 800e118:	481b      	ldr	r0, [pc, #108]	; (800e188 <isl76682_read+0x90>)
 800e11a:	f7f8 fae3 	bl	80066e4 <HAL_I2C_Mem_Read>
 800e11e:	4603      	mov	r3, r0
 800e120:	60fb      	str	r3, [r7, #12]
                         I2C_MEMADD_SIZE_8BIT, &low, 1, 1000);
  ret += HAL_I2C_Mem_Read(&hi2c4, addr, ISL76682_REG_HDATA,
 800e122:	88f9      	ldrh	r1, [r7, #6]
 800e124:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e128:	9302      	str	r3, [sp, #8]
 800e12a:	2301      	movs	r3, #1
 800e12c:	9301      	str	r3, [sp, #4]
 800e12e:	f107 0308 	add.w	r3, r7, #8
 800e132:	9300      	str	r3, [sp, #0]
 800e134:	2301      	movs	r3, #1
 800e136:	2202      	movs	r2, #2
 800e138:	4813      	ldr	r0, [pc, #76]	; (800e188 <isl76682_read+0x90>)
 800e13a:	f7f8 fad3 	bl	80066e4 <HAL_I2C_Mem_Read>
 800e13e:	4603      	mov	r3, r0
 800e140:	461a      	mov	r2, r3
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	4413      	add	r3, r2
 800e146:	60fb      	str	r3, [r7, #12]
                          I2C_MEMADD_SIZE_8BIT, &high, 1, 1000);
  if (ret != 0) //check error
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d002      	beq.n	800e154 <isl76682_read+0x5c>
  {
    return -1;
 800e14e:	f04f 33ff 	mov.w	r3, #4294967295
 800e152:	e015      	b.n	800e180 <isl76682_read+0x88>
  }
  res = (high << 8) | low;
 800e154:	7a3b      	ldrb	r3, [r7, #8]
 800e156:	021b      	lsls	r3, r3, #8
 800e158:	b21a      	sxth	r2, r3
 800e15a:	7a7b      	ldrb	r3, [r7, #9]
 800e15c:	b21b      	sxth	r3, r3
 800e15e:	4313      	orrs	r3, r2
 800e160:	b21b      	sxth	r3, r3
 800e162:	817b      	strh	r3, [r7, #10]
  /* calculate and return the actual lux value */
  return (int)(lux_fac * res);
 800e164:	897b      	ldrh	r3, [r7, #10]
 800e166:	ee07 3a90 	vmov	s15, r3
 800e16a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e16e:	4b07      	ldr	r3, [pc, #28]	; (800e18c <isl76682_read+0x94>)
 800e170:	edd3 7a00 	vldr	s15, [r3]
 800e174:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e178:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e17c:	ee17 3a90 	vmov	r3, s15
}
 800e180:	4618      	mov	r0, r3
 800e182:	3710      	adds	r7, #16
 800e184:	46bd      	mov	sp, r7
 800e186:	bd80      	pop	{r7, pc}
 800e188:	24000240 	.word	0x24000240
 800e18c:	24000b9c 	.word	0x24000b9c

0800e190 <tan>:
 800e190:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e192:	eeb0 7b40 	vmov.f64	d7, d0
 800e196:	ee17 3a90 	vmov	r3, s15
 800e19a:	4a15      	ldr	r2, [pc, #84]	; (800e1f0 <tan+0x60>)
 800e19c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e1a0:	4293      	cmp	r3, r2
 800e1a2:	dc07      	bgt.n	800e1b4 <tan+0x24>
 800e1a4:	ed9f 1b10 	vldr	d1, [pc, #64]	; 800e1e8 <tan+0x58>
 800e1a8:	2001      	movs	r0, #1
 800e1aa:	b005      	add	sp, #20
 800e1ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800e1b0:	f000 bbfe 	b.w	800e9b0 <__kernel_tan>
 800e1b4:	4a0f      	ldr	r2, [pc, #60]	; (800e1f4 <tan+0x64>)
 800e1b6:	4293      	cmp	r3, r2
 800e1b8:	dd04      	ble.n	800e1c4 <tan+0x34>
 800e1ba:	ee30 0b40 	vsub.f64	d0, d0, d0
 800e1be:	b005      	add	sp, #20
 800e1c0:	f85d fb04 	ldr.w	pc, [sp], #4
 800e1c4:	4668      	mov	r0, sp
 800e1c6:	f000 f817 	bl	800e1f8 <__ieee754_rem_pio2>
 800e1ca:	0040      	lsls	r0, r0, #1
 800e1cc:	f000 0002 	and.w	r0, r0, #2
 800e1d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e1d4:	ed9d 0b00 	vldr	d0, [sp]
 800e1d8:	f1c0 0001 	rsb	r0, r0, #1
 800e1dc:	f000 fbe8 	bl	800e9b0 <__kernel_tan>
 800e1e0:	e7ed      	b.n	800e1be <tan+0x2e>
 800e1e2:	bf00      	nop
 800e1e4:	f3af 8000 	nop.w
	...
 800e1f0:	3fe921fb 	.word	0x3fe921fb
 800e1f4:	7fefffff 	.word	0x7fefffff

0800e1f8 <__ieee754_rem_pio2>:
 800e1f8:	b570      	push	{r4, r5, r6, lr}
 800e1fa:	eeb0 7b40 	vmov.f64	d7, d0
 800e1fe:	ee17 5a90 	vmov	r5, s15
 800e202:	4b99      	ldr	r3, [pc, #612]	; (800e468 <__ieee754_rem_pio2+0x270>)
 800e204:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e208:	429e      	cmp	r6, r3
 800e20a:	b088      	sub	sp, #32
 800e20c:	4604      	mov	r4, r0
 800e20e:	dc07      	bgt.n	800e220 <__ieee754_rem_pio2+0x28>
 800e210:	2200      	movs	r2, #0
 800e212:	2300      	movs	r3, #0
 800e214:	ed84 0b00 	vstr	d0, [r4]
 800e218:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e21c:	2000      	movs	r0, #0
 800e21e:	e01b      	b.n	800e258 <__ieee754_rem_pio2+0x60>
 800e220:	4b92      	ldr	r3, [pc, #584]	; (800e46c <__ieee754_rem_pio2+0x274>)
 800e222:	429e      	cmp	r6, r3
 800e224:	dc3b      	bgt.n	800e29e <__ieee754_rem_pio2+0xa6>
 800e226:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800e22a:	2d00      	cmp	r5, #0
 800e22c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 800e428 <__ieee754_rem_pio2+0x230>
 800e230:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800e234:	dd19      	ble.n	800e26a <__ieee754_rem_pio2+0x72>
 800e236:	ee30 7b46 	vsub.f64	d7, d0, d6
 800e23a:	429e      	cmp	r6, r3
 800e23c:	d00e      	beq.n	800e25c <__ieee754_rem_pio2+0x64>
 800e23e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800e430 <__ieee754_rem_pio2+0x238>
 800e242:	ee37 5b46 	vsub.f64	d5, d7, d6
 800e246:	ee37 7b45 	vsub.f64	d7, d7, d5
 800e24a:	ed84 5b00 	vstr	d5, [r4]
 800e24e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e252:	ed84 7b02 	vstr	d7, [r4, #8]
 800e256:	2001      	movs	r0, #1
 800e258:	b008      	add	sp, #32
 800e25a:	bd70      	pop	{r4, r5, r6, pc}
 800e25c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800e438 <__ieee754_rem_pio2+0x240>
 800e260:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e264:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800e440 <__ieee754_rem_pio2+0x248>
 800e268:	e7eb      	b.n	800e242 <__ieee754_rem_pio2+0x4a>
 800e26a:	429e      	cmp	r6, r3
 800e26c:	ee30 7b06 	vadd.f64	d7, d0, d6
 800e270:	d00e      	beq.n	800e290 <__ieee754_rem_pio2+0x98>
 800e272:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 800e430 <__ieee754_rem_pio2+0x238>
 800e276:	ee37 5b06 	vadd.f64	d5, d7, d6
 800e27a:	ee37 7b45 	vsub.f64	d7, d7, d5
 800e27e:	ed84 5b00 	vstr	d5, [r4]
 800e282:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e286:	f04f 30ff 	mov.w	r0, #4294967295
 800e28a:	ed84 7b02 	vstr	d7, [r4, #8]
 800e28e:	e7e3      	b.n	800e258 <__ieee754_rem_pio2+0x60>
 800e290:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800e438 <__ieee754_rem_pio2+0x240>
 800e294:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e298:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800e440 <__ieee754_rem_pio2+0x248>
 800e29c:	e7eb      	b.n	800e276 <__ieee754_rem_pio2+0x7e>
 800e29e:	4b74      	ldr	r3, [pc, #464]	; (800e470 <__ieee754_rem_pio2+0x278>)
 800e2a0:	429e      	cmp	r6, r3
 800e2a2:	dc70      	bgt.n	800e386 <__ieee754_rem_pio2+0x18e>
 800e2a4:	f000 fc9c 	bl	800ebe0 <fabs>
 800e2a8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800e2ac:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800e448 <__ieee754_rem_pio2+0x250>
 800e2b0:	eea0 7b06 	vfma.f64	d7, d0, d6
 800e2b4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800e2b8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800e2bc:	ee17 0a90 	vmov	r0, s15
 800e2c0:	eeb1 4b45 	vneg.f64	d4, d5
 800e2c4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800e428 <__ieee754_rem_pio2+0x230>
 800e2c8:	eea5 0b47 	vfms.f64	d0, d5, d7
 800e2cc:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800e430 <__ieee754_rem_pio2+0x238>
 800e2d0:	281f      	cmp	r0, #31
 800e2d2:	ee25 7b07 	vmul.f64	d7, d5, d7
 800e2d6:	ee30 6b47 	vsub.f64	d6, d0, d7
 800e2da:	dc08      	bgt.n	800e2ee <__ieee754_rem_pio2+0xf6>
 800e2dc:	4b65      	ldr	r3, [pc, #404]	; (800e474 <__ieee754_rem_pio2+0x27c>)
 800e2de:	1e42      	subs	r2, r0, #1
 800e2e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2e4:	42b3      	cmp	r3, r6
 800e2e6:	d002      	beq.n	800e2ee <__ieee754_rem_pio2+0xf6>
 800e2e8:	ed84 6b00 	vstr	d6, [r4]
 800e2ec:	e026      	b.n	800e33c <__ieee754_rem_pio2+0x144>
 800e2ee:	ee16 3a90 	vmov	r3, s13
 800e2f2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800e2f6:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800e2fa:	2b10      	cmp	r3, #16
 800e2fc:	ea4f 5226 	mov.w	r2, r6, asr #20
 800e300:	ddf2      	ble.n	800e2e8 <__ieee754_rem_pio2+0xf0>
 800e302:	eeb0 6b40 	vmov.f64	d6, d0
 800e306:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 800e438 <__ieee754_rem_pio2+0x240>
 800e30a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 800e440 <__ieee754_rem_pio2+0x248>
 800e30e:	eea4 6b07 	vfma.f64	d6, d4, d7
 800e312:	ee30 0b46 	vsub.f64	d0, d0, d6
 800e316:	eea4 0b07 	vfma.f64	d0, d4, d7
 800e31a:	eeb0 7b40 	vmov.f64	d7, d0
 800e31e:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800e322:	ee36 3b47 	vsub.f64	d3, d6, d7
 800e326:	ee13 3a90 	vmov	r3, s7
 800e32a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800e32e:	1ad3      	subs	r3, r2, r3
 800e330:	2b31      	cmp	r3, #49	; 0x31
 800e332:	dc17      	bgt.n	800e364 <__ieee754_rem_pio2+0x16c>
 800e334:	eeb0 0b46 	vmov.f64	d0, d6
 800e338:	ed84 3b00 	vstr	d3, [r4]
 800e33c:	ed94 6b00 	vldr	d6, [r4]
 800e340:	2d00      	cmp	r5, #0
 800e342:	ee30 0b46 	vsub.f64	d0, d0, d6
 800e346:	ee30 0b47 	vsub.f64	d0, d0, d7
 800e34a:	ed84 0b02 	vstr	d0, [r4, #8]
 800e34e:	da83      	bge.n	800e258 <__ieee754_rem_pio2+0x60>
 800e350:	eeb1 6b46 	vneg.f64	d6, d6
 800e354:	eeb1 0b40 	vneg.f64	d0, d0
 800e358:	ed84 6b00 	vstr	d6, [r4]
 800e35c:	ed84 0b02 	vstr	d0, [r4, #8]
 800e360:	4240      	negs	r0, r0
 800e362:	e779      	b.n	800e258 <__ieee754_rem_pio2+0x60>
 800e364:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 800e450 <__ieee754_rem_pio2+0x258>
 800e368:	eeb0 0b46 	vmov.f64	d0, d6
 800e36c:	eea4 0b03 	vfma.f64	d0, d4, d3
 800e370:	ee36 7b40 	vsub.f64	d7, d6, d0
 800e374:	ed9f 6b38 	vldr	d6, [pc, #224]	; 800e458 <__ieee754_rem_pio2+0x260>
 800e378:	eea4 7b03 	vfma.f64	d7, d4, d3
 800e37c:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800e380:	ee30 6b47 	vsub.f64	d6, d0, d7
 800e384:	e7b0      	b.n	800e2e8 <__ieee754_rem_pio2+0xf0>
 800e386:	4b3c      	ldr	r3, [pc, #240]	; (800e478 <__ieee754_rem_pio2+0x280>)
 800e388:	429e      	cmp	r6, r3
 800e38a:	dd06      	ble.n	800e39a <__ieee754_rem_pio2+0x1a2>
 800e38c:	ee30 7b40 	vsub.f64	d7, d0, d0
 800e390:	ed80 7b02 	vstr	d7, [r0, #8]
 800e394:	ed80 7b00 	vstr	d7, [r0]
 800e398:	e740      	b.n	800e21c <__ieee754_rem_pio2+0x24>
 800e39a:	1532      	asrs	r2, r6, #20
 800e39c:	ee10 0a10 	vmov	r0, s0
 800e3a0:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800e3a4:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800e3a8:	ec41 0b17 	vmov	d7, r0, r1
 800e3ac:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800e3b0:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 800e460 <__ieee754_rem_pio2+0x268>
 800e3b4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800e3b8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e3bc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e3c0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e3c4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800e3c8:	a902      	add	r1, sp, #8
 800e3ca:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800e3ce:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e3d2:	ed8d 6b04 	vstr	d6, [sp, #16]
 800e3d6:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e3da:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e3de:	2603      	movs	r6, #3
 800e3e0:	4608      	mov	r0, r1
 800e3e2:	ed91 7b04 	vldr	d7, [r1, #16]
 800e3e6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e3ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3ee:	4633      	mov	r3, r6
 800e3f0:	f1a1 0108 	sub.w	r1, r1, #8
 800e3f4:	f106 36ff 	add.w	r6, r6, #4294967295
 800e3f8:	d0f3      	beq.n	800e3e2 <__ieee754_rem_pio2+0x1ea>
 800e3fa:	4920      	ldr	r1, [pc, #128]	; (800e47c <__ieee754_rem_pio2+0x284>)
 800e3fc:	9101      	str	r1, [sp, #4]
 800e3fe:	2102      	movs	r1, #2
 800e400:	9100      	str	r1, [sp, #0]
 800e402:	4621      	mov	r1, r4
 800e404:	f000 f83c 	bl	800e480 <__kernel_rem_pio2>
 800e408:	2d00      	cmp	r5, #0
 800e40a:	f6bf af25 	bge.w	800e258 <__ieee754_rem_pio2+0x60>
 800e40e:	ed94 7b00 	vldr	d7, [r4]
 800e412:	eeb1 7b47 	vneg.f64	d7, d7
 800e416:	ed84 7b00 	vstr	d7, [r4]
 800e41a:	ed94 7b02 	vldr	d7, [r4, #8]
 800e41e:	eeb1 7b47 	vneg.f64	d7, d7
 800e422:	ed84 7b02 	vstr	d7, [r4, #8]
 800e426:	e79b      	b.n	800e360 <__ieee754_rem_pio2+0x168>
 800e428:	54400000 	.word	0x54400000
 800e42c:	3ff921fb 	.word	0x3ff921fb
 800e430:	1a626331 	.word	0x1a626331
 800e434:	3dd0b461 	.word	0x3dd0b461
 800e438:	1a600000 	.word	0x1a600000
 800e43c:	3dd0b461 	.word	0x3dd0b461
 800e440:	2e037073 	.word	0x2e037073
 800e444:	3ba3198a 	.word	0x3ba3198a
 800e448:	6dc9c883 	.word	0x6dc9c883
 800e44c:	3fe45f30 	.word	0x3fe45f30
 800e450:	2e000000 	.word	0x2e000000
 800e454:	3ba3198a 	.word	0x3ba3198a
 800e458:	252049c1 	.word	0x252049c1
 800e45c:	397b839a 	.word	0x397b839a
 800e460:	00000000 	.word	0x00000000
 800e464:	41700000 	.word	0x41700000
 800e468:	3fe921fb 	.word	0x3fe921fb
 800e46c:	4002d97b 	.word	0x4002d97b
 800e470:	413921fb 	.word	0x413921fb
 800e474:	0800eea8 	.word	0x0800eea8
 800e478:	7fefffff 	.word	0x7fefffff
 800e47c:	0800ef28 	.word	0x0800ef28

0800e480 <__kernel_rem_pio2>:
 800e480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e484:	ed2d 8b06 	vpush	{d8-d10}
 800e488:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800e48c:	460f      	mov	r7, r1
 800e48e:	9002      	str	r0, [sp, #8]
 800e490:	49c5      	ldr	r1, [pc, #788]	; (800e7a8 <__kernel_rem_pio2+0x328>)
 800e492:	98a2      	ldr	r0, [sp, #648]	; 0x288
 800e494:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 800e498:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800e49c:	9301      	str	r3, [sp, #4]
 800e49e:	f112 0f14 	cmn.w	r2, #20
 800e4a2:	bfa8      	it	ge
 800e4a4:	2018      	movge	r0, #24
 800e4a6:	f103 31ff 	add.w	r1, r3, #4294967295
 800e4aa:	bfb8      	it	lt
 800e4ac:	2000      	movlt	r0, #0
 800e4ae:	f06f 0417 	mvn.w	r4, #23
 800e4b2:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 800e790 <__kernel_rem_pio2+0x310>
 800e4b6:	bfa4      	itt	ge
 800e4b8:	f1a2 0a03 	subge.w	sl, r2, #3
 800e4bc:	fb9a f0f0 	sdivge	r0, sl, r0
 800e4c0:	fb00 4404 	mla	r4, r0, r4, r4
 800e4c4:	1a46      	subs	r6, r0, r1
 800e4c6:	4414      	add	r4, r2
 800e4c8:	eb09 0c01 	add.w	ip, r9, r1
 800e4cc:	ad1a      	add	r5, sp, #104	; 0x68
 800e4ce:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	4562      	cmp	r2, ip
 800e4d6:	dd10      	ble.n	800e4fa <__kernel_rem_pio2+0x7a>
 800e4d8:	9a01      	ldr	r2, [sp, #4]
 800e4da:	ab1a      	add	r3, sp, #104	; 0x68
 800e4dc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800e4e0:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 800e4e4:	f04f 0c00 	mov.w	ip, #0
 800e4e8:	45cc      	cmp	ip, r9
 800e4ea:	dc26      	bgt.n	800e53a <__kernel_rem_pio2+0xba>
 800e4ec:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 800e790 <__kernel_rem_pio2+0x310>
 800e4f0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e4f4:	4616      	mov	r6, r2
 800e4f6:	2500      	movs	r5, #0
 800e4f8:	e015      	b.n	800e526 <__kernel_rem_pio2+0xa6>
 800e4fa:	42d6      	cmn	r6, r2
 800e4fc:	d409      	bmi.n	800e512 <__kernel_rem_pio2+0x92>
 800e4fe:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 800e502:	ee07 3a90 	vmov	s15, r3
 800e506:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e50a:	eca5 7b02 	vstmia	r5!, {d7}
 800e50e:	3201      	adds	r2, #1
 800e510:	e7e0      	b.n	800e4d4 <__kernel_rem_pio2+0x54>
 800e512:	eeb0 7b46 	vmov.f64	d7, d6
 800e516:	e7f8      	b.n	800e50a <__kernel_rem_pio2+0x8a>
 800e518:	ecb8 5b02 	vldmia	r8!, {d5}
 800e51c:	ed96 6b00 	vldr	d6, [r6]
 800e520:	3501      	adds	r5, #1
 800e522:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e526:	428d      	cmp	r5, r1
 800e528:	f1a6 0608 	sub.w	r6, r6, #8
 800e52c:	ddf4      	ble.n	800e518 <__kernel_rem_pio2+0x98>
 800e52e:	ecaa 7b02 	vstmia	sl!, {d7}
 800e532:	f10c 0c01 	add.w	ip, ip, #1
 800e536:	3208      	adds	r2, #8
 800e538:	e7d6      	b.n	800e4e8 <__kernel_rem_pio2+0x68>
 800e53a:	ab06      	add	r3, sp, #24
 800e53c:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800e798 <__kernel_rem_pio2+0x318>
 800e540:	ed9f ab97 	vldr	d10, [pc, #604]	; 800e7a0 <__kernel_rem_pio2+0x320>
 800e544:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800e548:	9303      	str	r3, [sp, #12]
 800e54a:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 800e54e:	464d      	mov	r5, r9
 800e550:	00eb      	lsls	r3, r5, #3
 800e552:	9304      	str	r3, [sp, #16]
 800e554:	ab92      	add	r3, sp, #584	; 0x248
 800e556:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800e55a:	f10d 0b18 	add.w	fp, sp, #24
 800e55e:	ab6a      	add	r3, sp, #424	; 0x1a8
 800e560:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 800e564:	465e      	mov	r6, fp
 800e566:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800e56a:	4628      	mov	r0, r5
 800e56c:	2800      	cmp	r0, #0
 800e56e:	f1a2 0208 	sub.w	r2, r2, #8
 800e572:	dc4c      	bgt.n	800e60e <__kernel_rem_pio2+0x18e>
 800e574:	4620      	mov	r0, r4
 800e576:	9105      	str	r1, [sp, #20]
 800e578:	f000 fbb2 	bl	800ece0 <scalbn>
 800e57c:	eeb0 8b40 	vmov.f64	d8, d0
 800e580:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800e584:	ee28 0b00 	vmul.f64	d0, d8, d0
 800e588:	f000 fb36 	bl	800ebf8 <floor>
 800e58c:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800e590:	eea0 8b47 	vfms.f64	d8, d0, d7
 800e594:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800e598:	2c00      	cmp	r4, #0
 800e59a:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800e59e:	ee17 8a90 	vmov	r8, s15
 800e5a2:	ee38 8b40 	vsub.f64	d8, d8, d0
 800e5a6:	9905      	ldr	r1, [sp, #20]
 800e5a8:	dd43      	ble.n	800e632 <__kernel_rem_pio2+0x1b2>
 800e5aa:	1e68      	subs	r0, r5, #1
 800e5ac:	ab06      	add	r3, sp, #24
 800e5ae:	f1c4 0c18 	rsb	ip, r4, #24
 800e5b2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800e5b6:	fa46 f20c 	asr.w	r2, r6, ip
 800e5ba:	4490      	add	r8, r2
 800e5bc:	fa02 f20c 	lsl.w	r2, r2, ip
 800e5c0:	1ab6      	subs	r6, r6, r2
 800e5c2:	f1c4 0217 	rsb	r2, r4, #23
 800e5c6:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 800e5ca:	4116      	asrs	r6, r2
 800e5cc:	2e00      	cmp	r6, #0
 800e5ce:	dd3f      	ble.n	800e650 <__kernel_rem_pio2+0x1d0>
 800e5d0:	f04f 0c00 	mov.w	ip, #0
 800e5d4:	f108 0801 	add.w	r8, r8, #1
 800e5d8:	4660      	mov	r0, ip
 800e5da:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800e5de:	4565      	cmp	r5, ip
 800e5e0:	dc6e      	bgt.n	800e6c0 <__kernel_rem_pio2+0x240>
 800e5e2:	2c00      	cmp	r4, #0
 800e5e4:	dd04      	ble.n	800e5f0 <__kernel_rem_pio2+0x170>
 800e5e6:	2c01      	cmp	r4, #1
 800e5e8:	d07f      	beq.n	800e6ea <__kernel_rem_pio2+0x26a>
 800e5ea:	2c02      	cmp	r4, #2
 800e5ec:	f000 8087 	beq.w	800e6fe <__kernel_rem_pio2+0x27e>
 800e5f0:	2e02      	cmp	r6, #2
 800e5f2:	d12d      	bne.n	800e650 <__kernel_rem_pio2+0x1d0>
 800e5f4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e5f8:	ee30 8b48 	vsub.f64	d8, d0, d8
 800e5fc:	b340      	cbz	r0, 800e650 <__kernel_rem_pio2+0x1d0>
 800e5fe:	4620      	mov	r0, r4
 800e600:	9105      	str	r1, [sp, #20]
 800e602:	f000 fb6d 	bl	800ece0 <scalbn>
 800e606:	9905      	ldr	r1, [sp, #20]
 800e608:	ee38 8b40 	vsub.f64	d8, d8, d0
 800e60c:	e020      	b.n	800e650 <__kernel_rem_pio2+0x1d0>
 800e60e:	ee20 7b09 	vmul.f64	d7, d0, d9
 800e612:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800e616:	3801      	subs	r0, #1
 800e618:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800e61c:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800e620:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e624:	eca6 0a01 	vstmia	r6!, {s0}
 800e628:	ed92 0b00 	vldr	d0, [r2]
 800e62c:	ee37 0b00 	vadd.f64	d0, d7, d0
 800e630:	e79c      	b.n	800e56c <__kernel_rem_pio2+0xec>
 800e632:	d105      	bne.n	800e640 <__kernel_rem_pio2+0x1c0>
 800e634:	1e6a      	subs	r2, r5, #1
 800e636:	ab06      	add	r3, sp, #24
 800e638:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800e63c:	15f6      	asrs	r6, r6, #23
 800e63e:	e7c5      	b.n	800e5cc <__kernel_rem_pio2+0x14c>
 800e640:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800e644:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e64c:	da36      	bge.n	800e6bc <__kernel_rem_pio2+0x23c>
 800e64e:	2600      	movs	r6, #0
 800e650:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e658:	f040 80aa 	bne.w	800e7b0 <__kernel_rem_pio2+0x330>
 800e65c:	f105 3bff 	add.w	fp, r5, #4294967295
 800e660:	4658      	mov	r0, fp
 800e662:	2200      	movs	r2, #0
 800e664:	4548      	cmp	r0, r9
 800e666:	da52      	bge.n	800e70e <__kernel_rem_pio2+0x28e>
 800e668:	2a00      	cmp	r2, #0
 800e66a:	f000 8081 	beq.w	800e770 <__kernel_rem_pio2+0x2f0>
 800e66e:	ab06      	add	r3, sp, #24
 800e670:	3c18      	subs	r4, #24
 800e672:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800e676:	2b00      	cmp	r3, #0
 800e678:	f000 8087 	beq.w	800e78a <__kernel_rem_pio2+0x30a>
 800e67c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e680:	4620      	mov	r0, r4
 800e682:	f000 fb2d 	bl	800ece0 <scalbn>
 800e686:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e68a:	ed9f 6b43 	vldr	d6, [pc, #268]	; 800e798 <__kernel_rem_pio2+0x318>
 800e68e:	a96a      	add	r1, sp, #424	; 0x1a8
 800e690:	f103 0208 	add.w	r2, r3, #8
 800e694:	1888      	adds	r0, r1, r2
 800e696:	4659      	mov	r1, fp
 800e698:	2900      	cmp	r1, #0
 800e69a:	f280 80b7 	bge.w	800e80c <__kernel_rem_pio2+0x38c>
 800e69e:	4659      	mov	r1, fp
 800e6a0:	2900      	cmp	r1, #0
 800e6a2:	f2c0 80d5 	blt.w	800e850 <__kernel_rem_pio2+0x3d0>
 800e6a6:	a86a      	add	r0, sp, #424	; 0x1a8
 800e6a8:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 800e6ac:	ed9f 7b38 	vldr	d7, [pc, #224]	; 800e790 <__kernel_rem_pio2+0x310>
 800e6b0:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 800e7ac <__kernel_rem_pio2+0x32c>
 800e6b4:	2400      	movs	r4, #0
 800e6b6:	ebab 0001 	sub.w	r0, fp, r1
 800e6ba:	e0be      	b.n	800e83a <__kernel_rem_pio2+0x3ba>
 800e6bc:	2602      	movs	r6, #2
 800e6be:	e787      	b.n	800e5d0 <__kernel_rem_pio2+0x150>
 800e6c0:	f8db 2000 	ldr.w	r2, [fp]
 800e6c4:	b958      	cbnz	r0, 800e6de <__kernel_rem_pio2+0x25e>
 800e6c6:	b122      	cbz	r2, 800e6d2 <__kernel_rem_pio2+0x252>
 800e6c8:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800e6cc:	f8cb 2000 	str.w	r2, [fp]
 800e6d0:	2201      	movs	r2, #1
 800e6d2:	f10c 0c01 	add.w	ip, ip, #1
 800e6d6:	f10b 0b04 	add.w	fp, fp, #4
 800e6da:	4610      	mov	r0, r2
 800e6dc:	e77f      	b.n	800e5de <__kernel_rem_pio2+0x15e>
 800e6de:	ebae 0202 	sub.w	r2, lr, r2
 800e6e2:	f8cb 2000 	str.w	r2, [fp]
 800e6e6:	4602      	mov	r2, r0
 800e6e8:	e7f3      	b.n	800e6d2 <__kernel_rem_pio2+0x252>
 800e6ea:	f105 3cff 	add.w	ip, r5, #4294967295
 800e6ee:	ab06      	add	r3, sp, #24
 800e6f0:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800e6f4:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800e6f8:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 800e6fc:	e778      	b.n	800e5f0 <__kernel_rem_pio2+0x170>
 800e6fe:	f105 3cff 	add.w	ip, r5, #4294967295
 800e702:	ab06      	add	r3, sp, #24
 800e704:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800e708:	f3c2 0215 	ubfx	r2, r2, #0, #22
 800e70c:	e7f4      	b.n	800e6f8 <__kernel_rem_pio2+0x278>
 800e70e:	ab06      	add	r3, sp, #24
 800e710:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800e714:	3801      	subs	r0, #1
 800e716:	431a      	orrs	r2, r3
 800e718:	e7a4      	b.n	800e664 <__kernel_rem_pio2+0x1e4>
 800e71a:	f10c 0c01 	add.w	ip, ip, #1
 800e71e:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800e722:	2800      	cmp	r0, #0
 800e724:	d0f9      	beq.n	800e71a <__kernel_rem_pio2+0x29a>
 800e726:	9b04      	ldr	r3, [sp, #16]
 800e728:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800e72c:	eb0d 0203 	add.w	r2, sp, r3
 800e730:	9b01      	ldr	r3, [sp, #4]
 800e732:	18e8      	adds	r0, r5, r3
 800e734:	ab1a      	add	r3, sp, #104	; 0x68
 800e736:	1c6e      	adds	r6, r5, #1
 800e738:	3a98      	subs	r2, #152	; 0x98
 800e73a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800e73e:	4465      	add	r5, ip
 800e740:	42b5      	cmp	r5, r6
 800e742:	f6ff af05 	blt.w	800e550 <__kernel_rem_pio2+0xd0>
 800e746:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 800e74a:	f8dd e008 	ldr.w	lr, [sp, #8]
 800e74e:	ee07 3a90 	vmov	s15, r3
 800e752:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e756:	f04f 0c00 	mov.w	ip, #0
 800e75a:	eca0 7b02 	vstmia	r0!, {d7}
 800e75e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800e790 <__kernel_rem_pio2+0x310>
 800e762:	4680      	mov	r8, r0
 800e764:	458c      	cmp	ip, r1
 800e766:	dd07      	ble.n	800e778 <__kernel_rem_pio2+0x2f8>
 800e768:	eca2 7b02 	vstmia	r2!, {d7}
 800e76c:	3601      	adds	r6, #1
 800e76e:	e7e7      	b.n	800e740 <__kernel_rem_pio2+0x2c0>
 800e770:	9a03      	ldr	r2, [sp, #12]
 800e772:	f04f 0c01 	mov.w	ip, #1
 800e776:	e7d2      	b.n	800e71e <__kernel_rem_pio2+0x29e>
 800e778:	ecbe 5b02 	vldmia	lr!, {d5}
 800e77c:	ed38 6b02 	vldmdb	r8!, {d6}
 800e780:	f10c 0c01 	add.w	ip, ip, #1
 800e784:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e788:	e7ec      	b.n	800e764 <__kernel_rem_pio2+0x2e4>
 800e78a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e78e:	e76e      	b.n	800e66e <__kernel_rem_pio2+0x1ee>
	...
 800e79c:	3e700000 	.word	0x3e700000
 800e7a0:	00000000 	.word	0x00000000
 800e7a4:	41700000 	.word	0x41700000
 800e7a8:	0800f070 	.word	0x0800f070
 800e7ac:	0800f030 	.word	0x0800f030
 800e7b0:	4260      	negs	r0, r4
 800e7b2:	eeb0 0b48 	vmov.f64	d0, d8
 800e7b6:	f000 fa93 	bl	800ece0 <scalbn>
 800e7ba:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800e998 <__kernel_rem_pio2+0x518>
 800e7be:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800e7c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7c6:	db18      	blt.n	800e7fa <__kernel_rem_pio2+0x37a>
 800e7c8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800e9a0 <__kernel_rem_pio2+0x520>
 800e7cc:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e7d0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800e7d4:	aa06      	add	r2, sp, #24
 800e7d6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800e7da:	eea5 0b46 	vfms.f64	d0, d5, d6
 800e7de:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e7e2:	f105 0b01 	add.w	fp, r5, #1
 800e7e6:	ee10 3a10 	vmov	r3, s0
 800e7ea:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800e7ee:	ee17 3a10 	vmov	r3, s14
 800e7f2:	3418      	adds	r4, #24
 800e7f4:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 800e7f8:	e740      	b.n	800e67c <__kernel_rem_pio2+0x1fc>
 800e7fa:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e7fe:	aa06      	add	r2, sp, #24
 800e800:	ee10 3a10 	vmov	r3, s0
 800e804:	46ab      	mov	fp, r5
 800e806:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800e80a:	e737      	b.n	800e67c <__kernel_rem_pio2+0x1fc>
 800e80c:	ac06      	add	r4, sp, #24
 800e80e:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 800e812:	9401      	str	r4, [sp, #4]
 800e814:	ee07 4a90 	vmov	s15, r4
 800e818:	3901      	subs	r1, #1
 800e81a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e81e:	ee27 7b00 	vmul.f64	d7, d7, d0
 800e822:	ee20 0b06 	vmul.f64	d0, d0, d6
 800e826:	ed20 7b02 	vstmdb	r0!, {d7}
 800e82a:	e735      	b.n	800e698 <__kernel_rem_pio2+0x218>
 800e82c:	ecbc 5b02 	vldmia	ip!, {d5}
 800e830:	ecb5 6b02 	vldmia	r5!, {d6}
 800e834:	3401      	adds	r4, #1
 800e836:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e83a:	454c      	cmp	r4, r9
 800e83c:	dc01      	bgt.n	800e842 <__kernel_rem_pio2+0x3c2>
 800e83e:	4284      	cmp	r4, r0
 800e840:	ddf4      	ble.n	800e82c <__kernel_rem_pio2+0x3ac>
 800e842:	ac42      	add	r4, sp, #264	; 0x108
 800e844:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800e848:	ed80 7b00 	vstr	d7, [r0]
 800e84c:	3901      	subs	r1, #1
 800e84e:	e727      	b.n	800e6a0 <__kernel_rem_pio2+0x220>
 800e850:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800e852:	2902      	cmp	r1, #2
 800e854:	dc0a      	bgt.n	800e86c <__kernel_rem_pio2+0x3ec>
 800e856:	2900      	cmp	r1, #0
 800e858:	dc2c      	bgt.n	800e8b4 <__kernel_rem_pio2+0x434>
 800e85a:	d045      	beq.n	800e8e8 <__kernel_rem_pio2+0x468>
 800e85c:	f008 0007 	and.w	r0, r8, #7
 800e860:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800e864:	ecbd 8b06 	vpop	{d8-d10}
 800e868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e86c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800e86e:	2a03      	cmp	r2, #3
 800e870:	d1f4      	bne.n	800e85c <__kernel_rem_pio2+0x3dc>
 800e872:	aa42      	add	r2, sp, #264	; 0x108
 800e874:	4413      	add	r3, r2
 800e876:	461a      	mov	r2, r3
 800e878:	4619      	mov	r1, r3
 800e87a:	4658      	mov	r0, fp
 800e87c:	2800      	cmp	r0, #0
 800e87e:	f1a1 0108 	sub.w	r1, r1, #8
 800e882:	dc54      	bgt.n	800e92e <__kernel_rem_pio2+0x4ae>
 800e884:	4659      	mov	r1, fp
 800e886:	2901      	cmp	r1, #1
 800e888:	f1a2 0208 	sub.w	r2, r2, #8
 800e88c:	dc5f      	bgt.n	800e94e <__kernel_rem_pio2+0x4ce>
 800e88e:	ed9f 7b46 	vldr	d7, [pc, #280]	; 800e9a8 <__kernel_rem_pio2+0x528>
 800e892:	3308      	adds	r3, #8
 800e894:	f1bb 0f01 	cmp.w	fp, #1
 800e898:	dc69      	bgt.n	800e96e <__kernel_rem_pio2+0x4ee>
 800e89a:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800e89e:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800e8a2:	2e00      	cmp	r6, #0
 800e8a4:	d16a      	bne.n	800e97c <__kernel_rem_pio2+0x4fc>
 800e8a6:	ed87 5b00 	vstr	d5, [r7]
 800e8aa:	ed87 6b02 	vstr	d6, [r7, #8]
 800e8ae:	ed87 7b04 	vstr	d7, [r7, #16]
 800e8b2:	e7d3      	b.n	800e85c <__kernel_rem_pio2+0x3dc>
 800e8b4:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800e9a8 <__kernel_rem_pio2+0x528>
 800e8b8:	ab42      	add	r3, sp, #264	; 0x108
 800e8ba:	441a      	add	r2, r3
 800e8bc:	465b      	mov	r3, fp
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	da26      	bge.n	800e910 <__kernel_rem_pio2+0x490>
 800e8c2:	b35e      	cbz	r6, 800e91c <__kernel_rem_pio2+0x49c>
 800e8c4:	eeb1 7b46 	vneg.f64	d7, d6
 800e8c8:	ed87 7b00 	vstr	d7, [r7]
 800e8cc:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800e8d0:	aa44      	add	r2, sp, #272	; 0x110
 800e8d2:	2301      	movs	r3, #1
 800e8d4:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e8d8:	459b      	cmp	fp, r3
 800e8da:	da22      	bge.n	800e922 <__kernel_rem_pio2+0x4a2>
 800e8dc:	b10e      	cbz	r6, 800e8e2 <__kernel_rem_pio2+0x462>
 800e8de:	eeb1 7b47 	vneg.f64	d7, d7
 800e8e2:	ed87 7b02 	vstr	d7, [r7, #8]
 800e8e6:	e7b9      	b.n	800e85c <__kernel_rem_pio2+0x3dc>
 800e8e8:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800e9a8 <__kernel_rem_pio2+0x528>
 800e8ec:	ab42      	add	r3, sp, #264	; 0x108
 800e8ee:	441a      	add	r2, r3
 800e8f0:	f1bb 0f00 	cmp.w	fp, #0
 800e8f4:	da05      	bge.n	800e902 <__kernel_rem_pio2+0x482>
 800e8f6:	b10e      	cbz	r6, 800e8fc <__kernel_rem_pio2+0x47c>
 800e8f8:	eeb1 7b47 	vneg.f64	d7, d7
 800e8fc:	ed87 7b00 	vstr	d7, [r7]
 800e900:	e7ac      	b.n	800e85c <__kernel_rem_pio2+0x3dc>
 800e902:	ed32 6b02 	vldmdb	r2!, {d6}
 800e906:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e90a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e90e:	e7ef      	b.n	800e8f0 <__kernel_rem_pio2+0x470>
 800e910:	ed32 7b02 	vldmdb	r2!, {d7}
 800e914:	3b01      	subs	r3, #1
 800e916:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e91a:	e7d0      	b.n	800e8be <__kernel_rem_pio2+0x43e>
 800e91c:	eeb0 7b46 	vmov.f64	d7, d6
 800e920:	e7d2      	b.n	800e8c8 <__kernel_rem_pio2+0x448>
 800e922:	ecb2 6b02 	vldmia	r2!, {d6}
 800e926:	3301      	adds	r3, #1
 800e928:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e92c:	e7d4      	b.n	800e8d8 <__kernel_rem_pio2+0x458>
 800e92e:	ed91 7b00 	vldr	d7, [r1]
 800e932:	ed91 5b02 	vldr	d5, [r1, #8]
 800e936:	3801      	subs	r0, #1
 800e938:	ee37 6b05 	vadd.f64	d6, d7, d5
 800e93c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e940:	ed81 6b00 	vstr	d6, [r1]
 800e944:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e948:	ed81 7b02 	vstr	d7, [r1, #8]
 800e94c:	e796      	b.n	800e87c <__kernel_rem_pio2+0x3fc>
 800e94e:	ed92 7b00 	vldr	d7, [r2]
 800e952:	ed92 5b02 	vldr	d5, [r2, #8]
 800e956:	3901      	subs	r1, #1
 800e958:	ee37 6b05 	vadd.f64	d6, d7, d5
 800e95c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e960:	ed82 6b00 	vstr	d6, [r2]
 800e964:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e968:	ed82 7b02 	vstr	d7, [r2, #8]
 800e96c:	e78b      	b.n	800e886 <__kernel_rem_pio2+0x406>
 800e96e:	ed33 6b02 	vldmdb	r3!, {d6}
 800e972:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e976:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e97a:	e78b      	b.n	800e894 <__kernel_rem_pio2+0x414>
 800e97c:	eeb1 5b45 	vneg.f64	d5, d5
 800e980:	eeb1 6b46 	vneg.f64	d6, d6
 800e984:	ed87 5b00 	vstr	d5, [r7]
 800e988:	eeb1 7b47 	vneg.f64	d7, d7
 800e98c:	ed87 6b02 	vstr	d6, [r7, #8]
 800e990:	e78d      	b.n	800e8ae <__kernel_rem_pio2+0x42e>
 800e992:	bf00      	nop
 800e994:	f3af 8000 	nop.w
 800e998:	00000000 	.word	0x00000000
 800e99c:	41700000 	.word	0x41700000
 800e9a0:	00000000 	.word	0x00000000
 800e9a4:	3e700000 	.word	0x3e700000
	...

0800e9b0 <__kernel_tan>:
 800e9b0:	eeb0 7b40 	vmov.f64	d7, d0
 800e9b4:	ee17 3a90 	vmov	r3, s15
 800e9b8:	4987      	ldr	r1, [pc, #540]	; (800ebd8 <__kernel_tan+0x228>)
 800e9ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800e9be:	428a      	cmp	r2, r1
 800e9c0:	b510      	push	{r4, lr}
 800e9c2:	dc33      	bgt.n	800ea2c <__kernel_tan+0x7c>
 800e9c4:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 800e9c8:	ee16 1a90 	vmov	r1, s13
 800e9cc:	2900      	cmp	r1, #0
 800e9ce:	d143      	bne.n	800ea58 <__kernel_tan+0xa8>
 800e9d0:	ee10 4a10 	vmov	r4, s0
 800e9d4:	1c43      	adds	r3, r0, #1
 800e9d6:	4323      	orrs	r3, r4
 800e9d8:	4313      	orrs	r3, r2
 800e9da:	d108      	bne.n	800e9ee <__kernel_tan+0x3e>
 800e9dc:	f000 f900 	bl	800ebe0 <fabs>
 800e9e0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e9e4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800e9e8:	eeb0 0b47 	vmov.f64	d0, d7
 800e9ec:	bd10      	pop	{r4, pc}
 800e9ee:	2801      	cmp	r0, #1
 800e9f0:	d0fa      	beq.n	800e9e8 <__kernel_tan+0x38>
 800e9f2:	ee30 6b01 	vadd.f64	d6, d0, d1
 800e9f6:	ec53 2b16 	vmov	r2, r3, d6
 800e9fa:	460a      	mov	r2, r1
 800e9fc:	ec43 2b15 	vmov	d5, r2, r3
 800ea00:	ee35 7b40 	vsub.f64	d7, d5, d0
 800ea04:	ee31 1b47 	vsub.f64	d1, d1, d7
 800ea08:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800ea0c:	ee87 4b06 	vdiv.f64	d4, d7, d6
 800ea10:	ec53 2b14 	vmov	r2, r3, d4
 800ea14:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ea18:	460a      	mov	r2, r1
 800ea1a:	ec43 2b17 	vmov	d7, r2, r3
 800ea1e:	eea5 6b07 	vfma.f64	d6, d5, d7
 800ea22:	eea1 6b07 	vfma.f64	d6, d1, d7
 800ea26:	eea6 7b04 	vfma.f64	d7, d6, d4
 800ea2a:	e7dd      	b.n	800e9e8 <__kernel_tan+0x38>
 800ea2c:	496b      	ldr	r1, [pc, #428]	; (800ebdc <__kernel_tan+0x22c>)
 800ea2e:	428a      	cmp	r2, r1
 800ea30:	dd12      	ble.n	800ea58 <__kernel_tan+0xa8>
 800ea32:	ed9f 6b49 	vldr	d6, [pc, #292]	; 800eb58 <__kernel_tan+0x1a8>
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	bfb8      	it	lt
 800ea3a:	eeb1 7b40 	vneglt.f64	d7, d0
 800ea3e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ea42:	ed9f 6b47 	vldr	d6, [pc, #284]	; 800eb60 <__kernel_tan+0x1b0>
 800ea46:	bfb8      	it	lt
 800ea48:	eeb1 1b41 	vneglt.f64	d1, d1
 800ea4c:	ee36 1b41 	vsub.f64	d1, d6, d1
 800ea50:	ee31 7b07 	vadd.f64	d7, d1, d7
 800ea54:	ed9f 1b44 	vldr	d1, [pc, #272]	; 800eb68 <__kernel_tan+0x1b8>
 800ea58:	ee27 5b07 	vmul.f64	d5, d7, d7
 800ea5c:	ee25 6b05 	vmul.f64	d6, d5, d5
 800ea60:	ed9f 3b43 	vldr	d3, [pc, #268]	; 800eb70 <__kernel_tan+0x1c0>
 800ea64:	ed9f 4b44 	vldr	d4, [pc, #272]	; 800eb78 <__kernel_tan+0x1c8>
 800ea68:	eea6 4b03 	vfma.f64	d4, d6, d3
 800ea6c:	ed9f 3b44 	vldr	d3, [pc, #272]	; 800eb80 <__kernel_tan+0x1d0>
 800ea70:	eea4 3b06 	vfma.f64	d3, d4, d6
 800ea74:	ed9f 4b44 	vldr	d4, [pc, #272]	; 800eb88 <__kernel_tan+0x1d8>
 800ea78:	eea3 4b06 	vfma.f64	d4, d3, d6
 800ea7c:	ed9f 3b44 	vldr	d3, [pc, #272]	; 800eb90 <__kernel_tan+0x1e0>
 800ea80:	eea4 3b06 	vfma.f64	d3, d4, d6
 800ea84:	ed9f 4b44 	vldr	d4, [pc, #272]	; 800eb98 <__kernel_tan+0x1e8>
 800ea88:	ed9f 2b45 	vldr	d2, [pc, #276]	; 800eba0 <__kernel_tan+0x1f0>
 800ea8c:	eea3 4b06 	vfma.f64	d4, d3, d6
 800ea90:	ed9f 3b45 	vldr	d3, [pc, #276]	; 800eba8 <__kernel_tan+0x1f8>
 800ea94:	eea6 3b02 	vfma.f64	d3, d6, d2
 800ea98:	ed9f 2b45 	vldr	d2, [pc, #276]	; 800ebb0 <__kernel_tan+0x200>
 800ea9c:	eea3 2b06 	vfma.f64	d2, d3, d6
 800eaa0:	ed9f 3b45 	vldr	d3, [pc, #276]	; 800ebb8 <__kernel_tan+0x208>
 800eaa4:	eea2 3b06 	vfma.f64	d3, d2, d6
 800eaa8:	ed9f 2b45 	vldr	d2, [pc, #276]	; 800ebc0 <__kernel_tan+0x210>
 800eaac:	eea3 2b06 	vfma.f64	d2, d3, d6
 800eab0:	ed9f 3b45 	vldr	d3, [pc, #276]	; 800ebc8 <__kernel_tan+0x218>
 800eab4:	4949      	ldr	r1, [pc, #292]	; (800ebdc <__kernel_tan+0x22c>)
 800eab6:	eea2 3b06 	vfma.f64	d3, d2, d6
 800eaba:	ee27 2b05 	vmul.f64	d2, d7, d5
 800eabe:	eeb0 6b44 	vmov.f64	d6, d4
 800eac2:	eeb0 4b41 	vmov.f64	d4, d1
 800eac6:	eea3 6b05 	vfma.f64	d6, d3, d5
 800eaca:	eea6 4b02 	vfma.f64	d4, d6, d2
 800eace:	ed9f 6b40 	vldr	d6, [pc, #256]	; 800ebd0 <__kernel_tan+0x220>
 800ead2:	eea4 1b05 	vfma.f64	d1, d4, d5
 800ead6:	428a      	cmp	r2, r1
 800ead8:	eea2 1b06 	vfma.f64	d1, d2, d6
 800eadc:	ee37 5b01 	vadd.f64	d5, d7, d1
 800eae0:	dd1d      	ble.n	800eb1e <__kernel_tan+0x16e>
 800eae2:	ee25 3b05 	vmul.f64	d3, d5, d5
 800eae6:	179b      	asrs	r3, r3, #30
 800eae8:	ee06 0a90 	vmov	s13, r0
 800eaec:	f003 0302 	and.w	r3, r3, #2
 800eaf0:	f1c3 0301 	rsb	r3, r3, #1
 800eaf4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800eaf8:	ee35 5b06 	vadd.f64	d5, d5, d6
 800eafc:	ee83 4b05 	vdiv.f64	d4, d3, d5
 800eb00:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800eb04:	ee34 1b41 	vsub.f64	d1, d4, d1
 800eb08:	ee37 7b41 	vsub.f64	d7, d7, d1
 800eb0c:	eea7 6b45 	vfms.f64	d6, d7, d5
 800eb10:	ee07 3a10 	vmov	s14, r3
 800eb14:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800eb18:	ee27 7b06 	vmul.f64	d7, d7, d6
 800eb1c:	e764      	b.n	800e9e8 <__kernel_tan+0x38>
 800eb1e:	2801      	cmp	r0, #1
 800eb20:	d016      	beq.n	800eb50 <__kernel_tan+0x1a0>
 800eb22:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800eb26:	ec51 0b15 	vmov	r0, r1, d5
 800eb2a:	2000      	movs	r0, #0
 800eb2c:	ec41 0b13 	vmov	d3, r0, r1
 800eb30:	ee33 7b47 	vsub.f64	d7, d3, d7
 800eb34:	ee31 1b47 	vsub.f64	d1, d1, d7
 800eb38:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800eb3c:	ee87 4b05 	vdiv.f64	d4, d7, d5
 800eb40:	ec53 2b14 	vmov	r2, r3, d4
 800eb44:	4602      	mov	r2, r0
 800eb46:	ec43 2b17 	vmov	d7, r2, r3
 800eb4a:	eea3 6b07 	vfma.f64	d6, d3, d7
 800eb4e:	e768      	b.n	800ea22 <__kernel_tan+0x72>
 800eb50:	eeb0 7b45 	vmov.f64	d7, d5
 800eb54:	e748      	b.n	800e9e8 <__kernel_tan+0x38>
 800eb56:	bf00      	nop
 800eb58:	54442d18 	.word	0x54442d18
 800eb5c:	3fe921fb 	.word	0x3fe921fb
 800eb60:	33145c07 	.word	0x33145c07
 800eb64:	3c81a626 	.word	0x3c81a626
	...
 800eb70:	db605373 	.word	0xdb605373
 800eb74:	bef375cb 	.word	0xbef375cb
 800eb78:	a03792a6 	.word	0xa03792a6
 800eb7c:	3f147e88 	.word	0x3f147e88
 800eb80:	f2f26501 	.word	0xf2f26501
 800eb84:	3f4344d8 	.word	0x3f4344d8
 800eb88:	c9560328 	.word	0xc9560328
 800eb8c:	3f6d6d22 	.word	0x3f6d6d22
 800eb90:	8406d637 	.word	0x8406d637
 800eb94:	3f9664f4 	.word	0x3f9664f4
 800eb98:	1110fe7a 	.word	0x1110fe7a
 800eb9c:	3fc11111 	.word	0x3fc11111
 800eba0:	74bf7ad4 	.word	0x74bf7ad4
 800eba4:	3efb2a70 	.word	0x3efb2a70
 800eba8:	32f0a7e9 	.word	0x32f0a7e9
 800ebac:	3f12b80f 	.word	0x3f12b80f
 800ebb0:	1a8d1068 	.word	0x1a8d1068
 800ebb4:	3f3026f7 	.word	0x3f3026f7
 800ebb8:	fee08315 	.word	0xfee08315
 800ebbc:	3f57dbc8 	.word	0x3f57dbc8
 800ebc0:	e96e8493 	.word	0xe96e8493
 800ebc4:	3f8226e3 	.word	0x3f8226e3
 800ebc8:	1bb341fe 	.word	0x1bb341fe
 800ebcc:	3faba1ba 	.word	0x3faba1ba
 800ebd0:	55555563 	.word	0x55555563
 800ebd4:	3fd55555 	.word	0x3fd55555
 800ebd8:	3e2fffff 	.word	0x3e2fffff
 800ebdc:	3fe59427 	.word	0x3fe59427

0800ebe0 <fabs>:
 800ebe0:	ec51 0b10 	vmov	r0, r1, d0
 800ebe4:	ee10 2a10 	vmov	r2, s0
 800ebe8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ebec:	ec43 2b10 	vmov	d0, r2, r3
 800ebf0:	4770      	bx	lr
 800ebf2:	0000      	movs	r0, r0
 800ebf4:	0000      	movs	r0, r0
	...

0800ebf8 <floor>:
 800ebf8:	ee10 1a90 	vmov	r1, s1
 800ebfc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ec00:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800ec04:	2b13      	cmp	r3, #19
 800ec06:	b530      	push	{r4, r5, lr}
 800ec08:	ee10 0a10 	vmov	r0, s0
 800ec0c:	ee10 5a10 	vmov	r5, s0
 800ec10:	dc31      	bgt.n	800ec76 <floor+0x7e>
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	da15      	bge.n	800ec42 <floor+0x4a>
 800ec16:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800ecd0 <floor+0xd8>
 800ec1a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800ec1e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ec22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec26:	dd07      	ble.n	800ec38 <floor+0x40>
 800ec28:	2900      	cmp	r1, #0
 800ec2a:	da4e      	bge.n	800ecca <floor+0xd2>
 800ec2c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ec30:	4318      	orrs	r0, r3
 800ec32:	d001      	beq.n	800ec38 <floor+0x40>
 800ec34:	4928      	ldr	r1, [pc, #160]	; (800ecd8 <floor+0xe0>)
 800ec36:	2000      	movs	r0, #0
 800ec38:	460b      	mov	r3, r1
 800ec3a:	4602      	mov	r2, r0
 800ec3c:	ec43 2b10 	vmov	d0, r2, r3
 800ec40:	e020      	b.n	800ec84 <floor+0x8c>
 800ec42:	4a26      	ldr	r2, [pc, #152]	; (800ecdc <floor+0xe4>)
 800ec44:	411a      	asrs	r2, r3
 800ec46:	ea01 0402 	and.w	r4, r1, r2
 800ec4a:	4304      	orrs	r4, r0
 800ec4c:	d01a      	beq.n	800ec84 <floor+0x8c>
 800ec4e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800ecd0 <floor+0xd8>
 800ec52:	ee30 0b07 	vadd.f64	d0, d0, d7
 800ec56:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ec5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec5e:	ddeb      	ble.n	800ec38 <floor+0x40>
 800ec60:	2900      	cmp	r1, #0
 800ec62:	bfbe      	ittt	lt
 800ec64:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800ec68:	fa40 f303 	asrlt.w	r3, r0, r3
 800ec6c:	18c9      	addlt	r1, r1, r3
 800ec6e:	ea21 0102 	bic.w	r1, r1, r2
 800ec72:	2000      	movs	r0, #0
 800ec74:	e7e0      	b.n	800ec38 <floor+0x40>
 800ec76:	2b33      	cmp	r3, #51	; 0x33
 800ec78:	dd05      	ble.n	800ec86 <floor+0x8e>
 800ec7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ec7e:	d101      	bne.n	800ec84 <floor+0x8c>
 800ec80:	ee30 0b00 	vadd.f64	d0, d0, d0
 800ec84:	bd30      	pop	{r4, r5, pc}
 800ec86:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800ec8a:	f04f 32ff 	mov.w	r2, #4294967295
 800ec8e:	40e2      	lsrs	r2, r4
 800ec90:	4202      	tst	r2, r0
 800ec92:	d0f7      	beq.n	800ec84 <floor+0x8c>
 800ec94:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800ecd0 <floor+0xd8>
 800ec98:	ee30 0b07 	vadd.f64	d0, d0, d7
 800ec9c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800eca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eca4:	ddc8      	ble.n	800ec38 <floor+0x40>
 800eca6:	2900      	cmp	r1, #0
 800eca8:	da02      	bge.n	800ecb0 <floor+0xb8>
 800ecaa:	2b14      	cmp	r3, #20
 800ecac:	d103      	bne.n	800ecb6 <floor+0xbe>
 800ecae:	3101      	adds	r1, #1
 800ecb0:	ea20 0002 	bic.w	r0, r0, r2
 800ecb4:	e7c0      	b.n	800ec38 <floor+0x40>
 800ecb6:	2401      	movs	r4, #1
 800ecb8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ecbc:	fa04 f303 	lsl.w	r3, r4, r3
 800ecc0:	4418      	add	r0, r3
 800ecc2:	42a8      	cmp	r0, r5
 800ecc4:	bf38      	it	cc
 800ecc6:	1909      	addcc	r1, r1, r4
 800ecc8:	e7f2      	b.n	800ecb0 <floor+0xb8>
 800ecca:	2000      	movs	r0, #0
 800eccc:	4601      	mov	r1, r0
 800ecce:	e7b3      	b.n	800ec38 <floor+0x40>
 800ecd0:	8800759c 	.word	0x8800759c
 800ecd4:	7e37e43c 	.word	0x7e37e43c
 800ecd8:	bff00000 	.word	0xbff00000
 800ecdc:	000fffff 	.word	0x000fffff

0800ece0 <scalbn>:
 800ece0:	ee10 1a90 	vmov	r1, s1
 800ece4:	b510      	push	{r4, lr}
 800ece6:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800ecea:	b98c      	cbnz	r4, 800ed10 <scalbn+0x30>
 800ecec:	ee10 3a10 	vmov	r3, s0
 800ecf0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ecf4:	430b      	orrs	r3, r1
 800ecf6:	d011      	beq.n	800ed1c <scalbn+0x3c>
 800ecf8:	ed9f 7b31 	vldr	d7, [pc, #196]	; 800edc0 <scalbn+0xe0>
 800ecfc:	4b3c      	ldr	r3, [pc, #240]	; (800edf0 <scalbn+0x110>)
 800ecfe:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ed02:	4298      	cmp	r0, r3
 800ed04:	da0b      	bge.n	800ed1e <scalbn+0x3e>
 800ed06:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800edc8 <scalbn+0xe8>
 800ed0a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ed0e:	e005      	b.n	800ed1c <scalbn+0x3c>
 800ed10:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800ed14:	429c      	cmp	r4, r3
 800ed16:	d107      	bne.n	800ed28 <scalbn+0x48>
 800ed18:	ee30 0b00 	vadd.f64	d0, d0, d0
 800ed1c:	bd10      	pop	{r4, pc}
 800ed1e:	ee10 1a90 	vmov	r1, s1
 800ed22:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800ed26:	3c36      	subs	r4, #54	; 0x36
 800ed28:	4404      	add	r4, r0
 800ed2a:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800ed2e:	429c      	cmp	r4, r3
 800ed30:	dd0d      	ble.n	800ed4e <scalbn+0x6e>
 800ed32:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800edd0 <scalbn+0xf0>
 800ed36:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800edd8 <scalbn+0xf8>
 800ed3a:	eeb0 6b47 	vmov.f64	d6, d7
 800ed3e:	ee10 3a90 	vmov	r3, s1
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	fe27 7b05 	vselge.f64	d7, d7, d5
 800ed48:	ee27 0b06 	vmul.f64	d0, d7, d6
 800ed4c:	e7e6      	b.n	800ed1c <scalbn+0x3c>
 800ed4e:	2c00      	cmp	r4, #0
 800ed50:	dd0a      	ble.n	800ed68 <scalbn+0x88>
 800ed52:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800ed56:	ec53 2b10 	vmov	r2, r3, d0
 800ed5a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800ed5e:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800ed62:	ec43 2b10 	vmov	d0, r2, r3
 800ed66:	e7d9      	b.n	800ed1c <scalbn+0x3c>
 800ed68:	f114 0f35 	cmn.w	r4, #53	; 0x35
 800ed6c:	da19      	bge.n	800eda2 <scalbn+0xc2>
 800ed6e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ed72:	4298      	cmp	r0, r3
 800ed74:	ee10 3a90 	vmov	r3, s1
 800ed78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ed7c:	dd09      	ble.n	800ed92 <scalbn+0xb2>
 800ed7e:	ed9f 0b14 	vldr	d0, [pc, #80]	; 800edd0 <scalbn+0xf0>
 800ed82:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800edd8 <scalbn+0xf8>
 800ed86:	eeb0 7b40 	vmov.f64	d7, d0
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	fe00 0b06 	vseleq.f64	d0, d0, d6
 800ed90:	e7bb      	b.n	800ed0a <scalbn+0x2a>
 800ed92:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 800edc8 <scalbn+0xe8>
 800ed96:	ed9f 6b12 	vldr	d6, [pc, #72]	; 800ede0 <scalbn+0x100>
 800ed9a:	eeb0 7b40 	vmov.f64	d7, d0
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	e7f4      	b.n	800ed8c <scalbn+0xac>
 800eda2:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800eda6:	ec53 2b10 	vmov	r2, r3, d0
 800edaa:	3436      	adds	r4, #54	; 0x36
 800edac:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800edb0:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800edb4:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800ede8 <scalbn+0x108>
 800edb8:	ec43 2b10 	vmov	d0, r2, r3
 800edbc:	e7a5      	b.n	800ed0a <scalbn+0x2a>
 800edbe:	bf00      	nop
 800edc0:	00000000 	.word	0x00000000
 800edc4:	43500000 	.word	0x43500000
 800edc8:	c2f8f359 	.word	0xc2f8f359
 800edcc:	01a56e1f 	.word	0x01a56e1f
 800edd0:	8800759c 	.word	0x8800759c
 800edd4:	7e37e43c 	.word	0x7e37e43c
 800edd8:	8800759c 	.word	0x8800759c
 800eddc:	fe37e43c 	.word	0xfe37e43c
 800ede0:	c2f8f359 	.word	0xc2f8f359
 800ede4:	81a56e1f 	.word	0x81a56e1f
 800ede8:	00000000 	.word	0x00000000
 800edec:	3c900000 	.word	0x3c900000
 800edf0:	ffff3cb0 	.word	0xffff3cb0

0800edf4 <__libc_init_array>:
 800edf4:	b570      	push	{r4, r5, r6, lr}
 800edf6:	4d0d      	ldr	r5, [pc, #52]	; (800ee2c <__libc_init_array+0x38>)
 800edf8:	4c0d      	ldr	r4, [pc, #52]	; (800ee30 <__libc_init_array+0x3c>)
 800edfa:	1b64      	subs	r4, r4, r5
 800edfc:	10a4      	asrs	r4, r4, #2
 800edfe:	2600      	movs	r6, #0
 800ee00:	42a6      	cmp	r6, r4
 800ee02:	d109      	bne.n	800ee18 <__libc_init_array+0x24>
 800ee04:	4d0b      	ldr	r5, [pc, #44]	; (800ee34 <__libc_init_array+0x40>)
 800ee06:	4c0c      	ldr	r4, [pc, #48]	; (800ee38 <__libc_init_array+0x44>)
 800ee08:	f000 f820 	bl	800ee4c <_init>
 800ee0c:	1b64      	subs	r4, r4, r5
 800ee0e:	10a4      	asrs	r4, r4, #2
 800ee10:	2600      	movs	r6, #0
 800ee12:	42a6      	cmp	r6, r4
 800ee14:	d105      	bne.n	800ee22 <__libc_init_array+0x2e>
 800ee16:	bd70      	pop	{r4, r5, r6, pc}
 800ee18:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee1c:	4798      	blx	r3
 800ee1e:	3601      	adds	r6, #1
 800ee20:	e7ee      	b.n	800ee00 <__libc_init_array+0xc>
 800ee22:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee26:	4798      	blx	r3
 800ee28:	3601      	adds	r6, #1
 800ee2a:	e7f2      	b.n	800ee12 <__libc_init_array+0x1e>
 800ee2c:	0800f088 	.word	0x0800f088
 800ee30:	0800f088 	.word	0x0800f088
 800ee34:	0800f088 	.word	0x0800f088
 800ee38:	0800f08c 	.word	0x0800f08c

0800ee3c <memset>:
 800ee3c:	4402      	add	r2, r0
 800ee3e:	4603      	mov	r3, r0
 800ee40:	4293      	cmp	r3, r2
 800ee42:	d100      	bne.n	800ee46 <memset+0xa>
 800ee44:	4770      	bx	lr
 800ee46:	f803 1b01 	strb.w	r1, [r3], #1
 800ee4a:	e7f9      	b.n	800ee40 <memset+0x4>

0800ee4c <_init>:
 800ee4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee4e:	bf00      	nop
 800ee50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee52:	bc08      	pop	{r3}
 800ee54:	469e      	mov	lr, r3
 800ee56:	4770      	bx	lr

0800ee58 <_fini>:
 800ee58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee5a:	bf00      	nop
 800ee5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee5e:	bc08      	pop	{r3}
 800ee60:	469e      	mov	lr, r3
 800ee62:	4770      	bx	lr
