
led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b65c  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  0800b8f8  0800b8f8  0001b8f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bb10  0800bb10  0001bb10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bb18  0800bb18  0001bb18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bb1c  0800bb1c  0001bb1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800bb20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  0800bb30  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  0800bb90  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a0c  240000d0  0800bbf0  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000adc  0800bbf0  00020adc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001faf9  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f68  00000000  00000000  0003fbf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a0  00000000  00000000  00042b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001498  00000000  00000000  00044100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038952  00000000  00000000  00045598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c410  00000000  00000000  0007deea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016a43c  00000000  00000000  0009a2fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00204736  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f84  00000000  00000000  00204788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800b8dc 	.word	0x0800b8dc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	0800b8dc 	.word	0x0800b8dc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <Set_LED>:

uint8_t LED_Data[MAX_LED][4];
uint8_t LED_Mod[MAX_LED][4];  // for brightness

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
 80005e8:	603b      	str	r3, [r7, #0]
  LED_Data[LEDnum][0] = LEDnum;
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	b2d9      	uxtb	r1, r3
 80005ee:	4a11      	ldr	r2, [pc, #68]	; (8000634 <Set_LED+0x58>)
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
  LED_Data[LEDnum][1] = Green;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	b2d9      	uxtb	r1, r3
 80005fa:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <Set_LED+0x58>)
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	009b      	lsls	r3, r3, #2
 8000600:	4413      	add	r3, r2
 8000602:	460a      	mov	r2, r1
 8000604:	705a      	strb	r2, [r3, #1]
  LED_Data[LEDnum][2] = Red;
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	b2d9      	uxtb	r1, r3
 800060a:	4a0a      	ldr	r2, [pc, #40]	; (8000634 <Set_LED+0x58>)
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	4413      	add	r3, r2
 8000612:	460a      	mov	r2, r1
 8000614:	709a      	strb	r2, [r3, #2]
  LED_Data[LEDnum][3] = Blue;
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	b2d9      	uxtb	r1, r3
 800061a:	4a06      	ldr	r2, [pc, #24]	; (8000634 <Set_LED+0x58>)
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	4413      	add	r3, r2
 8000622:	460a      	mov	r2, r1
 8000624:	70da      	strb	r2, [r3, #3]
}
 8000626:	bf00      	nop
 8000628:	3714      	adds	r7, #20
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	2400083c 	.word	0x2400083c

08000638 <Set_Brightness>:

#define PI 3.14159265

void Set_Brightness (int brightness)  // 0-45
{
 8000638:	b580      	push	{r7, lr}
 800063a:	ed2d 8b02 	vpush	{d8}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

  if (brightness > 45) brightness = 45;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2b2d      	cmp	r3, #45	; 0x2d
 8000648:	dd01      	ble.n	800064e <Set_Brightness+0x16>
 800064a:	232d      	movs	r3, #45	; 0x2d
 800064c:	607b      	str	r3, [r7, #4]
  for (int i=0; i<MAX_LED; i++)
 800064e:	2300      	movs	r3, #0
 8000650:	617b      	str	r3, [r7, #20]
 8000652:	e051      	b.n	80006f8 <Set_Brightness+0xc0>
  {
    LED_Mod[i][0] = LED_Data[i][0];
 8000654:	4a32      	ldr	r2, [pc, #200]	; (8000720 <Set_Brightness+0xe8>)
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 800065c:	4a31      	ldr	r2, [pc, #196]	; (8000724 <Set_Brightness+0xec>)
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
    for (int j=1; j<4; j++)
 8000664:	2301      	movs	r3, #1
 8000666:	613b      	str	r3, [r7, #16]
 8000668:	e040      	b.n	80006ec <Set_Brightness+0xb4>
    {
      float angle = 90-brightness;  // in degrees
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8000670:	ee07 3a90 	vmov	s15, r3
 8000674:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000678:	edc7 7a03 	vstr	s15, [r7, #12]
      angle = angle*PI / 180;  // in rad
 800067c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000680:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000684:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8000710 <Set_Brightness+0xd8>
 8000688:	ee27 6b06 	vmul.f64	d6, d7, d6
 800068c:	ed9f 5b22 	vldr	d5, [pc, #136]	; 8000718 <Set_Brightness+0xe0>
 8000690:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000694:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000698:	edc7 7a03 	vstr	s15, [r7, #12]
      LED_Mod[i][j] = (LED_Data[i][j])/(tan(angle));
 800069c:	4a20      	ldr	r2, [pc, #128]	; (8000720 <Set_Brightness+0xe8>)
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	441a      	add	r2, r3
 80006a4:	693b      	ldr	r3, [r7, #16]
 80006a6:	4413      	add	r3, r2
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	ee07 3a90 	vmov	s15, r3
 80006ae:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 80006b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80006b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006ba:	eeb0 0b47 	vmov.f64	d0, d7
 80006be:	f00a faaf 	bl	800ac20 <tan>
 80006c2:	eeb0 6b40 	vmov.f64	d6, d0
 80006c6:	ee88 7b06 	vdiv.f64	d7, d8, d6
 80006ca:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006ce:	edc7 7a00 	vstr	s15, [r7]
 80006d2:	783b      	ldrb	r3, [r7, #0]
 80006d4:	b2d9      	uxtb	r1, r3
 80006d6:	4a13      	ldr	r2, [pc, #76]	; (8000724 <Set_Brightness+0xec>)
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	441a      	add	r2, r3
 80006de:	693b      	ldr	r3, [r7, #16]
 80006e0:	4413      	add	r3, r2
 80006e2:	460a      	mov	r2, r1
 80006e4:	701a      	strb	r2, [r3, #0]
    for (int j=1; j<4; j++)
 80006e6:	693b      	ldr	r3, [r7, #16]
 80006e8:	3301      	adds	r3, #1
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	693b      	ldr	r3, [r7, #16]
 80006ee:	2b03      	cmp	r3, #3
 80006f0:	ddbb      	ble.n	800066a <Set_Brightness+0x32>
  for (int i=0; i<MAX_LED; i++)
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	3301      	adds	r3, #1
 80006f6:	617b      	str	r3, [r7, #20]
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	2b09      	cmp	r3, #9
 80006fc:	ddaa      	ble.n	8000654 <Set_Brightness+0x1c>
    }
  }

#endif

}
 80006fe:	bf00      	nop
 8000700:	bf00      	nop
 8000702:	3718      	adds	r7, #24
 8000704:	46bd      	mov	sp, r7
 8000706:	ecbd 8b02 	vpop	{d8}
 800070a:	bd80      	pop	{r7, pc}
 800070c:	f3af 8000 	nop.w
 8000710:	53c8d4f1 	.word	0x53c8d4f1
 8000714:	400921fb 	.word	0x400921fb
 8000718:	00000000 	.word	0x00000000
 800071c:	40668000 	.word	0x40668000
 8000720:	2400083c 	.word	0x2400083c
 8000724:	24000864 	.word	0x24000864

08000728 <WS2812_Send>:

uint16_t pwmData[(24*MAX_LED)+50];

void WS2812_Send (void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0
  uint32_t indx=0;
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
  uint32_t color;


  for (int i= 0; i<MAX_LED; i++)
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	e036      	b.n	80007a6 <WS2812_Send+0x7e>
  {
#if USE_BRIGHTNESS
    color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 8000738:	4a2e      	ldr	r2, [pc, #184]	; (80007f4 <WS2812_Send+0xcc>)
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	4413      	add	r3, r2
 8000740:	785b      	ldrb	r3, [r3, #1]
 8000742:	041a      	lsls	r2, r3, #16
 8000744:	492b      	ldr	r1, [pc, #172]	; (80007f4 <WS2812_Send+0xcc>)
 8000746:	693b      	ldr	r3, [r7, #16]
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	440b      	add	r3, r1
 800074c:	789b      	ldrb	r3, [r3, #2]
 800074e:	021b      	lsls	r3, r3, #8
 8000750:	431a      	orrs	r2, r3
 8000752:	4928      	ldr	r1, [pc, #160]	; (80007f4 <WS2812_Send+0xcc>)
 8000754:	693b      	ldr	r3, [r7, #16]
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	440b      	add	r3, r1
 800075a:	78db      	ldrb	r3, [r3, #3]
 800075c:	4313      	orrs	r3, r2
 800075e:	607b      	str	r3, [r7, #4]
#else
    color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
#endif

    for (int i=23; i>=0; i--)
 8000760:	2317      	movs	r3, #23
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	e019      	b.n	800079a <WS2812_Send+0x72>
    {
      if (color&(1<<i))
 8000766:	2201      	movs	r2, #1
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	fa02 f303 	lsl.w	r3, r2, r3
 800076e:	461a      	mov	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	4013      	ands	r3, r2
 8000774:	2b00      	cmp	r3, #0
 8000776:	d005      	beq.n	8000784 <WS2812_Send+0x5c>
      {
        pwmData[indx] = 100;  // 2/3 of 90
 8000778:	4a1f      	ldr	r2, [pc, #124]	; (80007f8 <WS2812_Send+0xd0>)
 800077a:	697b      	ldr	r3, [r7, #20]
 800077c:	2164      	movs	r1, #100	; 0x64
 800077e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000782:	e004      	b.n	800078e <WS2812_Send+0x66>
      }

      else pwmData[indx] = 50;  // 1/3 of 90
 8000784:	4a1c      	ldr	r2, [pc, #112]	; (80007f8 <WS2812_Send+0xd0>)
 8000786:	697b      	ldr	r3, [r7, #20]
 8000788:	2132      	movs	r1, #50	; 0x32
 800078a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

      indx++;
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	3301      	adds	r3, #1
 8000792:	617b      	str	r3, [r7, #20]
    for (int i=23; i>=0; i--)
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	3b01      	subs	r3, #1
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	2b00      	cmp	r3, #0
 800079e:	dae2      	bge.n	8000766 <WS2812_Send+0x3e>
  for (int i= 0; i<MAX_LED; i++)
 80007a0:	693b      	ldr	r3, [r7, #16]
 80007a2:	3301      	adds	r3, #1
 80007a4:	613b      	str	r3, [r7, #16]
 80007a6:	693b      	ldr	r3, [r7, #16]
 80007a8:	2b09      	cmp	r3, #9
 80007aa:	ddc5      	ble.n	8000738 <WS2812_Send+0x10>
    }

  }

  for (int i=0; i<50; i++)
 80007ac:	2300      	movs	r3, #0
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	e00a      	b.n	80007c8 <WS2812_Send+0xa0>
  {
    pwmData[indx] = 0;
 80007b2:	4a11      	ldr	r2, [pc, #68]	; (80007f8 <WS2812_Send+0xd0>)
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	2100      	movs	r1, #0
 80007b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    indx++;
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	3301      	adds	r3, #1
 80007c0:	617b      	str	r3, [r7, #20]
  for (int i=0; i<50; i++)
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	3301      	adds	r3, #1
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	2b31      	cmp	r3, #49	; 0x31
 80007cc:	ddf1      	ble.n	80007b2 <WS2812_Send+0x8a>
  }

  HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	4a09      	ldr	r2, [pc, #36]	; (80007f8 <WS2812_Send+0xd0>)
 80007d4:	2100      	movs	r1, #0
 80007d6:	4809      	ldr	r0, [pc, #36]	; (80007fc <WS2812_Send+0xd4>)
 80007d8:	f007 fa0a 	bl	8007bf0 <HAL_TIM_PWM_Start_DMA>
  while (!datasentflag){};
 80007dc:	bf00      	nop
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <WS2812_Send+0xd8>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d0fb      	beq.n	80007de <WS2812_Send+0xb6>
  datasentflag = 0;
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <WS2812_Send+0xd8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
}
 80007ec:	bf00      	nop
 80007ee:	3718      	adds	r7, #24
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	24000864 	.word	0x24000864
 80007f8:	2400088c 	.word	0x2400088c
 80007fc:	240001d4 	.word	0x240001d4
 8000800:	24000838 	.word	0x24000838

08000804 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 800080c:	2100      	movs	r1, #0
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000810:	f007 fc14 	bl	800803c <HAL_TIM_PWM_Stop_DMA>
  datasentflag=1;
 8000814:	4b04      	ldr	r3, [pc, #16]	; (8000828 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000816:	2201      	movs	r2, #1
 8000818:	601a      	str	r2, [r3, #0]
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	240001d4 	.word	0x240001d4
 8000828:	24000838 	.word	0x24000838

0800082c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000832:	f000 fe8f 	bl	8001554 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000836:	f000 f86f 	bl	8000918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083a:	f000 fa7d 	bl	8000d38 <MX_GPIO_Init>
  MX_DMA_Init();
 800083e:	f000 fa5b 	bl	8000cf8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000842:	f000 f9db 	bl	8000bfc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000846:	f000 fa25 	bl	8000c94 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 800084a:	f000 f961 	bl	8000b10 <MX_TIM3_Init>
  MX_ETH_Init();
 800084e:	f000 f913 	bl	8000a78 <MX_ETH_Init>
  /* USER CODE BEGIN 2 */
  Set_LED(0, 255, 0, 0);
 8000852:	2300      	movs	r3, #0
 8000854:	2200      	movs	r2, #0
 8000856:	21ff      	movs	r1, #255	; 0xff
 8000858:	2000      	movs	r0, #0
 800085a:	f7ff febf 	bl	80005dc <Set_LED>
  Set_LED(1, 0, 255, 0);
 800085e:	2300      	movs	r3, #0
 8000860:	22ff      	movs	r2, #255	; 0xff
 8000862:	2100      	movs	r1, #0
 8000864:	2001      	movs	r0, #1
 8000866:	f7ff feb9 	bl	80005dc <Set_LED>
  Set_LED(2, 0, 0, 255);
 800086a:	23ff      	movs	r3, #255	; 0xff
 800086c:	2200      	movs	r2, #0
 800086e:	2100      	movs	r1, #0
 8000870:	2002      	movs	r0, #2
 8000872:	f7ff feb3 	bl	80005dc <Set_LED>
  Set_LED(3, 46, 89, 128);
 8000876:	2380      	movs	r3, #128	; 0x80
 8000878:	2259      	movs	r2, #89	; 0x59
 800087a:	212e      	movs	r1, #46	; 0x2e
 800087c:	2003      	movs	r0, #3
 800087e:	f7ff fead 	bl	80005dc <Set_LED>
  Set_LED(4, 156, 233, 100);
 8000882:	2364      	movs	r3, #100	; 0x64
 8000884:	22e9      	movs	r2, #233	; 0xe9
 8000886:	219c      	movs	r1, #156	; 0x9c
 8000888:	2004      	movs	r0, #4
 800088a:	f7ff fea7 	bl	80005dc <Set_LED>
  Set_LED(5, 102, 0, 235);
 800088e:	23eb      	movs	r3, #235	; 0xeb
 8000890:	2200      	movs	r2, #0
 8000892:	2166      	movs	r1, #102	; 0x66
 8000894:	2005      	movs	r0, #5
 8000896:	f7ff fea1 	bl	80005dc <Set_LED>
  Set_LED(6, 47, 38, 77);
 800089a:	234d      	movs	r3, #77	; 0x4d
 800089c:	2226      	movs	r2, #38	; 0x26
 800089e:	212f      	movs	r1, #47	; 0x2f
 80008a0:	2006      	movs	r0, #6
 80008a2:	f7ff fe9b 	bl	80005dc <Set_LED>
  Set_LED(7, 255, 200, 0);
 80008a6:	2300      	movs	r3, #0
 80008a8:	22c8      	movs	r2, #200	; 0xc8
 80008aa:	21ff      	movs	r1, #255	; 0xff
 80008ac:	2007      	movs	r0, #7
 80008ae:	f7ff fe95 	bl	80005dc <Set_LED>

  for (int i=8; i<=10; i++)
 80008b2:	2308      	movs	r3, #8
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	e008      	b.n	80008ca <main+0x9e>
    Set_LED(i, 0, 0, 255);
 80008b8:	23ff      	movs	r3, #255	; 0xff
 80008ba:	2200      	movs	r2, #0
 80008bc:	2100      	movs	r1, #0
 80008be:	68f8      	ldr	r0, [r7, #12]
 80008c0:	f7ff fe8c 	bl	80005dc <Set_LED>
  for (int i=8; i<=10; i++)
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	3301      	adds	r3, #1
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	2b0a      	cmp	r3, #10
 80008ce:	ddf3      	ble.n	80008b8 <main+0x8c>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    for (int i=0; i<46; i++)
 80008d0:	2300      	movs	r3, #0
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	e00a      	b.n	80008ec <main+0xc0>
    {
      Set_Brightness(i);
 80008d6:	68b8      	ldr	r0, [r7, #8]
 80008d8:	f7ff feae 	bl	8000638 <Set_Brightness>
      WS2812_Send();
 80008dc:	f7ff ff24 	bl	8000728 <WS2812_Send>
      HAL_Delay (50);
 80008e0:	2032      	movs	r0, #50	; 0x32
 80008e2:	f000 fec9 	bl	8001678 <HAL_Delay>
    for (int i=0; i<46; i++)
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	3301      	adds	r3, #1
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	2b2d      	cmp	r3, #45	; 0x2d
 80008f0:	ddf1      	ble.n	80008d6 <main+0xaa>
    }

    for (int i=45; i>=0; i--)
 80008f2:	232d      	movs	r3, #45	; 0x2d
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	e00a      	b.n	800090e <main+0xe2>
    {
      Set_Brightness(i);
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f7ff fe9d 	bl	8000638 <Set_Brightness>
      WS2812_Send();
 80008fe:	f7ff ff13 	bl	8000728 <WS2812_Send>
      HAL_Delay (50);
 8000902:	2032      	movs	r0, #50	; 0x32
 8000904:	f000 feb8 	bl	8001678 <HAL_Delay>
    for (int i=45; i>=0; i--)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	3b01      	subs	r3, #1
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2b00      	cmp	r3, #0
 8000912:	daf1      	bge.n	80008f8 <main+0xcc>
    for (int i=0; i<46; i++)
 8000914:	e7dc      	b.n	80008d0 <main+0xa4>
	...

08000918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b09e      	sub	sp, #120	; 0x78
 800091c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000922:	224c      	movs	r2, #76	; 0x4c
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f00a ffd0 	bl	800b8cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	2220      	movs	r2, #32
 8000932:	2100      	movs	r1, #0
 8000934:	4618      	mov	r0, r3
 8000936:	f00a ffc9 	bl	800b8cc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800093a:	2002      	movs	r0, #2
 800093c:	f004 fa44 	bl	8004dc8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000940:	2300      	movs	r3, #0
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	4b49      	ldr	r3, [pc, #292]	; (8000a6c <SystemClock_Config+0x154>)
 8000946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000948:	4a48      	ldr	r2, [pc, #288]	; (8000a6c <SystemClock_Config+0x154>)
 800094a:	f023 0301 	bic.w	r3, r3, #1
 800094e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000950:	4b46      	ldr	r3, [pc, #280]	; (8000a6c <SystemClock_Config+0x154>)
 8000952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000954:	f003 0301 	and.w	r3, r3, #1
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	4b45      	ldr	r3, [pc, #276]	; (8000a70 <SystemClock_Config+0x158>)
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	4a44      	ldr	r2, [pc, #272]	; (8000a70 <SystemClock_Config+0x158>)
 8000960:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000964:	6193      	str	r3, [r2, #24]
 8000966:	4b42      	ldr	r3, [pc, #264]	; (8000a70 <SystemClock_Config+0x158>)
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000972:	bf00      	nop
 8000974:	4b3e      	ldr	r3, [pc, #248]	; (8000a70 <SystemClock_Config+0x158>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800097c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000980:	d1f8      	bne.n	8000974 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000982:	4b3c      	ldr	r3, [pc, #240]	; (8000a74 <SystemClock_Config+0x15c>)
 8000984:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000988:	4a3a      	ldr	r2, [pc, #232]	; (8000a74 <SystemClock_Config+0x15c>)
 800098a:	f043 0302 	orr.w	r3, r3, #2
 800098e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000992:	4b38      	ldr	r3, [pc, #224]	; (8000a74 <SystemClock_Config+0x15c>)
 8000994:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000998:	f003 0302 	and.w	r3, r3, #2
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009a0:	2300      	movs	r3, #0
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	4b32      	ldr	r3, [pc, #200]	; (8000a70 <SystemClock_Config+0x158>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	4a31      	ldr	r2, [pc, #196]	; (8000a70 <SystemClock_Config+0x158>)
 80009aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009ae:	6193      	str	r3, [r2, #24]
 80009b0:	4b2f      	ldr	r3, [pc, #188]	; (8000a70 <SystemClock_Config+0x158>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	4b2c      	ldr	r3, [pc, #176]	; (8000a6c <SystemClock_Config+0x154>)
 80009bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009be:	4a2b      	ldr	r2, [pc, #172]	; (8000a6c <SystemClock_Config+0x154>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009c6:	4b29      	ldr	r3, [pc, #164]	; (8000a6c <SystemClock_Config+0x154>)
 80009c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009d2:	bf00      	nop
 80009d4:	4b26      	ldr	r3, [pc, #152]	; (8000a70 <SystemClock_Config+0x158>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009e0:	d1f8      	bne.n	80009d4 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80009e2:	2321      	movs	r3, #33	; 0x21
 80009e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80009ec:	2301      	movs	r3, #1
 80009ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f0:	2302      	movs	r3, #2
 80009f2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009f4:	2302      	movs	r3, #2
 80009f6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009f8:	2301      	movs	r3, #1
 80009fa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 80009fc:	2378      	movs	r3, #120	; 0x78
 80009fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a00:	2302      	movs	r3, #2
 8000a02:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a04:	2304      	movs	r3, #4
 8000a06:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a0c:	230c      	movs	r3, #12
 8000a0e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f004 fa1d 	bl	8004e5c <HAL_RCC_OscConfig>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <SystemClock_Config+0x114>
  {
    Error_Handler();
 8000a28:	f000 fa3a 	bl	8000ea0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a2c:	233f      	movs	r3, #63	; 0x3f
 8000a2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a30:	2303      	movs	r3, #3
 8000a32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a38:	2308      	movs	r3, #8
 8000a3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a3c:	2340      	movs	r3, #64	; 0x40
 8000a3e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 8000a40:	2350      	movs	r3, #80	; 0x50
 8000a42:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a4a:	2340      	movs	r3, #64	; 0x40
 8000a4c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a4e:	f107 030c 	add.w	r3, r7, #12
 8000a52:	2104      	movs	r1, #4
 8000a54:	4618      	mov	r0, r3
 8000a56:	f004 fe5b 	bl	8005710 <HAL_RCC_ClockConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0x14c>
  {
    Error_Handler();
 8000a60:	f000 fa1e 	bl	8000ea0 <Error_Handler>
  }
}
 8000a64:	bf00      	nop
 8000a66:	3778      	adds	r7, #120	; 0x78
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	58000400 	.word	0x58000400
 8000a70:	58024800 	.word	0x58024800
 8000a74:	58024400 	.word	0x58024400

08000a78 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a7c:	4b1e      	ldr	r3, [pc, #120]	; (8000af8 <MX_ETH_Init+0x80>)
 8000a7e:	4a1f      	ldr	r2, [pc, #124]	; (8000afc <MX_ETH_Init+0x84>)
 8000a80:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a82:	4b1f      	ldr	r3, [pc, #124]	; (8000b00 <MX_ETH_Init+0x88>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a88:	4b1d      	ldr	r3, [pc, #116]	; (8000b00 <MX_ETH_Init+0x88>)
 8000a8a:	2280      	movs	r2, #128	; 0x80
 8000a8c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a8e:	4b1c      	ldr	r3, [pc, #112]	; (8000b00 <MX_ETH_Init+0x88>)
 8000a90:	22e1      	movs	r2, #225	; 0xe1
 8000a92:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a94:	4b1a      	ldr	r3, [pc, #104]	; (8000b00 <MX_ETH_Init+0x88>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a9a:	4b19      	ldr	r3, [pc, #100]	; (8000b00 <MX_ETH_Init+0x88>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000aa0:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <MX_ETH_Init+0x88>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000aa6:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <MX_ETH_Init+0x80>)
 8000aa8:	4a15      	ldr	r2, [pc, #84]	; (8000b00 <MX_ETH_Init+0x88>)
 8000aaa:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <MX_ETH_Init+0x80>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <MX_ETH_Init+0x80>)
 8000ab4:	4a13      	ldr	r2, [pc, #76]	; (8000b04 <MX_ETH_Init+0x8c>)
 8000ab6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <MX_ETH_Init+0x80>)
 8000aba:	4a13      	ldr	r2, [pc, #76]	; (8000b08 <MX_ETH_Init+0x90>)
 8000abc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <MX_ETH_Init+0x80>)
 8000ac0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000ac4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000ac6:	480c      	ldr	r0, [pc, #48]	; (8000af8 <MX_ETH_Init+0x80>)
 8000ac8:	f003 fa48 	bl	8003f5c <HAL_ETH_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000ad2:	f000 f9e5 	bl	8000ea0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000ad6:	2238      	movs	r2, #56	; 0x38
 8000ad8:	2100      	movs	r1, #0
 8000ada:	480c      	ldr	r0, [pc, #48]	; (8000b0c <MX_ETH_Init+0x94>)
 8000adc:	f00a fef6 	bl	800b8cc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000ae0:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <MX_ETH_Init+0x94>)
 8000ae2:	2221      	movs	r2, #33	; 0x21
 8000ae4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <MX_ETH_Init+0x94>)
 8000ae8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000aec:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000aee:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <MX_ETH_Init+0x94>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	24000124 	.word	0x24000124
 8000afc:	40028000 	.word	0x40028000
 8000b00:	24000ad0 	.word	0x24000ad0
 8000b04:	24000070 	.word	0x24000070
 8000b08:	24000010 	.word	0x24000010
 8000b0c:	240000ec 	.word	0x240000ec

08000b10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08e      	sub	sp, #56	; 0x38
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b24:	f107 031c 	add.w	r3, r7, #28
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b30:	463b      	mov	r3, r7
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
 8000b3c:	611a      	str	r2, [r3, #16]
 8000b3e:	615a      	str	r2, [r3, #20]
 8000b40:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b42:	4b2c      	ldr	r3, [pc, #176]	; (8000bf4 <MX_TIM3_Init+0xe4>)
 8000b44:	4a2c      	ldr	r2, [pc, #176]	; (8000bf8 <MX_TIM3_Init+0xe8>)
 8000b46:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b48:	4b2a      	ldr	r3, [pc, #168]	; (8000bf4 <MX_TIM3_Init+0xe4>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4e:	4b29      	ldr	r3, [pc, #164]	; (8000bf4 <MX_TIM3_Init+0xe4>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 150-1;
 8000b54:	4b27      	ldr	r3, [pc, #156]	; (8000bf4 <MX_TIM3_Init+0xe4>)
 8000b56:	2295      	movs	r2, #149	; 0x95
 8000b58:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b5a:	4b26      	ldr	r3, [pc, #152]	; (8000bf4 <MX_TIM3_Init+0xe4>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b60:	4b24      	ldr	r3, [pc, #144]	; (8000bf4 <MX_TIM3_Init+0xe4>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b66:	4823      	ldr	r0, [pc, #140]	; (8000bf4 <MX_TIM3_Init+0xe4>)
 8000b68:	f006 ff8a 	bl	8007a80 <HAL_TIM_Base_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000b72:	f000 f995 	bl	8000ea0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b80:	4619      	mov	r1, r3
 8000b82:	481c      	ldr	r0, [pc, #112]	; (8000bf4 <MX_TIM3_Init+0xe4>)
 8000b84:	f007 fd86 	bl	8008694 <HAL_TIM_ConfigClockSource>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000b8e:	f000 f987 	bl	8000ea0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b92:	4818      	ldr	r0, [pc, #96]	; (8000bf4 <MX_TIM3_Init+0xe4>)
 8000b94:	f006 ffcb 	bl	8007b2e <HAL_TIM_PWM_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000b9e:	f000 f97f 	bl	8000ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000baa:	f107 031c 	add.w	r3, r7, #28
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4810      	ldr	r0, [pc, #64]	; (8000bf4 <MX_TIM3_Init+0xe4>)
 8000bb2:	f008 fba9 	bl	8009308 <HAL_TIMEx_MasterConfigSynchronization>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000bbc:	f000 f970 	bl	8000ea0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bc0:	2360      	movs	r3, #96	; 0x60
 8000bc2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4807      	ldr	r0, [pc, #28]	; (8000bf4 <MX_TIM3_Init+0xe4>)
 8000bd8:	f007 fc48 	bl	800846c <HAL_TIM_PWM_ConfigChannel>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000be2:	f000 f95d 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000be6:	4803      	ldr	r0, [pc, #12]	; (8000bf4 <MX_TIM3_Init+0xe4>)
 8000be8:	f000 faa4 	bl	8001134 <HAL_TIM_MspPostInit>

}
 8000bec:	bf00      	nop
 8000bee:	3738      	adds	r7, #56	; 0x38
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	240001d4 	.word	0x240001d4
 8000bf8:	40000400 	.word	0x40000400

08000bfc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c00:	4b22      	ldr	r3, [pc, #136]	; (8000c8c <MX_USART3_UART_Init+0x90>)
 8000c02:	4a23      	ldr	r2, [pc, #140]	; (8000c90 <MX_USART3_UART_Init+0x94>)
 8000c04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c06:	4b21      	ldr	r3, [pc, #132]	; (8000c8c <MX_USART3_UART_Init+0x90>)
 8000c08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0e:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <MX_USART3_UART_Init+0x90>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c14:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <MX_USART3_UART_Init+0x90>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <MX_USART3_UART_Init+0x90>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c20:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <MX_USART3_UART_Init+0x90>)
 8000c22:	220c      	movs	r2, #12
 8000c24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c26:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <MX_USART3_UART_Init+0x90>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c2c:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <MX_USART3_UART_Init+0x90>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c32:	4b16      	ldr	r3, [pc, #88]	; (8000c8c <MX_USART3_UART_Init+0x90>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c38:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <MX_USART3_UART_Init+0x90>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c3e:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <MX_USART3_UART_Init+0x90>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c44:	4811      	ldr	r0, [pc, #68]	; (8000c8c <MX_USART3_UART_Init+0x90>)
 8000c46:	f008 fc0b 	bl	8009460 <HAL_UART_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c50:	f000 f926 	bl	8000ea0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c54:	2100      	movs	r1, #0
 8000c56:	480d      	ldr	r0, [pc, #52]	; (8000c8c <MX_USART3_UART_Init+0x90>)
 8000c58:	f009 fc0d 	bl	800a476 <HAL_UARTEx_SetTxFifoThreshold>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c62:	f000 f91d 	bl	8000ea0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c66:	2100      	movs	r1, #0
 8000c68:	4808      	ldr	r0, [pc, #32]	; (8000c8c <MX_USART3_UART_Init+0x90>)
 8000c6a:	f009 fc42 	bl	800a4f2 <HAL_UARTEx_SetRxFifoThreshold>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c74:	f000 f914 	bl	8000ea0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c78:	4804      	ldr	r0, [pc, #16]	; (8000c8c <MX_USART3_UART_Init+0x90>)
 8000c7a:	f009 fbc3 	bl	800a404 <HAL_UARTEx_DisableFifoMode>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c84:	f000 f90c 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	24000298 	.word	0x24000298
 8000c90:	40004800 	.word	0x40004800

08000c94 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c98:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c9a:	4a16      	ldr	r2, [pc, #88]	; (8000cf4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000c9c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000c9e:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ca0:	2209      	movs	r2, #9
 8000ca2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ca6:	2202      	movs	r2, #2
 8000ca8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000caa:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cb2:	2202      	movs	r2, #2
 8000cb4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000cc8:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000cda:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cdc:	f003 ff2b 	bl	8004b36 <HAL_PCD_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000ce6:	f000 f8db 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	2400032c 	.word	0x2400032c
 8000cf4:	40080000 	.word	0x40080000

08000cf8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cfe:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <MX_DMA_Init+0x3c>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	4a0b      	ldr	r2, [pc, #44]	; (8000d34 <MX_DMA_Init+0x3c>)
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <MX_DMA_Init+0x3c>)
 8000d10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2100      	movs	r1, #0
 8000d20:	200c      	movs	r0, #12
 8000d22:	f000 fdc8 	bl	80018b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f000 fddf 	bl	80018ea <HAL_NVIC_EnableIRQ>

}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	58024400 	.word	0x58024400

08000d38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08c      	sub	sp, #48	; 0x30
 8000d3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3e:	f107 031c 	add.w	r3, r7, #28
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
 8000d4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4e:	4b50      	ldr	r3, [pc, #320]	; (8000e90 <MX_GPIO_Init+0x158>)
 8000d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d54:	4a4e      	ldr	r2, [pc, #312]	; (8000e90 <MX_GPIO_Init+0x158>)
 8000d56:	f043 0304 	orr.w	r3, r3, #4
 8000d5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d5e:	4b4c      	ldr	r3, [pc, #304]	; (8000e90 <MX_GPIO_Init+0x158>)
 8000d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d64:	f003 0304 	and.w	r3, r3, #4
 8000d68:	61bb      	str	r3, [r7, #24]
 8000d6a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d6c:	4b48      	ldr	r3, [pc, #288]	; (8000e90 <MX_GPIO_Init+0x158>)
 8000d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d72:	4a47      	ldr	r2, [pc, #284]	; (8000e90 <MX_GPIO_Init+0x158>)
 8000d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d7c:	4b44      	ldr	r3, [pc, #272]	; (8000e90 <MX_GPIO_Init+0x158>)
 8000d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	4b41      	ldr	r3, [pc, #260]	; (8000e90 <MX_GPIO_Init+0x158>)
 8000d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d90:	4a3f      	ldr	r2, [pc, #252]	; (8000e90 <MX_GPIO_Init+0x158>)
 8000d92:	f043 0301 	orr.w	r3, r3, #1
 8000d96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d9a:	4b3d      	ldr	r3, [pc, #244]	; (8000e90 <MX_GPIO_Init+0x158>)
 8000d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da8:	4b39      	ldr	r3, [pc, #228]	; (8000e90 <MX_GPIO_Init+0x158>)
 8000daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dae:	4a38      	ldr	r2, [pc, #224]	; (8000e90 <MX_GPIO_Init+0x158>)
 8000db0:	f043 0302 	orr.w	r3, r3, #2
 8000db4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db8:	4b35      	ldr	r3, [pc, #212]	; (8000e90 <MX_GPIO_Init+0x158>)
 8000dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc6:	4b32      	ldr	r3, [pc, #200]	; (8000e90 <MX_GPIO_Init+0x158>)
 8000dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dcc:	4a30      	ldr	r2, [pc, #192]	; (8000e90 <MX_GPIO_Init+0x158>)
 8000dce:	f043 0308 	orr.w	r3, r3, #8
 8000dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd6:	4b2e      	ldr	r3, [pc, #184]	; (8000e90 <MX_GPIO_Init+0x158>)
 8000dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ddc:	f003 0308 	and.w	r3, r3, #8
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000de4:	4b2a      	ldr	r3, [pc, #168]	; (8000e90 <MX_GPIO_Init+0x158>)
 8000de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dea:	4a29      	ldr	r2, [pc, #164]	; (8000e90 <MX_GPIO_Init+0x158>)
 8000dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000df0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000df4:	4b26      	ldr	r3, [pc, #152]	; (8000e90 <MX_GPIO_Init+0x158>)
 8000df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000e08:	4822      	ldr	r0, [pc, #136]	; (8000e94 <MX_GPIO_Init+0x15c>)
 8000e0a:	f003 fe7b 	bl	8004b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2140      	movs	r1, #64	; 0x40
 8000e12:	4821      	ldr	r0, [pc, #132]	; (8000e98 <MX_GPIO_Init+0x160>)
 8000e14:	f003 fe76 	bl	8004b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000e18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e1e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e28:	f107 031c 	add.w	r3, r7, #28
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	481b      	ldr	r0, [pc, #108]	; (8000e9c <MX_GPIO_Init+0x164>)
 8000e30:	f003 fcb8 	bl	80047a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000e34:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000e38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e46:	f107 031c 	add.w	r3, r7, #28
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4811      	ldr	r0, [pc, #68]	; (8000e94 <MX_GPIO_Init+0x15c>)
 8000e4e:	f003 fca9 	bl	80047a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000e52:	2340      	movs	r3, #64	; 0x40
 8000e54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e56:	2301      	movs	r3, #1
 8000e58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e62:	f107 031c 	add.w	r3, r7, #28
 8000e66:	4619      	mov	r1, r3
 8000e68:	480b      	ldr	r0, [pc, #44]	; (8000e98 <MX_GPIO_Init+0x160>)
 8000e6a:	f003 fc9b 	bl	80047a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e6e:	2380      	movs	r3, #128	; 0x80
 8000e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e72:	2300      	movs	r3, #0
 8000e74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e7a:	f107 031c 	add.w	r3, r7, #28
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4805      	ldr	r0, [pc, #20]	; (8000e98 <MX_GPIO_Init+0x160>)
 8000e82:	f003 fc8f 	bl	80047a4 <HAL_GPIO_Init>

}
 8000e86:	bf00      	nop
 8000e88:	3730      	adds	r7, #48	; 0x30
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	58024400 	.word	0x58024400
 8000e94:	58020400 	.word	0x58020400
 8000e98:	58021800 	.word	0x58021800
 8000e9c:	58020800 	.word	0x58020800

08000ea0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea4:	b672      	cpsid	i
}
 8000ea6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <Error_Handler+0x8>
	...

08000eac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <HAL_MspInit+0x30>)
 8000eb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000eb8:	4a08      	ldr	r2, [pc, #32]	; (8000edc <HAL_MspInit+0x30>)
 8000eba:	f043 0302 	orr.w	r3, r3, #2
 8000ebe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_MspInit+0x30>)
 8000ec4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	58024400 	.word	0x58024400

08000ee0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08e      	sub	sp, #56	; 0x38
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a59      	ldr	r2, [pc, #356]	; (8001064 <HAL_ETH_MspInit+0x184>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	f040 80ab 	bne.w	800105a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000f04:	4b58      	ldr	r3, [pc, #352]	; (8001068 <HAL_ETH_MspInit+0x188>)
 8000f06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f0a:	4a57      	ldr	r2, [pc, #348]	; (8001068 <HAL_ETH_MspInit+0x188>)
 8000f0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f10:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f14:	4b54      	ldr	r3, [pc, #336]	; (8001068 <HAL_ETH_MspInit+0x188>)
 8000f16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f1e:	623b      	str	r3, [r7, #32]
 8000f20:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000f22:	4b51      	ldr	r3, [pc, #324]	; (8001068 <HAL_ETH_MspInit+0x188>)
 8000f24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f28:	4a4f      	ldr	r2, [pc, #316]	; (8001068 <HAL_ETH_MspInit+0x188>)
 8000f2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f2e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f32:	4b4d      	ldr	r3, [pc, #308]	; (8001068 <HAL_ETH_MspInit+0x188>)
 8000f34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f3c:	61fb      	str	r3, [r7, #28]
 8000f3e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000f40:	4b49      	ldr	r3, [pc, #292]	; (8001068 <HAL_ETH_MspInit+0x188>)
 8000f42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f46:	4a48      	ldr	r2, [pc, #288]	; (8001068 <HAL_ETH_MspInit+0x188>)
 8000f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f4c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f50:	4b45      	ldr	r3, [pc, #276]	; (8001068 <HAL_ETH_MspInit+0x188>)
 8000f52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5a:	61bb      	str	r3, [r7, #24]
 8000f5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5e:	4b42      	ldr	r3, [pc, #264]	; (8001068 <HAL_ETH_MspInit+0x188>)
 8000f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f64:	4a40      	ldr	r2, [pc, #256]	; (8001068 <HAL_ETH_MspInit+0x188>)
 8000f66:	f043 0304 	orr.w	r3, r3, #4
 8000f6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f6e:	4b3e      	ldr	r3, [pc, #248]	; (8001068 <HAL_ETH_MspInit+0x188>)
 8000f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f74:	f003 0304 	and.w	r3, r3, #4
 8000f78:	617b      	str	r3, [r7, #20]
 8000f7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7c:	4b3a      	ldr	r3, [pc, #232]	; (8001068 <HAL_ETH_MspInit+0x188>)
 8000f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f82:	4a39      	ldr	r2, [pc, #228]	; (8001068 <HAL_ETH_MspInit+0x188>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f8c:	4b36      	ldr	r3, [pc, #216]	; (8001068 <HAL_ETH_MspInit+0x188>)
 8000f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9a:	4b33      	ldr	r3, [pc, #204]	; (8001068 <HAL_ETH_MspInit+0x188>)
 8000f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa0:	4a31      	ldr	r2, [pc, #196]	; (8001068 <HAL_ETH_MspInit+0x188>)
 8000fa2:	f043 0302 	orr.w	r3, r3, #2
 8000fa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000faa:	4b2f      	ldr	r3, [pc, #188]	; (8001068 <HAL_ETH_MspInit+0x188>)
 8000fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb0:	f003 0302 	and.w	r3, r3, #2
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fb8:	4b2b      	ldr	r3, [pc, #172]	; (8001068 <HAL_ETH_MspInit+0x188>)
 8000fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fbe:	4a2a      	ldr	r2, [pc, #168]	; (8001068 <HAL_ETH_MspInit+0x188>)
 8000fc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fc8:	4b27      	ldr	r3, [pc, #156]	; (8001068 <HAL_ETH_MspInit+0x188>)
 8000fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000fd6:	2332      	movs	r3, #50	; 0x32
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fe6:	230b      	movs	r3, #11
 8000fe8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fee:	4619      	mov	r1, r3
 8000ff0:	481e      	ldr	r0, [pc, #120]	; (800106c <HAL_ETH_MspInit+0x18c>)
 8000ff2:	f003 fbd7 	bl	80047a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ff6:	2386      	movs	r3, #134	; 0x86
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2300      	movs	r3, #0
 8001004:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001006:	230b      	movs	r3, #11
 8001008:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100e:	4619      	mov	r1, r3
 8001010:	4817      	ldr	r0, [pc, #92]	; (8001070 <HAL_ETH_MspInit+0x190>)
 8001012:	f003 fbc7 	bl	80047a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001016:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2300      	movs	r3, #0
 8001026:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001028:	230b      	movs	r3, #11
 800102a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800102c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001030:	4619      	mov	r1, r3
 8001032:	4810      	ldr	r0, [pc, #64]	; (8001074 <HAL_ETH_MspInit+0x194>)
 8001034:	f003 fbb6 	bl	80047a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001038:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800104a:	230b      	movs	r3, #11
 800104c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800104e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001052:	4619      	mov	r1, r3
 8001054:	4808      	ldr	r0, [pc, #32]	; (8001078 <HAL_ETH_MspInit+0x198>)
 8001056:	f003 fba5 	bl	80047a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800105a:	bf00      	nop
 800105c:	3738      	adds	r7, #56	; 0x38
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40028000 	.word	0x40028000
 8001068:	58024400 	.word	0x58024400
 800106c:	58020800 	.word	0x58020800
 8001070:	58020000 	.word	0x58020000
 8001074:	58020400 	.word	0x58020400
 8001078:	58021800 	.word	0x58021800

0800107c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a26      	ldr	r2, [pc, #152]	; (8001124 <HAL_TIM_Base_MspInit+0xa8>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d145      	bne.n	800111a <HAL_TIM_Base_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800108e:	4b26      	ldr	r3, [pc, #152]	; (8001128 <HAL_TIM_Base_MspInit+0xac>)
 8001090:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001094:	4a24      	ldr	r2, [pc, #144]	; (8001128 <HAL_TIM_Base_MspInit+0xac>)
 8001096:	f043 0302 	orr.w	r3, r3, #2
 800109a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800109e:	4b22      	ldr	r3, [pc, #136]	; (8001128 <HAL_TIM_Base_MspInit+0xac>)
 80010a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1 Init */
    hdma_tim3_ch1.Instance = DMA1_Stream1;
 80010ac:	4b1f      	ldr	r3, [pc, #124]	; (800112c <HAL_TIM_Base_MspInit+0xb0>)
 80010ae:	4a20      	ldr	r2, [pc, #128]	; (8001130 <HAL_TIM_Base_MspInit+0xb4>)
 80010b0:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 80010b2:	4b1e      	ldr	r3, [pc, #120]	; (800112c <HAL_TIM_Base_MspInit+0xb0>)
 80010b4:	2217      	movs	r2, #23
 80010b6:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010b8:	4b1c      	ldr	r3, [pc, #112]	; (800112c <HAL_TIM_Base_MspInit+0xb0>)
 80010ba:	2240      	movs	r2, #64	; 0x40
 80010bc:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010be:	4b1b      	ldr	r3, [pc, #108]	; (800112c <HAL_TIM_Base_MspInit+0xb0>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80010c4:	4b19      	ldr	r3, [pc, #100]	; (800112c <HAL_TIM_Base_MspInit+0xb0>)
 80010c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010ca:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010cc:	4b17      	ldr	r3, [pc, #92]	; (800112c <HAL_TIM_Base_MspInit+0xb0>)
 80010ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010d2:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010d4:	4b15      	ldr	r3, [pc, #84]	; (800112c <HAL_TIM_Base_MspInit+0xb0>)
 80010d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010da:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 80010dc:	4b13      	ldr	r3, [pc, #76]	; (800112c <HAL_TIM_Base_MspInit+0xb0>)
 80010de:	2200      	movs	r2, #0
 80010e0:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80010e2:	4b12      	ldr	r3, [pc, #72]	; (800112c <HAL_TIM_Base_MspInit+0xb0>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010e8:	4b10      	ldr	r3, [pc, #64]	; (800112c <HAL_TIM_Base_MspInit+0xb0>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 80010ee:	480f      	ldr	r0, [pc, #60]	; (800112c <HAL_TIM_Base_MspInit+0xb0>)
 80010f0:	f000 fc16 	bl	8001920 <HAL_DMA_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80010fa:	f7ff fed1 	bl	8000ea0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a0a      	ldr	r2, [pc, #40]	; (800112c <HAL_TIM_Base_MspInit+0xb0>)
 8001102:	625a      	str	r2, [r3, #36]	; 0x24
 8001104:	4a09      	ldr	r2, [pc, #36]	; (800112c <HAL_TIM_Base_MspInit+0xb0>)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2100      	movs	r1, #0
 800110e:	201d      	movs	r0, #29
 8001110:	f000 fbd1 	bl	80018b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001114:	201d      	movs	r0, #29
 8001116:	f000 fbe8 	bl	80018ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800111a:	bf00      	nop
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40000400 	.word	0x40000400
 8001128:	58024400 	.word	0x58024400
 800112c:	24000220 	.word	0x24000220
 8001130:	40020028 	.word	0x40020028

08001134 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a12      	ldr	r2, [pc, #72]	; (800119c <HAL_TIM_MspPostInit+0x68>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d11e      	bne.n	8001194 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001156:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <HAL_TIM_MspPostInit+0x6c>)
 8001158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115c:	4a10      	ldr	r2, [pc, #64]	; (80011a0 <HAL_TIM_MspPostInit+0x6c>)
 800115e:	f043 0302 	orr.w	r3, r3, #2
 8001162:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <HAL_TIM_MspPostInit+0x6c>)
 8001168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800116c:	f003 0302 	and.w	r3, r3, #2
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001174:	2310      	movs	r3, #16
 8001176:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001178:	2302      	movs	r3, #2
 800117a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	2300      	movs	r3, #0
 8001182:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001184:	2302      	movs	r3, #2
 8001186:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	4619      	mov	r1, r3
 800118e:	4805      	ldr	r0, [pc, #20]	; (80011a4 <HAL_TIM_MspPostInit+0x70>)
 8001190:	f003 fb08 	bl	80047a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001194:	bf00      	nop
 8001196:	3720      	adds	r7, #32
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40000400 	.word	0x40000400
 80011a0:	58024400 	.word	0x58024400
 80011a4:	58020400 	.word	0x58020400

080011a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b0ba      	sub	sp, #232	; 0xe8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011c0:	f107 0310 	add.w	r3, r7, #16
 80011c4:	22c0      	movs	r2, #192	; 0xc0
 80011c6:	2100      	movs	r1, #0
 80011c8:	4618      	mov	r0, r3
 80011ca:	f00a fb7f 	bl	800b8cc <memset>
  if(huart->Instance==USART3)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a27      	ldr	r2, [pc, #156]	; (8001270 <HAL_UART_MspInit+0xc8>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d146      	bne.n	8001266 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011d8:	f04f 0202 	mov.w	r2, #2
 80011dc:	f04f 0300 	mov.w	r3, #0
 80011e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80011e4:	2300      	movs	r3, #0
 80011e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ea:	f107 0310 	add.w	r3, r7, #16
 80011ee:	4618      	mov	r0, r3
 80011f0:	f004 fe1a 	bl	8005e28 <HAL_RCCEx_PeriphCLKConfig>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80011fa:	f7ff fe51 	bl	8000ea0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011fe:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <HAL_UART_MspInit+0xcc>)
 8001200:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001204:	4a1b      	ldr	r2, [pc, #108]	; (8001274 <HAL_UART_MspInit+0xcc>)
 8001206:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800120a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800120e:	4b19      	ldr	r3, [pc, #100]	; (8001274 <HAL_UART_MspInit+0xcc>)
 8001210:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001214:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800121c:	4b15      	ldr	r3, [pc, #84]	; (8001274 <HAL_UART_MspInit+0xcc>)
 800121e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001222:	4a14      	ldr	r2, [pc, #80]	; (8001274 <HAL_UART_MspInit+0xcc>)
 8001224:	f043 0308 	orr.w	r3, r3, #8
 8001228:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <HAL_UART_MspInit+0xcc>)
 800122e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001232:	f003 0308 	and.w	r3, r3, #8
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800123a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800123e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001242:	2302      	movs	r3, #2
 8001244:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124e:	2300      	movs	r3, #0
 8001250:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001254:	2307      	movs	r3, #7
 8001256:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800125a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800125e:	4619      	mov	r1, r3
 8001260:	4805      	ldr	r0, [pc, #20]	; (8001278 <HAL_UART_MspInit+0xd0>)
 8001262:	f003 fa9f 	bl	80047a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001266:	bf00      	nop
 8001268:	37e8      	adds	r7, #232	; 0xe8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40004800 	.word	0x40004800
 8001274:	58024400 	.word	0x58024400
 8001278:	58020c00 	.word	0x58020c00

0800127c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b0ba      	sub	sp, #232	; 0xe8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001294:	f107 0310 	add.w	r3, r7, #16
 8001298:	22c0      	movs	r2, #192	; 0xc0
 800129a:	2100      	movs	r1, #0
 800129c:	4618      	mov	r0, r3
 800129e:	f00a fb15 	bl	800b8cc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a30      	ldr	r2, [pc, #192]	; (8001368 <HAL_PCD_MspInit+0xec>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d159      	bne.n	8001360 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80012ac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012b0:	f04f 0300 	mov.w	r3, #0
 80012b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80012b8:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80012bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	4618      	mov	r0, r3
 80012c6:	f004 fdaf 	bl	8005e28 <HAL_RCCEx_PeriphCLKConfig>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80012d0:	f7ff fde6 	bl	8000ea0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80012d4:	f003 fdb2 	bl	8004e3c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d8:	4b24      	ldr	r3, [pc, #144]	; (800136c <HAL_PCD_MspInit+0xf0>)
 80012da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012de:	4a23      	ldr	r2, [pc, #140]	; (800136c <HAL_PCD_MspInit+0xf0>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012e8:	4b20      	ldr	r3, [pc, #128]	; (800136c <HAL_PCD_MspInit+0xf0>)
 80012ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80012f6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80012fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2300      	movs	r3, #0
 800130c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001310:	230a      	movs	r3, #10
 8001312:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001316:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800131a:	4619      	mov	r1, r3
 800131c:	4814      	ldr	r0, [pc, #80]	; (8001370 <HAL_PCD_MspInit+0xf4>)
 800131e:	f003 fa41 	bl	80047a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001322:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001326:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800132a:	2300      	movs	r3, #0
 800132c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001336:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800133a:	4619      	mov	r1, r3
 800133c:	480c      	ldr	r0, [pc, #48]	; (8001370 <HAL_PCD_MspInit+0xf4>)
 800133e:	f003 fa31 	bl	80047a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001342:	4b0a      	ldr	r3, [pc, #40]	; (800136c <HAL_PCD_MspInit+0xf0>)
 8001344:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001348:	4a08      	ldr	r2, [pc, #32]	; (800136c <HAL_PCD_MspInit+0xf0>)
 800134a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800134e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_PCD_MspInit+0xf0>)
 8001354:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001360:	bf00      	nop
 8001362:	37e8      	adds	r7, #232	; 0xe8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40080000 	.word	0x40080000
 800136c:	58024400 	.word	0x58024400
 8001370:	58020000 	.word	0x58020000

08001374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001378:	e7fe      	b.n	8001378 <NMI_Handler+0x4>

0800137a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137e:	e7fe      	b.n	800137e <HardFault_Handler+0x4>

08001380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001384:	e7fe      	b.n	8001384 <MemManage_Handler+0x4>

08001386 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138a:	e7fe      	b.n	800138a <BusFault_Handler+0x4>

0800138c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <UsageFault_Handler+0x4>

08001392 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c0:	f000 f93a 	bl	8001638 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 80013cc:	4802      	ldr	r0, [pc, #8]	; (80013d8 <DMA1_Stream1_IRQHandler+0x10>)
 80013ce:	f001 fab3 	bl	8002938 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	24000220 	.word	0x24000220

080013dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80013e0:	4802      	ldr	r0, [pc, #8]	; (80013ec <TIM3_IRQHandler+0x10>)
 80013e2:	f006 ff23 	bl	800822c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	240001d4 	.word	0x240001d4

080013f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013f4:	4b37      	ldr	r3, [pc, #220]	; (80014d4 <SystemInit+0xe4>)
 80013f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013fa:	4a36      	ldr	r2, [pc, #216]	; (80014d4 <SystemInit+0xe4>)
 80013fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001400:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001404:	4b34      	ldr	r3, [pc, #208]	; (80014d8 <SystemInit+0xe8>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 030f 	and.w	r3, r3, #15
 800140c:	2b06      	cmp	r3, #6
 800140e:	d807      	bhi.n	8001420 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001410:	4b31      	ldr	r3, [pc, #196]	; (80014d8 <SystemInit+0xe8>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f023 030f 	bic.w	r3, r3, #15
 8001418:	4a2f      	ldr	r2, [pc, #188]	; (80014d8 <SystemInit+0xe8>)
 800141a:	f043 0307 	orr.w	r3, r3, #7
 800141e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001420:	4b2e      	ldr	r3, [pc, #184]	; (80014dc <SystemInit+0xec>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a2d      	ldr	r2, [pc, #180]	; (80014dc <SystemInit+0xec>)
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800142c:	4b2b      	ldr	r3, [pc, #172]	; (80014dc <SystemInit+0xec>)
 800142e:	2200      	movs	r2, #0
 8001430:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001432:	4b2a      	ldr	r3, [pc, #168]	; (80014dc <SystemInit+0xec>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	4929      	ldr	r1, [pc, #164]	; (80014dc <SystemInit+0xec>)
 8001438:	4b29      	ldr	r3, [pc, #164]	; (80014e0 <SystemInit+0xf0>)
 800143a:	4013      	ands	r3, r2
 800143c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800143e:	4b26      	ldr	r3, [pc, #152]	; (80014d8 <SystemInit+0xe8>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0308 	and.w	r3, r3, #8
 8001446:	2b00      	cmp	r3, #0
 8001448:	d007      	beq.n	800145a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800144a:	4b23      	ldr	r3, [pc, #140]	; (80014d8 <SystemInit+0xe8>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f023 030f 	bic.w	r3, r3, #15
 8001452:	4a21      	ldr	r2, [pc, #132]	; (80014d8 <SystemInit+0xe8>)
 8001454:	f043 0307 	orr.w	r3, r3, #7
 8001458:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800145a:	4b20      	ldr	r3, [pc, #128]	; (80014dc <SystemInit+0xec>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001460:	4b1e      	ldr	r3, [pc, #120]	; (80014dc <SystemInit+0xec>)
 8001462:	2200      	movs	r2, #0
 8001464:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001466:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <SystemInit+0xec>)
 8001468:	2200      	movs	r2, #0
 800146a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800146c:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <SystemInit+0xec>)
 800146e:	4a1d      	ldr	r2, [pc, #116]	; (80014e4 <SystemInit+0xf4>)
 8001470:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001472:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <SystemInit+0xec>)
 8001474:	4a1c      	ldr	r2, [pc, #112]	; (80014e8 <SystemInit+0xf8>)
 8001476:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001478:	4b18      	ldr	r3, [pc, #96]	; (80014dc <SystemInit+0xec>)
 800147a:	4a1c      	ldr	r2, [pc, #112]	; (80014ec <SystemInit+0xfc>)
 800147c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800147e:	4b17      	ldr	r3, [pc, #92]	; (80014dc <SystemInit+0xec>)
 8001480:	2200      	movs	r2, #0
 8001482:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001484:	4b15      	ldr	r3, [pc, #84]	; (80014dc <SystemInit+0xec>)
 8001486:	4a19      	ldr	r2, [pc, #100]	; (80014ec <SystemInit+0xfc>)
 8001488:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800148a:	4b14      	ldr	r3, [pc, #80]	; (80014dc <SystemInit+0xec>)
 800148c:	2200      	movs	r2, #0
 800148e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001490:	4b12      	ldr	r3, [pc, #72]	; (80014dc <SystemInit+0xec>)
 8001492:	4a16      	ldr	r2, [pc, #88]	; (80014ec <SystemInit+0xfc>)
 8001494:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001496:	4b11      	ldr	r3, [pc, #68]	; (80014dc <SystemInit+0xec>)
 8001498:	2200      	movs	r2, #0
 800149a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800149c:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <SystemInit+0xec>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <SystemInit+0xec>)
 80014a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014a8:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <SystemInit+0xec>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80014ae:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <SystemInit+0x100>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <SystemInit+0x104>)
 80014b4:	4013      	ands	r3, r2
 80014b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014ba:	d202      	bcs.n	80014c2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80014bc:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <SystemInit+0x108>)
 80014be:	2201      	movs	r2, #1
 80014c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014c2:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <SystemInit+0x10c>)
 80014c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80014c8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	e000ed00 	.word	0xe000ed00
 80014d8:	52002000 	.word	0x52002000
 80014dc:	58024400 	.word	0x58024400
 80014e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80014e4:	02020200 	.word	0x02020200
 80014e8:	01ff0000 	.word	0x01ff0000
 80014ec:	01010280 	.word	0x01010280
 80014f0:	5c001000 	.word	0x5c001000
 80014f4:	ffff0000 	.word	0xffff0000
 80014f8:	51008108 	.word	0x51008108
 80014fc:	52004000 	.word	0x52004000

08001500 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001500:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001538 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001504:	f7ff ff74 	bl	80013f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001508:	480c      	ldr	r0, [pc, #48]	; (800153c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800150a:	490d      	ldr	r1, [pc, #52]	; (8001540 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800150c:	4a0d      	ldr	r2, [pc, #52]	; (8001544 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800150e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001510:	e002      	b.n	8001518 <LoopCopyDataInit>

08001512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001516:	3304      	adds	r3, #4

08001518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800151a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800151c:	d3f9      	bcc.n	8001512 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800151e:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001520:	4c0a      	ldr	r4, [pc, #40]	; (800154c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001524:	e001      	b.n	800152a <LoopFillZerobss>

08001526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001528:	3204      	adds	r2, #4

0800152a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800152a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800152c:	d3fb      	bcc.n	8001526 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800152e:	f00a f9a9 	bl	800b884 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001532:	f7ff f97b 	bl	800082c <main>
  bx  lr
 8001536:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001538:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800153c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001540:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001544:	0800bb20 	.word	0x0800bb20
  ldr r2, =_sbss
 8001548:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 800154c:	24000adc 	.word	0x24000adc

08001550 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001550:	e7fe      	b.n	8001550 <ADC3_IRQHandler>
	...

08001554 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800155a:	2003      	movs	r0, #3
 800155c:	f000 f9a0 	bl	80018a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001560:	f004 fa8c 	bl	8005a7c <HAL_RCC_GetSysClockFreq>
 8001564:	4602      	mov	r2, r0
 8001566:	4b15      	ldr	r3, [pc, #84]	; (80015bc <HAL_Init+0x68>)
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	0a1b      	lsrs	r3, r3, #8
 800156c:	f003 030f 	and.w	r3, r3, #15
 8001570:	4913      	ldr	r1, [pc, #76]	; (80015c0 <HAL_Init+0x6c>)
 8001572:	5ccb      	ldrb	r3, [r1, r3]
 8001574:	f003 031f 	and.w	r3, r3, #31
 8001578:	fa22 f303 	lsr.w	r3, r2, r3
 800157c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800157e:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <HAL_Init+0x68>)
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	4a0e      	ldr	r2, [pc, #56]	; (80015c0 <HAL_Init+0x6c>)
 8001588:	5cd3      	ldrb	r3, [r2, r3]
 800158a:	f003 031f 	and.w	r3, r3, #31
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	fa22 f303 	lsr.w	r3, r2, r3
 8001594:	4a0b      	ldr	r2, [pc, #44]	; (80015c4 <HAL_Init+0x70>)
 8001596:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001598:	4a0b      	ldr	r2, [pc, #44]	; (80015c8 <HAL_Init+0x74>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800159e:	2000      	movs	r0, #0
 80015a0:	f000 f814 	bl	80015cc <HAL_InitTick>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e002      	b.n	80015b4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80015ae:	f7ff fc7d 	bl	8000eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	58024400 	.word	0x58024400
 80015c0:	0800b8f8 	.word	0x0800b8f8
 80015c4:	24000004 	.word	0x24000004
 80015c8:	24000000 	.word	0x24000000

080015cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015d4:	4b15      	ldr	r3, [pc, #84]	; (800162c <HAL_InitTick+0x60>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d101      	bne.n	80015e0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e021      	b.n	8001624 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80015e0:	4b13      	ldr	r3, [pc, #76]	; (8001630 <HAL_InitTick+0x64>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4b11      	ldr	r3, [pc, #68]	; (800162c <HAL_InitTick+0x60>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	4619      	mov	r1, r3
 80015ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80015f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f6:	4618      	mov	r0, r3
 80015f8:	f000 f985 	bl	8001906 <HAL_SYSTICK_Config>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e00e      	b.n	8001624 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b0f      	cmp	r3, #15
 800160a:	d80a      	bhi.n	8001622 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800160c:	2200      	movs	r2, #0
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	f04f 30ff 	mov.w	r0, #4294967295
 8001614:	f000 f94f 	bl	80018b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001618:	4a06      	ldr	r2, [pc, #24]	; (8001634 <HAL_InitTick+0x68>)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800161e:	2300      	movs	r3, #0
 8001620:	e000      	b.n	8001624 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
}
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	2400000c 	.word	0x2400000c
 8001630:	24000000 	.word	0x24000000
 8001634:	24000008 	.word	0x24000008

08001638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_IncTick+0x20>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	461a      	mov	r2, r3
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <HAL_IncTick+0x24>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4413      	add	r3, r2
 8001648:	4a04      	ldr	r2, [pc, #16]	; (800165c <HAL_IncTick+0x24>)
 800164a:	6013      	str	r3, [r2, #0]
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	2400000c 	.word	0x2400000c
 800165c:	24000ad8 	.word	0x24000ad8

08001660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return uwTick;
 8001664:	4b03      	ldr	r3, [pc, #12]	; (8001674 <HAL_GetTick+0x14>)
 8001666:	681b      	ldr	r3, [r3, #0]
}
 8001668:	4618      	mov	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	24000ad8 	.word	0x24000ad8

08001678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001680:	f7ff ffee 	bl	8001660 <HAL_GetTick>
 8001684:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001690:	d005      	beq.n	800169e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001692:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <HAL_Delay+0x44>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	461a      	mov	r2, r3
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4413      	add	r3, r2
 800169c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800169e:	bf00      	nop
 80016a0:	f7ff ffde 	bl	8001660 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d8f7      	bhi.n	80016a0 <HAL_Delay+0x28>
  {
  }
}
 80016b0:	bf00      	nop
 80016b2:	bf00      	nop
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	2400000c 	.word	0x2400000c

080016c0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80016c4:	4b03      	ldr	r3, [pc, #12]	; (80016d4 <HAL_GetREVID+0x14>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	0c1b      	lsrs	r3, r3, #16
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	5c001000 	.word	0x5c001000

080016d8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80016e8:	4904      	ldr	r1, [pc, #16]	; (80016fc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	604b      	str	r3, [r1, #4]
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	58000400 	.word	0x58000400

08001700 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001710:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <__NVIC_SetPriorityGrouping+0x40>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001716:	68ba      	ldr	r2, [r7, #8]
 8001718:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800171c:	4013      	ands	r3, r2
 800171e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <__NVIC_SetPriorityGrouping+0x44>)
 800172a:	4313      	orrs	r3, r2
 800172c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800172e:	4a04      	ldr	r2, [pc, #16]	; (8001740 <__NVIC_SetPriorityGrouping+0x40>)
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	60d3      	str	r3, [r2, #12]
}
 8001734:	bf00      	nop
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	e000ed00 	.word	0xe000ed00
 8001744:	05fa0000 	.word	0x05fa0000

08001748 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800174c:	4b04      	ldr	r3, [pc, #16]	; (8001760 <__NVIC_GetPriorityGrouping+0x18>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	0a1b      	lsrs	r3, r3, #8
 8001752:	f003 0307 	and.w	r3, r3, #7
}
 8001756:	4618      	mov	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800176e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001772:	2b00      	cmp	r3, #0
 8001774:	db0b      	blt.n	800178e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001776:	88fb      	ldrh	r3, [r7, #6]
 8001778:	f003 021f 	and.w	r2, r3, #31
 800177c:	4907      	ldr	r1, [pc, #28]	; (800179c <__NVIC_EnableIRQ+0x38>)
 800177e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001782:	095b      	lsrs	r3, r3, #5
 8001784:	2001      	movs	r0, #1
 8001786:	fa00 f202 	lsl.w	r2, r0, r2
 800178a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	e000e100 	.word	0xe000e100

080017a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	6039      	str	r1, [r7, #0]
 80017aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	db0a      	blt.n	80017ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	490c      	ldr	r1, [pc, #48]	; (80017ec <__NVIC_SetPriority+0x4c>)
 80017ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017be:	0112      	lsls	r2, r2, #4
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	440b      	add	r3, r1
 80017c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017c8:	e00a      	b.n	80017e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	4908      	ldr	r1, [pc, #32]	; (80017f0 <__NVIC_SetPriority+0x50>)
 80017d0:	88fb      	ldrh	r3, [r7, #6]
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	3b04      	subs	r3, #4
 80017d8:	0112      	lsls	r2, r2, #4
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	440b      	add	r3, r1
 80017de:	761a      	strb	r2, [r3, #24]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000e100 	.word	0xe000e100
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b089      	sub	sp, #36	; 0x24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	f1c3 0307 	rsb	r3, r3, #7
 800180e:	2b04      	cmp	r3, #4
 8001810:	bf28      	it	cs
 8001812:	2304      	movcs	r3, #4
 8001814:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	3304      	adds	r3, #4
 800181a:	2b06      	cmp	r3, #6
 800181c:	d902      	bls.n	8001824 <NVIC_EncodePriority+0x30>
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	3b03      	subs	r3, #3
 8001822:	e000      	b.n	8001826 <NVIC_EncodePriority+0x32>
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001828:	f04f 32ff 	mov.w	r2, #4294967295
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43da      	mvns	r2, r3
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	401a      	ands	r2, r3
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800183c:	f04f 31ff 	mov.w	r1, #4294967295
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	fa01 f303 	lsl.w	r3, r1, r3
 8001846:	43d9      	mvns	r1, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800184c:	4313      	orrs	r3, r2
         );
}
 800184e:	4618      	mov	r0, r3
 8001850:	3724      	adds	r7, #36	; 0x24
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
	...

0800185c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3b01      	subs	r3, #1
 8001868:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800186c:	d301      	bcc.n	8001872 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800186e:	2301      	movs	r3, #1
 8001870:	e00f      	b.n	8001892 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001872:	4a0a      	ldr	r2, [pc, #40]	; (800189c <SysTick_Config+0x40>)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3b01      	subs	r3, #1
 8001878:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800187a:	210f      	movs	r1, #15
 800187c:	f04f 30ff 	mov.w	r0, #4294967295
 8001880:	f7ff ff8e 	bl	80017a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001884:	4b05      	ldr	r3, [pc, #20]	; (800189c <SysTick_Config+0x40>)
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800188a:	4b04      	ldr	r3, [pc, #16]	; (800189c <SysTick_Config+0x40>)
 800188c:	2207      	movs	r2, #7
 800188e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	e000e010 	.word	0xe000e010

080018a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff ff29 	bl	8001700 <__NVIC_SetPriorityGrouping>
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b086      	sub	sp, #24
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	4603      	mov	r3, r0
 80018be:	60b9      	str	r1, [r7, #8]
 80018c0:	607a      	str	r2, [r7, #4]
 80018c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018c4:	f7ff ff40 	bl	8001748 <__NVIC_GetPriorityGrouping>
 80018c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	68b9      	ldr	r1, [r7, #8]
 80018ce:	6978      	ldr	r0, [r7, #20]
 80018d0:	f7ff ff90 	bl	80017f4 <NVIC_EncodePriority>
 80018d4:	4602      	mov	r2, r0
 80018d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018da:	4611      	mov	r1, r2
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ff5f 	bl	80017a0 <__NVIC_SetPriority>
}
 80018e2:	bf00      	nop
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	4603      	mov	r3, r0
 80018f2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff ff33 	bl	8001764 <__NVIC_EnableIRQ>
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff ffa4 	bl	800185c <SysTick_Config>
 8001914:	4603      	mov	r3, r0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001928:	f7ff fe9a 	bl	8001660 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e316      	b.n	8001f66 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a66      	ldr	r2, [pc, #408]	; (8001ad8 <HAL_DMA_Init+0x1b8>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d04a      	beq.n	80019d8 <HAL_DMA_Init+0xb8>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a65      	ldr	r2, [pc, #404]	; (8001adc <HAL_DMA_Init+0x1bc>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d045      	beq.n	80019d8 <HAL_DMA_Init+0xb8>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a63      	ldr	r2, [pc, #396]	; (8001ae0 <HAL_DMA_Init+0x1c0>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d040      	beq.n	80019d8 <HAL_DMA_Init+0xb8>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a62      	ldr	r2, [pc, #392]	; (8001ae4 <HAL_DMA_Init+0x1c4>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d03b      	beq.n	80019d8 <HAL_DMA_Init+0xb8>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a60      	ldr	r2, [pc, #384]	; (8001ae8 <HAL_DMA_Init+0x1c8>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d036      	beq.n	80019d8 <HAL_DMA_Init+0xb8>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a5f      	ldr	r2, [pc, #380]	; (8001aec <HAL_DMA_Init+0x1cc>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d031      	beq.n	80019d8 <HAL_DMA_Init+0xb8>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a5d      	ldr	r2, [pc, #372]	; (8001af0 <HAL_DMA_Init+0x1d0>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d02c      	beq.n	80019d8 <HAL_DMA_Init+0xb8>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a5c      	ldr	r2, [pc, #368]	; (8001af4 <HAL_DMA_Init+0x1d4>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d027      	beq.n	80019d8 <HAL_DMA_Init+0xb8>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a5a      	ldr	r2, [pc, #360]	; (8001af8 <HAL_DMA_Init+0x1d8>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d022      	beq.n	80019d8 <HAL_DMA_Init+0xb8>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a59      	ldr	r2, [pc, #356]	; (8001afc <HAL_DMA_Init+0x1dc>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d01d      	beq.n	80019d8 <HAL_DMA_Init+0xb8>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a57      	ldr	r2, [pc, #348]	; (8001b00 <HAL_DMA_Init+0x1e0>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d018      	beq.n	80019d8 <HAL_DMA_Init+0xb8>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a56      	ldr	r2, [pc, #344]	; (8001b04 <HAL_DMA_Init+0x1e4>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d013      	beq.n	80019d8 <HAL_DMA_Init+0xb8>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a54      	ldr	r2, [pc, #336]	; (8001b08 <HAL_DMA_Init+0x1e8>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d00e      	beq.n	80019d8 <HAL_DMA_Init+0xb8>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a53      	ldr	r2, [pc, #332]	; (8001b0c <HAL_DMA_Init+0x1ec>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d009      	beq.n	80019d8 <HAL_DMA_Init+0xb8>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a51      	ldr	r2, [pc, #324]	; (8001b10 <HAL_DMA_Init+0x1f0>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d004      	beq.n	80019d8 <HAL_DMA_Init+0xb8>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a50      	ldr	r2, [pc, #320]	; (8001b14 <HAL_DMA_Init+0x1f4>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d101      	bne.n	80019dc <HAL_DMA_Init+0xbc>
 80019d8:	2301      	movs	r3, #1
 80019da:	e000      	b.n	80019de <HAL_DMA_Init+0xbe>
 80019dc:	2300      	movs	r3, #0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f000 813b 	beq.w	8001c5a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2202      	movs	r2, #2
 80019e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a37      	ldr	r2, [pc, #220]	; (8001ad8 <HAL_DMA_Init+0x1b8>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d04a      	beq.n	8001a94 <HAL_DMA_Init+0x174>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a36      	ldr	r2, [pc, #216]	; (8001adc <HAL_DMA_Init+0x1bc>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d045      	beq.n	8001a94 <HAL_DMA_Init+0x174>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a34      	ldr	r2, [pc, #208]	; (8001ae0 <HAL_DMA_Init+0x1c0>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d040      	beq.n	8001a94 <HAL_DMA_Init+0x174>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a33      	ldr	r2, [pc, #204]	; (8001ae4 <HAL_DMA_Init+0x1c4>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d03b      	beq.n	8001a94 <HAL_DMA_Init+0x174>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a31      	ldr	r2, [pc, #196]	; (8001ae8 <HAL_DMA_Init+0x1c8>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d036      	beq.n	8001a94 <HAL_DMA_Init+0x174>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a30      	ldr	r2, [pc, #192]	; (8001aec <HAL_DMA_Init+0x1cc>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d031      	beq.n	8001a94 <HAL_DMA_Init+0x174>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a2e      	ldr	r2, [pc, #184]	; (8001af0 <HAL_DMA_Init+0x1d0>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d02c      	beq.n	8001a94 <HAL_DMA_Init+0x174>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a2d      	ldr	r2, [pc, #180]	; (8001af4 <HAL_DMA_Init+0x1d4>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d027      	beq.n	8001a94 <HAL_DMA_Init+0x174>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a2b      	ldr	r2, [pc, #172]	; (8001af8 <HAL_DMA_Init+0x1d8>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d022      	beq.n	8001a94 <HAL_DMA_Init+0x174>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a2a      	ldr	r2, [pc, #168]	; (8001afc <HAL_DMA_Init+0x1dc>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d01d      	beq.n	8001a94 <HAL_DMA_Init+0x174>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a28      	ldr	r2, [pc, #160]	; (8001b00 <HAL_DMA_Init+0x1e0>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d018      	beq.n	8001a94 <HAL_DMA_Init+0x174>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a27      	ldr	r2, [pc, #156]	; (8001b04 <HAL_DMA_Init+0x1e4>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d013      	beq.n	8001a94 <HAL_DMA_Init+0x174>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a25      	ldr	r2, [pc, #148]	; (8001b08 <HAL_DMA_Init+0x1e8>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d00e      	beq.n	8001a94 <HAL_DMA_Init+0x174>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a24      	ldr	r2, [pc, #144]	; (8001b0c <HAL_DMA_Init+0x1ec>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d009      	beq.n	8001a94 <HAL_DMA_Init+0x174>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a22      	ldr	r2, [pc, #136]	; (8001b10 <HAL_DMA_Init+0x1f0>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d004      	beq.n	8001a94 <HAL_DMA_Init+0x174>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a21      	ldr	r2, [pc, #132]	; (8001b14 <HAL_DMA_Init+0x1f4>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d108      	bne.n	8001aa6 <HAL_DMA_Init+0x186>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 0201 	bic.w	r2, r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	e007      	b.n	8001ab6 <HAL_DMA_Init+0x196>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 0201 	bic.w	r2, r2, #1
 8001ab4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001ab6:	e02f      	b.n	8001b18 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ab8:	f7ff fdd2 	bl	8001660 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b05      	cmp	r3, #5
 8001ac4:	d928      	bls.n	8001b18 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2220      	movs	r2, #32
 8001aca:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2203      	movs	r2, #3
 8001ad0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e246      	b.n	8001f66 <HAL_DMA_Init+0x646>
 8001ad8:	40020010 	.word	0x40020010
 8001adc:	40020028 	.word	0x40020028
 8001ae0:	40020040 	.word	0x40020040
 8001ae4:	40020058 	.word	0x40020058
 8001ae8:	40020070 	.word	0x40020070
 8001aec:	40020088 	.word	0x40020088
 8001af0:	400200a0 	.word	0x400200a0
 8001af4:	400200b8 	.word	0x400200b8
 8001af8:	40020410 	.word	0x40020410
 8001afc:	40020428 	.word	0x40020428
 8001b00:	40020440 	.word	0x40020440
 8001b04:	40020458 	.word	0x40020458
 8001b08:	40020470 	.word	0x40020470
 8001b0c:	40020488 	.word	0x40020488
 8001b10:	400204a0 	.word	0x400204a0
 8001b14:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1c8      	bne.n	8001ab8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	4b83      	ldr	r3, [pc, #524]	; (8001d40 <HAL_DMA_Init+0x420>)
 8001b32:	4013      	ands	r3, r2
 8001b34:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001b3e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b4a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b56:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	d107      	bne.n	8001b7c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b74:	4313      	orrs	r3, r2
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001b7c:	4b71      	ldr	r3, [pc, #452]	; (8001d44 <HAL_DMA_Init+0x424>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4b71      	ldr	r3, [pc, #452]	; (8001d48 <HAL_DMA_Init+0x428>)
 8001b82:	4013      	ands	r3, r2
 8001b84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b88:	d328      	bcc.n	8001bdc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b28      	cmp	r3, #40	; 0x28
 8001b90:	d903      	bls.n	8001b9a <HAL_DMA_Init+0x27a>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b2e      	cmp	r3, #46	; 0x2e
 8001b98:	d917      	bls.n	8001bca <HAL_DMA_Init+0x2aa>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b3e      	cmp	r3, #62	; 0x3e
 8001ba0:	d903      	bls.n	8001baa <HAL_DMA_Init+0x28a>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	2b42      	cmp	r3, #66	; 0x42
 8001ba8:	d90f      	bls.n	8001bca <HAL_DMA_Init+0x2aa>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b46      	cmp	r3, #70	; 0x46
 8001bb0:	d903      	bls.n	8001bba <HAL_DMA_Init+0x29a>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b48      	cmp	r3, #72	; 0x48
 8001bb8:	d907      	bls.n	8001bca <HAL_DMA_Init+0x2aa>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	2b4e      	cmp	r3, #78	; 0x4e
 8001bc0:	d905      	bls.n	8001bce <HAL_DMA_Init+0x2ae>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b52      	cmp	r3, #82	; 0x52
 8001bc8:	d801      	bhi.n	8001bce <HAL_DMA_Init+0x2ae>
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <HAL_DMA_Init+0x2b0>
 8001bce:	2300      	movs	r3, #0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001bda:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	697a      	ldr	r2, [r7, #20]
 8001be2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	f023 0307 	bic.w	r3, r3, #7
 8001bf2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	d117      	bne.n	8001c36 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0a:	697a      	ldr	r2, [r7, #20]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00e      	beq.n	8001c36 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f002 f815 	bl	8003c48 <DMA_CheckFifoParam>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d008      	beq.n	8001c36 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2240      	movs	r2, #64	; 0x40
 8001c28:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e197      	b.n	8001f66 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f001 ff50 	bl	8003ae4 <DMA_CalcBaseAndBitshift>
 8001c44:	4603      	mov	r3, r0
 8001c46:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c4c:	f003 031f 	and.w	r3, r3, #31
 8001c50:	223f      	movs	r2, #63	; 0x3f
 8001c52:	409a      	lsls	r2, r3
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	e0cd      	b.n	8001df6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a3b      	ldr	r2, [pc, #236]	; (8001d4c <HAL_DMA_Init+0x42c>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d022      	beq.n	8001caa <HAL_DMA_Init+0x38a>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a39      	ldr	r2, [pc, #228]	; (8001d50 <HAL_DMA_Init+0x430>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d01d      	beq.n	8001caa <HAL_DMA_Init+0x38a>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a38      	ldr	r2, [pc, #224]	; (8001d54 <HAL_DMA_Init+0x434>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d018      	beq.n	8001caa <HAL_DMA_Init+0x38a>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a36      	ldr	r2, [pc, #216]	; (8001d58 <HAL_DMA_Init+0x438>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d013      	beq.n	8001caa <HAL_DMA_Init+0x38a>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a35      	ldr	r2, [pc, #212]	; (8001d5c <HAL_DMA_Init+0x43c>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d00e      	beq.n	8001caa <HAL_DMA_Init+0x38a>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a33      	ldr	r2, [pc, #204]	; (8001d60 <HAL_DMA_Init+0x440>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d009      	beq.n	8001caa <HAL_DMA_Init+0x38a>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a32      	ldr	r2, [pc, #200]	; (8001d64 <HAL_DMA_Init+0x444>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d004      	beq.n	8001caa <HAL_DMA_Init+0x38a>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a30      	ldr	r2, [pc, #192]	; (8001d68 <HAL_DMA_Init+0x448>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d101      	bne.n	8001cae <HAL_DMA_Init+0x38e>
 8001caa:	2301      	movs	r3, #1
 8001cac:	e000      	b.n	8001cb0 <HAL_DMA_Init+0x390>
 8001cae:	2300      	movs	r3, #0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f000 8097 	beq.w	8001de4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a24      	ldr	r2, [pc, #144]	; (8001d4c <HAL_DMA_Init+0x42c>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d021      	beq.n	8001d04 <HAL_DMA_Init+0x3e4>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a22      	ldr	r2, [pc, #136]	; (8001d50 <HAL_DMA_Init+0x430>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d01c      	beq.n	8001d04 <HAL_DMA_Init+0x3e4>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a21      	ldr	r2, [pc, #132]	; (8001d54 <HAL_DMA_Init+0x434>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d017      	beq.n	8001d04 <HAL_DMA_Init+0x3e4>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a1f      	ldr	r2, [pc, #124]	; (8001d58 <HAL_DMA_Init+0x438>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d012      	beq.n	8001d04 <HAL_DMA_Init+0x3e4>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a1e      	ldr	r2, [pc, #120]	; (8001d5c <HAL_DMA_Init+0x43c>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d00d      	beq.n	8001d04 <HAL_DMA_Init+0x3e4>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a1c      	ldr	r2, [pc, #112]	; (8001d60 <HAL_DMA_Init+0x440>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d008      	beq.n	8001d04 <HAL_DMA_Init+0x3e4>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a1b      	ldr	r2, [pc, #108]	; (8001d64 <HAL_DMA_Init+0x444>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d003      	beq.n	8001d04 <HAL_DMA_Init+0x3e4>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a19      	ldr	r2, [pc, #100]	; (8001d68 <HAL_DMA_Init+0x448>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2202      	movs	r2, #2
 8001d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <HAL_DMA_Init+0x44c>)
 8001d22:	4013      	ands	r3, r2
 8001d24:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	2b40      	cmp	r3, #64	; 0x40
 8001d2c:	d020      	beq.n	8001d70 <HAL_DMA_Init+0x450>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	2b80      	cmp	r3, #128	; 0x80
 8001d34:	d102      	bne.n	8001d3c <HAL_DMA_Init+0x41c>
 8001d36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d3a:	e01a      	b.n	8001d72 <HAL_DMA_Init+0x452>
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	e018      	b.n	8001d72 <HAL_DMA_Init+0x452>
 8001d40:	fe10803f 	.word	0xfe10803f
 8001d44:	5c001000 	.word	0x5c001000
 8001d48:	ffff0000 	.word	0xffff0000
 8001d4c:	58025408 	.word	0x58025408
 8001d50:	5802541c 	.word	0x5802541c
 8001d54:	58025430 	.word	0x58025430
 8001d58:	58025444 	.word	0x58025444
 8001d5c:	58025458 	.word	0x58025458
 8001d60:	5802546c 	.word	0x5802546c
 8001d64:	58025480 	.word	0x58025480
 8001d68:	58025494 	.word	0x58025494
 8001d6c:	fffe000f 	.word	0xfffe000f
 8001d70:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	68d2      	ldr	r2, [r2, #12]
 8001d76:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001d80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001d88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001d90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001d98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001da0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	461a      	mov	r2, r3
 8001db6:	4b6e      	ldr	r3, [pc, #440]	; (8001f70 <HAL_DMA_Init+0x650>)
 8001db8:	4413      	add	r3, r2
 8001dba:	4a6e      	ldr	r2, [pc, #440]	; (8001f74 <HAL_DMA_Init+0x654>)
 8001dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc0:	091b      	lsrs	r3, r3, #4
 8001dc2:	009a      	lsls	r2, r3, #2
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f001 fe8b 	bl	8003ae4 <DMA_CalcBaseAndBitshift>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd6:	f003 031f 	and.w	r3, r3, #31
 8001dda:	2201      	movs	r2, #1
 8001ddc:	409a      	lsls	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	e008      	b.n	8001df6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2240      	movs	r2, #64	; 0x40
 8001de8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2203      	movs	r2, #3
 8001dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e0b7      	b.n	8001f66 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a5f      	ldr	r2, [pc, #380]	; (8001f78 <HAL_DMA_Init+0x658>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d072      	beq.n	8001ee6 <HAL_DMA_Init+0x5c6>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a5d      	ldr	r2, [pc, #372]	; (8001f7c <HAL_DMA_Init+0x65c>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d06d      	beq.n	8001ee6 <HAL_DMA_Init+0x5c6>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a5c      	ldr	r2, [pc, #368]	; (8001f80 <HAL_DMA_Init+0x660>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d068      	beq.n	8001ee6 <HAL_DMA_Init+0x5c6>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a5a      	ldr	r2, [pc, #360]	; (8001f84 <HAL_DMA_Init+0x664>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d063      	beq.n	8001ee6 <HAL_DMA_Init+0x5c6>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a59      	ldr	r2, [pc, #356]	; (8001f88 <HAL_DMA_Init+0x668>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d05e      	beq.n	8001ee6 <HAL_DMA_Init+0x5c6>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a57      	ldr	r2, [pc, #348]	; (8001f8c <HAL_DMA_Init+0x66c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d059      	beq.n	8001ee6 <HAL_DMA_Init+0x5c6>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a56      	ldr	r2, [pc, #344]	; (8001f90 <HAL_DMA_Init+0x670>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d054      	beq.n	8001ee6 <HAL_DMA_Init+0x5c6>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a54      	ldr	r2, [pc, #336]	; (8001f94 <HAL_DMA_Init+0x674>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d04f      	beq.n	8001ee6 <HAL_DMA_Init+0x5c6>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a53      	ldr	r2, [pc, #332]	; (8001f98 <HAL_DMA_Init+0x678>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d04a      	beq.n	8001ee6 <HAL_DMA_Init+0x5c6>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a51      	ldr	r2, [pc, #324]	; (8001f9c <HAL_DMA_Init+0x67c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d045      	beq.n	8001ee6 <HAL_DMA_Init+0x5c6>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a50      	ldr	r2, [pc, #320]	; (8001fa0 <HAL_DMA_Init+0x680>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d040      	beq.n	8001ee6 <HAL_DMA_Init+0x5c6>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a4e      	ldr	r2, [pc, #312]	; (8001fa4 <HAL_DMA_Init+0x684>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d03b      	beq.n	8001ee6 <HAL_DMA_Init+0x5c6>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a4d      	ldr	r2, [pc, #308]	; (8001fa8 <HAL_DMA_Init+0x688>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d036      	beq.n	8001ee6 <HAL_DMA_Init+0x5c6>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a4b      	ldr	r2, [pc, #300]	; (8001fac <HAL_DMA_Init+0x68c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d031      	beq.n	8001ee6 <HAL_DMA_Init+0x5c6>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a4a      	ldr	r2, [pc, #296]	; (8001fb0 <HAL_DMA_Init+0x690>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d02c      	beq.n	8001ee6 <HAL_DMA_Init+0x5c6>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a48      	ldr	r2, [pc, #288]	; (8001fb4 <HAL_DMA_Init+0x694>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d027      	beq.n	8001ee6 <HAL_DMA_Init+0x5c6>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a47      	ldr	r2, [pc, #284]	; (8001fb8 <HAL_DMA_Init+0x698>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d022      	beq.n	8001ee6 <HAL_DMA_Init+0x5c6>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a45      	ldr	r2, [pc, #276]	; (8001fbc <HAL_DMA_Init+0x69c>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d01d      	beq.n	8001ee6 <HAL_DMA_Init+0x5c6>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a44      	ldr	r2, [pc, #272]	; (8001fc0 <HAL_DMA_Init+0x6a0>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d018      	beq.n	8001ee6 <HAL_DMA_Init+0x5c6>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a42      	ldr	r2, [pc, #264]	; (8001fc4 <HAL_DMA_Init+0x6a4>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d013      	beq.n	8001ee6 <HAL_DMA_Init+0x5c6>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a41      	ldr	r2, [pc, #260]	; (8001fc8 <HAL_DMA_Init+0x6a8>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d00e      	beq.n	8001ee6 <HAL_DMA_Init+0x5c6>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a3f      	ldr	r2, [pc, #252]	; (8001fcc <HAL_DMA_Init+0x6ac>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d009      	beq.n	8001ee6 <HAL_DMA_Init+0x5c6>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a3e      	ldr	r2, [pc, #248]	; (8001fd0 <HAL_DMA_Init+0x6b0>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d004      	beq.n	8001ee6 <HAL_DMA_Init+0x5c6>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a3c      	ldr	r2, [pc, #240]	; (8001fd4 <HAL_DMA_Init+0x6b4>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d101      	bne.n	8001eea <HAL_DMA_Init+0x5ca>
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <HAL_DMA_Init+0x5cc>
 8001eea:	2300      	movs	r3, #0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d032      	beq.n	8001f56 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f001 ff25 	bl	8003d40 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	2b80      	cmp	r3, #128	; 0x80
 8001efc:	d102      	bne.n	8001f04 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001f18:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d010      	beq.n	8001f44 <HAL_DMA_Init+0x624>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	d80c      	bhi.n	8001f44 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f001 ffa2 	bl	8003e74 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	e008      	b.n	8001f56 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	a7fdabf8 	.word	0xa7fdabf8
 8001f74:	cccccccd 	.word	0xcccccccd
 8001f78:	40020010 	.word	0x40020010
 8001f7c:	40020028 	.word	0x40020028
 8001f80:	40020040 	.word	0x40020040
 8001f84:	40020058 	.word	0x40020058
 8001f88:	40020070 	.word	0x40020070
 8001f8c:	40020088 	.word	0x40020088
 8001f90:	400200a0 	.word	0x400200a0
 8001f94:	400200b8 	.word	0x400200b8
 8001f98:	40020410 	.word	0x40020410
 8001f9c:	40020428 	.word	0x40020428
 8001fa0:	40020440 	.word	0x40020440
 8001fa4:	40020458 	.word	0x40020458
 8001fa8:	40020470 	.word	0x40020470
 8001fac:	40020488 	.word	0x40020488
 8001fb0:	400204a0 	.word	0x400204a0
 8001fb4:	400204b8 	.word	0x400204b8
 8001fb8:	58025408 	.word	0x58025408
 8001fbc:	5802541c 	.word	0x5802541c
 8001fc0:	58025430 	.word	0x58025430
 8001fc4:	58025444 	.word	0x58025444
 8001fc8:	58025458 	.word	0x58025458
 8001fcc:	5802546c 	.word	0x5802546c
 8001fd0:	58025480 	.word	0x58025480
 8001fd4:	58025494 	.word	0x58025494

08001fd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
 8001fe4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e226      	b.n	8002442 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d101      	bne.n	8002002 <HAL_DMA_Start_IT+0x2a>
 8001ffe:	2302      	movs	r3, #2
 8002000:	e21f      	b.n	8002442 <HAL_DMA_Start_IT+0x46a>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b01      	cmp	r3, #1
 8002014:	f040 820a 	bne.w	800242c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2202      	movs	r2, #2
 800201c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a68      	ldr	r2, [pc, #416]	; (80021cc <HAL_DMA_Start_IT+0x1f4>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d04a      	beq.n	80020c6 <HAL_DMA_Start_IT+0xee>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a66      	ldr	r2, [pc, #408]	; (80021d0 <HAL_DMA_Start_IT+0x1f8>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d045      	beq.n	80020c6 <HAL_DMA_Start_IT+0xee>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a65      	ldr	r2, [pc, #404]	; (80021d4 <HAL_DMA_Start_IT+0x1fc>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d040      	beq.n	80020c6 <HAL_DMA_Start_IT+0xee>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a63      	ldr	r2, [pc, #396]	; (80021d8 <HAL_DMA_Start_IT+0x200>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d03b      	beq.n	80020c6 <HAL_DMA_Start_IT+0xee>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a62      	ldr	r2, [pc, #392]	; (80021dc <HAL_DMA_Start_IT+0x204>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d036      	beq.n	80020c6 <HAL_DMA_Start_IT+0xee>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a60      	ldr	r2, [pc, #384]	; (80021e0 <HAL_DMA_Start_IT+0x208>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d031      	beq.n	80020c6 <HAL_DMA_Start_IT+0xee>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a5f      	ldr	r2, [pc, #380]	; (80021e4 <HAL_DMA_Start_IT+0x20c>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d02c      	beq.n	80020c6 <HAL_DMA_Start_IT+0xee>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a5d      	ldr	r2, [pc, #372]	; (80021e8 <HAL_DMA_Start_IT+0x210>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d027      	beq.n	80020c6 <HAL_DMA_Start_IT+0xee>
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a5c      	ldr	r2, [pc, #368]	; (80021ec <HAL_DMA_Start_IT+0x214>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d022      	beq.n	80020c6 <HAL_DMA_Start_IT+0xee>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a5a      	ldr	r2, [pc, #360]	; (80021f0 <HAL_DMA_Start_IT+0x218>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d01d      	beq.n	80020c6 <HAL_DMA_Start_IT+0xee>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a59      	ldr	r2, [pc, #356]	; (80021f4 <HAL_DMA_Start_IT+0x21c>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d018      	beq.n	80020c6 <HAL_DMA_Start_IT+0xee>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a57      	ldr	r2, [pc, #348]	; (80021f8 <HAL_DMA_Start_IT+0x220>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d013      	beq.n	80020c6 <HAL_DMA_Start_IT+0xee>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a56      	ldr	r2, [pc, #344]	; (80021fc <HAL_DMA_Start_IT+0x224>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d00e      	beq.n	80020c6 <HAL_DMA_Start_IT+0xee>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a54      	ldr	r2, [pc, #336]	; (8002200 <HAL_DMA_Start_IT+0x228>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d009      	beq.n	80020c6 <HAL_DMA_Start_IT+0xee>
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a53      	ldr	r2, [pc, #332]	; (8002204 <HAL_DMA_Start_IT+0x22c>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d004      	beq.n	80020c6 <HAL_DMA_Start_IT+0xee>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a51      	ldr	r2, [pc, #324]	; (8002208 <HAL_DMA_Start_IT+0x230>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d108      	bne.n	80020d8 <HAL_DMA_Start_IT+0x100>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0201 	bic.w	r2, r2, #1
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	e007      	b.n	80020e8 <HAL_DMA_Start_IT+0x110>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0201 	bic.w	r2, r2, #1
 80020e6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	68b9      	ldr	r1, [r7, #8]
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f001 fb4c 	bl	800378c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a34      	ldr	r2, [pc, #208]	; (80021cc <HAL_DMA_Start_IT+0x1f4>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d04a      	beq.n	8002194 <HAL_DMA_Start_IT+0x1bc>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a33      	ldr	r2, [pc, #204]	; (80021d0 <HAL_DMA_Start_IT+0x1f8>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d045      	beq.n	8002194 <HAL_DMA_Start_IT+0x1bc>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a31      	ldr	r2, [pc, #196]	; (80021d4 <HAL_DMA_Start_IT+0x1fc>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d040      	beq.n	8002194 <HAL_DMA_Start_IT+0x1bc>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a30      	ldr	r2, [pc, #192]	; (80021d8 <HAL_DMA_Start_IT+0x200>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d03b      	beq.n	8002194 <HAL_DMA_Start_IT+0x1bc>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a2e      	ldr	r2, [pc, #184]	; (80021dc <HAL_DMA_Start_IT+0x204>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d036      	beq.n	8002194 <HAL_DMA_Start_IT+0x1bc>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a2d      	ldr	r2, [pc, #180]	; (80021e0 <HAL_DMA_Start_IT+0x208>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d031      	beq.n	8002194 <HAL_DMA_Start_IT+0x1bc>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a2b      	ldr	r2, [pc, #172]	; (80021e4 <HAL_DMA_Start_IT+0x20c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d02c      	beq.n	8002194 <HAL_DMA_Start_IT+0x1bc>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a2a      	ldr	r2, [pc, #168]	; (80021e8 <HAL_DMA_Start_IT+0x210>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d027      	beq.n	8002194 <HAL_DMA_Start_IT+0x1bc>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a28      	ldr	r2, [pc, #160]	; (80021ec <HAL_DMA_Start_IT+0x214>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d022      	beq.n	8002194 <HAL_DMA_Start_IT+0x1bc>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a27      	ldr	r2, [pc, #156]	; (80021f0 <HAL_DMA_Start_IT+0x218>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d01d      	beq.n	8002194 <HAL_DMA_Start_IT+0x1bc>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a25      	ldr	r2, [pc, #148]	; (80021f4 <HAL_DMA_Start_IT+0x21c>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d018      	beq.n	8002194 <HAL_DMA_Start_IT+0x1bc>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a24      	ldr	r2, [pc, #144]	; (80021f8 <HAL_DMA_Start_IT+0x220>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d013      	beq.n	8002194 <HAL_DMA_Start_IT+0x1bc>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a22      	ldr	r2, [pc, #136]	; (80021fc <HAL_DMA_Start_IT+0x224>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d00e      	beq.n	8002194 <HAL_DMA_Start_IT+0x1bc>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a21      	ldr	r2, [pc, #132]	; (8002200 <HAL_DMA_Start_IT+0x228>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d009      	beq.n	8002194 <HAL_DMA_Start_IT+0x1bc>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a1f      	ldr	r2, [pc, #124]	; (8002204 <HAL_DMA_Start_IT+0x22c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d004      	beq.n	8002194 <HAL_DMA_Start_IT+0x1bc>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a1e      	ldr	r2, [pc, #120]	; (8002208 <HAL_DMA_Start_IT+0x230>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d101      	bne.n	8002198 <HAL_DMA_Start_IT+0x1c0>
 8002194:	2301      	movs	r3, #1
 8002196:	e000      	b.n	800219a <HAL_DMA_Start_IT+0x1c2>
 8002198:	2300      	movs	r3, #0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d036      	beq.n	800220c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f023 021e 	bic.w	r2, r3, #30
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f042 0216 	orr.w	r2, r2, #22
 80021b0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d03e      	beq.n	8002238 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f042 0208 	orr.w	r2, r2, #8
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	e035      	b.n	8002238 <HAL_DMA_Start_IT+0x260>
 80021cc:	40020010 	.word	0x40020010
 80021d0:	40020028 	.word	0x40020028
 80021d4:	40020040 	.word	0x40020040
 80021d8:	40020058 	.word	0x40020058
 80021dc:	40020070 	.word	0x40020070
 80021e0:	40020088 	.word	0x40020088
 80021e4:	400200a0 	.word	0x400200a0
 80021e8:	400200b8 	.word	0x400200b8
 80021ec:	40020410 	.word	0x40020410
 80021f0:	40020428 	.word	0x40020428
 80021f4:	40020440 	.word	0x40020440
 80021f8:	40020458 	.word	0x40020458
 80021fc:	40020470 	.word	0x40020470
 8002200:	40020488 	.word	0x40020488
 8002204:	400204a0 	.word	0x400204a0
 8002208:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f023 020e 	bic.w	r2, r3, #14
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 020a 	orr.w	r2, r2, #10
 800221e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002224:	2b00      	cmp	r3, #0
 8002226:	d007      	beq.n	8002238 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 0204 	orr.w	r2, r2, #4
 8002236:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a83      	ldr	r2, [pc, #524]	; (800244c <HAL_DMA_Start_IT+0x474>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d072      	beq.n	8002328 <HAL_DMA_Start_IT+0x350>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a82      	ldr	r2, [pc, #520]	; (8002450 <HAL_DMA_Start_IT+0x478>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d06d      	beq.n	8002328 <HAL_DMA_Start_IT+0x350>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a80      	ldr	r2, [pc, #512]	; (8002454 <HAL_DMA_Start_IT+0x47c>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d068      	beq.n	8002328 <HAL_DMA_Start_IT+0x350>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a7f      	ldr	r2, [pc, #508]	; (8002458 <HAL_DMA_Start_IT+0x480>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d063      	beq.n	8002328 <HAL_DMA_Start_IT+0x350>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a7d      	ldr	r2, [pc, #500]	; (800245c <HAL_DMA_Start_IT+0x484>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d05e      	beq.n	8002328 <HAL_DMA_Start_IT+0x350>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a7c      	ldr	r2, [pc, #496]	; (8002460 <HAL_DMA_Start_IT+0x488>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d059      	beq.n	8002328 <HAL_DMA_Start_IT+0x350>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a7a      	ldr	r2, [pc, #488]	; (8002464 <HAL_DMA_Start_IT+0x48c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d054      	beq.n	8002328 <HAL_DMA_Start_IT+0x350>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a79      	ldr	r2, [pc, #484]	; (8002468 <HAL_DMA_Start_IT+0x490>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d04f      	beq.n	8002328 <HAL_DMA_Start_IT+0x350>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a77      	ldr	r2, [pc, #476]	; (800246c <HAL_DMA_Start_IT+0x494>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d04a      	beq.n	8002328 <HAL_DMA_Start_IT+0x350>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a76      	ldr	r2, [pc, #472]	; (8002470 <HAL_DMA_Start_IT+0x498>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d045      	beq.n	8002328 <HAL_DMA_Start_IT+0x350>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a74      	ldr	r2, [pc, #464]	; (8002474 <HAL_DMA_Start_IT+0x49c>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d040      	beq.n	8002328 <HAL_DMA_Start_IT+0x350>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a73      	ldr	r2, [pc, #460]	; (8002478 <HAL_DMA_Start_IT+0x4a0>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d03b      	beq.n	8002328 <HAL_DMA_Start_IT+0x350>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a71      	ldr	r2, [pc, #452]	; (800247c <HAL_DMA_Start_IT+0x4a4>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d036      	beq.n	8002328 <HAL_DMA_Start_IT+0x350>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a70      	ldr	r2, [pc, #448]	; (8002480 <HAL_DMA_Start_IT+0x4a8>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d031      	beq.n	8002328 <HAL_DMA_Start_IT+0x350>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a6e      	ldr	r2, [pc, #440]	; (8002484 <HAL_DMA_Start_IT+0x4ac>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d02c      	beq.n	8002328 <HAL_DMA_Start_IT+0x350>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a6d      	ldr	r2, [pc, #436]	; (8002488 <HAL_DMA_Start_IT+0x4b0>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d027      	beq.n	8002328 <HAL_DMA_Start_IT+0x350>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a6b      	ldr	r2, [pc, #428]	; (800248c <HAL_DMA_Start_IT+0x4b4>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d022      	beq.n	8002328 <HAL_DMA_Start_IT+0x350>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a6a      	ldr	r2, [pc, #424]	; (8002490 <HAL_DMA_Start_IT+0x4b8>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d01d      	beq.n	8002328 <HAL_DMA_Start_IT+0x350>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a68      	ldr	r2, [pc, #416]	; (8002494 <HAL_DMA_Start_IT+0x4bc>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d018      	beq.n	8002328 <HAL_DMA_Start_IT+0x350>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a67      	ldr	r2, [pc, #412]	; (8002498 <HAL_DMA_Start_IT+0x4c0>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d013      	beq.n	8002328 <HAL_DMA_Start_IT+0x350>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a65      	ldr	r2, [pc, #404]	; (800249c <HAL_DMA_Start_IT+0x4c4>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d00e      	beq.n	8002328 <HAL_DMA_Start_IT+0x350>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a64      	ldr	r2, [pc, #400]	; (80024a0 <HAL_DMA_Start_IT+0x4c8>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d009      	beq.n	8002328 <HAL_DMA_Start_IT+0x350>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a62      	ldr	r2, [pc, #392]	; (80024a4 <HAL_DMA_Start_IT+0x4cc>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d004      	beq.n	8002328 <HAL_DMA_Start_IT+0x350>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a61      	ldr	r2, [pc, #388]	; (80024a8 <HAL_DMA_Start_IT+0x4d0>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d101      	bne.n	800232c <HAL_DMA_Start_IT+0x354>
 8002328:	2301      	movs	r3, #1
 800232a:	e000      	b.n	800232e <HAL_DMA_Start_IT+0x356>
 800232c:	2300      	movs	r3, #0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d01a      	beq.n	8002368 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d007      	beq.n	8002350 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800234a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800234e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002354:	2b00      	cmp	r3, #0
 8002356:	d007      	beq.n	8002368 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002362:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002366:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a37      	ldr	r2, [pc, #220]	; (800244c <HAL_DMA_Start_IT+0x474>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d04a      	beq.n	8002408 <HAL_DMA_Start_IT+0x430>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a36      	ldr	r2, [pc, #216]	; (8002450 <HAL_DMA_Start_IT+0x478>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d045      	beq.n	8002408 <HAL_DMA_Start_IT+0x430>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a34      	ldr	r2, [pc, #208]	; (8002454 <HAL_DMA_Start_IT+0x47c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d040      	beq.n	8002408 <HAL_DMA_Start_IT+0x430>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a33      	ldr	r2, [pc, #204]	; (8002458 <HAL_DMA_Start_IT+0x480>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d03b      	beq.n	8002408 <HAL_DMA_Start_IT+0x430>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a31      	ldr	r2, [pc, #196]	; (800245c <HAL_DMA_Start_IT+0x484>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d036      	beq.n	8002408 <HAL_DMA_Start_IT+0x430>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a30      	ldr	r2, [pc, #192]	; (8002460 <HAL_DMA_Start_IT+0x488>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d031      	beq.n	8002408 <HAL_DMA_Start_IT+0x430>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a2e      	ldr	r2, [pc, #184]	; (8002464 <HAL_DMA_Start_IT+0x48c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d02c      	beq.n	8002408 <HAL_DMA_Start_IT+0x430>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a2d      	ldr	r2, [pc, #180]	; (8002468 <HAL_DMA_Start_IT+0x490>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d027      	beq.n	8002408 <HAL_DMA_Start_IT+0x430>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a2b      	ldr	r2, [pc, #172]	; (800246c <HAL_DMA_Start_IT+0x494>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d022      	beq.n	8002408 <HAL_DMA_Start_IT+0x430>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a2a      	ldr	r2, [pc, #168]	; (8002470 <HAL_DMA_Start_IT+0x498>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d01d      	beq.n	8002408 <HAL_DMA_Start_IT+0x430>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a28      	ldr	r2, [pc, #160]	; (8002474 <HAL_DMA_Start_IT+0x49c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d018      	beq.n	8002408 <HAL_DMA_Start_IT+0x430>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a27      	ldr	r2, [pc, #156]	; (8002478 <HAL_DMA_Start_IT+0x4a0>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d013      	beq.n	8002408 <HAL_DMA_Start_IT+0x430>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a25      	ldr	r2, [pc, #148]	; (800247c <HAL_DMA_Start_IT+0x4a4>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d00e      	beq.n	8002408 <HAL_DMA_Start_IT+0x430>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a24      	ldr	r2, [pc, #144]	; (8002480 <HAL_DMA_Start_IT+0x4a8>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d009      	beq.n	8002408 <HAL_DMA_Start_IT+0x430>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a22      	ldr	r2, [pc, #136]	; (8002484 <HAL_DMA_Start_IT+0x4ac>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d004      	beq.n	8002408 <HAL_DMA_Start_IT+0x430>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a21      	ldr	r2, [pc, #132]	; (8002488 <HAL_DMA_Start_IT+0x4b0>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d108      	bne.n	800241a <HAL_DMA_Start_IT+0x442>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0201 	orr.w	r2, r2, #1
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	e012      	b.n	8002440 <HAL_DMA_Start_IT+0x468>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f042 0201 	orr.w	r2, r2, #1
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	e009      	b.n	8002440 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002432:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002440:	7dfb      	ldrb	r3, [r7, #23]
}
 8002442:	4618      	mov	r0, r3
 8002444:	3718      	adds	r7, #24
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40020010 	.word	0x40020010
 8002450:	40020028 	.word	0x40020028
 8002454:	40020040 	.word	0x40020040
 8002458:	40020058 	.word	0x40020058
 800245c:	40020070 	.word	0x40020070
 8002460:	40020088 	.word	0x40020088
 8002464:	400200a0 	.word	0x400200a0
 8002468:	400200b8 	.word	0x400200b8
 800246c:	40020410 	.word	0x40020410
 8002470:	40020428 	.word	0x40020428
 8002474:	40020440 	.word	0x40020440
 8002478:	40020458 	.word	0x40020458
 800247c:	40020470 	.word	0x40020470
 8002480:	40020488 	.word	0x40020488
 8002484:	400204a0 	.word	0x400204a0
 8002488:	400204b8 	.word	0x400204b8
 800248c:	58025408 	.word	0x58025408
 8002490:	5802541c 	.word	0x5802541c
 8002494:	58025430 	.word	0x58025430
 8002498:	58025444 	.word	0x58025444
 800249c:	58025458 	.word	0x58025458
 80024a0:	5802546c 	.word	0x5802546c
 80024a4:	58025480 	.word	0x58025480
 80024a8:	58025494 	.word	0x58025494

080024ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e237      	b.n	800292e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d004      	beq.n	80024d4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2280      	movs	r2, #128	; 0x80
 80024ce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e22c      	b.n	800292e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a5c      	ldr	r2, [pc, #368]	; (800264c <HAL_DMA_Abort_IT+0x1a0>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d04a      	beq.n	8002574 <HAL_DMA_Abort_IT+0xc8>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a5b      	ldr	r2, [pc, #364]	; (8002650 <HAL_DMA_Abort_IT+0x1a4>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d045      	beq.n	8002574 <HAL_DMA_Abort_IT+0xc8>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a59      	ldr	r2, [pc, #356]	; (8002654 <HAL_DMA_Abort_IT+0x1a8>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d040      	beq.n	8002574 <HAL_DMA_Abort_IT+0xc8>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a58      	ldr	r2, [pc, #352]	; (8002658 <HAL_DMA_Abort_IT+0x1ac>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d03b      	beq.n	8002574 <HAL_DMA_Abort_IT+0xc8>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a56      	ldr	r2, [pc, #344]	; (800265c <HAL_DMA_Abort_IT+0x1b0>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d036      	beq.n	8002574 <HAL_DMA_Abort_IT+0xc8>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a55      	ldr	r2, [pc, #340]	; (8002660 <HAL_DMA_Abort_IT+0x1b4>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d031      	beq.n	8002574 <HAL_DMA_Abort_IT+0xc8>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a53      	ldr	r2, [pc, #332]	; (8002664 <HAL_DMA_Abort_IT+0x1b8>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d02c      	beq.n	8002574 <HAL_DMA_Abort_IT+0xc8>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a52      	ldr	r2, [pc, #328]	; (8002668 <HAL_DMA_Abort_IT+0x1bc>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d027      	beq.n	8002574 <HAL_DMA_Abort_IT+0xc8>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a50      	ldr	r2, [pc, #320]	; (800266c <HAL_DMA_Abort_IT+0x1c0>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d022      	beq.n	8002574 <HAL_DMA_Abort_IT+0xc8>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a4f      	ldr	r2, [pc, #316]	; (8002670 <HAL_DMA_Abort_IT+0x1c4>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d01d      	beq.n	8002574 <HAL_DMA_Abort_IT+0xc8>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a4d      	ldr	r2, [pc, #308]	; (8002674 <HAL_DMA_Abort_IT+0x1c8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d018      	beq.n	8002574 <HAL_DMA_Abort_IT+0xc8>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a4c      	ldr	r2, [pc, #304]	; (8002678 <HAL_DMA_Abort_IT+0x1cc>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d013      	beq.n	8002574 <HAL_DMA_Abort_IT+0xc8>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a4a      	ldr	r2, [pc, #296]	; (800267c <HAL_DMA_Abort_IT+0x1d0>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d00e      	beq.n	8002574 <HAL_DMA_Abort_IT+0xc8>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a49      	ldr	r2, [pc, #292]	; (8002680 <HAL_DMA_Abort_IT+0x1d4>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d009      	beq.n	8002574 <HAL_DMA_Abort_IT+0xc8>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a47      	ldr	r2, [pc, #284]	; (8002684 <HAL_DMA_Abort_IT+0x1d8>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d004      	beq.n	8002574 <HAL_DMA_Abort_IT+0xc8>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a46      	ldr	r2, [pc, #280]	; (8002688 <HAL_DMA_Abort_IT+0x1dc>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d101      	bne.n	8002578 <HAL_DMA_Abort_IT+0xcc>
 8002574:	2301      	movs	r3, #1
 8002576:	e000      	b.n	800257a <HAL_DMA_Abort_IT+0xce>
 8002578:	2300      	movs	r3, #0
 800257a:	2b00      	cmp	r3, #0
 800257c:	f000 8086 	beq.w	800268c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2204      	movs	r2, #4
 8002584:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a2f      	ldr	r2, [pc, #188]	; (800264c <HAL_DMA_Abort_IT+0x1a0>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d04a      	beq.n	8002628 <HAL_DMA_Abort_IT+0x17c>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a2e      	ldr	r2, [pc, #184]	; (8002650 <HAL_DMA_Abort_IT+0x1a4>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d045      	beq.n	8002628 <HAL_DMA_Abort_IT+0x17c>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a2c      	ldr	r2, [pc, #176]	; (8002654 <HAL_DMA_Abort_IT+0x1a8>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d040      	beq.n	8002628 <HAL_DMA_Abort_IT+0x17c>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a2b      	ldr	r2, [pc, #172]	; (8002658 <HAL_DMA_Abort_IT+0x1ac>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d03b      	beq.n	8002628 <HAL_DMA_Abort_IT+0x17c>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a29      	ldr	r2, [pc, #164]	; (800265c <HAL_DMA_Abort_IT+0x1b0>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d036      	beq.n	8002628 <HAL_DMA_Abort_IT+0x17c>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a28      	ldr	r2, [pc, #160]	; (8002660 <HAL_DMA_Abort_IT+0x1b4>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d031      	beq.n	8002628 <HAL_DMA_Abort_IT+0x17c>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a26      	ldr	r2, [pc, #152]	; (8002664 <HAL_DMA_Abort_IT+0x1b8>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d02c      	beq.n	8002628 <HAL_DMA_Abort_IT+0x17c>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a25      	ldr	r2, [pc, #148]	; (8002668 <HAL_DMA_Abort_IT+0x1bc>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d027      	beq.n	8002628 <HAL_DMA_Abort_IT+0x17c>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a23      	ldr	r2, [pc, #140]	; (800266c <HAL_DMA_Abort_IT+0x1c0>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d022      	beq.n	8002628 <HAL_DMA_Abort_IT+0x17c>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a22      	ldr	r2, [pc, #136]	; (8002670 <HAL_DMA_Abort_IT+0x1c4>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d01d      	beq.n	8002628 <HAL_DMA_Abort_IT+0x17c>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a20      	ldr	r2, [pc, #128]	; (8002674 <HAL_DMA_Abort_IT+0x1c8>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d018      	beq.n	8002628 <HAL_DMA_Abort_IT+0x17c>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a1f      	ldr	r2, [pc, #124]	; (8002678 <HAL_DMA_Abort_IT+0x1cc>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d013      	beq.n	8002628 <HAL_DMA_Abort_IT+0x17c>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a1d      	ldr	r2, [pc, #116]	; (800267c <HAL_DMA_Abort_IT+0x1d0>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d00e      	beq.n	8002628 <HAL_DMA_Abort_IT+0x17c>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a1c      	ldr	r2, [pc, #112]	; (8002680 <HAL_DMA_Abort_IT+0x1d4>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d009      	beq.n	8002628 <HAL_DMA_Abort_IT+0x17c>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a1a      	ldr	r2, [pc, #104]	; (8002684 <HAL_DMA_Abort_IT+0x1d8>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d004      	beq.n	8002628 <HAL_DMA_Abort_IT+0x17c>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a19      	ldr	r2, [pc, #100]	; (8002688 <HAL_DMA_Abort_IT+0x1dc>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d108      	bne.n	800263a <HAL_DMA_Abort_IT+0x18e>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 0201 	bic.w	r2, r2, #1
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	e178      	b.n	800292c <HAL_DMA_Abort_IT+0x480>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0201 	bic.w	r2, r2, #1
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	e16f      	b.n	800292c <HAL_DMA_Abort_IT+0x480>
 800264c:	40020010 	.word	0x40020010
 8002650:	40020028 	.word	0x40020028
 8002654:	40020040 	.word	0x40020040
 8002658:	40020058 	.word	0x40020058
 800265c:	40020070 	.word	0x40020070
 8002660:	40020088 	.word	0x40020088
 8002664:	400200a0 	.word	0x400200a0
 8002668:	400200b8 	.word	0x400200b8
 800266c:	40020410 	.word	0x40020410
 8002670:	40020428 	.word	0x40020428
 8002674:	40020440 	.word	0x40020440
 8002678:	40020458 	.word	0x40020458
 800267c:	40020470 	.word	0x40020470
 8002680:	40020488 	.word	0x40020488
 8002684:	400204a0 	.word	0x400204a0
 8002688:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f022 020e 	bic.w	r2, r2, #14
 800269a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a6c      	ldr	r2, [pc, #432]	; (8002854 <HAL_DMA_Abort_IT+0x3a8>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d04a      	beq.n	800273c <HAL_DMA_Abort_IT+0x290>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a6b      	ldr	r2, [pc, #428]	; (8002858 <HAL_DMA_Abort_IT+0x3ac>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d045      	beq.n	800273c <HAL_DMA_Abort_IT+0x290>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a69      	ldr	r2, [pc, #420]	; (800285c <HAL_DMA_Abort_IT+0x3b0>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d040      	beq.n	800273c <HAL_DMA_Abort_IT+0x290>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a68      	ldr	r2, [pc, #416]	; (8002860 <HAL_DMA_Abort_IT+0x3b4>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d03b      	beq.n	800273c <HAL_DMA_Abort_IT+0x290>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a66      	ldr	r2, [pc, #408]	; (8002864 <HAL_DMA_Abort_IT+0x3b8>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d036      	beq.n	800273c <HAL_DMA_Abort_IT+0x290>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a65      	ldr	r2, [pc, #404]	; (8002868 <HAL_DMA_Abort_IT+0x3bc>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d031      	beq.n	800273c <HAL_DMA_Abort_IT+0x290>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a63      	ldr	r2, [pc, #396]	; (800286c <HAL_DMA_Abort_IT+0x3c0>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d02c      	beq.n	800273c <HAL_DMA_Abort_IT+0x290>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a62      	ldr	r2, [pc, #392]	; (8002870 <HAL_DMA_Abort_IT+0x3c4>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d027      	beq.n	800273c <HAL_DMA_Abort_IT+0x290>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a60      	ldr	r2, [pc, #384]	; (8002874 <HAL_DMA_Abort_IT+0x3c8>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d022      	beq.n	800273c <HAL_DMA_Abort_IT+0x290>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a5f      	ldr	r2, [pc, #380]	; (8002878 <HAL_DMA_Abort_IT+0x3cc>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d01d      	beq.n	800273c <HAL_DMA_Abort_IT+0x290>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a5d      	ldr	r2, [pc, #372]	; (800287c <HAL_DMA_Abort_IT+0x3d0>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d018      	beq.n	800273c <HAL_DMA_Abort_IT+0x290>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a5c      	ldr	r2, [pc, #368]	; (8002880 <HAL_DMA_Abort_IT+0x3d4>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d013      	beq.n	800273c <HAL_DMA_Abort_IT+0x290>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a5a      	ldr	r2, [pc, #360]	; (8002884 <HAL_DMA_Abort_IT+0x3d8>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d00e      	beq.n	800273c <HAL_DMA_Abort_IT+0x290>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a59      	ldr	r2, [pc, #356]	; (8002888 <HAL_DMA_Abort_IT+0x3dc>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d009      	beq.n	800273c <HAL_DMA_Abort_IT+0x290>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a57      	ldr	r2, [pc, #348]	; (800288c <HAL_DMA_Abort_IT+0x3e0>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d004      	beq.n	800273c <HAL_DMA_Abort_IT+0x290>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a56      	ldr	r2, [pc, #344]	; (8002890 <HAL_DMA_Abort_IT+0x3e4>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d108      	bne.n	800274e <HAL_DMA_Abort_IT+0x2a2>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 0201 	bic.w	r2, r2, #1
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	e007      	b.n	800275e <HAL_DMA_Abort_IT+0x2b2>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 0201 	bic.w	r2, r2, #1
 800275c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a3c      	ldr	r2, [pc, #240]	; (8002854 <HAL_DMA_Abort_IT+0x3a8>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d072      	beq.n	800284e <HAL_DMA_Abort_IT+0x3a2>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a3a      	ldr	r2, [pc, #232]	; (8002858 <HAL_DMA_Abort_IT+0x3ac>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d06d      	beq.n	800284e <HAL_DMA_Abort_IT+0x3a2>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a39      	ldr	r2, [pc, #228]	; (800285c <HAL_DMA_Abort_IT+0x3b0>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d068      	beq.n	800284e <HAL_DMA_Abort_IT+0x3a2>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a37      	ldr	r2, [pc, #220]	; (8002860 <HAL_DMA_Abort_IT+0x3b4>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d063      	beq.n	800284e <HAL_DMA_Abort_IT+0x3a2>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a36      	ldr	r2, [pc, #216]	; (8002864 <HAL_DMA_Abort_IT+0x3b8>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d05e      	beq.n	800284e <HAL_DMA_Abort_IT+0x3a2>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a34      	ldr	r2, [pc, #208]	; (8002868 <HAL_DMA_Abort_IT+0x3bc>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d059      	beq.n	800284e <HAL_DMA_Abort_IT+0x3a2>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a33      	ldr	r2, [pc, #204]	; (800286c <HAL_DMA_Abort_IT+0x3c0>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d054      	beq.n	800284e <HAL_DMA_Abort_IT+0x3a2>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a31      	ldr	r2, [pc, #196]	; (8002870 <HAL_DMA_Abort_IT+0x3c4>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d04f      	beq.n	800284e <HAL_DMA_Abort_IT+0x3a2>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a30      	ldr	r2, [pc, #192]	; (8002874 <HAL_DMA_Abort_IT+0x3c8>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d04a      	beq.n	800284e <HAL_DMA_Abort_IT+0x3a2>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a2e      	ldr	r2, [pc, #184]	; (8002878 <HAL_DMA_Abort_IT+0x3cc>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d045      	beq.n	800284e <HAL_DMA_Abort_IT+0x3a2>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a2d      	ldr	r2, [pc, #180]	; (800287c <HAL_DMA_Abort_IT+0x3d0>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d040      	beq.n	800284e <HAL_DMA_Abort_IT+0x3a2>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a2b      	ldr	r2, [pc, #172]	; (8002880 <HAL_DMA_Abort_IT+0x3d4>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d03b      	beq.n	800284e <HAL_DMA_Abort_IT+0x3a2>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a2a      	ldr	r2, [pc, #168]	; (8002884 <HAL_DMA_Abort_IT+0x3d8>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d036      	beq.n	800284e <HAL_DMA_Abort_IT+0x3a2>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a28      	ldr	r2, [pc, #160]	; (8002888 <HAL_DMA_Abort_IT+0x3dc>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d031      	beq.n	800284e <HAL_DMA_Abort_IT+0x3a2>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a27      	ldr	r2, [pc, #156]	; (800288c <HAL_DMA_Abort_IT+0x3e0>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d02c      	beq.n	800284e <HAL_DMA_Abort_IT+0x3a2>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a25      	ldr	r2, [pc, #148]	; (8002890 <HAL_DMA_Abort_IT+0x3e4>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d027      	beq.n	800284e <HAL_DMA_Abort_IT+0x3a2>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a24      	ldr	r2, [pc, #144]	; (8002894 <HAL_DMA_Abort_IT+0x3e8>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d022      	beq.n	800284e <HAL_DMA_Abort_IT+0x3a2>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a22      	ldr	r2, [pc, #136]	; (8002898 <HAL_DMA_Abort_IT+0x3ec>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d01d      	beq.n	800284e <HAL_DMA_Abort_IT+0x3a2>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a21      	ldr	r2, [pc, #132]	; (800289c <HAL_DMA_Abort_IT+0x3f0>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d018      	beq.n	800284e <HAL_DMA_Abort_IT+0x3a2>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a1f      	ldr	r2, [pc, #124]	; (80028a0 <HAL_DMA_Abort_IT+0x3f4>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d013      	beq.n	800284e <HAL_DMA_Abort_IT+0x3a2>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a1e      	ldr	r2, [pc, #120]	; (80028a4 <HAL_DMA_Abort_IT+0x3f8>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d00e      	beq.n	800284e <HAL_DMA_Abort_IT+0x3a2>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a1c      	ldr	r2, [pc, #112]	; (80028a8 <HAL_DMA_Abort_IT+0x3fc>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d009      	beq.n	800284e <HAL_DMA_Abort_IT+0x3a2>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a1b      	ldr	r2, [pc, #108]	; (80028ac <HAL_DMA_Abort_IT+0x400>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d004      	beq.n	800284e <HAL_DMA_Abort_IT+0x3a2>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a19      	ldr	r2, [pc, #100]	; (80028b0 <HAL_DMA_Abort_IT+0x404>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d132      	bne.n	80028b4 <HAL_DMA_Abort_IT+0x408>
 800284e:	2301      	movs	r3, #1
 8002850:	e031      	b.n	80028b6 <HAL_DMA_Abort_IT+0x40a>
 8002852:	bf00      	nop
 8002854:	40020010 	.word	0x40020010
 8002858:	40020028 	.word	0x40020028
 800285c:	40020040 	.word	0x40020040
 8002860:	40020058 	.word	0x40020058
 8002864:	40020070 	.word	0x40020070
 8002868:	40020088 	.word	0x40020088
 800286c:	400200a0 	.word	0x400200a0
 8002870:	400200b8 	.word	0x400200b8
 8002874:	40020410 	.word	0x40020410
 8002878:	40020428 	.word	0x40020428
 800287c:	40020440 	.word	0x40020440
 8002880:	40020458 	.word	0x40020458
 8002884:	40020470 	.word	0x40020470
 8002888:	40020488 	.word	0x40020488
 800288c:	400204a0 	.word	0x400204a0
 8002890:	400204b8 	.word	0x400204b8
 8002894:	58025408 	.word	0x58025408
 8002898:	5802541c 	.word	0x5802541c
 800289c:	58025430 	.word	0x58025430
 80028a0:	58025444 	.word	0x58025444
 80028a4:	58025458 	.word	0x58025458
 80028a8:	5802546c 	.word	0x5802546c
 80028ac:	58025480 	.word	0x58025480
 80028b0:	58025494 	.word	0x58025494
 80028b4:	2300      	movs	r3, #0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d028      	beq.n	800290c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028c8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ce:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d4:	f003 031f 	and.w	r3, r3, #31
 80028d8:	2201      	movs	r2, #1
 80028da:	409a      	lsls	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80028e8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00c      	beq.n	800290c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002900:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800290a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop

08002938 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08a      	sub	sp, #40	; 0x28
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002940:	2300      	movs	r3, #0
 8002942:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002944:	4b67      	ldr	r3, [pc, #412]	; (8002ae4 <HAL_DMA_IRQHandler+0x1ac>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a67      	ldr	r2, [pc, #412]	; (8002ae8 <HAL_DMA_IRQHandler+0x1b0>)
 800294a:	fba2 2303 	umull	r2, r3, r2, r3
 800294e:	0a9b      	lsrs	r3, r3, #10
 8002950:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002956:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800295e:	6a3b      	ldr	r3, [r7, #32]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a5f      	ldr	r2, [pc, #380]	; (8002aec <HAL_DMA_IRQHandler+0x1b4>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d04a      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xd2>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a5d      	ldr	r2, [pc, #372]	; (8002af0 <HAL_DMA_IRQHandler+0x1b8>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d045      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xd2>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a5c      	ldr	r2, [pc, #368]	; (8002af4 <HAL_DMA_IRQHandler+0x1bc>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d040      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xd2>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a5a      	ldr	r2, [pc, #360]	; (8002af8 <HAL_DMA_IRQHandler+0x1c0>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d03b      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xd2>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a59      	ldr	r2, [pc, #356]	; (8002afc <HAL_DMA_IRQHandler+0x1c4>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d036      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xd2>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a57      	ldr	r2, [pc, #348]	; (8002b00 <HAL_DMA_IRQHandler+0x1c8>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d031      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xd2>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a56      	ldr	r2, [pc, #344]	; (8002b04 <HAL_DMA_IRQHandler+0x1cc>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d02c      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xd2>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a54      	ldr	r2, [pc, #336]	; (8002b08 <HAL_DMA_IRQHandler+0x1d0>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d027      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xd2>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a53      	ldr	r2, [pc, #332]	; (8002b0c <HAL_DMA_IRQHandler+0x1d4>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d022      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xd2>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a51      	ldr	r2, [pc, #324]	; (8002b10 <HAL_DMA_IRQHandler+0x1d8>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d01d      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xd2>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a50      	ldr	r2, [pc, #320]	; (8002b14 <HAL_DMA_IRQHandler+0x1dc>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d018      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xd2>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a4e      	ldr	r2, [pc, #312]	; (8002b18 <HAL_DMA_IRQHandler+0x1e0>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d013      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xd2>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a4d      	ldr	r2, [pc, #308]	; (8002b1c <HAL_DMA_IRQHandler+0x1e4>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d00e      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xd2>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a4b      	ldr	r2, [pc, #300]	; (8002b20 <HAL_DMA_IRQHandler+0x1e8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d009      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xd2>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a4a      	ldr	r2, [pc, #296]	; (8002b24 <HAL_DMA_IRQHandler+0x1ec>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d004      	beq.n	8002a0a <HAL_DMA_IRQHandler+0xd2>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a48      	ldr	r2, [pc, #288]	; (8002b28 <HAL_DMA_IRQHandler+0x1f0>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d101      	bne.n	8002a0e <HAL_DMA_IRQHandler+0xd6>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <HAL_DMA_IRQHandler+0xd8>
 8002a0e:	2300      	movs	r3, #0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 842b 	beq.w	800326c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1a:	f003 031f 	and.w	r3, r3, #31
 8002a1e:	2208      	movs	r2, #8
 8002a20:	409a      	lsls	r2, r3
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	4013      	ands	r3, r2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 80a2 	beq.w	8002b70 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a2e      	ldr	r2, [pc, #184]	; (8002aec <HAL_DMA_IRQHandler+0x1b4>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d04a      	beq.n	8002acc <HAL_DMA_IRQHandler+0x194>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a2d      	ldr	r2, [pc, #180]	; (8002af0 <HAL_DMA_IRQHandler+0x1b8>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d045      	beq.n	8002acc <HAL_DMA_IRQHandler+0x194>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a2b      	ldr	r2, [pc, #172]	; (8002af4 <HAL_DMA_IRQHandler+0x1bc>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d040      	beq.n	8002acc <HAL_DMA_IRQHandler+0x194>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a2a      	ldr	r2, [pc, #168]	; (8002af8 <HAL_DMA_IRQHandler+0x1c0>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d03b      	beq.n	8002acc <HAL_DMA_IRQHandler+0x194>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a28      	ldr	r2, [pc, #160]	; (8002afc <HAL_DMA_IRQHandler+0x1c4>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d036      	beq.n	8002acc <HAL_DMA_IRQHandler+0x194>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a27      	ldr	r2, [pc, #156]	; (8002b00 <HAL_DMA_IRQHandler+0x1c8>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d031      	beq.n	8002acc <HAL_DMA_IRQHandler+0x194>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a25      	ldr	r2, [pc, #148]	; (8002b04 <HAL_DMA_IRQHandler+0x1cc>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d02c      	beq.n	8002acc <HAL_DMA_IRQHandler+0x194>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a24      	ldr	r2, [pc, #144]	; (8002b08 <HAL_DMA_IRQHandler+0x1d0>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d027      	beq.n	8002acc <HAL_DMA_IRQHandler+0x194>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a22      	ldr	r2, [pc, #136]	; (8002b0c <HAL_DMA_IRQHandler+0x1d4>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d022      	beq.n	8002acc <HAL_DMA_IRQHandler+0x194>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a21      	ldr	r2, [pc, #132]	; (8002b10 <HAL_DMA_IRQHandler+0x1d8>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d01d      	beq.n	8002acc <HAL_DMA_IRQHandler+0x194>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a1f      	ldr	r2, [pc, #124]	; (8002b14 <HAL_DMA_IRQHandler+0x1dc>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d018      	beq.n	8002acc <HAL_DMA_IRQHandler+0x194>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a1e      	ldr	r2, [pc, #120]	; (8002b18 <HAL_DMA_IRQHandler+0x1e0>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d013      	beq.n	8002acc <HAL_DMA_IRQHandler+0x194>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a1c      	ldr	r2, [pc, #112]	; (8002b1c <HAL_DMA_IRQHandler+0x1e4>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d00e      	beq.n	8002acc <HAL_DMA_IRQHandler+0x194>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a1b      	ldr	r2, [pc, #108]	; (8002b20 <HAL_DMA_IRQHandler+0x1e8>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d009      	beq.n	8002acc <HAL_DMA_IRQHandler+0x194>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a19      	ldr	r2, [pc, #100]	; (8002b24 <HAL_DMA_IRQHandler+0x1ec>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d004      	beq.n	8002acc <HAL_DMA_IRQHandler+0x194>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a18      	ldr	r2, [pc, #96]	; (8002b28 <HAL_DMA_IRQHandler+0x1f0>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d12f      	bne.n	8002b2c <HAL_DMA_IRQHandler+0x1f4>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0304 	and.w	r3, r3, #4
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	bf14      	ite	ne
 8002ada:	2301      	movne	r3, #1
 8002adc:	2300      	moveq	r3, #0
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	e02e      	b.n	8002b40 <HAL_DMA_IRQHandler+0x208>
 8002ae2:	bf00      	nop
 8002ae4:	24000000 	.word	0x24000000
 8002ae8:	1b4e81b5 	.word	0x1b4e81b5
 8002aec:	40020010 	.word	0x40020010
 8002af0:	40020028 	.word	0x40020028
 8002af4:	40020040 	.word	0x40020040
 8002af8:	40020058 	.word	0x40020058
 8002afc:	40020070 	.word	0x40020070
 8002b00:	40020088 	.word	0x40020088
 8002b04:	400200a0 	.word	0x400200a0
 8002b08:	400200b8 	.word	0x400200b8
 8002b0c:	40020410 	.word	0x40020410
 8002b10:	40020428 	.word	0x40020428
 8002b14:	40020440 	.word	0x40020440
 8002b18:	40020458 	.word	0x40020458
 8002b1c:	40020470 	.word	0x40020470
 8002b20:	40020488 	.word	0x40020488
 8002b24:	400204a0 	.word	0x400204a0
 8002b28:	400204b8 	.word	0x400204b8
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	bf14      	ite	ne
 8002b3a:	2301      	movne	r3, #1
 8002b3c:	2300      	moveq	r3, #0
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d015      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0204 	bic.w	r2, r2, #4
 8002b52:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b58:	f003 031f 	and.w	r3, r3, #31
 8002b5c:	2208      	movs	r2, #8
 8002b5e:	409a      	lsls	r2, r3
 8002b60:	6a3b      	ldr	r3, [r7, #32]
 8002b62:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b68:	f043 0201 	orr.w	r2, r3, #1
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b74:	f003 031f 	and.w	r3, r3, #31
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d06e      	beq.n	8002c64 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a69      	ldr	r2, [pc, #420]	; (8002d30 <HAL_DMA_IRQHandler+0x3f8>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d04a      	beq.n	8002c26 <HAL_DMA_IRQHandler+0x2ee>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a67      	ldr	r2, [pc, #412]	; (8002d34 <HAL_DMA_IRQHandler+0x3fc>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d045      	beq.n	8002c26 <HAL_DMA_IRQHandler+0x2ee>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a66      	ldr	r2, [pc, #408]	; (8002d38 <HAL_DMA_IRQHandler+0x400>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d040      	beq.n	8002c26 <HAL_DMA_IRQHandler+0x2ee>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a64      	ldr	r2, [pc, #400]	; (8002d3c <HAL_DMA_IRQHandler+0x404>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d03b      	beq.n	8002c26 <HAL_DMA_IRQHandler+0x2ee>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a63      	ldr	r2, [pc, #396]	; (8002d40 <HAL_DMA_IRQHandler+0x408>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d036      	beq.n	8002c26 <HAL_DMA_IRQHandler+0x2ee>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a61      	ldr	r2, [pc, #388]	; (8002d44 <HAL_DMA_IRQHandler+0x40c>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d031      	beq.n	8002c26 <HAL_DMA_IRQHandler+0x2ee>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a60      	ldr	r2, [pc, #384]	; (8002d48 <HAL_DMA_IRQHandler+0x410>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d02c      	beq.n	8002c26 <HAL_DMA_IRQHandler+0x2ee>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a5e      	ldr	r2, [pc, #376]	; (8002d4c <HAL_DMA_IRQHandler+0x414>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d027      	beq.n	8002c26 <HAL_DMA_IRQHandler+0x2ee>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a5d      	ldr	r2, [pc, #372]	; (8002d50 <HAL_DMA_IRQHandler+0x418>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d022      	beq.n	8002c26 <HAL_DMA_IRQHandler+0x2ee>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a5b      	ldr	r2, [pc, #364]	; (8002d54 <HAL_DMA_IRQHandler+0x41c>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d01d      	beq.n	8002c26 <HAL_DMA_IRQHandler+0x2ee>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a5a      	ldr	r2, [pc, #360]	; (8002d58 <HAL_DMA_IRQHandler+0x420>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d018      	beq.n	8002c26 <HAL_DMA_IRQHandler+0x2ee>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a58      	ldr	r2, [pc, #352]	; (8002d5c <HAL_DMA_IRQHandler+0x424>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d013      	beq.n	8002c26 <HAL_DMA_IRQHandler+0x2ee>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a57      	ldr	r2, [pc, #348]	; (8002d60 <HAL_DMA_IRQHandler+0x428>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d00e      	beq.n	8002c26 <HAL_DMA_IRQHandler+0x2ee>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a55      	ldr	r2, [pc, #340]	; (8002d64 <HAL_DMA_IRQHandler+0x42c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d009      	beq.n	8002c26 <HAL_DMA_IRQHandler+0x2ee>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a54      	ldr	r2, [pc, #336]	; (8002d68 <HAL_DMA_IRQHandler+0x430>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d004      	beq.n	8002c26 <HAL_DMA_IRQHandler+0x2ee>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a52      	ldr	r2, [pc, #328]	; (8002d6c <HAL_DMA_IRQHandler+0x434>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d10a      	bne.n	8002c3c <HAL_DMA_IRQHandler+0x304>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	bf14      	ite	ne
 8002c34:	2301      	movne	r3, #1
 8002c36:	2300      	moveq	r3, #0
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	e003      	b.n	8002c44 <HAL_DMA_IRQHandler+0x30c>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2300      	movs	r3, #0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00d      	beq.n	8002c64 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4c:	f003 031f 	and.w	r3, r3, #31
 8002c50:	2201      	movs	r2, #1
 8002c52:	409a      	lsls	r2, r3
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c5c:	f043 0202 	orr.w	r2, r3, #2
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c68:	f003 031f 	and.w	r3, r3, #31
 8002c6c:	2204      	movs	r2, #4
 8002c6e:	409a      	lsls	r2, r3
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	4013      	ands	r3, r2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 808f 	beq.w	8002d98 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a2c      	ldr	r2, [pc, #176]	; (8002d30 <HAL_DMA_IRQHandler+0x3f8>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d04a      	beq.n	8002d1a <HAL_DMA_IRQHandler+0x3e2>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a2a      	ldr	r2, [pc, #168]	; (8002d34 <HAL_DMA_IRQHandler+0x3fc>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d045      	beq.n	8002d1a <HAL_DMA_IRQHandler+0x3e2>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a29      	ldr	r2, [pc, #164]	; (8002d38 <HAL_DMA_IRQHandler+0x400>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d040      	beq.n	8002d1a <HAL_DMA_IRQHandler+0x3e2>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a27      	ldr	r2, [pc, #156]	; (8002d3c <HAL_DMA_IRQHandler+0x404>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d03b      	beq.n	8002d1a <HAL_DMA_IRQHandler+0x3e2>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a26      	ldr	r2, [pc, #152]	; (8002d40 <HAL_DMA_IRQHandler+0x408>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d036      	beq.n	8002d1a <HAL_DMA_IRQHandler+0x3e2>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a24      	ldr	r2, [pc, #144]	; (8002d44 <HAL_DMA_IRQHandler+0x40c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d031      	beq.n	8002d1a <HAL_DMA_IRQHandler+0x3e2>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a23      	ldr	r2, [pc, #140]	; (8002d48 <HAL_DMA_IRQHandler+0x410>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d02c      	beq.n	8002d1a <HAL_DMA_IRQHandler+0x3e2>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a21      	ldr	r2, [pc, #132]	; (8002d4c <HAL_DMA_IRQHandler+0x414>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d027      	beq.n	8002d1a <HAL_DMA_IRQHandler+0x3e2>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a20      	ldr	r2, [pc, #128]	; (8002d50 <HAL_DMA_IRQHandler+0x418>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d022      	beq.n	8002d1a <HAL_DMA_IRQHandler+0x3e2>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a1e      	ldr	r2, [pc, #120]	; (8002d54 <HAL_DMA_IRQHandler+0x41c>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d01d      	beq.n	8002d1a <HAL_DMA_IRQHandler+0x3e2>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a1d      	ldr	r2, [pc, #116]	; (8002d58 <HAL_DMA_IRQHandler+0x420>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d018      	beq.n	8002d1a <HAL_DMA_IRQHandler+0x3e2>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a1b      	ldr	r2, [pc, #108]	; (8002d5c <HAL_DMA_IRQHandler+0x424>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d013      	beq.n	8002d1a <HAL_DMA_IRQHandler+0x3e2>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a1a      	ldr	r2, [pc, #104]	; (8002d60 <HAL_DMA_IRQHandler+0x428>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d00e      	beq.n	8002d1a <HAL_DMA_IRQHandler+0x3e2>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a18      	ldr	r2, [pc, #96]	; (8002d64 <HAL_DMA_IRQHandler+0x42c>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d009      	beq.n	8002d1a <HAL_DMA_IRQHandler+0x3e2>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a17      	ldr	r2, [pc, #92]	; (8002d68 <HAL_DMA_IRQHandler+0x430>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d004      	beq.n	8002d1a <HAL_DMA_IRQHandler+0x3e2>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a15      	ldr	r2, [pc, #84]	; (8002d6c <HAL_DMA_IRQHandler+0x434>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d12a      	bne.n	8002d70 <HAL_DMA_IRQHandler+0x438>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	bf14      	ite	ne
 8002d28:	2301      	movne	r3, #1
 8002d2a:	2300      	moveq	r3, #0
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	e023      	b.n	8002d78 <HAL_DMA_IRQHandler+0x440>
 8002d30:	40020010 	.word	0x40020010
 8002d34:	40020028 	.word	0x40020028
 8002d38:	40020040 	.word	0x40020040
 8002d3c:	40020058 	.word	0x40020058
 8002d40:	40020070 	.word	0x40020070
 8002d44:	40020088 	.word	0x40020088
 8002d48:	400200a0 	.word	0x400200a0
 8002d4c:	400200b8 	.word	0x400200b8
 8002d50:	40020410 	.word	0x40020410
 8002d54:	40020428 	.word	0x40020428
 8002d58:	40020440 	.word	0x40020440
 8002d5c:	40020458 	.word	0x40020458
 8002d60:	40020470 	.word	0x40020470
 8002d64:	40020488 	.word	0x40020488
 8002d68:	400204a0 	.word	0x400204a0
 8002d6c:	400204b8 	.word	0x400204b8
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2300      	movs	r3, #0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00d      	beq.n	8002d98 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d80:	f003 031f 	and.w	r3, r3, #31
 8002d84:	2204      	movs	r2, #4
 8002d86:	409a      	lsls	r2, r3
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d90:	f043 0204 	orr.w	r2, r3, #4
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9c:	f003 031f 	and.w	r3, r3, #31
 8002da0:	2210      	movs	r2, #16
 8002da2:	409a      	lsls	r2, r3
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	4013      	ands	r3, r2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 80a6 	beq.w	8002efa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a85      	ldr	r2, [pc, #532]	; (8002fc8 <HAL_DMA_IRQHandler+0x690>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d04a      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x516>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a83      	ldr	r2, [pc, #524]	; (8002fcc <HAL_DMA_IRQHandler+0x694>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d045      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x516>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a82      	ldr	r2, [pc, #520]	; (8002fd0 <HAL_DMA_IRQHandler+0x698>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d040      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x516>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a80      	ldr	r2, [pc, #512]	; (8002fd4 <HAL_DMA_IRQHandler+0x69c>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d03b      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x516>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a7f      	ldr	r2, [pc, #508]	; (8002fd8 <HAL_DMA_IRQHandler+0x6a0>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d036      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x516>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a7d      	ldr	r2, [pc, #500]	; (8002fdc <HAL_DMA_IRQHandler+0x6a4>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d031      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x516>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a7c      	ldr	r2, [pc, #496]	; (8002fe0 <HAL_DMA_IRQHandler+0x6a8>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d02c      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x516>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a7a      	ldr	r2, [pc, #488]	; (8002fe4 <HAL_DMA_IRQHandler+0x6ac>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d027      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x516>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a79      	ldr	r2, [pc, #484]	; (8002fe8 <HAL_DMA_IRQHandler+0x6b0>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d022      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x516>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a77      	ldr	r2, [pc, #476]	; (8002fec <HAL_DMA_IRQHandler+0x6b4>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d01d      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x516>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a76      	ldr	r2, [pc, #472]	; (8002ff0 <HAL_DMA_IRQHandler+0x6b8>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d018      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x516>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a74      	ldr	r2, [pc, #464]	; (8002ff4 <HAL_DMA_IRQHandler+0x6bc>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d013      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x516>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a73      	ldr	r2, [pc, #460]	; (8002ff8 <HAL_DMA_IRQHandler+0x6c0>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d00e      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x516>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a71      	ldr	r2, [pc, #452]	; (8002ffc <HAL_DMA_IRQHandler+0x6c4>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d009      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x516>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a70      	ldr	r2, [pc, #448]	; (8003000 <HAL_DMA_IRQHandler+0x6c8>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d004      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x516>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a6e      	ldr	r2, [pc, #440]	; (8003004 <HAL_DMA_IRQHandler+0x6cc>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d10a      	bne.n	8002e64 <HAL_DMA_IRQHandler+0x52c>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0308 	and.w	r3, r3, #8
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	bf14      	ite	ne
 8002e5c:	2301      	movne	r3, #1
 8002e5e:	2300      	moveq	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	e009      	b.n	8002e78 <HAL_DMA_IRQHandler+0x540>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	bf14      	ite	ne
 8002e72:	2301      	movne	r3, #1
 8002e74:	2300      	moveq	r3, #0
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d03e      	beq.n	8002efa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e80:	f003 031f 	and.w	r3, r3, #31
 8002e84:	2210      	movs	r2, #16
 8002e86:	409a      	lsls	r2, r3
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d018      	beq.n	8002ecc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d108      	bne.n	8002eba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d024      	beq.n	8002efa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	4798      	blx	r3
 8002eb8:	e01f      	b.n	8002efa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d01b      	beq.n	8002efa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	4798      	blx	r3
 8002eca:	e016      	b.n	8002efa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d107      	bne.n	8002eea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 0208 	bic.w	r2, r2, #8
 8002ee8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efe:	f003 031f 	and.w	r3, r3, #31
 8002f02:	2220      	movs	r2, #32
 8002f04:	409a      	lsls	r2, r3
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 8110 	beq.w	8003130 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a2c      	ldr	r2, [pc, #176]	; (8002fc8 <HAL_DMA_IRQHandler+0x690>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d04a      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x678>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a2b      	ldr	r2, [pc, #172]	; (8002fcc <HAL_DMA_IRQHandler+0x694>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d045      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x678>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a29      	ldr	r2, [pc, #164]	; (8002fd0 <HAL_DMA_IRQHandler+0x698>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d040      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x678>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a28      	ldr	r2, [pc, #160]	; (8002fd4 <HAL_DMA_IRQHandler+0x69c>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d03b      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x678>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a26      	ldr	r2, [pc, #152]	; (8002fd8 <HAL_DMA_IRQHandler+0x6a0>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d036      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x678>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a25      	ldr	r2, [pc, #148]	; (8002fdc <HAL_DMA_IRQHandler+0x6a4>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d031      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x678>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a23      	ldr	r2, [pc, #140]	; (8002fe0 <HAL_DMA_IRQHandler+0x6a8>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d02c      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x678>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a22      	ldr	r2, [pc, #136]	; (8002fe4 <HAL_DMA_IRQHandler+0x6ac>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d027      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x678>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a20      	ldr	r2, [pc, #128]	; (8002fe8 <HAL_DMA_IRQHandler+0x6b0>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d022      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x678>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a1f      	ldr	r2, [pc, #124]	; (8002fec <HAL_DMA_IRQHandler+0x6b4>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d01d      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x678>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a1d      	ldr	r2, [pc, #116]	; (8002ff0 <HAL_DMA_IRQHandler+0x6b8>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d018      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x678>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a1c      	ldr	r2, [pc, #112]	; (8002ff4 <HAL_DMA_IRQHandler+0x6bc>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d013      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x678>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a1a      	ldr	r2, [pc, #104]	; (8002ff8 <HAL_DMA_IRQHandler+0x6c0>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d00e      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x678>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a19      	ldr	r2, [pc, #100]	; (8002ffc <HAL_DMA_IRQHandler+0x6c4>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d009      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x678>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a17      	ldr	r2, [pc, #92]	; (8003000 <HAL_DMA_IRQHandler+0x6c8>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d004      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x678>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a16      	ldr	r2, [pc, #88]	; (8003004 <HAL_DMA_IRQHandler+0x6cc>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d12b      	bne.n	8003008 <HAL_DMA_IRQHandler+0x6d0>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0310 	and.w	r3, r3, #16
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	bf14      	ite	ne
 8002fbe:	2301      	movne	r3, #1
 8002fc0:	2300      	moveq	r3, #0
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	e02a      	b.n	800301c <HAL_DMA_IRQHandler+0x6e4>
 8002fc6:	bf00      	nop
 8002fc8:	40020010 	.word	0x40020010
 8002fcc:	40020028 	.word	0x40020028
 8002fd0:	40020040 	.word	0x40020040
 8002fd4:	40020058 	.word	0x40020058
 8002fd8:	40020070 	.word	0x40020070
 8002fdc:	40020088 	.word	0x40020088
 8002fe0:	400200a0 	.word	0x400200a0
 8002fe4:	400200b8 	.word	0x400200b8
 8002fe8:	40020410 	.word	0x40020410
 8002fec:	40020428 	.word	0x40020428
 8002ff0:	40020440 	.word	0x40020440
 8002ff4:	40020458 	.word	0x40020458
 8002ff8:	40020470 	.word	0x40020470
 8002ffc:	40020488 	.word	0x40020488
 8003000:	400204a0 	.word	0x400204a0
 8003004:	400204b8 	.word	0x400204b8
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	bf14      	ite	ne
 8003016:	2301      	movne	r3, #1
 8003018:	2300      	moveq	r3, #0
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 8087 	beq.w	8003130 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003026:	f003 031f 	and.w	r3, r3, #31
 800302a:	2220      	movs	r2, #32
 800302c:	409a      	lsls	r2, r3
 800302e:	6a3b      	ldr	r3, [r7, #32]
 8003030:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b04      	cmp	r3, #4
 800303c:	d139      	bne.n	80030b2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 0216 	bic.w	r2, r2, #22
 800304c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	695a      	ldr	r2, [r3, #20]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800305c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	2b00      	cmp	r3, #0
 8003064:	d103      	bne.n	800306e <HAL_DMA_IRQHandler+0x736>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800306a:	2b00      	cmp	r3, #0
 800306c:	d007      	beq.n	800307e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 0208 	bic.w	r2, r2, #8
 800307c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003082:	f003 031f 	and.w	r3, r3, #31
 8003086:	223f      	movs	r2, #63	; 0x3f
 8003088:	409a      	lsls	r2, r3
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f000 834a 	beq.w	800373c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	4798      	blx	r3
          }
          return;
 80030b0:	e344      	b.n	800373c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d018      	beq.n	80030f2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d108      	bne.n	80030e0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d02c      	beq.n	8003130 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	4798      	blx	r3
 80030de:	e027      	b.n	8003130 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d023      	beq.n	8003130 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	4798      	blx	r3
 80030f0:	e01e      	b.n	8003130 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10f      	bne.n	8003120 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0210 	bic.w	r2, r2, #16
 800310e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003124:	2b00      	cmp	r3, #0
 8003126:	d003      	beq.n	8003130 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 8306 	beq.w	8003746 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 8088 	beq.w	8003258 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2204      	movs	r2, #4
 800314c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a7a      	ldr	r2, [pc, #488]	; (8003340 <HAL_DMA_IRQHandler+0xa08>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d04a      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x8b8>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a79      	ldr	r2, [pc, #484]	; (8003344 <HAL_DMA_IRQHandler+0xa0c>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d045      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x8b8>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a77      	ldr	r2, [pc, #476]	; (8003348 <HAL_DMA_IRQHandler+0xa10>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d040      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x8b8>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a76      	ldr	r2, [pc, #472]	; (800334c <HAL_DMA_IRQHandler+0xa14>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d03b      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x8b8>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a74      	ldr	r2, [pc, #464]	; (8003350 <HAL_DMA_IRQHandler+0xa18>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d036      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x8b8>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a73      	ldr	r2, [pc, #460]	; (8003354 <HAL_DMA_IRQHandler+0xa1c>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d031      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x8b8>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a71      	ldr	r2, [pc, #452]	; (8003358 <HAL_DMA_IRQHandler+0xa20>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d02c      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x8b8>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a70      	ldr	r2, [pc, #448]	; (800335c <HAL_DMA_IRQHandler+0xa24>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d027      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x8b8>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a6e      	ldr	r2, [pc, #440]	; (8003360 <HAL_DMA_IRQHandler+0xa28>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d022      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x8b8>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a6d      	ldr	r2, [pc, #436]	; (8003364 <HAL_DMA_IRQHandler+0xa2c>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d01d      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x8b8>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a6b      	ldr	r2, [pc, #428]	; (8003368 <HAL_DMA_IRQHandler+0xa30>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d018      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x8b8>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a6a      	ldr	r2, [pc, #424]	; (800336c <HAL_DMA_IRQHandler+0xa34>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d013      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x8b8>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a68      	ldr	r2, [pc, #416]	; (8003370 <HAL_DMA_IRQHandler+0xa38>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d00e      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x8b8>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a67      	ldr	r2, [pc, #412]	; (8003374 <HAL_DMA_IRQHandler+0xa3c>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d009      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x8b8>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a65      	ldr	r2, [pc, #404]	; (8003378 <HAL_DMA_IRQHandler+0xa40>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d004      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x8b8>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a64      	ldr	r2, [pc, #400]	; (800337c <HAL_DMA_IRQHandler+0xa44>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d108      	bne.n	8003202 <HAL_DMA_IRQHandler+0x8ca>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0201 	bic.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	e007      	b.n	8003212 <HAL_DMA_IRQHandler+0x8da>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0201 	bic.w	r2, r2, #1
 8003210:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	3301      	adds	r3, #1
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800321a:	429a      	cmp	r2, r3
 800321c:	d307      	bcc.n	800322e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1f2      	bne.n	8003212 <HAL_DMA_IRQHandler+0x8da>
 800322c:	e000      	b.n	8003230 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800322e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d004      	beq.n	8003248 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2203      	movs	r2, #3
 8003242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003246:	e003      	b.n	8003250 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 8272 	beq.w	8003746 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	4798      	blx	r3
 800326a:	e26c      	b.n	8003746 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a43      	ldr	r2, [pc, #268]	; (8003380 <HAL_DMA_IRQHandler+0xa48>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d022      	beq.n	80032bc <HAL_DMA_IRQHandler+0x984>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a42      	ldr	r2, [pc, #264]	; (8003384 <HAL_DMA_IRQHandler+0xa4c>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d01d      	beq.n	80032bc <HAL_DMA_IRQHandler+0x984>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a40      	ldr	r2, [pc, #256]	; (8003388 <HAL_DMA_IRQHandler+0xa50>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d018      	beq.n	80032bc <HAL_DMA_IRQHandler+0x984>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a3f      	ldr	r2, [pc, #252]	; (800338c <HAL_DMA_IRQHandler+0xa54>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d013      	beq.n	80032bc <HAL_DMA_IRQHandler+0x984>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a3d      	ldr	r2, [pc, #244]	; (8003390 <HAL_DMA_IRQHandler+0xa58>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d00e      	beq.n	80032bc <HAL_DMA_IRQHandler+0x984>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a3c      	ldr	r2, [pc, #240]	; (8003394 <HAL_DMA_IRQHandler+0xa5c>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d009      	beq.n	80032bc <HAL_DMA_IRQHandler+0x984>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a3a      	ldr	r2, [pc, #232]	; (8003398 <HAL_DMA_IRQHandler+0xa60>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d004      	beq.n	80032bc <HAL_DMA_IRQHandler+0x984>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a39      	ldr	r2, [pc, #228]	; (800339c <HAL_DMA_IRQHandler+0xa64>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d101      	bne.n	80032c0 <HAL_DMA_IRQHandler+0x988>
 80032bc:	2301      	movs	r3, #1
 80032be:	e000      	b.n	80032c2 <HAL_DMA_IRQHandler+0x98a>
 80032c0:	2300      	movs	r3, #0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 823f 	beq.w	8003746 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d4:	f003 031f 	and.w	r3, r3, #31
 80032d8:	2204      	movs	r2, #4
 80032da:	409a      	lsls	r2, r3
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	4013      	ands	r3, r2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f000 80cd 	beq.w	8003480 <HAL_DMA_IRQHandler+0xb48>
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 80c7 	beq.w	8003480 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f6:	f003 031f 	and.w	r3, r3, #31
 80032fa:	2204      	movs	r2, #4
 80032fc:	409a      	lsls	r2, r3
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d049      	beq.n	80033a0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d109      	bne.n	800332a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 8210 	beq.w	8003740 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003328:	e20a      	b.n	8003740 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 8206 	beq.w	8003740 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800333c:	e200      	b.n	8003740 <HAL_DMA_IRQHandler+0xe08>
 800333e:	bf00      	nop
 8003340:	40020010 	.word	0x40020010
 8003344:	40020028 	.word	0x40020028
 8003348:	40020040 	.word	0x40020040
 800334c:	40020058 	.word	0x40020058
 8003350:	40020070 	.word	0x40020070
 8003354:	40020088 	.word	0x40020088
 8003358:	400200a0 	.word	0x400200a0
 800335c:	400200b8 	.word	0x400200b8
 8003360:	40020410 	.word	0x40020410
 8003364:	40020428 	.word	0x40020428
 8003368:	40020440 	.word	0x40020440
 800336c:	40020458 	.word	0x40020458
 8003370:	40020470 	.word	0x40020470
 8003374:	40020488 	.word	0x40020488
 8003378:	400204a0 	.word	0x400204a0
 800337c:	400204b8 	.word	0x400204b8
 8003380:	58025408 	.word	0x58025408
 8003384:	5802541c 	.word	0x5802541c
 8003388:	58025430 	.word	0x58025430
 800338c:	58025444 	.word	0x58025444
 8003390:	58025458 	.word	0x58025458
 8003394:	5802546c 	.word	0x5802546c
 8003398:	58025480 	.word	0x58025480
 800339c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	f003 0320 	and.w	r3, r3, #32
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d160      	bne.n	800346c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a7f      	ldr	r2, [pc, #508]	; (80035ac <HAL_DMA_IRQHandler+0xc74>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d04a      	beq.n	800344a <HAL_DMA_IRQHandler+0xb12>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a7d      	ldr	r2, [pc, #500]	; (80035b0 <HAL_DMA_IRQHandler+0xc78>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d045      	beq.n	800344a <HAL_DMA_IRQHandler+0xb12>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a7c      	ldr	r2, [pc, #496]	; (80035b4 <HAL_DMA_IRQHandler+0xc7c>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d040      	beq.n	800344a <HAL_DMA_IRQHandler+0xb12>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a7a      	ldr	r2, [pc, #488]	; (80035b8 <HAL_DMA_IRQHandler+0xc80>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d03b      	beq.n	800344a <HAL_DMA_IRQHandler+0xb12>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a79      	ldr	r2, [pc, #484]	; (80035bc <HAL_DMA_IRQHandler+0xc84>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d036      	beq.n	800344a <HAL_DMA_IRQHandler+0xb12>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a77      	ldr	r2, [pc, #476]	; (80035c0 <HAL_DMA_IRQHandler+0xc88>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d031      	beq.n	800344a <HAL_DMA_IRQHandler+0xb12>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a76      	ldr	r2, [pc, #472]	; (80035c4 <HAL_DMA_IRQHandler+0xc8c>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d02c      	beq.n	800344a <HAL_DMA_IRQHandler+0xb12>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a74      	ldr	r2, [pc, #464]	; (80035c8 <HAL_DMA_IRQHandler+0xc90>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d027      	beq.n	800344a <HAL_DMA_IRQHandler+0xb12>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a73      	ldr	r2, [pc, #460]	; (80035cc <HAL_DMA_IRQHandler+0xc94>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d022      	beq.n	800344a <HAL_DMA_IRQHandler+0xb12>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a71      	ldr	r2, [pc, #452]	; (80035d0 <HAL_DMA_IRQHandler+0xc98>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d01d      	beq.n	800344a <HAL_DMA_IRQHandler+0xb12>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a70      	ldr	r2, [pc, #448]	; (80035d4 <HAL_DMA_IRQHandler+0xc9c>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d018      	beq.n	800344a <HAL_DMA_IRQHandler+0xb12>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a6e      	ldr	r2, [pc, #440]	; (80035d8 <HAL_DMA_IRQHandler+0xca0>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d013      	beq.n	800344a <HAL_DMA_IRQHandler+0xb12>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a6d      	ldr	r2, [pc, #436]	; (80035dc <HAL_DMA_IRQHandler+0xca4>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d00e      	beq.n	800344a <HAL_DMA_IRQHandler+0xb12>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a6b      	ldr	r2, [pc, #428]	; (80035e0 <HAL_DMA_IRQHandler+0xca8>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d009      	beq.n	800344a <HAL_DMA_IRQHandler+0xb12>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a6a      	ldr	r2, [pc, #424]	; (80035e4 <HAL_DMA_IRQHandler+0xcac>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d004      	beq.n	800344a <HAL_DMA_IRQHandler+0xb12>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a68      	ldr	r2, [pc, #416]	; (80035e8 <HAL_DMA_IRQHandler+0xcb0>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d108      	bne.n	800345c <HAL_DMA_IRQHandler+0xb24>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 0208 	bic.w	r2, r2, #8
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	e007      	b.n	800346c <HAL_DMA_IRQHandler+0xb34>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 0204 	bic.w	r2, r2, #4
 800346a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 8165 	beq.w	8003740 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800347e:	e15f      	b.n	8003740 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003484:	f003 031f 	and.w	r3, r3, #31
 8003488:	2202      	movs	r2, #2
 800348a:	409a      	lsls	r2, r3
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	4013      	ands	r3, r2
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 80c5 	beq.w	8003620 <HAL_DMA_IRQHandler+0xce8>
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 80bf 	beq.w	8003620 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a6:	f003 031f 	and.w	r3, r3, #31
 80034aa:	2202      	movs	r2, #2
 80034ac:	409a      	lsls	r2, r3
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d018      	beq.n	80034ee <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d109      	bne.n	80034da <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 813a 	beq.w	8003744 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034d8:	e134      	b.n	8003744 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 8130 	beq.w	8003744 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034ec:	e12a      	b.n	8003744 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	f003 0320 	and.w	r3, r3, #32
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f040 8089 	bne.w	800360c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a2b      	ldr	r2, [pc, #172]	; (80035ac <HAL_DMA_IRQHandler+0xc74>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d04a      	beq.n	800359a <HAL_DMA_IRQHandler+0xc62>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a29      	ldr	r2, [pc, #164]	; (80035b0 <HAL_DMA_IRQHandler+0xc78>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d045      	beq.n	800359a <HAL_DMA_IRQHandler+0xc62>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a28      	ldr	r2, [pc, #160]	; (80035b4 <HAL_DMA_IRQHandler+0xc7c>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d040      	beq.n	800359a <HAL_DMA_IRQHandler+0xc62>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a26      	ldr	r2, [pc, #152]	; (80035b8 <HAL_DMA_IRQHandler+0xc80>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d03b      	beq.n	800359a <HAL_DMA_IRQHandler+0xc62>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a25      	ldr	r2, [pc, #148]	; (80035bc <HAL_DMA_IRQHandler+0xc84>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d036      	beq.n	800359a <HAL_DMA_IRQHandler+0xc62>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a23      	ldr	r2, [pc, #140]	; (80035c0 <HAL_DMA_IRQHandler+0xc88>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d031      	beq.n	800359a <HAL_DMA_IRQHandler+0xc62>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a22      	ldr	r2, [pc, #136]	; (80035c4 <HAL_DMA_IRQHandler+0xc8c>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d02c      	beq.n	800359a <HAL_DMA_IRQHandler+0xc62>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a20      	ldr	r2, [pc, #128]	; (80035c8 <HAL_DMA_IRQHandler+0xc90>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d027      	beq.n	800359a <HAL_DMA_IRQHandler+0xc62>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a1f      	ldr	r2, [pc, #124]	; (80035cc <HAL_DMA_IRQHandler+0xc94>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d022      	beq.n	800359a <HAL_DMA_IRQHandler+0xc62>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a1d      	ldr	r2, [pc, #116]	; (80035d0 <HAL_DMA_IRQHandler+0xc98>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d01d      	beq.n	800359a <HAL_DMA_IRQHandler+0xc62>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a1c      	ldr	r2, [pc, #112]	; (80035d4 <HAL_DMA_IRQHandler+0xc9c>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d018      	beq.n	800359a <HAL_DMA_IRQHandler+0xc62>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a1a      	ldr	r2, [pc, #104]	; (80035d8 <HAL_DMA_IRQHandler+0xca0>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d013      	beq.n	800359a <HAL_DMA_IRQHandler+0xc62>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a19      	ldr	r2, [pc, #100]	; (80035dc <HAL_DMA_IRQHandler+0xca4>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d00e      	beq.n	800359a <HAL_DMA_IRQHandler+0xc62>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a17      	ldr	r2, [pc, #92]	; (80035e0 <HAL_DMA_IRQHandler+0xca8>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d009      	beq.n	800359a <HAL_DMA_IRQHandler+0xc62>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a16      	ldr	r2, [pc, #88]	; (80035e4 <HAL_DMA_IRQHandler+0xcac>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d004      	beq.n	800359a <HAL_DMA_IRQHandler+0xc62>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a14      	ldr	r2, [pc, #80]	; (80035e8 <HAL_DMA_IRQHandler+0xcb0>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d128      	bne.n	80035ec <HAL_DMA_IRQHandler+0xcb4>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0214 	bic.w	r2, r2, #20
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	e027      	b.n	80035fc <HAL_DMA_IRQHandler+0xcc4>
 80035ac:	40020010 	.word	0x40020010
 80035b0:	40020028 	.word	0x40020028
 80035b4:	40020040 	.word	0x40020040
 80035b8:	40020058 	.word	0x40020058
 80035bc:	40020070 	.word	0x40020070
 80035c0:	40020088 	.word	0x40020088
 80035c4:	400200a0 	.word	0x400200a0
 80035c8:	400200b8 	.word	0x400200b8
 80035cc:	40020410 	.word	0x40020410
 80035d0:	40020428 	.word	0x40020428
 80035d4:	40020440 	.word	0x40020440
 80035d8:	40020458 	.word	0x40020458
 80035dc:	40020470 	.word	0x40020470
 80035e0:	40020488 	.word	0x40020488
 80035e4:	400204a0 	.word	0x400204a0
 80035e8:	400204b8 	.word	0x400204b8
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 020a 	bic.w	r2, r2, #10
 80035fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 8097 	beq.w	8003744 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800361e:	e091      	b.n	8003744 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003624:	f003 031f 	and.w	r3, r3, #31
 8003628:	2208      	movs	r2, #8
 800362a:	409a      	lsls	r2, r3
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	4013      	ands	r3, r2
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 8088 	beq.w	8003746 <HAL_DMA_IRQHandler+0xe0e>
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	f003 0308 	and.w	r3, r3, #8
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 8082 	beq.w	8003746 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a41      	ldr	r2, [pc, #260]	; (800374c <HAL_DMA_IRQHandler+0xe14>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d04a      	beq.n	80036e2 <HAL_DMA_IRQHandler+0xdaa>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a3f      	ldr	r2, [pc, #252]	; (8003750 <HAL_DMA_IRQHandler+0xe18>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d045      	beq.n	80036e2 <HAL_DMA_IRQHandler+0xdaa>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a3e      	ldr	r2, [pc, #248]	; (8003754 <HAL_DMA_IRQHandler+0xe1c>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d040      	beq.n	80036e2 <HAL_DMA_IRQHandler+0xdaa>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a3c      	ldr	r2, [pc, #240]	; (8003758 <HAL_DMA_IRQHandler+0xe20>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d03b      	beq.n	80036e2 <HAL_DMA_IRQHandler+0xdaa>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a3b      	ldr	r2, [pc, #236]	; (800375c <HAL_DMA_IRQHandler+0xe24>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d036      	beq.n	80036e2 <HAL_DMA_IRQHandler+0xdaa>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a39      	ldr	r2, [pc, #228]	; (8003760 <HAL_DMA_IRQHandler+0xe28>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d031      	beq.n	80036e2 <HAL_DMA_IRQHandler+0xdaa>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a38      	ldr	r2, [pc, #224]	; (8003764 <HAL_DMA_IRQHandler+0xe2c>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d02c      	beq.n	80036e2 <HAL_DMA_IRQHandler+0xdaa>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a36      	ldr	r2, [pc, #216]	; (8003768 <HAL_DMA_IRQHandler+0xe30>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d027      	beq.n	80036e2 <HAL_DMA_IRQHandler+0xdaa>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a35      	ldr	r2, [pc, #212]	; (800376c <HAL_DMA_IRQHandler+0xe34>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d022      	beq.n	80036e2 <HAL_DMA_IRQHandler+0xdaa>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a33      	ldr	r2, [pc, #204]	; (8003770 <HAL_DMA_IRQHandler+0xe38>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d01d      	beq.n	80036e2 <HAL_DMA_IRQHandler+0xdaa>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a32      	ldr	r2, [pc, #200]	; (8003774 <HAL_DMA_IRQHandler+0xe3c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d018      	beq.n	80036e2 <HAL_DMA_IRQHandler+0xdaa>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a30      	ldr	r2, [pc, #192]	; (8003778 <HAL_DMA_IRQHandler+0xe40>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d013      	beq.n	80036e2 <HAL_DMA_IRQHandler+0xdaa>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a2f      	ldr	r2, [pc, #188]	; (800377c <HAL_DMA_IRQHandler+0xe44>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d00e      	beq.n	80036e2 <HAL_DMA_IRQHandler+0xdaa>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a2d      	ldr	r2, [pc, #180]	; (8003780 <HAL_DMA_IRQHandler+0xe48>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d009      	beq.n	80036e2 <HAL_DMA_IRQHandler+0xdaa>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a2c      	ldr	r2, [pc, #176]	; (8003784 <HAL_DMA_IRQHandler+0xe4c>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d004      	beq.n	80036e2 <HAL_DMA_IRQHandler+0xdaa>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a2a      	ldr	r2, [pc, #168]	; (8003788 <HAL_DMA_IRQHandler+0xe50>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d108      	bne.n	80036f4 <HAL_DMA_IRQHandler+0xdbc>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 021c 	bic.w	r2, r2, #28
 80036f0:	601a      	str	r2, [r3, #0]
 80036f2:	e007      	b.n	8003704 <HAL_DMA_IRQHandler+0xdcc>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 020e 	bic.w	r2, r2, #14
 8003702:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003708:	f003 031f 	and.w	r3, r3, #31
 800370c:	2201      	movs	r2, #1
 800370e:	409a      	lsls	r2, r3
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800372e:	2b00      	cmp	r3, #0
 8003730:	d009      	beq.n	8003746 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	4798      	blx	r3
 800373a:	e004      	b.n	8003746 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800373c:	bf00      	nop
 800373e:	e002      	b.n	8003746 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003740:	bf00      	nop
 8003742:	e000      	b.n	8003746 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003744:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003746:	3728      	adds	r7, #40	; 0x28
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40020010 	.word	0x40020010
 8003750:	40020028 	.word	0x40020028
 8003754:	40020040 	.word	0x40020040
 8003758:	40020058 	.word	0x40020058
 800375c:	40020070 	.word	0x40020070
 8003760:	40020088 	.word	0x40020088
 8003764:	400200a0 	.word	0x400200a0
 8003768:	400200b8 	.word	0x400200b8
 800376c:	40020410 	.word	0x40020410
 8003770:	40020428 	.word	0x40020428
 8003774:	40020440 	.word	0x40020440
 8003778:	40020458 	.word	0x40020458
 800377c:	40020470 	.word	0x40020470
 8003780:	40020488 	.word	0x40020488
 8003784:	400204a0 	.word	0x400204a0
 8003788:	400204b8 	.word	0x400204b8

0800378c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800378c:	b480      	push	{r7}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
 8003798:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a7f      	ldr	r2, [pc, #508]	; (80039a8 <DMA_SetConfig+0x21c>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d072      	beq.n	8003896 <DMA_SetConfig+0x10a>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a7d      	ldr	r2, [pc, #500]	; (80039ac <DMA_SetConfig+0x220>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d06d      	beq.n	8003896 <DMA_SetConfig+0x10a>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a7c      	ldr	r2, [pc, #496]	; (80039b0 <DMA_SetConfig+0x224>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d068      	beq.n	8003896 <DMA_SetConfig+0x10a>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a7a      	ldr	r2, [pc, #488]	; (80039b4 <DMA_SetConfig+0x228>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d063      	beq.n	8003896 <DMA_SetConfig+0x10a>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a79      	ldr	r2, [pc, #484]	; (80039b8 <DMA_SetConfig+0x22c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d05e      	beq.n	8003896 <DMA_SetConfig+0x10a>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a77      	ldr	r2, [pc, #476]	; (80039bc <DMA_SetConfig+0x230>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d059      	beq.n	8003896 <DMA_SetConfig+0x10a>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a76      	ldr	r2, [pc, #472]	; (80039c0 <DMA_SetConfig+0x234>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d054      	beq.n	8003896 <DMA_SetConfig+0x10a>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a74      	ldr	r2, [pc, #464]	; (80039c4 <DMA_SetConfig+0x238>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d04f      	beq.n	8003896 <DMA_SetConfig+0x10a>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a73      	ldr	r2, [pc, #460]	; (80039c8 <DMA_SetConfig+0x23c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d04a      	beq.n	8003896 <DMA_SetConfig+0x10a>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a71      	ldr	r2, [pc, #452]	; (80039cc <DMA_SetConfig+0x240>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d045      	beq.n	8003896 <DMA_SetConfig+0x10a>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a70      	ldr	r2, [pc, #448]	; (80039d0 <DMA_SetConfig+0x244>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d040      	beq.n	8003896 <DMA_SetConfig+0x10a>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a6e      	ldr	r2, [pc, #440]	; (80039d4 <DMA_SetConfig+0x248>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d03b      	beq.n	8003896 <DMA_SetConfig+0x10a>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a6d      	ldr	r2, [pc, #436]	; (80039d8 <DMA_SetConfig+0x24c>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d036      	beq.n	8003896 <DMA_SetConfig+0x10a>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a6b      	ldr	r2, [pc, #428]	; (80039dc <DMA_SetConfig+0x250>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d031      	beq.n	8003896 <DMA_SetConfig+0x10a>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a6a      	ldr	r2, [pc, #424]	; (80039e0 <DMA_SetConfig+0x254>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d02c      	beq.n	8003896 <DMA_SetConfig+0x10a>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a68      	ldr	r2, [pc, #416]	; (80039e4 <DMA_SetConfig+0x258>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d027      	beq.n	8003896 <DMA_SetConfig+0x10a>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a67      	ldr	r2, [pc, #412]	; (80039e8 <DMA_SetConfig+0x25c>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d022      	beq.n	8003896 <DMA_SetConfig+0x10a>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a65      	ldr	r2, [pc, #404]	; (80039ec <DMA_SetConfig+0x260>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d01d      	beq.n	8003896 <DMA_SetConfig+0x10a>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a64      	ldr	r2, [pc, #400]	; (80039f0 <DMA_SetConfig+0x264>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d018      	beq.n	8003896 <DMA_SetConfig+0x10a>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a62      	ldr	r2, [pc, #392]	; (80039f4 <DMA_SetConfig+0x268>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d013      	beq.n	8003896 <DMA_SetConfig+0x10a>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a61      	ldr	r2, [pc, #388]	; (80039f8 <DMA_SetConfig+0x26c>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d00e      	beq.n	8003896 <DMA_SetConfig+0x10a>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a5f      	ldr	r2, [pc, #380]	; (80039fc <DMA_SetConfig+0x270>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d009      	beq.n	8003896 <DMA_SetConfig+0x10a>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a5e      	ldr	r2, [pc, #376]	; (8003a00 <DMA_SetConfig+0x274>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d004      	beq.n	8003896 <DMA_SetConfig+0x10a>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a5c      	ldr	r2, [pc, #368]	; (8003a04 <DMA_SetConfig+0x278>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d101      	bne.n	800389a <DMA_SetConfig+0x10e>
 8003896:	2301      	movs	r3, #1
 8003898:	e000      	b.n	800389c <DMA_SetConfig+0x110>
 800389a:	2300      	movs	r3, #0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00d      	beq.n	80038bc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80038a8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d004      	beq.n	80038bc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80038ba:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a39      	ldr	r2, [pc, #228]	; (80039a8 <DMA_SetConfig+0x21c>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d04a      	beq.n	800395c <DMA_SetConfig+0x1d0>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a38      	ldr	r2, [pc, #224]	; (80039ac <DMA_SetConfig+0x220>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d045      	beq.n	800395c <DMA_SetConfig+0x1d0>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a36      	ldr	r2, [pc, #216]	; (80039b0 <DMA_SetConfig+0x224>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d040      	beq.n	800395c <DMA_SetConfig+0x1d0>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a35      	ldr	r2, [pc, #212]	; (80039b4 <DMA_SetConfig+0x228>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d03b      	beq.n	800395c <DMA_SetConfig+0x1d0>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a33      	ldr	r2, [pc, #204]	; (80039b8 <DMA_SetConfig+0x22c>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d036      	beq.n	800395c <DMA_SetConfig+0x1d0>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a32      	ldr	r2, [pc, #200]	; (80039bc <DMA_SetConfig+0x230>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d031      	beq.n	800395c <DMA_SetConfig+0x1d0>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a30      	ldr	r2, [pc, #192]	; (80039c0 <DMA_SetConfig+0x234>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d02c      	beq.n	800395c <DMA_SetConfig+0x1d0>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a2f      	ldr	r2, [pc, #188]	; (80039c4 <DMA_SetConfig+0x238>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d027      	beq.n	800395c <DMA_SetConfig+0x1d0>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a2d      	ldr	r2, [pc, #180]	; (80039c8 <DMA_SetConfig+0x23c>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d022      	beq.n	800395c <DMA_SetConfig+0x1d0>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a2c      	ldr	r2, [pc, #176]	; (80039cc <DMA_SetConfig+0x240>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d01d      	beq.n	800395c <DMA_SetConfig+0x1d0>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a2a      	ldr	r2, [pc, #168]	; (80039d0 <DMA_SetConfig+0x244>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d018      	beq.n	800395c <DMA_SetConfig+0x1d0>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a29      	ldr	r2, [pc, #164]	; (80039d4 <DMA_SetConfig+0x248>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d013      	beq.n	800395c <DMA_SetConfig+0x1d0>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a27      	ldr	r2, [pc, #156]	; (80039d8 <DMA_SetConfig+0x24c>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d00e      	beq.n	800395c <DMA_SetConfig+0x1d0>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a26      	ldr	r2, [pc, #152]	; (80039dc <DMA_SetConfig+0x250>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d009      	beq.n	800395c <DMA_SetConfig+0x1d0>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a24      	ldr	r2, [pc, #144]	; (80039e0 <DMA_SetConfig+0x254>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d004      	beq.n	800395c <DMA_SetConfig+0x1d0>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a23      	ldr	r2, [pc, #140]	; (80039e4 <DMA_SetConfig+0x258>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d101      	bne.n	8003960 <DMA_SetConfig+0x1d4>
 800395c:	2301      	movs	r3, #1
 800395e:	e000      	b.n	8003962 <DMA_SetConfig+0x1d6>
 8003960:	2300      	movs	r3, #0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d059      	beq.n	8003a1a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800396a:	f003 031f 	and.w	r3, r3, #31
 800396e:	223f      	movs	r2, #63	; 0x3f
 8003970:	409a      	lsls	r2, r3
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003984:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	683a      	ldr	r2, [r7, #0]
 800398c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	2b40      	cmp	r3, #64	; 0x40
 8003994:	d138      	bne.n	8003a08 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80039a6:	e086      	b.n	8003ab6 <DMA_SetConfig+0x32a>
 80039a8:	40020010 	.word	0x40020010
 80039ac:	40020028 	.word	0x40020028
 80039b0:	40020040 	.word	0x40020040
 80039b4:	40020058 	.word	0x40020058
 80039b8:	40020070 	.word	0x40020070
 80039bc:	40020088 	.word	0x40020088
 80039c0:	400200a0 	.word	0x400200a0
 80039c4:	400200b8 	.word	0x400200b8
 80039c8:	40020410 	.word	0x40020410
 80039cc:	40020428 	.word	0x40020428
 80039d0:	40020440 	.word	0x40020440
 80039d4:	40020458 	.word	0x40020458
 80039d8:	40020470 	.word	0x40020470
 80039dc:	40020488 	.word	0x40020488
 80039e0:	400204a0 	.word	0x400204a0
 80039e4:	400204b8 	.word	0x400204b8
 80039e8:	58025408 	.word	0x58025408
 80039ec:	5802541c 	.word	0x5802541c
 80039f0:	58025430 	.word	0x58025430
 80039f4:	58025444 	.word	0x58025444
 80039f8:	58025458 	.word	0x58025458
 80039fc:	5802546c 	.word	0x5802546c
 8003a00:	58025480 	.word	0x58025480
 8003a04:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68ba      	ldr	r2, [r7, #8]
 8003a0e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	60da      	str	r2, [r3, #12]
}
 8003a18:	e04d      	b.n	8003ab6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a29      	ldr	r2, [pc, #164]	; (8003ac4 <DMA_SetConfig+0x338>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d022      	beq.n	8003a6a <DMA_SetConfig+0x2de>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a27      	ldr	r2, [pc, #156]	; (8003ac8 <DMA_SetConfig+0x33c>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d01d      	beq.n	8003a6a <DMA_SetConfig+0x2de>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a26      	ldr	r2, [pc, #152]	; (8003acc <DMA_SetConfig+0x340>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d018      	beq.n	8003a6a <DMA_SetConfig+0x2de>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a24      	ldr	r2, [pc, #144]	; (8003ad0 <DMA_SetConfig+0x344>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d013      	beq.n	8003a6a <DMA_SetConfig+0x2de>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a23      	ldr	r2, [pc, #140]	; (8003ad4 <DMA_SetConfig+0x348>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d00e      	beq.n	8003a6a <DMA_SetConfig+0x2de>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a21      	ldr	r2, [pc, #132]	; (8003ad8 <DMA_SetConfig+0x34c>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d009      	beq.n	8003a6a <DMA_SetConfig+0x2de>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a20      	ldr	r2, [pc, #128]	; (8003adc <DMA_SetConfig+0x350>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d004      	beq.n	8003a6a <DMA_SetConfig+0x2de>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a1e      	ldr	r2, [pc, #120]	; (8003ae0 <DMA_SetConfig+0x354>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d101      	bne.n	8003a6e <DMA_SetConfig+0x2e2>
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e000      	b.n	8003a70 <DMA_SetConfig+0x2e4>
 8003a6e:	2300      	movs	r3, #0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d020      	beq.n	8003ab6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a78:	f003 031f 	and.w	r3, r3, #31
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	409a      	lsls	r2, r3
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	2b40      	cmp	r3, #64	; 0x40
 8003a92:	d108      	bne.n	8003aa6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68ba      	ldr	r2, [r7, #8]
 8003aa2:	60da      	str	r2, [r3, #12]
}
 8003aa4:	e007      	b.n	8003ab6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	60da      	str	r2, [r3, #12]
}
 8003ab6:	bf00      	nop
 8003ab8:	371c      	adds	r7, #28
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	58025408 	.word	0x58025408
 8003ac8:	5802541c 	.word	0x5802541c
 8003acc:	58025430 	.word	0x58025430
 8003ad0:	58025444 	.word	0x58025444
 8003ad4:	58025458 	.word	0x58025458
 8003ad8:	5802546c 	.word	0x5802546c
 8003adc:	58025480 	.word	0x58025480
 8003ae0:	58025494 	.word	0x58025494

08003ae4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a42      	ldr	r2, [pc, #264]	; (8003bfc <DMA_CalcBaseAndBitshift+0x118>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d04a      	beq.n	8003b8c <DMA_CalcBaseAndBitshift+0xa8>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a41      	ldr	r2, [pc, #260]	; (8003c00 <DMA_CalcBaseAndBitshift+0x11c>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d045      	beq.n	8003b8c <DMA_CalcBaseAndBitshift+0xa8>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a3f      	ldr	r2, [pc, #252]	; (8003c04 <DMA_CalcBaseAndBitshift+0x120>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d040      	beq.n	8003b8c <DMA_CalcBaseAndBitshift+0xa8>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a3e      	ldr	r2, [pc, #248]	; (8003c08 <DMA_CalcBaseAndBitshift+0x124>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d03b      	beq.n	8003b8c <DMA_CalcBaseAndBitshift+0xa8>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a3c      	ldr	r2, [pc, #240]	; (8003c0c <DMA_CalcBaseAndBitshift+0x128>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d036      	beq.n	8003b8c <DMA_CalcBaseAndBitshift+0xa8>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a3b      	ldr	r2, [pc, #236]	; (8003c10 <DMA_CalcBaseAndBitshift+0x12c>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d031      	beq.n	8003b8c <DMA_CalcBaseAndBitshift+0xa8>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a39      	ldr	r2, [pc, #228]	; (8003c14 <DMA_CalcBaseAndBitshift+0x130>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d02c      	beq.n	8003b8c <DMA_CalcBaseAndBitshift+0xa8>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a38      	ldr	r2, [pc, #224]	; (8003c18 <DMA_CalcBaseAndBitshift+0x134>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d027      	beq.n	8003b8c <DMA_CalcBaseAndBitshift+0xa8>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a36      	ldr	r2, [pc, #216]	; (8003c1c <DMA_CalcBaseAndBitshift+0x138>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d022      	beq.n	8003b8c <DMA_CalcBaseAndBitshift+0xa8>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a35      	ldr	r2, [pc, #212]	; (8003c20 <DMA_CalcBaseAndBitshift+0x13c>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d01d      	beq.n	8003b8c <DMA_CalcBaseAndBitshift+0xa8>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a33      	ldr	r2, [pc, #204]	; (8003c24 <DMA_CalcBaseAndBitshift+0x140>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d018      	beq.n	8003b8c <DMA_CalcBaseAndBitshift+0xa8>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a32      	ldr	r2, [pc, #200]	; (8003c28 <DMA_CalcBaseAndBitshift+0x144>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d013      	beq.n	8003b8c <DMA_CalcBaseAndBitshift+0xa8>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a30      	ldr	r2, [pc, #192]	; (8003c2c <DMA_CalcBaseAndBitshift+0x148>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d00e      	beq.n	8003b8c <DMA_CalcBaseAndBitshift+0xa8>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a2f      	ldr	r2, [pc, #188]	; (8003c30 <DMA_CalcBaseAndBitshift+0x14c>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d009      	beq.n	8003b8c <DMA_CalcBaseAndBitshift+0xa8>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a2d      	ldr	r2, [pc, #180]	; (8003c34 <DMA_CalcBaseAndBitshift+0x150>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d004      	beq.n	8003b8c <DMA_CalcBaseAndBitshift+0xa8>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a2c      	ldr	r2, [pc, #176]	; (8003c38 <DMA_CalcBaseAndBitshift+0x154>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d101      	bne.n	8003b90 <DMA_CalcBaseAndBitshift+0xac>
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e000      	b.n	8003b92 <DMA_CalcBaseAndBitshift+0xae>
 8003b90:	2300      	movs	r3, #0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d024      	beq.n	8003be0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	3b10      	subs	r3, #16
 8003b9e:	4a27      	ldr	r2, [pc, #156]	; (8003c3c <DMA_CalcBaseAndBitshift+0x158>)
 8003ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba4:	091b      	lsrs	r3, r3, #4
 8003ba6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	4a24      	ldr	r2, [pc, #144]	; (8003c40 <DMA_CalcBaseAndBitshift+0x15c>)
 8003bb0:	5cd3      	ldrb	r3, [r2, r3]
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2b03      	cmp	r3, #3
 8003bbc:	d908      	bls.n	8003bd0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	4b1f      	ldr	r3, [pc, #124]	; (8003c44 <DMA_CalcBaseAndBitshift+0x160>)
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	1d1a      	adds	r2, r3, #4
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	659a      	str	r2, [r3, #88]	; 0x58
 8003bce:	e00d      	b.n	8003bec <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	4b1b      	ldr	r3, [pc, #108]	; (8003c44 <DMA_CalcBaseAndBitshift+0x160>)
 8003bd8:	4013      	ands	r3, r2
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6593      	str	r3, [r2, #88]	; 0x58
 8003bde:	e005      	b.n	8003bec <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	40020010 	.word	0x40020010
 8003c00:	40020028 	.word	0x40020028
 8003c04:	40020040 	.word	0x40020040
 8003c08:	40020058 	.word	0x40020058
 8003c0c:	40020070 	.word	0x40020070
 8003c10:	40020088 	.word	0x40020088
 8003c14:	400200a0 	.word	0x400200a0
 8003c18:	400200b8 	.word	0x400200b8
 8003c1c:	40020410 	.word	0x40020410
 8003c20:	40020428 	.word	0x40020428
 8003c24:	40020440 	.word	0x40020440
 8003c28:	40020458 	.word	0x40020458
 8003c2c:	40020470 	.word	0x40020470
 8003c30:	40020488 	.word	0x40020488
 8003c34:	400204a0 	.word	0x400204a0
 8003c38:	400204b8 	.word	0x400204b8
 8003c3c:	aaaaaaab 	.word	0xaaaaaaab
 8003c40:	0800b908 	.word	0x0800b908
 8003c44:	fffffc00 	.word	0xfffffc00

08003c48 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c50:	2300      	movs	r3, #0
 8003c52:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d120      	bne.n	8003c9e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c60:	2b03      	cmp	r3, #3
 8003c62:	d858      	bhi.n	8003d16 <DMA_CheckFifoParam+0xce>
 8003c64:	a201      	add	r2, pc, #4	; (adr r2, 8003c6c <DMA_CheckFifoParam+0x24>)
 8003c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6a:	bf00      	nop
 8003c6c:	08003c7d 	.word	0x08003c7d
 8003c70:	08003c8f 	.word	0x08003c8f
 8003c74:	08003c7d 	.word	0x08003c7d
 8003c78:	08003d17 	.word	0x08003d17
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d048      	beq.n	8003d1a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c8c:	e045      	b.n	8003d1a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c92:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c96:	d142      	bne.n	8003d1e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c9c:	e03f      	b.n	8003d1e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ca6:	d123      	bne.n	8003cf0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cac:	2b03      	cmp	r3, #3
 8003cae:	d838      	bhi.n	8003d22 <DMA_CheckFifoParam+0xda>
 8003cb0:	a201      	add	r2, pc, #4	; (adr r2, 8003cb8 <DMA_CheckFifoParam+0x70>)
 8003cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb6:	bf00      	nop
 8003cb8:	08003cc9 	.word	0x08003cc9
 8003cbc:	08003ccf 	.word	0x08003ccf
 8003cc0:	08003cc9 	.word	0x08003cc9
 8003cc4:	08003ce1 	.word	0x08003ce1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	73fb      	strb	r3, [r7, #15]
        break;
 8003ccc:	e030      	b.n	8003d30 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d025      	beq.n	8003d26 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003cde:	e022      	b.n	8003d26 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ce8:	d11f      	bne.n	8003d2a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003cee:	e01c      	b.n	8003d2a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d902      	bls.n	8003cfe <DMA_CheckFifoParam+0xb6>
 8003cf8:	2b03      	cmp	r3, #3
 8003cfa:	d003      	beq.n	8003d04 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003cfc:	e018      	b.n	8003d30 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	73fb      	strb	r3, [r7, #15]
        break;
 8003d02:	e015      	b.n	8003d30 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00e      	beq.n	8003d2e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	73fb      	strb	r3, [r7, #15]
    break;
 8003d14:	e00b      	b.n	8003d2e <DMA_CheckFifoParam+0xe6>
        break;
 8003d16:	bf00      	nop
 8003d18:	e00a      	b.n	8003d30 <DMA_CheckFifoParam+0xe8>
        break;
 8003d1a:	bf00      	nop
 8003d1c:	e008      	b.n	8003d30 <DMA_CheckFifoParam+0xe8>
        break;
 8003d1e:	bf00      	nop
 8003d20:	e006      	b.n	8003d30 <DMA_CheckFifoParam+0xe8>
        break;
 8003d22:	bf00      	nop
 8003d24:	e004      	b.n	8003d30 <DMA_CheckFifoParam+0xe8>
        break;
 8003d26:	bf00      	nop
 8003d28:	e002      	b.n	8003d30 <DMA_CheckFifoParam+0xe8>
        break;
 8003d2a:	bf00      	nop
 8003d2c:	e000      	b.n	8003d30 <DMA_CheckFifoParam+0xe8>
    break;
 8003d2e:	bf00      	nop
    }
  }

  return status;
 8003d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop

08003d40 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a38      	ldr	r2, [pc, #224]	; (8003e34 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d022      	beq.n	8003d9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a36      	ldr	r2, [pc, #216]	; (8003e38 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d01d      	beq.n	8003d9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a35      	ldr	r2, [pc, #212]	; (8003e3c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d018      	beq.n	8003d9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a33      	ldr	r2, [pc, #204]	; (8003e40 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d013      	beq.n	8003d9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a32      	ldr	r2, [pc, #200]	; (8003e44 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d00e      	beq.n	8003d9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a30      	ldr	r2, [pc, #192]	; (8003e48 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d009      	beq.n	8003d9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a2f      	ldr	r2, [pc, #188]	; (8003e4c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d004      	beq.n	8003d9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a2d      	ldr	r2, [pc, #180]	; (8003e50 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d101      	bne.n	8003da2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e000      	b.n	8003da4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003da2:	2300      	movs	r3, #0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d01a      	beq.n	8003dde <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	3b08      	subs	r3, #8
 8003db0:	4a28      	ldr	r2, [pc, #160]	; (8003e54 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003db2:	fba2 2303 	umull	r2, r3, r2, r3
 8003db6:	091b      	lsrs	r3, r3, #4
 8003db8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	4b26      	ldr	r3, [pc, #152]	; (8003e58 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003dbe:	4413      	add	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a24      	ldr	r2, [pc, #144]	; (8003e5c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003dcc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f003 031f 	and.w	r3, r3, #31
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	409a      	lsls	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003ddc:	e024      	b.n	8003e28 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	3b10      	subs	r3, #16
 8003de6:	4a1e      	ldr	r2, [pc, #120]	; (8003e60 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003de8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dec:	091b      	lsrs	r3, r3, #4
 8003dee:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	4a1c      	ldr	r2, [pc, #112]	; (8003e64 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d806      	bhi.n	8003e06 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	4a1b      	ldr	r2, [pc, #108]	; (8003e68 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d902      	bls.n	8003e06 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	3308      	adds	r3, #8
 8003e04:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	4b18      	ldr	r3, [pc, #96]	; (8003e6c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003e0a:	4413      	add	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	461a      	mov	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a16      	ldr	r2, [pc, #88]	; (8003e70 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003e18:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f003 031f 	and.w	r3, r3, #31
 8003e20:	2201      	movs	r2, #1
 8003e22:	409a      	lsls	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003e28:	bf00      	nop
 8003e2a:	3714      	adds	r7, #20
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr
 8003e34:	58025408 	.word	0x58025408
 8003e38:	5802541c 	.word	0x5802541c
 8003e3c:	58025430 	.word	0x58025430
 8003e40:	58025444 	.word	0x58025444
 8003e44:	58025458 	.word	0x58025458
 8003e48:	5802546c 	.word	0x5802546c
 8003e4c:	58025480 	.word	0x58025480
 8003e50:	58025494 	.word	0x58025494
 8003e54:	cccccccd 	.word	0xcccccccd
 8003e58:	16009600 	.word	0x16009600
 8003e5c:	58025880 	.word	0x58025880
 8003e60:	aaaaaaab 	.word	0xaaaaaaab
 8003e64:	400204b8 	.word	0x400204b8
 8003e68:	4002040f 	.word	0x4002040f
 8003e6c:	10008200 	.word	0x10008200
 8003e70:	40020880 	.word	0x40020880

08003e74 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d04a      	beq.n	8003f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d847      	bhi.n	8003f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a25      	ldr	r2, [pc, #148]	; (8003f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d022      	beq.n	8003ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a24      	ldr	r2, [pc, #144]	; (8003f30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d01d      	beq.n	8003ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a22      	ldr	r2, [pc, #136]	; (8003f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d018      	beq.n	8003ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a21      	ldr	r2, [pc, #132]	; (8003f38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d013      	beq.n	8003ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a1f      	ldr	r2, [pc, #124]	; (8003f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d00e      	beq.n	8003ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a1e      	ldr	r2, [pc, #120]	; (8003f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d009      	beq.n	8003ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a1c      	ldr	r2, [pc, #112]	; (8003f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d004      	beq.n	8003ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a1b      	ldr	r2, [pc, #108]	; (8003f48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d101      	bne.n	8003ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e000      	b.n	8003ee6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00a      	beq.n	8003f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	4b17      	ldr	r3, [pc, #92]	; (8003f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003eee:	4413      	add	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a15      	ldr	r2, [pc, #84]	; (8003f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003efc:	671a      	str	r2, [r3, #112]	; 0x70
 8003efe:	e009      	b.n	8003f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	4b14      	ldr	r3, [pc, #80]	; (8003f54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003f04:	4413      	add	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	461a      	mov	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a11      	ldr	r2, [pc, #68]	; (8003f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003f12:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	3b01      	subs	r3, #1
 8003f18:	2201      	movs	r2, #1
 8003f1a:	409a      	lsls	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003f20:	bf00      	nop
 8003f22:	3714      	adds	r7, #20
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr
 8003f2c:	58025408 	.word	0x58025408
 8003f30:	5802541c 	.word	0x5802541c
 8003f34:	58025430 	.word	0x58025430
 8003f38:	58025444 	.word	0x58025444
 8003f3c:	58025458 	.word	0x58025458
 8003f40:	5802546c 	.word	0x5802546c
 8003f44:	58025480 	.word	0x58025480
 8003f48:	58025494 	.word	0x58025494
 8003f4c:	1600963f 	.word	0x1600963f
 8003f50:	58025940 	.word	0x58025940
 8003f54:	1000823f 	.word	0x1000823f
 8003f58:	40020940 	.word	0x40020940

08003f5c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e0cf      	b.n	800410e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d106      	bne.n	8003f86 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2223      	movs	r2, #35	; 0x23
 8003f7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f7fc ffad 	bl	8000ee0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f86:	4b64      	ldr	r3, [pc, #400]	; (8004118 <HAL_ETH_Init+0x1bc>)
 8003f88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f8c:	4a62      	ldr	r2, [pc, #392]	; (8004118 <HAL_ETH_Init+0x1bc>)
 8003f8e:	f043 0302 	orr.w	r3, r3, #2
 8003f92:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003f96:	4b60      	ldr	r3, [pc, #384]	; (8004118 <HAL_ETH_Init+0x1bc>)
 8003f98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	60bb      	str	r3, [r7, #8]
 8003fa2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	7a1b      	ldrb	r3, [r3, #8]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d103      	bne.n	8003fb4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003fac:	2000      	movs	r0, #0
 8003fae:	f7fd fb93 	bl	80016d8 <HAL_SYSCFG_ETHInterfaceSelect>
 8003fb2:	e003      	b.n	8003fbc <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003fb4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003fb8:	f7fd fb8e 	bl	80016d8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003fbc:	4b57      	ldr	r3, [pc, #348]	; (800411c <HAL_ETH_Init+0x1c0>)
 8003fbe:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	6812      	ldr	r2, [r2, #0]
 8003fce:	f043 0301 	orr.w	r3, r3, #1
 8003fd2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003fd6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fd8:	f7fd fb42 	bl	8001660 <HAL_GetTick>
 8003fdc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003fde:	e011      	b.n	8004004 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003fe0:	f7fd fb3e 	bl	8001660 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003fee:	d909      	bls.n	8004004 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2204      	movs	r2, #4
 8003ff4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	22e0      	movs	r2, #224	; 0xe0
 8003ffc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e084      	b.n	800410e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1e4      	bne.n	8003fe0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f886 	bl	8004128 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800401c:	f001 fea8 	bl	8005d70 <HAL_RCC_GetHCLKFreq>
 8004020:	4603      	mov	r3, r0
 8004022:	4a3f      	ldr	r2, [pc, #252]	; (8004120 <HAL_ETH_Init+0x1c4>)
 8004024:	fba2 2303 	umull	r2, r3, r2, r3
 8004028:	0c9a      	lsrs	r2, r3, #18
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	3a01      	subs	r2, #1
 8004030:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 fa71 	bl	800451c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004042:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004046:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	6812      	ldr	r2, [r2, #0]
 800404e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004052:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004056:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	f003 0303 	and.w	r3, r3, #3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d009      	beq.n	800407a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	22e0      	movs	r2, #224	; 0xe0
 8004072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e049      	b.n	800410e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004082:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004086:	4b27      	ldr	r3, [pc, #156]	; (8004124 <HAL_ETH_Init+0x1c8>)
 8004088:	4013      	ands	r3, r2
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6952      	ldr	r2, [r2, #20]
 800408e:	0051      	lsls	r1, r2, #1
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	6812      	ldr	r2, [r2, #0]
 8004094:	430b      	orrs	r3, r1
 8004096:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800409a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 fad9 	bl	8004656 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 fb1f 	bl	80046e8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	3305      	adds	r3, #5
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	021a      	lsls	r2, r3, #8
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	3304      	adds	r3, #4
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	4619      	mov	r1, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	3303      	adds	r3, #3
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	061a      	lsls	r2, r3, #24
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	3302      	adds	r3, #2
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	041b      	lsls	r3, r3, #16
 80040dc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	3301      	adds	r3, #1
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80040e8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80040f6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80040f8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2210      	movs	r2, #16
 8004108:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	58024400 	.word	0x58024400
 800411c:	58000400 	.word	0x58000400
 8004120:	431bde83 	.word	0x431bde83
 8004124:	ffff8001 	.word	0xffff8001

08004128 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004138:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004140:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004142:	f001 fe15 	bl	8005d70 <HAL_RCC_GetHCLKFreq>
 8004146:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	4a1e      	ldr	r2, [pc, #120]	; (80041c4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d908      	bls.n	8004162 <HAL_ETH_SetMDIOClockRange+0x3a>
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	4a1d      	ldr	r2, [pc, #116]	; (80041c8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d804      	bhi.n	8004162 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800415e:	60fb      	str	r3, [r7, #12]
 8004160:	e027      	b.n	80041b2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	4a18      	ldr	r2, [pc, #96]	; (80041c8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d908      	bls.n	800417c <HAL_ETH_SetMDIOClockRange+0x54>
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	4a17      	ldr	r2, [pc, #92]	; (80041cc <HAL_ETH_SetMDIOClockRange+0xa4>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d204      	bcs.n	800417c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004178:	60fb      	str	r3, [r7, #12]
 800417a:	e01a      	b.n	80041b2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	4a13      	ldr	r2, [pc, #76]	; (80041cc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d303      	bcc.n	800418c <HAL_ETH_SetMDIOClockRange+0x64>
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	4a12      	ldr	r2, [pc, #72]	; (80041d0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d911      	bls.n	80041b0 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	4a10      	ldr	r2, [pc, #64]	; (80041d0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d908      	bls.n	80041a6 <HAL_ETH_SetMDIOClockRange+0x7e>
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	4a0f      	ldr	r2, [pc, #60]	; (80041d4 <HAL_ETH_SetMDIOClockRange+0xac>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d804      	bhi.n	80041a6 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	e005      	b.n	80041b2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041ac:	60fb      	str	r3, [r7, #12]
 80041ae:	e000      	b.n	80041b2 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80041b0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80041bc:	bf00      	nop
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	01312cff 	.word	0x01312cff
 80041c8:	02160ebf 	.word	0x02160ebf
 80041cc:	03938700 	.word	0x03938700
 80041d0:	05f5e0ff 	.word	0x05f5e0ff
 80041d4:	08f0d17f 	.word	0x08f0d17f

080041d8 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80041ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	791b      	ldrb	r3, [r3, #4]
 80041f0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80041f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	7b1b      	ldrb	r3, [r3, #12]
 80041f8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80041fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	7b5b      	ldrb	r3, [r3, #13]
 8004200:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004202:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	7b9b      	ldrb	r3, [r3, #14]
 8004208:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800420a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	7bdb      	ldrb	r3, [r3, #15]
 8004210:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004212:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	7c12      	ldrb	r2, [r2, #16]
 8004218:	2a00      	cmp	r2, #0
 800421a:	d102      	bne.n	8004222 <ETH_SetMACConfig+0x4a>
 800421c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004220:	e000      	b.n	8004224 <ETH_SetMACConfig+0x4c>
 8004222:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004224:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	7c52      	ldrb	r2, [r2, #17]
 800422a:	2a00      	cmp	r2, #0
 800422c:	d102      	bne.n	8004234 <ETH_SetMACConfig+0x5c>
 800422e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004232:	e000      	b.n	8004236 <ETH_SetMACConfig+0x5e>
 8004234:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004236:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	7c9b      	ldrb	r3, [r3, #18]
 800423c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800423e:	431a      	orrs	r2, r3
               macconf->Speed |
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004244:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800424a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	7f1b      	ldrb	r3, [r3, #28]
 8004250:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004252:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	7f5b      	ldrb	r3, [r3, #29]
 8004258:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800425a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	7f92      	ldrb	r2, [r2, #30]
 8004260:	2a00      	cmp	r2, #0
 8004262:	d102      	bne.n	800426a <ETH_SetMACConfig+0x92>
 8004264:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004268:	e000      	b.n	800426c <ETH_SetMACConfig+0x94>
 800426a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800426c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	7fdb      	ldrb	r3, [r3, #31]
 8004272:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004274:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	f892 2020 	ldrb.w	r2, [r2, #32]
 800427c:	2a00      	cmp	r2, #0
 800427e:	d102      	bne.n	8004286 <ETH_SetMACConfig+0xae>
 8004280:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004284:	e000      	b.n	8004288 <ETH_SetMACConfig+0xb0>
 8004286:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004288:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800428e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004296:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004298:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800429e:	4313      	orrs	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	4b56      	ldr	r3, [pc, #344]	; (8004404 <ETH_SetMACConfig+0x22c>)
 80042aa:	4013      	ands	r3, r2
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6812      	ldr	r2, [r2, #0]
 80042b0:	68f9      	ldr	r1, [r7, #12]
 80042b2:	430b      	orrs	r3, r1
 80042b4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ba:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80042c2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80042c4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80042cc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80042ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80042d6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80042d8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80042da:	683a      	ldr	r2, [r7, #0]
 80042dc:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80042e0:	2a00      	cmp	r2, #0
 80042e2:	d102      	bne.n	80042ea <ETH_SetMACConfig+0x112>
 80042e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80042e8:	e000      	b.n	80042ec <ETH_SetMACConfig+0x114>
 80042ea:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80042ec:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	4b42      	ldr	r3, [pc, #264]	; (8004408 <ETH_SetMACConfig+0x230>)
 80042fe:	4013      	ands	r3, r2
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6812      	ldr	r2, [r2, #0]
 8004304:	68f9      	ldr	r1, [r7, #12]
 8004306:	430b      	orrs	r3, r1
 8004308:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004310:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004316:	4313      	orrs	r3, r2
 8004318:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68da      	ldr	r2, [r3, #12]
 8004320:	4b3a      	ldr	r3, [pc, #232]	; (800440c <ETH_SetMACConfig+0x234>)
 8004322:	4013      	ands	r3, r2
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	6812      	ldr	r2, [r2, #0]
 8004328:	68f9      	ldr	r1, [r7, #12]
 800432a:	430b      	orrs	r3, r1
 800432c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004334:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800433a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004342:	2a00      	cmp	r2, #0
 8004344:	d101      	bne.n	800434a <ETH_SetMACConfig+0x172>
 8004346:	2280      	movs	r2, #128	; 0x80
 8004348:	e000      	b.n	800434c <ETH_SetMACConfig+0x174>
 800434a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800434c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004352:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004354:	4313      	orrs	r3, r2
 8004356:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800435e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004362:	4013      	ands	r3, r2
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	6812      	ldr	r2, [r2, #0]
 8004368:	68f9      	ldr	r1, [r7, #12]
 800436a:	430b      	orrs	r3, r1
 800436c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004374:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800437c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800437e:	4313      	orrs	r3, r2
 8004380:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438a:	f023 0103 	bic.w	r1, r3, #3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	430a      	orrs	r2, r1
 8004396:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80043a2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80043be:	2a00      	cmp	r2, #0
 80043c0:	d101      	bne.n	80043c6 <ETH_SetMACConfig+0x1ee>
 80043c2:	2240      	movs	r2, #64	; 0x40
 80043c4:	e000      	b.n	80043c8 <ETH_SetMACConfig+0x1f0>
 80043c6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80043c8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80043d0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80043d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80043da:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80043dc:	4313      	orrs	r3, r2
 80043de:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80043e8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80043f8:	bf00      	nop
 80043fa:	3714      	adds	r7, #20
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	00048083 	.word	0x00048083
 8004408:	c0f88000 	.word	0xc0f88000
 800440c:	fffffef0 	.word	0xfffffef0

08004410 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	4b38      	ldr	r3, [pc, #224]	; (8004508 <ETH_SetDMAConfig+0xf8>)
 8004426:	4013      	ands	r3, r2
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	6811      	ldr	r1, [r2, #0]
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	6812      	ldr	r2, [r2, #0]
 8004430:	430b      	orrs	r3, r1
 8004432:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004436:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	791b      	ldrb	r3, [r3, #4]
 800443c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004442:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	7b1b      	ldrb	r3, [r3, #12]
 8004448:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800444a:	4313      	orrs	r3, r2
 800444c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	4b2c      	ldr	r3, [pc, #176]	; (800450c <ETH_SetDMAConfig+0xfc>)
 800445a:	4013      	ands	r3, r2
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	6812      	ldr	r2, [r2, #0]
 8004460:	68f9      	ldr	r1, [r7, #12]
 8004462:	430b      	orrs	r3, r1
 8004464:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004468:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	7b5b      	ldrb	r3, [r3, #13]
 800446e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004474:	4313      	orrs	r3, r2
 8004476:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004480:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8004484:	4b22      	ldr	r3, [pc, #136]	; (8004510 <ETH_SetDMAConfig+0x100>)
 8004486:	4013      	ands	r3, r2
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	6812      	ldr	r2, [r2, #0]
 800448c:	68f9      	ldr	r1, [r7, #12]
 800448e:	430b      	orrs	r3, r1
 8004490:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004494:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	7d1b      	ldrb	r3, [r3, #20]
 80044a0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80044a2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	7f5b      	ldrb	r3, [r3, #29]
 80044a8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80044aa:	4313      	orrs	r3, r2
 80044ac:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044b6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80044ba:	4b16      	ldr	r3, [pc, #88]	; (8004514 <ETH_SetDMAConfig+0x104>)
 80044bc:	4013      	ands	r3, r2
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	6812      	ldr	r2, [r2, #0]
 80044c2:	68f9      	ldr	r1, [r7, #12]
 80044c4:	430b      	orrs	r3, r1
 80044c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044ca:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	7f1b      	ldrb	r3, [r3, #28]
 80044d2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80044d8:	4313      	orrs	r3, r2
 80044da:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044e4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80044e8:	4b0b      	ldr	r3, [pc, #44]	; (8004518 <ETH_SetDMAConfig+0x108>)
 80044ea:	4013      	ands	r3, r2
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6812      	ldr	r2, [r2, #0]
 80044f0:	68f9      	ldr	r1, [r7, #12]
 80044f2:	430b      	orrs	r3, r1
 80044f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044f8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80044fc:	bf00      	nop
 80044fe:	3714      	adds	r7, #20
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	ffff87fd 	.word	0xffff87fd
 800450c:	ffff2ffe 	.word	0xffff2ffe
 8004510:	fffec000 	.word	0xfffec000
 8004514:	ffc0efef 	.word	0xffc0efef
 8004518:	7fc0ffff 	.word	0x7fc0ffff

0800451c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b0a4      	sub	sp, #144	; 0x90
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004524:	2301      	movs	r3, #1
 8004526:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800452a:	2300      	movs	r3, #0
 800452c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800452e:	2300      	movs	r3, #0
 8004530:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004534:	2300      	movs	r3, #0
 8004536:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800453a:	2301      	movs	r3, #1
 800453c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004540:	2301      	movs	r3, #1
 8004542:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004546:	2301      	movs	r3, #1
 8004548:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800454c:	2300      	movs	r3, #0
 800454e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004552:	2301      	movs	r3, #1
 8004554:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004558:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800455c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800455e:	2300      	movs	r3, #0
 8004560:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004564:	2300      	movs	r3, #0
 8004566:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004568:	2300      	movs	r3, #0
 800456a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800456e:	2300      	movs	r3, #0
 8004570:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004574:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004578:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800457a:	2300      	movs	r3, #0
 800457c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004580:	2300      	movs	r3, #0
 8004582:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004584:	2301      	movs	r3, #1
 8004586:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800458a:	2300      	movs	r3, #0
 800458c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004590:	2300      	movs	r3, #0
 8004592:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004596:	2300      	movs	r3, #0
 8004598:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800459a:	2300      	movs	r3, #0
 800459c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800459e:	2300      	movs	r3, #0
 80045a0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80045a2:	2300      	movs	r3, #0
 80045a4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80045a8:	2300      	movs	r3, #0
 80045aa:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80045ae:	2301      	movs	r3, #1
 80045b0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80045b4:	2320      	movs	r3, #32
 80045b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80045ba:	2301      	movs	r3, #1
 80045bc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80045c0:	2300      	movs	r3, #0
 80045c2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80045c6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80045ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80045cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80045d0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80045d2:	2300      	movs	r3, #0
 80045d4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80045d8:	2302      	movs	r3, #2
 80045da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80045de:	2300      	movs	r3, #0
 80045e0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80045e4:	2300      	movs	r3, #0
 80045e6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80045ea:	2300      	movs	r3, #0
 80045ec:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80045f0:	2301      	movs	r3, #1
 80045f2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80045f6:	2300      	movs	r3, #0
 80045f8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80045fa:	2301      	movs	r3, #1
 80045fc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004600:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004604:	4619      	mov	r1, r3
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7ff fde6 	bl	80041d8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800460c:	2301      	movs	r3, #1
 800460e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004610:	2301      	movs	r3, #1
 8004612:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004614:	2300      	movs	r3, #0
 8004616:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004618:	2300      	movs	r3, #0
 800461a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800461e:	2300      	movs	r3, #0
 8004620:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004622:	2300      	movs	r3, #0
 8004624:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004626:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800462a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800462c:	2300      	movs	r3, #0
 800462e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004630:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004634:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004636:	2300      	movs	r3, #0
 8004638:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800463c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004640:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004642:	f107 0308 	add.w	r3, r7, #8
 8004646:	4619      	mov	r1, r3
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f7ff fee1 	bl	8004410 <ETH_SetDMAConfig>
}
 800464e:	bf00      	nop
 8004650:	3790      	adds	r7, #144	; 0x90
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004656:	b480      	push	{r7}
 8004658:	b085      	sub	sp, #20
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800465e:	2300      	movs	r3, #0
 8004660:	60fb      	str	r3, [r7, #12]
 8004662:	e01d      	b.n	80046a0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68d9      	ldr	r1, [r3, #12]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	4613      	mov	r3, r2
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	4413      	add	r3, r2
 8004670:	00db      	lsls	r3, r3, #3
 8004672:	440b      	add	r3, r1
 8004674:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	2200      	movs	r2, #0
 8004680:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	2200      	movs	r2, #0
 8004686:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	2200      	movs	r2, #0
 800468c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800468e:	68b9      	ldr	r1, [r7, #8]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	3206      	adds	r2, #6
 8004696:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	3301      	adds	r3, #1
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2b03      	cmp	r3, #3
 80046a4:	d9de      	bls.n	8004664 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046b4:	461a      	mov	r2, r3
 80046b6:	2303      	movs	r3, #3
 80046b8:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68da      	ldr	r2, [r3, #12]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046c8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68da      	ldr	r2, [r3, #12]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046d8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80046dc:	bf00      	nop
 80046de:	3714      	adds	r7, #20
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80046f0:	2300      	movs	r3, #0
 80046f2:	60fb      	str	r3, [r7, #12]
 80046f4:	e023      	b.n	800473e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6919      	ldr	r1, [r3, #16]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	4613      	mov	r3, r2
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	4413      	add	r3, r2
 8004702:	00db      	lsls	r3, r3, #3
 8004704:	440b      	add	r3, r1
 8004706:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	2200      	movs	r2, #0
 800470c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	2200      	movs	r2, #0
 8004712:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	2200      	movs	r2, #0
 8004718:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	2200      	movs	r2, #0
 800471e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	2200      	movs	r2, #0
 8004724:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2200      	movs	r2, #0
 800472a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800472c:	68b9      	ldr	r1, [r7, #8]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	3212      	adds	r2, #18
 8004734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	3301      	adds	r3, #1
 800473c:	60fb      	str	r3, [r7, #12]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2b03      	cmp	r3, #3
 8004742:	d9d8      	bls.n	80046f6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800476a:	461a      	mov	r2, r3
 800476c:	2303      	movs	r3, #3
 800476e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	691a      	ldr	r2, [r3, #16]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800477e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004792:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8004796:	bf00      	nop
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
	...

080047a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b089      	sub	sp, #36	; 0x24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80047ae:	2300      	movs	r3, #0
 80047b0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80047b2:	4b89      	ldr	r3, [pc, #548]	; (80049d8 <HAL_GPIO_Init+0x234>)
 80047b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80047b6:	e194      	b.n	8004ae2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	2101      	movs	r1, #1
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	fa01 f303 	lsl.w	r3, r1, r3
 80047c4:	4013      	ands	r3, r2
 80047c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f000 8186 	beq.w	8004adc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f003 0303 	and.w	r3, r3, #3
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d005      	beq.n	80047e8 <HAL_GPIO_Init+0x44>
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f003 0303 	and.w	r3, r3, #3
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d130      	bne.n	800484a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	2203      	movs	r2, #3
 80047f4:	fa02 f303 	lsl.w	r3, r2, r3
 80047f8:	43db      	mvns	r3, r3
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	4013      	ands	r3, r2
 80047fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	68da      	ldr	r2, [r3, #12]
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	fa02 f303 	lsl.w	r3, r2, r3
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	4313      	orrs	r3, r2
 8004810:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800481e:	2201      	movs	r2, #1
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	fa02 f303 	lsl.w	r3, r2, r3
 8004826:	43db      	mvns	r3, r3
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	4013      	ands	r3, r2
 800482c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	091b      	lsrs	r3, r3, #4
 8004834:	f003 0201 	and.w	r2, r3, #1
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	fa02 f303 	lsl.w	r3, r2, r3
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	4313      	orrs	r3, r2
 8004842:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	69ba      	ldr	r2, [r7, #24]
 8004848:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	2b03      	cmp	r3, #3
 8004854:	d017      	beq.n	8004886 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	2203      	movs	r2, #3
 8004862:	fa02 f303 	lsl.w	r3, r2, r3
 8004866:	43db      	mvns	r3, r3
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	4013      	ands	r3, r2
 800486c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	689a      	ldr	r2, [r3, #8]
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	fa02 f303 	lsl.w	r3, r2, r3
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	4313      	orrs	r3, r2
 800487e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f003 0303 	and.w	r3, r3, #3
 800488e:	2b02      	cmp	r3, #2
 8004890:	d123      	bne.n	80048da <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	08da      	lsrs	r2, r3, #3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	3208      	adds	r2, #8
 800489a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800489e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	f003 0307 	and.w	r3, r3, #7
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	220f      	movs	r2, #15
 80048aa:	fa02 f303 	lsl.w	r3, r2, r3
 80048ae:	43db      	mvns	r3, r3
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	4013      	ands	r3, r2
 80048b4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	691a      	ldr	r2, [r3, #16]
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	f003 0307 	and.w	r3, r3, #7
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	fa02 f303 	lsl.w	r3, r2, r3
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	08da      	lsrs	r2, r3, #3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3208      	adds	r2, #8
 80048d4:	69b9      	ldr	r1, [r7, #24]
 80048d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	005b      	lsls	r3, r3, #1
 80048e4:	2203      	movs	r2, #3
 80048e6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ea:	43db      	mvns	r3, r3
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	4013      	ands	r3, r2
 80048f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f003 0203 	and.w	r2, r3, #3
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004902:	69ba      	ldr	r2, [r7, #24]
 8004904:	4313      	orrs	r3, r2
 8004906:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 80e0 	beq.w	8004adc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800491c:	4b2f      	ldr	r3, [pc, #188]	; (80049dc <HAL_GPIO_Init+0x238>)
 800491e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004922:	4a2e      	ldr	r2, [pc, #184]	; (80049dc <HAL_GPIO_Init+0x238>)
 8004924:	f043 0302 	orr.w	r3, r3, #2
 8004928:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800492c:	4b2b      	ldr	r3, [pc, #172]	; (80049dc <HAL_GPIO_Init+0x238>)
 800492e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	60fb      	str	r3, [r7, #12]
 8004938:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800493a:	4a29      	ldr	r2, [pc, #164]	; (80049e0 <HAL_GPIO_Init+0x23c>)
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	089b      	lsrs	r3, r3, #2
 8004940:	3302      	adds	r3, #2
 8004942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004946:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	f003 0303 	and.w	r3, r3, #3
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	220f      	movs	r2, #15
 8004952:	fa02 f303 	lsl.w	r3, r2, r3
 8004956:	43db      	mvns	r3, r3
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	4013      	ands	r3, r2
 800495c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a20      	ldr	r2, [pc, #128]	; (80049e4 <HAL_GPIO_Init+0x240>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d052      	beq.n	8004a0c <HAL_GPIO_Init+0x268>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a1f      	ldr	r2, [pc, #124]	; (80049e8 <HAL_GPIO_Init+0x244>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d031      	beq.n	80049d2 <HAL_GPIO_Init+0x22e>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a1e      	ldr	r2, [pc, #120]	; (80049ec <HAL_GPIO_Init+0x248>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d02b      	beq.n	80049ce <HAL_GPIO_Init+0x22a>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a1d      	ldr	r2, [pc, #116]	; (80049f0 <HAL_GPIO_Init+0x24c>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d025      	beq.n	80049ca <HAL_GPIO_Init+0x226>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a1c      	ldr	r2, [pc, #112]	; (80049f4 <HAL_GPIO_Init+0x250>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d01f      	beq.n	80049c6 <HAL_GPIO_Init+0x222>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a1b      	ldr	r2, [pc, #108]	; (80049f8 <HAL_GPIO_Init+0x254>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d019      	beq.n	80049c2 <HAL_GPIO_Init+0x21e>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a1a      	ldr	r2, [pc, #104]	; (80049fc <HAL_GPIO_Init+0x258>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d013      	beq.n	80049be <HAL_GPIO_Init+0x21a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a19      	ldr	r2, [pc, #100]	; (8004a00 <HAL_GPIO_Init+0x25c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d00d      	beq.n	80049ba <HAL_GPIO_Init+0x216>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a18      	ldr	r2, [pc, #96]	; (8004a04 <HAL_GPIO_Init+0x260>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d007      	beq.n	80049b6 <HAL_GPIO_Init+0x212>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a17      	ldr	r2, [pc, #92]	; (8004a08 <HAL_GPIO_Init+0x264>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d101      	bne.n	80049b2 <HAL_GPIO_Init+0x20e>
 80049ae:	2309      	movs	r3, #9
 80049b0:	e02d      	b.n	8004a0e <HAL_GPIO_Init+0x26a>
 80049b2:	230a      	movs	r3, #10
 80049b4:	e02b      	b.n	8004a0e <HAL_GPIO_Init+0x26a>
 80049b6:	2308      	movs	r3, #8
 80049b8:	e029      	b.n	8004a0e <HAL_GPIO_Init+0x26a>
 80049ba:	2307      	movs	r3, #7
 80049bc:	e027      	b.n	8004a0e <HAL_GPIO_Init+0x26a>
 80049be:	2306      	movs	r3, #6
 80049c0:	e025      	b.n	8004a0e <HAL_GPIO_Init+0x26a>
 80049c2:	2305      	movs	r3, #5
 80049c4:	e023      	b.n	8004a0e <HAL_GPIO_Init+0x26a>
 80049c6:	2304      	movs	r3, #4
 80049c8:	e021      	b.n	8004a0e <HAL_GPIO_Init+0x26a>
 80049ca:	2303      	movs	r3, #3
 80049cc:	e01f      	b.n	8004a0e <HAL_GPIO_Init+0x26a>
 80049ce:	2302      	movs	r3, #2
 80049d0:	e01d      	b.n	8004a0e <HAL_GPIO_Init+0x26a>
 80049d2:	2301      	movs	r3, #1
 80049d4:	e01b      	b.n	8004a0e <HAL_GPIO_Init+0x26a>
 80049d6:	bf00      	nop
 80049d8:	58000080 	.word	0x58000080
 80049dc:	58024400 	.word	0x58024400
 80049e0:	58000400 	.word	0x58000400
 80049e4:	58020000 	.word	0x58020000
 80049e8:	58020400 	.word	0x58020400
 80049ec:	58020800 	.word	0x58020800
 80049f0:	58020c00 	.word	0x58020c00
 80049f4:	58021000 	.word	0x58021000
 80049f8:	58021400 	.word	0x58021400
 80049fc:	58021800 	.word	0x58021800
 8004a00:	58021c00 	.word	0x58021c00
 8004a04:	58022000 	.word	0x58022000
 8004a08:	58022400 	.word	0x58022400
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	69fa      	ldr	r2, [r7, #28]
 8004a10:	f002 0203 	and.w	r2, r2, #3
 8004a14:	0092      	lsls	r2, r2, #2
 8004a16:	4093      	lsls	r3, r2
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a1e:	4938      	ldr	r1, [pc, #224]	; (8004b00 <HAL_GPIO_Init+0x35c>)
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	089b      	lsrs	r3, r3, #2
 8004a24:	3302      	adds	r3, #2
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	43db      	mvns	r3, r3
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004a52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	43db      	mvns	r3, r3
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	4013      	ands	r3, r2
 8004a6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d003      	beq.n	8004a80 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004a80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	43db      	mvns	r3, r3
 8004a92:	69ba      	ldr	r2, [r7, #24]
 8004a94:	4013      	ands	r3, r2
 8004a96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d003      	beq.n	8004aac <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	69ba      	ldr	r2, [r7, #24]
 8004ab0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	43db      	mvns	r3, r3
 8004abc:	69ba      	ldr	r2, [r7, #24]
 8004abe:	4013      	ands	r3, r2
 8004ac0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d003      	beq.n	8004ad6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f47f ae63 	bne.w	80047b8 <HAL_GPIO_Init+0x14>
  }
}
 8004af2:	bf00      	nop
 8004af4:	bf00      	nop
 8004af6:	3724      	adds	r7, #36	; 0x24
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr
 8004b00:	58000400 	.word	0x58000400

08004b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	807b      	strh	r3, [r7, #2]
 8004b10:	4613      	mov	r3, r2
 8004b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b14:	787b      	ldrb	r3, [r7, #1]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b1a:	887a      	ldrh	r2, [r7, #2]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004b20:	e003      	b.n	8004b2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004b22:	887b      	ldrh	r3, [r7, #2]
 8004b24:	041a      	lsls	r2, r3, #16
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	619a      	str	r2, [r3, #24]
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004b36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b38:	b08f      	sub	sp, #60	; 0x3c
 8004b3a:	af0a      	add	r7, sp, #40	; 0x28
 8004b3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d101      	bne.n	8004b48 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e116      	b.n	8004d76 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d106      	bne.n	8004b68 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7fc fb8a 	bl	800127c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2203      	movs	r2, #3
 8004b6c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d102      	bne.n	8004b82 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f005 fdae 	bl	800a6e8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	603b      	str	r3, [r7, #0]
 8004b92:	687e      	ldr	r6, [r7, #4]
 8004b94:	466d      	mov	r5, sp
 8004b96:	f106 0410 	add.w	r4, r6, #16
 8004b9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ba0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ba2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ba6:	e885 0003 	stmia.w	r5, {r0, r1}
 8004baa:	1d33      	adds	r3, r6, #4
 8004bac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bae:	6838      	ldr	r0, [r7, #0]
 8004bb0:	f005 fd2c 	bl	800a60c <USB_CoreInit>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d005      	beq.n	8004bc6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2202      	movs	r2, #2
 8004bbe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e0d7      	b.n	8004d76 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2100      	movs	r1, #0
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f005 fd9c 	bl	800a70a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	73fb      	strb	r3, [r7, #15]
 8004bd6:	e04a      	b.n	8004c6e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004bd8:	7bfa      	ldrb	r2, [r7, #15]
 8004bda:	6879      	ldr	r1, [r7, #4]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	4413      	add	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	440b      	add	r3, r1
 8004be6:	333d      	adds	r3, #61	; 0x3d
 8004be8:	2201      	movs	r2, #1
 8004bea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004bec:	7bfa      	ldrb	r2, [r7, #15]
 8004bee:	6879      	ldr	r1, [r7, #4]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	4413      	add	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	440b      	add	r3, r1
 8004bfa:	333c      	adds	r3, #60	; 0x3c
 8004bfc:	7bfa      	ldrb	r2, [r7, #15]
 8004bfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004c00:	7bfa      	ldrb	r2, [r7, #15]
 8004c02:	7bfb      	ldrb	r3, [r7, #15]
 8004c04:	b298      	uxth	r0, r3
 8004c06:	6879      	ldr	r1, [r7, #4]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	4413      	add	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	440b      	add	r3, r1
 8004c12:	3356      	adds	r3, #86	; 0x56
 8004c14:	4602      	mov	r2, r0
 8004c16:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004c18:	7bfa      	ldrb	r2, [r7, #15]
 8004c1a:	6879      	ldr	r1, [r7, #4]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	4413      	add	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	440b      	add	r3, r1
 8004c26:	3340      	adds	r3, #64	; 0x40
 8004c28:	2200      	movs	r2, #0
 8004c2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004c2c:	7bfa      	ldrb	r2, [r7, #15]
 8004c2e:	6879      	ldr	r1, [r7, #4]
 8004c30:	4613      	mov	r3, r2
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	4413      	add	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	440b      	add	r3, r1
 8004c3a:	3344      	adds	r3, #68	; 0x44
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004c40:	7bfa      	ldrb	r2, [r7, #15]
 8004c42:	6879      	ldr	r1, [r7, #4]
 8004c44:	4613      	mov	r3, r2
 8004c46:	00db      	lsls	r3, r3, #3
 8004c48:	4413      	add	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	440b      	add	r3, r1
 8004c4e:	3348      	adds	r3, #72	; 0x48
 8004c50:	2200      	movs	r2, #0
 8004c52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004c54:	7bfa      	ldrb	r2, [r7, #15]
 8004c56:	6879      	ldr	r1, [r7, #4]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	00db      	lsls	r3, r3, #3
 8004c5c:	4413      	add	r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	440b      	add	r3, r1
 8004c62:	334c      	adds	r3, #76	; 0x4c
 8004c64:	2200      	movs	r2, #0
 8004c66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c68:	7bfb      	ldrb	r3, [r7, #15]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	73fb      	strb	r3, [r7, #15]
 8004c6e:	7bfa      	ldrb	r2, [r7, #15]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d3af      	bcc.n	8004bd8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c78:	2300      	movs	r3, #0
 8004c7a:	73fb      	strb	r3, [r7, #15]
 8004c7c:	e044      	b.n	8004d08 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004c7e:	7bfa      	ldrb	r2, [r7, #15]
 8004c80:	6879      	ldr	r1, [r7, #4]
 8004c82:	4613      	mov	r3, r2
 8004c84:	00db      	lsls	r3, r3, #3
 8004c86:	4413      	add	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	440b      	add	r3, r1
 8004c8c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004c90:	2200      	movs	r2, #0
 8004c92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004c94:	7bfa      	ldrb	r2, [r7, #15]
 8004c96:	6879      	ldr	r1, [r7, #4]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	00db      	lsls	r3, r3, #3
 8004c9c:	4413      	add	r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	440b      	add	r3, r1
 8004ca2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004ca6:	7bfa      	ldrb	r2, [r7, #15]
 8004ca8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004caa:	7bfa      	ldrb	r2, [r7, #15]
 8004cac:	6879      	ldr	r1, [r7, #4]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	00db      	lsls	r3, r3, #3
 8004cb2:	4413      	add	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	440b      	add	r3, r1
 8004cb8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004cc0:	7bfa      	ldrb	r2, [r7, #15]
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	4413      	add	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	440b      	add	r3, r1
 8004cce:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004cd6:	7bfa      	ldrb	r2, [r7, #15]
 8004cd8:	6879      	ldr	r1, [r7, #4]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	00db      	lsls	r3, r3, #3
 8004cde:	4413      	add	r3, r2
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	440b      	add	r3, r1
 8004ce4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004ce8:	2200      	movs	r2, #0
 8004cea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004cec:	7bfa      	ldrb	r2, [r7, #15]
 8004cee:	6879      	ldr	r1, [r7, #4]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	00db      	lsls	r3, r3, #3
 8004cf4:	4413      	add	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	440b      	add	r3, r1
 8004cfa:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004cfe:	2200      	movs	r2, #0
 8004d00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d02:	7bfb      	ldrb	r3, [r7, #15]
 8004d04:	3301      	adds	r3, #1
 8004d06:	73fb      	strb	r3, [r7, #15]
 8004d08:	7bfa      	ldrb	r2, [r7, #15]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d3b5      	bcc.n	8004c7e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	603b      	str	r3, [r7, #0]
 8004d18:	687e      	ldr	r6, [r7, #4]
 8004d1a:	466d      	mov	r5, sp
 8004d1c:	f106 0410 	add.w	r4, r6, #16
 8004d20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d2c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d30:	1d33      	adds	r3, r6, #4
 8004d32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d34:	6838      	ldr	r0, [r7, #0]
 8004d36:	f005 fd35 	bl	800a7a4 <USB_DevInit>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d005      	beq.n	8004d4c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2202      	movs	r2, #2
 8004d44:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e014      	b.n	8004d76 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d102      	bne.n	8004d6a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 f80b 	bl	8004d80 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f005 fef3 	bl	800ab5a <USB_DevDisconnect>

  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3714      	adds	r7, #20
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004d80 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dae:	4b05      	ldr	r3, [pc, #20]	; (8004dc4 <HAL_PCDEx_ActivateLPM+0x44>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3714      	adds	r7, #20
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	10000003 	.word	0x10000003

08004dc8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004dd0:	4b19      	ldr	r3, [pc, #100]	; (8004e38 <HAL_PWREx_ConfigSupply+0x70>)
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	f003 0304 	and.w	r3, r3, #4
 8004dd8:	2b04      	cmp	r3, #4
 8004dda:	d00a      	beq.n	8004df2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004ddc:	4b16      	ldr	r3, [pc, #88]	; (8004e38 <HAL_PWREx_ConfigSupply+0x70>)
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	f003 0307 	and.w	r3, r3, #7
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d001      	beq.n	8004dee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e01f      	b.n	8004e2e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004dee:	2300      	movs	r3, #0
 8004df0:	e01d      	b.n	8004e2e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004df2:	4b11      	ldr	r3, [pc, #68]	; (8004e38 <HAL_PWREx_ConfigSupply+0x70>)
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	f023 0207 	bic.w	r2, r3, #7
 8004dfa:	490f      	ldr	r1, [pc, #60]	; (8004e38 <HAL_PWREx_ConfigSupply+0x70>)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004e02:	f7fc fc2d 	bl	8001660 <HAL_GetTick>
 8004e06:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004e08:	e009      	b.n	8004e1e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004e0a:	f7fc fc29 	bl	8001660 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e18:	d901      	bls.n	8004e1e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e007      	b.n	8004e2e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004e1e:	4b06      	ldr	r3, [pc, #24]	; (8004e38 <HAL_PWREx_ConfigSupply+0x70>)
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e2a:	d1ee      	bne.n	8004e0a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	58024800 	.word	0x58024800

08004e3c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004e40:	4b05      	ldr	r3, [pc, #20]	; (8004e58 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	4a04      	ldr	r2, [pc, #16]	; (8004e58 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e4a:	60d3      	str	r3, [r2, #12]
}
 8004e4c:	bf00      	nop
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	58024800 	.word	0x58024800

08004e5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b08c      	sub	sp, #48	; 0x30
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d102      	bne.n	8004e70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	f000 bc48 	b.w	8005700 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f000 8088 	beq.w	8004f8e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e7e:	4b99      	ldr	r3, [pc, #612]	; (80050e4 <HAL_RCC_OscConfig+0x288>)
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e88:	4b96      	ldr	r3, [pc, #600]	; (80050e4 <HAL_RCC_OscConfig+0x288>)
 8004e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e90:	2b10      	cmp	r3, #16
 8004e92:	d007      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x48>
 8004e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e96:	2b18      	cmp	r3, #24
 8004e98:	d111      	bne.n	8004ebe <HAL_RCC_OscConfig+0x62>
 8004e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9c:	f003 0303 	and.w	r3, r3, #3
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d10c      	bne.n	8004ebe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ea4:	4b8f      	ldr	r3, [pc, #572]	; (80050e4 <HAL_RCC_OscConfig+0x288>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d06d      	beq.n	8004f8c <HAL_RCC_OscConfig+0x130>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d169      	bne.n	8004f8c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	f000 bc21 	b.w	8005700 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec6:	d106      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x7a>
 8004ec8:	4b86      	ldr	r3, [pc, #536]	; (80050e4 <HAL_RCC_OscConfig+0x288>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a85      	ldr	r2, [pc, #532]	; (80050e4 <HAL_RCC_OscConfig+0x288>)
 8004ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ed2:	6013      	str	r3, [r2, #0]
 8004ed4:	e02e      	b.n	8004f34 <HAL_RCC_OscConfig+0xd8>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10c      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x9c>
 8004ede:	4b81      	ldr	r3, [pc, #516]	; (80050e4 <HAL_RCC_OscConfig+0x288>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a80      	ldr	r2, [pc, #512]	; (80050e4 <HAL_RCC_OscConfig+0x288>)
 8004ee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ee8:	6013      	str	r3, [r2, #0]
 8004eea:	4b7e      	ldr	r3, [pc, #504]	; (80050e4 <HAL_RCC_OscConfig+0x288>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a7d      	ldr	r2, [pc, #500]	; (80050e4 <HAL_RCC_OscConfig+0x288>)
 8004ef0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ef4:	6013      	str	r3, [r2, #0]
 8004ef6:	e01d      	b.n	8004f34 <HAL_RCC_OscConfig+0xd8>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f00:	d10c      	bne.n	8004f1c <HAL_RCC_OscConfig+0xc0>
 8004f02:	4b78      	ldr	r3, [pc, #480]	; (80050e4 <HAL_RCC_OscConfig+0x288>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a77      	ldr	r2, [pc, #476]	; (80050e4 <HAL_RCC_OscConfig+0x288>)
 8004f08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f0c:	6013      	str	r3, [r2, #0]
 8004f0e:	4b75      	ldr	r3, [pc, #468]	; (80050e4 <HAL_RCC_OscConfig+0x288>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a74      	ldr	r2, [pc, #464]	; (80050e4 <HAL_RCC_OscConfig+0x288>)
 8004f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	e00b      	b.n	8004f34 <HAL_RCC_OscConfig+0xd8>
 8004f1c:	4b71      	ldr	r3, [pc, #452]	; (80050e4 <HAL_RCC_OscConfig+0x288>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a70      	ldr	r2, [pc, #448]	; (80050e4 <HAL_RCC_OscConfig+0x288>)
 8004f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f26:	6013      	str	r3, [r2, #0]
 8004f28:	4b6e      	ldr	r3, [pc, #440]	; (80050e4 <HAL_RCC_OscConfig+0x288>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a6d      	ldr	r2, [pc, #436]	; (80050e4 <HAL_RCC_OscConfig+0x288>)
 8004f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d013      	beq.n	8004f64 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f3c:	f7fc fb90 	bl	8001660 <HAL_GetTick>
 8004f40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f44:	f7fc fb8c 	bl	8001660 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b64      	cmp	r3, #100	; 0x64
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e3d4      	b.n	8005700 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f56:	4b63      	ldr	r3, [pc, #396]	; (80050e4 <HAL_RCC_OscConfig+0x288>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d0f0      	beq.n	8004f44 <HAL_RCC_OscConfig+0xe8>
 8004f62:	e014      	b.n	8004f8e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f64:	f7fc fb7c 	bl	8001660 <HAL_GetTick>
 8004f68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f6c:	f7fc fb78 	bl	8001660 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b64      	cmp	r3, #100	; 0x64
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e3c0      	b.n	8005700 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f7e:	4b59      	ldr	r3, [pc, #356]	; (80050e4 <HAL_RCC_OscConfig+0x288>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1f0      	bne.n	8004f6c <HAL_RCC_OscConfig+0x110>
 8004f8a:	e000      	b.n	8004f8e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f000 80ca 	beq.w	8005130 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f9c:	4b51      	ldr	r3, [pc, #324]	; (80050e4 <HAL_RCC_OscConfig+0x288>)
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fa4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004fa6:	4b4f      	ldr	r3, [pc, #316]	; (80050e4 <HAL_RCC_OscConfig+0x288>)
 8004fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004faa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004fac:	6a3b      	ldr	r3, [r7, #32]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d007      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x166>
 8004fb2:	6a3b      	ldr	r3, [r7, #32]
 8004fb4:	2b18      	cmp	r3, #24
 8004fb6:	d156      	bne.n	8005066 <HAL_RCC_OscConfig+0x20a>
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	f003 0303 	and.w	r3, r3, #3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d151      	bne.n	8005066 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004fc2:	4b48      	ldr	r3, [pc, #288]	; (80050e4 <HAL_RCC_OscConfig+0x288>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0304 	and.w	r3, r3, #4
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d005      	beq.n	8004fda <HAL_RCC_OscConfig+0x17e>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e392      	b.n	8005700 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004fda:	4b42      	ldr	r3, [pc, #264]	; (80050e4 <HAL_RCC_OscConfig+0x288>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f023 0219 	bic.w	r2, r3, #25
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	493f      	ldr	r1, [pc, #252]	; (80050e4 <HAL_RCC_OscConfig+0x288>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fec:	f7fc fb38 	bl	8001660 <HAL_GetTick>
 8004ff0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ff2:	e008      	b.n	8005006 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ff4:	f7fc fb34 	bl	8001660 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d901      	bls.n	8005006 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e37c      	b.n	8005700 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005006:	4b37      	ldr	r3, [pc, #220]	; (80050e4 <HAL_RCC_OscConfig+0x288>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0304 	and.w	r3, r3, #4
 800500e:	2b00      	cmp	r3, #0
 8005010:	d0f0      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005012:	f7fc fb55 	bl	80016c0 <HAL_GetREVID>
 8005016:	4603      	mov	r3, r0
 8005018:	f241 0203 	movw	r2, #4099	; 0x1003
 800501c:	4293      	cmp	r3, r2
 800501e:	d817      	bhi.n	8005050 <HAL_RCC_OscConfig+0x1f4>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	2b40      	cmp	r3, #64	; 0x40
 8005026:	d108      	bne.n	800503a <HAL_RCC_OscConfig+0x1de>
 8005028:	4b2e      	ldr	r3, [pc, #184]	; (80050e4 <HAL_RCC_OscConfig+0x288>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005030:	4a2c      	ldr	r2, [pc, #176]	; (80050e4 <HAL_RCC_OscConfig+0x288>)
 8005032:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005036:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005038:	e07a      	b.n	8005130 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800503a:	4b2a      	ldr	r3, [pc, #168]	; (80050e4 <HAL_RCC_OscConfig+0x288>)
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	031b      	lsls	r3, r3, #12
 8005048:	4926      	ldr	r1, [pc, #152]	; (80050e4 <HAL_RCC_OscConfig+0x288>)
 800504a:	4313      	orrs	r3, r2
 800504c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800504e:	e06f      	b.n	8005130 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005050:	4b24      	ldr	r3, [pc, #144]	; (80050e4 <HAL_RCC_OscConfig+0x288>)
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	061b      	lsls	r3, r3, #24
 800505e:	4921      	ldr	r1, [pc, #132]	; (80050e4 <HAL_RCC_OscConfig+0x288>)
 8005060:	4313      	orrs	r3, r2
 8005062:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005064:	e064      	b.n	8005130 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d047      	beq.n	80050fe <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800506e:	4b1d      	ldr	r3, [pc, #116]	; (80050e4 <HAL_RCC_OscConfig+0x288>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f023 0219 	bic.w	r2, r3, #25
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	491a      	ldr	r1, [pc, #104]	; (80050e4 <HAL_RCC_OscConfig+0x288>)
 800507c:	4313      	orrs	r3, r2
 800507e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005080:	f7fc faee 	bl	8001660 <HAL_GetTick>
 8005084:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005086:	e008      	b.n	800509a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005088:	f7fc faea 	bl	8001660 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b02      	cmp	r3, #2
 8005094:	d901      	bls.n	800509a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e332      	b.n	8005700 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800509a:	4b12      	ldr	r3, [pc, #72]	; (80050e4 <HAL_RCC_OscConfig+0x288>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0304 	and.w	r3, r3, #4
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0f0      	beq.n	8005088 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050a6:	f7fc fb0b 	bl	80016c0 <HAL_GetREVID>
 80050aa:	4603      	mov	r3, r0
 80050ac:	f241 0203 	movw	r2, #4099	; 0x1003
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d819      	bhi.n	80050e8 <HAL_RCC_OscConfig+0x28c>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	2b40      	cmp	r3, #64	; 0x40
 80050ba:	d108      	bne.n	80050ce <HAL_RCC_OscConfig+0x272>
 80050bc:	4b09      	ldr	r3, [pc, #36]	; (80050e4 <HAL_RCC_OscConfig+0x288>)
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80050c4:	4a07      	ldr	r2, [pc, #28]	; (80050e4 <HAL_RCC_OscConfig+0x288>)
 80050c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050ca:	6053      	str	r3, [r2, #4]
 80050cc:	e030      	b.n	8005130 <HAL_RCC_OscConfig+0x2d4>
 80050ce:	4b05      	ldr	r3, [pc, #20]	; (80050e4 <HAL_RCC_OscConfig+0x288>)
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	031b      	lsls	r3, r3, #12
 80050dc:	4901      	ldr	r1, [pc, #4]	; (80050e4 <HAL_RCC_OscConfig+0x288>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	604b      	str	r3, [r1, #4]
 80050e2:	e025      	b.n	8005130 <HAL_RCC_OscConfig+0x2d4>
 80050e4:	58024400 	.word	0x58024400
 80050e8:	4b9a      	ldr	r3, [pc, #616]	; (8005354 <HAL_RCC_OscConfig+0x4f8>)
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	061b      	lsls	r3, r3, #24
 80050f6:	4997      	ldr	r1, [pc, #604]	; (8005354 <HAL_RCC_OscConfig+0x4f8>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	604b      	str	r3, [r1, #4]
 80050fc:	e018      	b.n	8005130 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050fe:	4b95      	ldr	r3, [pc, #596]	; (8005354 <HAL_RCC_OscConfig+0x4f8>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a94      	ldr	r2, [pc, #592]	; (8005354 <HAL_RCC_OscConfig+0x4f8>)
 8005104:	f023 0301 	bic.w	r3, r3, #1
 8005108:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800510a:	f7fc faa9 	bl	8001660 <HAL_GetTick>
 800510e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005110:	e008      	b.n	8005124 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005112:	f7fc faa5 	bl	8001660 <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	2b02      	cmp	r3, #2
 800511e:	d901      	bls.n	8005124 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e2ed      	b.n	8005700 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005124:	4b8b      	ldr	r3, [pc, #556]	; (8005354 <HAL_RCC_OscConfig+0x4f8>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0304 	and.w	r3, r3, #4
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1f0      	bne.n	8005112 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0310 	and.w	r3, r3, #16
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 80a9 	beq.w	8005290 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800513e:	4b85      	ldr	r3, [pc, #532]	; (8005354 <HAL_RCC_OscConfig+0x4f8>)
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005146:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005148:	4b82      	ldr	r3, [pc, #520]	; (8005354 <HAL_RCC_OscConfig+0x4f8>)
 800514a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	2b08      	cmp	r3, #8
 8005152:	d007      	beq.n	8005164 <HAL_RCC_OscConfig+0x308>
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	2b18      	cmp	r3, #24
 8005158:	d13a      	bne.n	80051d0 <HAL_RCC_OscConfig+0x374>
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f003 0303 	and.w	r3, r3, #3
 8005160:	2b01      	cmp	r3, #1
 8005162:	d135      	bne.n	80051d0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005164:	4b7b      	ldr	r3, [pc, #492]	; (8005354 <HAL_RCC_OscConfig+0x4f8>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800516c:	2b00      	cmp	r3, #0
 800516e:	d005      	beq.n	800517c <HAL_RCC_OscConfig+0x320>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	69db      	ldr	r3, [r3, #28]
 8005174:	2b80      	cmp	r3, #128	; 0x80
 8005176:	d001      	beq.n	800517c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e2c1      	b.n	8005700 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800517c:	f7fc faa0 	bl	80016c0 <HAL_GetREVID>
 8005180:	4603      	mov	r3, r0
 8005182:	f241 0203 	movw	r2, #4099	; 0x1003
 8005186:	4293      	cmp	r3, r2
 8005188:	d817      	bhi.n	80051ba <HAL_RCC_OscConfig+0x35e>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	2b20      	cmp	r3, #32
 8005190:	d108      	bne.n	80051a4 <HAL_RCC_OscConfig+0x348>
 8005192:	4b70      	ldr	r3, [pc, #448]	; (8005354 <HAL_RCC_OscConfig+0x4f8>)
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800519a:	4a6e      	ldr	r2, [pc, #440]	; (8005354 <HAL_RCC_OscConfig+0x4f8>)
 800519c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051a0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80051a2:	e075      	b.n	8005290 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80051a4:	4b6b      	ldr	r3, [pc, #428]	; (8005354 <HAL_RCC_OscConfig+0x4f8>)
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	069b      	lsls	r3, r3, #26
 80051b2:	4968      	ldr	r1, [pc, #416]	; (8005354 <HAL_RCC_OscConfig+0x4f8>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80051b8:	e06a      	b.n	8005290 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80051ba:	4b66      	ldr	r3, [pc, #408]	; (8005354 <HAL_RCC_OscConfig+0x4f8>)
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	061b      	lsls	r3, r3, #24
 80051c8:	4962      	ldr	r1, [pc, #392]	; (8005354 <HAL_RCC_OscConfig+0x4f8>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80051ce:	e05f      	b.n	8005290 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	69db      	ldr	r3, [r3, #28]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d042      	beq.n	800525e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80051d8:	4b5e      	ldr	r3, [pc, #376]	; (8005354 <HAL_RCC_OscConfig+0x4f8>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a5d      	ldr	r2, [pc, #372]	; (8005354 <HAL_RCC_OscConfig+0x4f8>)
 80051de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e4:	f7fc fa3c 	bl	8001660 <HAL_GetTick>
 80051e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80051ea:	e008      	b.n	80051fe <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80051ec:	f7fc fa38 	bl	8001660 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d901      	bls.n	80051fe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e280      	b.n	8005700 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80051fe:	4b55      	ldr	r3, [pc, #340]	; (8005354 <HAL_RCC_OscConfig+0x4f8>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005206:	2b00      	cmp	r3, #0
 8005208:	d0f0      	beq.n	80051ec <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800520a:	f7fc fa59 	bl	80016c0 <HAL_GetREVID>
 800520e:	4603      	mov	r3, r0
 8005210:	f241 0203 	movw	r2, #4099	; 0x1003
 8005214:	4293      	cmp	r3, r2
 8005216:	d817      	bhi.n	8005248 <HAL_RCC_OscConfig+0x3ec>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	2b20      	cmp	r3, #32
 800521e:	d108      	bne.n	8005232 <HAL_RCC_OscConfig+0x3d6>
 8005220:	4b4c      	ldr	r3, [pc, #304]	; (8005354 <HAL_RCC_OscConfig+0x4f8>)
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005228:	4a4a      	ldr	r2, [pc, #296]	; (8005354 <HAL_RCC_OscConfig+0x4f8>)
 800522a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800522e:	6053      	str	r3, [r2, #4]
 8005230:	e02e      	b.n	8005290 <HAL_RCC_OscConfig+0x434>
 8005232:	4b48      	ldr	r3, [pc, #288]	; (8005354 <HAL_RCC_OscConfig+0x4f8>)
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	069b      	lsls	r3, r3, #26
 8005240:	4944      	ldr	r1, [pc, #272]	; (8005354 <HAL_RCC_OscConfig+0x4f8>)
 8005242:	4313      	orrs	r3, r2
 8005244:	604b      	str	r3, [r1, #4]
 8005246:	e023      	b.n	8005290 <HAL_RCC_OscConfig+0x434>
 8005248:	4b42      	ldr	r3, [pc, #264]	; (8005354 <HAL_RCC_OscConfig+0x4f8>)
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	061b      	lsls	r3, r3, #24
 8005256:	493f      	ldr	r1, [pc, #252]	; (8005354 <HAL_RCC_OscConfig+0x4f8>)
 8005258:	4313      	orrs	r3, r2
 800525a:	60cb      	str	r3, [r1, #12]
 800525c:	e018      	b.n	8005290 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800525e:	4b3d      	ldr	r3, [pc, #244]	; (8005354 <HAL_RCC_OscConfig+0x4f8>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a3c      	ldr	r2, [pc, #240]	; (8005354 <HAL_RCC_OscConfig+0x4f8>)
 8005264:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005268:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800526a:	f7fc f9f9 	bl	8001660 <HAL_GetTick>
 800526e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005270:	e008      	b.n	8005284 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005272:	f7fc f9f5 	bl	8001660 <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	2b02      	cmp	r3, #2
 800527e:	d901      	bls.n	8005284 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e23d      	b.n	8005700 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005284:	4b33      	ldr	r3, [pc, #204]	; (8005354 <HAL_RCC_OscConfig+0x4f8>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1f0      	bne.n	8005272 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0308 	and.w	r3, r3, #8
 8005298:	2b00      	cmp	r3, #0
 800529a:	d036      	beq.n	800530a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d019      	beq.n	80052d8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052a4:	4b2b      	ldr	r3, [pc, #172]	; (8005354 <HAL_RCC_OscConfig+0x4f8>)
 80052a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052a8:	4a2a      	ldr	r2, [pc, #168]	; (8005354 <HAL_RCC_OscConfig+0x4f8>)
 80052aa:	f043 0301 	orr.w	r3, r3, #1
 80052ae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052b0:	f7fc f9d6 	bl	8001660 <HAL_GetTick>
 80052b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80052b6:	e008      	b.n	80052ca <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052b8:	f7fc f9d2 	bl	8001660 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e21a      	b.n	8005700 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80052ca:	4b22      	ldr	r3, [pc, #136]	; (8005354 <HAL_RCC_OscConfig+0x4f8>)
 80052cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d0f0      	beq.n	80052b8 <HAL_RCC_OscConfig+0x45c>
 80052d6:	e018      	b.n	800530a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052d8:	4b1e      	ldr	r3, [pc, #120]	; (8005354 <HAL_RCC_OscConfig+0x4f8>)
 80052da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052dc:	4a1d      	ldr	r2, [pc, #116]	; (8005354 <HAL_RCC_OscConfig+0x4f8>)
 80052de:	f023 0301 	bic.w	r3, r3, #1
 80052e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052e4:	f7fc f9bc 	bl	8001660 <HAL_GetTick>
 80052e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80052ea:	e008      	b.n	80052fe <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052ec:	f7fc f9b8 	bl	8001660 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e200      	b.n	8005700 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80052fe:	4b15      	ldr	r3, [pc, #84]	; (8005354 <HAL_RCC_OscConfig+0x4f8>)
 8005300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1f0      	bne.n	80052ec <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0320 	and.w	r3, r3, #32
 8005312:	2b00      	cmp	r3, #0
 8005314:	d039      	beq.n	800538a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d01c      	beq.n	8005358 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800531e:	4b0d      	ldr	r3, [pc, #52]	; (8005354 <HAL_RCC_OscConfig+0x4f8>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a0c      	ldr	r2, [pc, #48]	; (8005354 <HAL_RCC_OscConfig+0x4f8>)
 8005324:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005328:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800532a:	f7fc f999 	bl	8001660 <HAL_GetTick>
 800532e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005330:	e008      	b.n	8005344 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005332:	f7fc f995 	bl	8001660 <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	2b02      	cmp	r3, #2
 800533e:	d901      	bls.n	8005344 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e1dd      	b.n	8005700 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005344:	4b03      	ldr	r3, [pc, #12]	; (8005354 <HAL_RCC_OscConfig+0x4f8>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d0f0      	beq.n	8005332 <HAL_RCC_OscConfig+0x4d6>
 8005350:	e01b      	b.n	800538a <HAL_RCC_OscConfig+0x52e>
 8005352:	bf00      	nop
 8005354:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005358:	4b9b      	ldr	r3, [pc, #620]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a9a      	ldr	r2, [pc, #616]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 800535e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005362:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005364:	f7fc f97c 	bl	8001660 <HAL_GetTick>
 8005368:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800536a:	e008      	b.n	800537e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800536c:	f7fc f978 	bl	8001660 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b02      	cmp	r3, #2
 8005378:	d901      	bls.n	800537e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e1c0      	b.n	8005700 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800537e:	4b92      	ldr	r3, [pc, #584]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1f0      	bne.n	800536c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0304 	and.w	r3, r3, #4
 8005392:	2b00      	cmp	r3, #0
 8005394:	f000 8081 	beq.w	800549a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005398:	4b8c      	ldr	r3, [pc, #560]	; (80055cc <HAL_RCC_OscConfig+0x770>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a8b      	ldr	r2, [pc, #556]	; (80055cc <HAL_RCC_OscConfig+0x770>)
 800539e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053a4:	f7fc f95c 	bl	8001660 <HAL_GetTick>
 80053a8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053aa:	e008      	b.n	80053be <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053ac:	f7fc f958 	bl	8001660 <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	2b64      	cmp	r3, #100	; 0x64
 80053b8:	d901      	bls.n	80053be <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e1a0      	b.n	8005700 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053be:	4b83      	ldr	r3, [pc, #524]	; (80055cc <HAL_RCC_OscConfig+0x770>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d0f0      	beq.n	80053ac <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d106      	bne.n	80053e0 <HAL_RCC_OscConfig+0x584>
 80053d2:	4b7d      	ldr	r3, [pc, #500]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 80053d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d6:	4a7c      	ldr	r2, [pc, #496]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 80053d8:	f043 0301 	orr.w	r3, r3, #1
 80053dc:	6713      	str	r3, [r2, #112]	; 0x70
 80053de:	e02d      	b.n	800543c <HAL_RCC_OscConfig+0x5e0>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10c      	bne.n	8005402 <HAL_RCC_OscConfig+0x5a6>
 80053e8:	4b77      	ldr	r3, [pc, #476]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 80053ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ec:	4a76      	ldr	r2, [pc, #472]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 80053ee:	f023 0301 	bic.w	r3, r3, #1
 80053f2:	6713      	str	r3, [r2, #112]	; 0x70
 80053f4:	4b74      	ldr	r3, [pc, #464]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 80053f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f8:	4a73      	ldr	r2, [pc, #460]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 80053fa:	f023 0304 	bic.w	r3, r3, #4
 80053fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005400:	e01c      	b.n	800543c <HAL_RCC_OscConfig+0x5e0>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	2b05      	cmp	r3, #5
 8005408:	d10c      	bne.n	8005424 <HAL_RCC_OscConfig+0x5c8>
 800540a:	4b6f      	ldr	r3, [pc, #444]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 800540c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800540e:	4a6e      	ldr	r2, [pc, #440]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 8005410:	f043 0304 	orr.w	r3, r3, #4
 8005414:	6713      	str	r3, [r2, #112]	; 0x70
 8005416:	4b6c      	ldr	r3, [pc, #432]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 8005418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800541a:	4a6b      	ldr	r2, [pc, #428]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 800541c:	f043 0301 	orr.w	r3, r3, #1
 8005420:	6713      	str	r3, [r2, #112]	; 0x70
 8005422:	e00b      	b.n	800543c <HAL_RCC_OscConfig+0x5e0>
 8005424:	4b68      	ldr	r3, [pc, #416]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 8005426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005428:	4a67      	ldr	r2, [pc, #412]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 800542a:	f023 0301 	bic.w	r3, r3, #1
 800542e:	6713      	str	r3, [r2, #112]	; 0x70
 8005430:	4b65      	ldr	r3, [pc, #404]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 8005432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005434:	4a64      	ldr	r2, [pc, #400]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 8005436:	f023 0304 	bic.w	r3, r3, #4
 800543a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d015      	beq.n	8005470 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005444:	f7fc f90c 	bl	8001660 <HAL_GetTick>
 8005448:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800544a:	e00a      	b.n	8005462 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800544c:	f7fc f908 	bl	8001660 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	f241 3288 	movw	r2, #5000	; 0x1388
 800545a:	4293      	cmp	r3, r2
 800545c:	d901      	bls.n	8005462 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e14e      	b.n	8005700 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005462:	4b59      	ldr	r3, [pc, #356]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 8005464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d0ee      	beq.n	800544c <HAL_RCC_OscConfig+0x5f0>
 800546e:	e014      	b.n	800549a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005470:	f7fc f8f6 	bl	8001660 <HAL_GetTick>
 8005474:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005476:	e00a      	b.n	800548e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005478:	f7fc f8f2 	bl	8001660 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	f241 3288 	movw	r2, #5000	; 0x1388
 8005486:	4293      	cmp	r3, r2
 8005488:	d901      	bls.n	800548e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e138      	b.n	8005700 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800548e:	4b4e      	ldr	r3, [pc, #312]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 8005490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005492:	f003 0302 	and.w	r3, r3, #2
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1ee      	bne.n	8005478 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549e:	2b00      	cmp	r3, #0
 80054a0:	f000 812d 	beq.w	80056fe <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80054a4:	4b48      	ldr	r3, [pc, #288]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054ac:	2b18      	cmp	r3, #24
 80054ae:	f000 80bd 	beq.w	800562c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	f040 809e 	bne.w	80055f8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054bc:	4b42      	ldr	r3, [pc, #264]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a41      	ldr	r2, [pc, #260]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 80054c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c8:	f7fc f8ca 	bl	8001660 <HAL_GetTick>
 80054cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054ce:	e008      	b.n	80054e2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054d0:	f7fc f8c6 	bl	8001660 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e10e      	b.n	8005700 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054e2:	4b39      	ldr	r3, [pc, #228]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1f0      	bne.n	80054d0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054ee:	4b36      	ldr	r3, [pc, #216]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 80054f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054f2:	4b37      	ldr	r3, [pc, #220]	; (80055d0 <HAL_RCC_OscConfig+0x774>)
 80054f4:	4013      	ands	r3, r2
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80054fe:	0112      	lsls	r2, r2, #4
 8005500:	430a      	orrs	r2, r1
 8005502:	4931      	ldr	r1, [pc, #196]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 8005504:	4313      	orrs	r3, r2
 8005506:	628b      	str	r3, [r1, #40]	; 0x28
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550c:	3b01      	subs	r3, #1
 800550e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005516:	3b01      	subs	r3, #1
 8005518:	025b      	lsls	r3, r3, #9
 800551a:	b29b      	uxth	r3, r3
 800551c:	431a      	orrs	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005522:	3b01      	subs	r3, #1
 8005524:	041b      	lsls	r3, r3, #16
 8005526:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800552a:	431a      	orrs	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005530:	3b01      	subs	r3, #1
 8005532:	061b      	lsls	r3, r3, #24
 8005534:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005538:	4923      	ldr	r1, [pc, #140]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 800553a:	4313      	orrs	r3, r2
 800553c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800553e:	4b22      	ldr	r3, [pc, #136]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 8005540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005542:	4a21      	ldr	r2, [pc, #132]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 8005544:	f023 0301 	bic.w	r3, r3, #1
 8005548:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800554a:	4b1f      	ldr	r3, [pc, #124]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 800554c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800554e:	4b21      	ldr	r3, [pc, #132]	; (80055d4 <HAL_RCC_OscConfig+0x778>)
 8005550:	4013      	ands	r3, r2
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005556:	00d2      	lsls	r2, r2, #3
 8005558:	491b      	ldr	r1, [pc, #108]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 800555a:	4313      	orrs	r3, r2
 800555c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800555e:	4b1a      	ldr	r3, [pc, #104]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 8005560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005562:	f023 020c 	bic.w	r2, r3, #12
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556a:	4917      	ldr	r1, [pc, #92]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 800556c:	4313      	orrs	r3, r2
 800556e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005570:	4b15      	ldr	r3, [pc, #84]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 8005572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005574:	f023 0202 	bic.w	r2, r3, #2
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800557c:	4912      	ldr	r1, [pc, #72]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 800557e:	4313      	orrs	r3, r2
 8005580:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005582:	4b11      	ldr	r3, [pc, #68]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 8005584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005586:	4a10      	ldr	r2, [pc, #64]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 8005588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800558c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800558e:	4b0e      	ldr	r3, [pc, #56]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 8005590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005592:	4a0d      	ldr	r2, [pc, #52]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 8005594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005598:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800559a:	4b0b      	ldr	r3, [pc, #44]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 800559c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559e:	4a0a      	ldr	r2, [pc, #40]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 80055a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80055a6:	4b08      	ldr	r3, [pc, #32]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 80055a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055aa:	4a07      	ldr	r2, [pc, #28]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 80055ac:	f043 0301 	orr.w	r3, r3, #1
 80055b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055b2:	4b05      	ldr	r3, [pc, #20]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a04      	ldr	r2, [pc, #16]	; (80055c8 <HAL_RCC_OscConfig+0x76c>)
 80055b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055be:	f7fc f84f 	bl	8001660 <HAL_GetTick>
 80055c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80055c4:	e011      	b.n	80055ea <HAL_RCC_OscConfig+0x78e>
 80055c6:	bf00      	nop
 80055c8:	58024400 	.word	0x58024400
 80055cc:	58024800 	.word	0x58024800
 80055d0:	fffffc0c 	.word	0xfffffc0c
 80055d4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055d8:	f7fc f842 	bl	8001660 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d901      	bls.n	80055ea <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e08a      	b.n	8005700 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80055ea:	4b47      	ldr	r3, [pc, #284]	; (8005708 <HAL_RCC_OscConfig+0x8ac>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d0f0      	beq.n	80055d8 <HAL_RCC_OscConfig+0x77c>
 80055f6:	e082      	b.n	80056fe <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055f8:	4b43      	ldr	r3, [pc, #268]	; (8005708 <HAL_RCC_OscConfig+0x8ac>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a42      	ldr	r2, [pc, #264]	; (8005708 <HAL_RCC_OscConfig+0x8ac>)
 80055fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005602:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005604:	f7fc f82c 	bl	8001660 <HAL_GetTick>
 8005608:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800560a:	e008      	b.n	800561e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800560c:	f7fc f828 	bl	8001660 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b02      	cmp	r3, #2
 8005618:	d901      	bls.n	800561e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e070      	b.n	8005700 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800561e:	4b3a      	ldr	r3, [pc, #232]	; (8005708 <HAL_RCC_OscConfig+0x8ac>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1f0      	bne.n	800560c <HAL_RCC_OscConfig+0x7b0>
 800562a:	e068      	b.n	80056fe <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800562c:	4b36      	ldr	r3, [pc, #216]	; (8005708 <HAL_RCC_OscConfig+0x8ac>)
 800562e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005630:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005632:	4b35      	ldr	r3, [pc, #212]	; (8005708 <HAL_RCC_OscConfig+0x8ac>)
 8005634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005636:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563c:	2b01      	cmp	r3, #1
 800563e:	d031      	beq.n	80056a4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	f003 0203 	and.w	r2, r3, #3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800564a:	429a      	cmp	r2, r3
 800564c:	d12a      	bne.n	80056a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	091b      	lsrs	r3, r3, #4
 8005652:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800565a:	429a      	cmp	r2, r3
 800565c:	d122      	bne.n	80056a4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005668:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800566a:	429a      	cmp	r2, r3
 800566c:	d11a      	bne.n	80056a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	0a5b      	lsrs	r3, r3, #9
 8005672:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800567a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800567c:	429a      	cmp	r2, r3
 800567e:	d111      	bne.n	80056a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	0c1b      	lsrs	r3, r3, #16
 8005684:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800568e:	429a      	cmp	r2, r3
 8005690:	d108      	bne.n	80056a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	0e1b      	lsrs	r3, r3, #24
 8005696:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800569e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d001      	beq.n	80056a8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e02b      	b.n	8005700 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80056a8:	4b17      	ldr	r3, [pc, #92]	; (8005708 <HAL_RCC_OscConfig+0x8ac>)
 80056aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ac:	08db      	lsrs	r3, r3, #3
 80056ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056b2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d01f      	beq.n	80056fe <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80056be:	4b12      	ldr	r3, [pc, #72]	; (8005708 <HAL_RCC_OscConfig+0x8ac>)
 80056c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c2:	4a11      	ldr	r2, [pc, #68]	; (8005708 <HAL_RCC_OscConfig+0x8ac>)
 80056c4:	f023 0301 	bic.w	r3, r3, #1
 80056c8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80056ca:	f7fb ffc9 	bl	8001660 <HAL_GetTick>
 80056ce:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80056d0:	bf00      	nop
 80056d2:	f7fb ffc5 	bl	8001660 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	4293      	cmp	r3, r2
 80056dc:	d0f9      	beq.n	80056d2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80056de:	4b0a      	ldr	r3, [pc, #40]	; (8005708 <HAL_RCC_OscConfig+0x8ac>)
 80056e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056e2:	4b0a      	ldr	r3, [pc, #40]	; (800570c <HAL_RCC_OscConfig+0x8b0>)
 80056e4:	4013      	ands	r3, r2
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80056ea:	00d2      	lsls	r2, r2, #3
 80056ec:	4906      	ldr	r1, [pc, #24]	; (8005708 <HAL_RCC_OscConfig+0x8ac>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80056f2:	4b05      	ldr	r3, [pc, #20]	; (8005708 <HAL_RCC_OscConfig+0x8ac>)
 80056f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f6:	4a04      	ldr	r2, [pc, #16]	; (8005708 <HAL_RCC_OscConfig+0x8ac>)
 80056f8:	f043 0301 	orr.w	r3, r3, #1
 80056fc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3730      	adds	r7, #48	; 0x30
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	58024400 	.word	0x58024400
 800570c:	ffff0007 	.word	0xffff0007

08005710 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d101      	bne.n	8005724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e19c      	b.n	8005a5e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005724:	4b8a      	ldr	r3, [pc, #552]	; (8005950 <HAL_RCC_ClockConfig+0x240>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 030f 	and.w	r3, r3, #15
 800572c:	683a      	ldr	r2, [r7, #0]
 800572e:	429a      	cmp	r2, r3
 8005730:	d910      	bls.n	8005754 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005732:	4b87      	ldr	r3, [pc, #540]	; (8005950 <HAL_RCC_ClockConfig+0x240>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f023 020f 	bic.w	r2, r3, #15
 800573a:	4985      	ldr	r1, [pc, #532]	; (8005950 <HAL_RCC_ClockConfig+0x240>)
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	4313      	orrs	r3, r2
 8005740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005742:	4b83      	ldr	r3, [pc, #524]	; (8005950 <HAL_RCC_ClockConfig+0x240>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 030f 	and.w	r3, r3, #15
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	429a      	cmp	r2, r3
 800574e:	d001      	beq.n	8005754 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e184      	b.n	8005a5e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0304 	and.w	r3, r3, #4
 800575c:	2b00      	cmp	r3, #0
 800575e:	d010      	beq.n	8005782 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	691a      	ldr	r2, [r3, #16]
 8005764:	4b7b      	ldr	r3, [pc, #492]	; (8005954 <HAL_RCC_ClockConfig+0x244>)
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800576c:	429a      	cmp	r2, r3
 800576e:	d908      	bls.n	8005782 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005770:	4b78      	ldr	r3, [pc, #480]	; (8005954 <HAL_RCC_ClockConfig+0x244>)
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	4975      	ldr	r1, [pc, #468]	; (8005954 <HAL_RCC_ClockConfig+0x244>)
 800577e:	4313      	orrs	r3, r2
 8005780:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0308 	and.w	r3, r3, #8
 800578a:	2b00      	cmp	r3, #0
 800578c:	d010      	beq.n	80057b0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	695a      	ldr	r2, [r3, #20]
 8005792:	4b70      	ldr	r3, [pc, #448]	; (8005954 <HAL_RCC_ClockConfig+0x244>)
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800579a:	429a      	cmp	r2, r3
 800579c:	d908      	bls.n	80057b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800579e:	4b6d      	ldr	r3, [pc, #436]	; (8005954 <HAL_RCC_ClockConfig+0x244>)
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	496a      	ldr	r1, [pc, #424]	; (8005954 <HAL_RCC_ClockConfig+0x244>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0310 	and.w	r3, r3, #16
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d010      	beq.n	80057de <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	699a      	ldr	r2, [r3, #24]
 80057c0:	4b64      	ldr	r3, [pc, #400]	; (8005954 <HAL_RCC_ClockConfig+0x244>)
 80057c2:	69db      	ldr	r3, [r3, #28]
 80057c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d908      	bls.n	80057de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80057cc:	4b61      	ldr	r3, [pc, #388]	; (8005954 <HAL_RCC_ClockConfig+0x244>)
 80057ce:	69db      	ldr	r3, [r3, #28]
 80057d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	495e      	ldr	r1, [pc, #376]	; (8005954 <HAL_RCC_ClockConfig+0x244>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0320 	and.w	r3, r3, #32
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d010      	beq.n	800580c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	69da      	ldr	r2, [r3, #28]
 80057ee:	4b59      	ldr	r3, [pc, #356]	; (8005954 <HAL_RCC_ClockConfig+0x244>)
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d908      	bls.n	800580c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80057fa:	4b56      	ldr	r3, [pc, #344]	; (8005954 <HAL_RCC_ClockConfig+0x244>)
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	69db      	ldr	r3, [r3, #28]
 8005806:	4953      	ldr	r1, [pc, #332]	; (8005954 <HAL_RCC_ClockConfig+0x244>)
 8005808:	4313      	orrs	r3, r2
 800580a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0302 	and.w	r3, r3, #2
 8005814:	2b00      	cmp	r3, #0
 8005816:	d010      	beq.n	800583a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68da      	ldr	r2, [r3, #12]
 800581c:	4b4d      	ldr	r3, [pc, #308]	; (8005954 <HAL_RCC_ClockConfig+0x244>)
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	f003 030f 	and.w	r3, r3, #15
 8005824:	429a      	cmp	r2, r3
 8005826:	d908      	bls.n	800583a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005828:	4b4a      	ldr	r3, [pc, #296]	; (8005954 <HAL_RCC_ClockConfig+0x244>)
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	f023 020f 	bic.w	r2, r3, #15
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	4947      	ldr	r1, [pc, #284]	; (8005954 <HAL_RCC_ClockConfig+0x244>)
 8005836:	4313      	orrs	r3, r2
 8005838:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	d055      	beq.n	80058f2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005846:	4b43      	ldr	r3, [pc, #268]	; (8005954 <HAL_RCC_ClockConfig+0x244>)
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	4940      	ldr	r1, [pc, #256]	; (8005954 <HAL_RCC_ClockConfig+0x244>)
 8005854:	4313      	orrs	r3, r2
 8005856:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	2b02      	cmp	r3, #2
 800585e:	d107      	bne.n	8005870 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005860:	4b3c      	ldr	r3, [pc, #240]	; (8005954 <HAL_RCC_ClockConfig+0x244>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d121      	bne.n	80058b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e0f6      	b.n	8005a5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	2b03      	cmp	r3, #3
 8005876:	d107      	bne.n	8005888 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005878:	4b36      	ldr	r3, [pc, #216]	; (8005954 <HAL_RCC_ClockConfig+0x244>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d115      	bne.n	80058b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e0ea      	b.n	8005a5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d107      	bne.n	80058a0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005890:	4b30      	ldr	r3, [pc, #192]	; (8005954 <HAL_RCC_ClockConfig+0x244>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005898:	2b00      	cmp	r3, #0
 800589a:	d109      	bne.n	80058b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e0de      	b.n	8005a5e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058a0:	4b2c      	ldr	r3, [pc, #176]	; (8005954 <HAL_RCC_ClockConfig+0x244>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0304 	and.w	r3, r3, #4
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d101      	bne.n	80058b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e0d6      	b.n	8005a5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80058b0:	4b28      	ldr	r3, [pc, #160]	; (8005954 <HAL_RCC_ClockConfig+0x244>)
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	f023 0207 	bic.w	r2, r3, #7
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	4925      	ldr	r1, [pc, #148]	; (8005954 <HAL_RCC_ClockConfig+0x244>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058c2:	f7fb fecd 	bl	8001660 <HAL_GetTick>
 80058c6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058c8:	e00a      	b.n	80058e0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058ca:	f7fb fec9 	bl	8001660 <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80058d8:	4293      	cmp	r3, r2
 80058da:	d901      	bls.n	80058e0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e0be      	b.n	8005a5e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058e0:	4b1c      	ldr	r3, [pc, #112]	; (8005954 <HAL_RCC_ClockConfig+0x244>)
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	00db      	lsls	r3, r3, #3
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d1eb      	bne.n	80058ca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d010      	beq.n	8005920 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	68da      	ldr	r2, [r3, #12]
 8005902:	4b14      	ldr	r3, [pc, #80]	; (8005954 <HAL_RCC_ClockConfig+0x244>)
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	f003 030f 	and.w	r3, r3, #15
 800590a:	429a      	cmp	r2, r3
 800590c:	d208      	bcs.n	8005920 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800590e:	4b11      	ldr	r3, [pc, #68]	; (8005954 <HAL_RCC_ClockConfig+0x244>)
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	f023 020f 	bic.w	r2, r3, #15
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	490e      	ldr	r1, [pc, #56]	; (8005954 <HAL_RCC_ClockConfig+0x244>)
 800591c:	4313      	orrs	r3, r2
 800591e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005920:	4b0b      	ldr	r3, [pc, #44]	; (8005950 <HAL_RCC_ClockConfig+0x240>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 030f 	and.w	r3, r3, #15
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	429a      	cmp	r2, r3
 800592c:	d214      	bcs.n	8005958 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800592e:	4b08      	ldr	r3, [pc, #32]	; (8005950 <HAL_RCC_ClockConfig+0x240>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f023 020f 	bic.w	r2, r3, #15
 8005936:	4906      	ldr	r1, [pc, #24]	; (8005950 <HAL_RCC_ClockConfig+0x240>)
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	4313      	orrs	r3, r2
 800593c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800593e:	4b04      	ldr	r3, [pc, #16]	; (8005950 <HAL_RCC_ClockConfig+0x240>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 030f 	and.w	r3, r3, #15
 8005946:	683a      	ldr	r2, [r7, #0]
 8005948:	429a      	cmp	r2, r3
 800594a:	d005      	beq.n	8005958 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e086      	b.n	8005a5e <HAL_RCC_ClockConfig+0x34e>
 8005950:	52002000 	.word	0x52002000
 8005954:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0304 	and.w	r3, r3, #4
 8005960:	2b00      	cmp	r3, #0
 8005962:	d010      	beq.n	8005986 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	691a      	ldr	r2, [r3, #16]
 8005968:	4b3f      	ldr	r3, [pc, #252]	; (8005a68 <HAL_RCC_ClockConfig+0x358>)
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005970:	429a      	cmp	r2, r3
 8005972:	d208      	bcs.n	8005986 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005974:	4b3c      	ldr	r3, [pc, #240]	; (8005a68 <HAL_RCC_ClockConfig+0x358>)
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	4939      	ldr	r1, [pc, #228]	; (8005a68 <HAL_RCC_ClockConfig+0x358>)
 8005982:	4313      	orrs	r3, r2
 8005984:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0308 	and.w	r3, r3, #8
 800598e:	2b00      	cmp	r3, #0
 8005990:	d010      	beq.n	80059b4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	695a      	ldr	r2, [r3, #20]
 8005996:	4b34      	ldr	r3, [pc, #208]	; (8005a68 <HAL_RCC_ClockConfig+0x358>)
 8005998:	69db      	ldr	r3, [r3, #28]
 800599a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800599e:	429a      	cmp	r2, r3
 80059a0:	d208      	bcs.n	80059b4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80059a2:	4b31      	ldr	r3, [pc, #196]	; (8005a68 <HAL_RCC_ClockConfig+0x358>)
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	492e      	ldr	r1, [pc, #184]	; (8005a68 <HAL_RCC_ClockConfig+0x358>)
 80059b0:	4313      	orrs	r3, r2
 80059b2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0310 	and.w	r3, r3, #16
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d010      	beq.n	80059e2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	699a      	ldr	r2, [r3, #24]
 80059c4:	4b28      	ldr	r3, [pc, #160]	; (8005a68 <HAL_RCC_ClockConfig+0x358>)
 80059c6:	69db      	ldr	r3, [r3, #28]
 80059c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d208      	bcs.n	80059e2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80059d0:	4b25      	ldr	r3, [pc, #148]	; (8005a68 <HAL_RCC_ClockConfig+0x358>)
 80059d2:	69db      	ldr	r3, [r3, #28]
 80059d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	4922      	ldr	r1, [pc, #136]	; (8005a68 <HAL_RCC_ClockConfig+0x358>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0320 	and.w	r3, r3, #32
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d010      	beq.n	8005a10 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	69da      	ldr	r2, [r3, #28]
 80059f2:	4b1d      	ldr	r3, [pc, #116]	; (8005a68 <HAL_RCC_ClockConfig+0x358>)
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d208      	bcs.n	8005a10 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80059fe:	4b1a      	ldr	r3, [pc, #104]	; (8005a68 <HAL_RCC_ClockConfig+0x358>)
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	69db      	ldr	r3, [r3, #28]
 8005a0a:	4917      	ldr	r1, [pc, #92]	; (8005a68 <HAL_RCC_ClockConfig+0x358>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005a10:	f000 f834 	bl	8005a7c <HAL_RCC_GetSysClockFreq>
 8005a14:	4602      	mov	r2, r0
 8005a16:	4b14      	ldr	r3, [pc, #80]	; (8005a68 <HAL_RCC_ClockConfig+0x358>)
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	0a1b      	lsrs	r3, r3, #8
 8005a1c:	f003 030f 	and.w	r3, r3, #15
 8005a20:	4912      	ldr	r1, [pc, #72]	; (8005a6c <HAL_RCC_ClockConfig+0x35c>)
 8005a22:	5ccb      	ldrb	r3, [r1, r3]
 8005a24:	f003 031f 	and.w	r3, r3, #31
 8005a28:	fa22 f303 	lsr.w	r3, r2, r3
 8005a2c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a2e:	4b0e      	ldr	r3, [pc, #56]	; (8005a68 <HAL_RCC_ClockConfig+0x358>)
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	f003 030f 	and.w	r3, r3, #15
 8005a36:	4a0d      	ldr	r2, [pc, #52]	; (8005a6c <HAL_RCC_ClockConfig+0x35c>)
 8005a38:	5cd3      	ldrb	r3, [r2, r3]
 8005a3a:	f003 031f 	and.w	r3, r3, #31
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	fa22 f303 	lsr.w	r3, r2, r3
 8005a44:	4a0a      	ldr	r2, [pc, #40]	; (8005a70 <HAL_RCC_ClockConfig+0x360>)
 8005a46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a48:	4a0a      	ldr	r2, [pc, #40]	; (8005a74 <HAL_RCC_ClockConfig+0x364>)
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005a4e:	4b0a      	ldr	r3, [pc, #40]	; (8005a78 <HAL_RCC_ClockConfig+0x368>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7fb fdba 	bl	80015cc <HAL_InitTick>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3718      	adds	r7, #24
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	58024400 	.word	0x58024400
 8005a6c:	0800b8f8 	.word	0x0800b8f8
 8005a70:	24000004 	.word	0x24000004
 8005a74:	24000000 	.word	0x24000000
 8005a78:	24000008 	.word	0x24000008

08005a7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b089      	sub	sp, #36	; 0x24
 8005a80:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a82:	4bb3      	ldr	r3, [pc, #716]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a8a:	2b18      	cmp	r3, #24
 8005a8c:	f200 8155 	bhi.w	8005d3a <HAL_RCC_GetSysClockFreq+0x2be>
 8005a90:	a201      	add	r2, pc, #4	; (adr r2, 8005a98 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a96:	bf00      	nop
 8005a98:	08005afd 	.word	0x08005afd
 8005a9c:	08005d3b 	.word	0x08005d3b
 8005aa0:	08005d3b 	.word	0x08005d3b
 8005aa4:	08005d3b 	.word	0x08005d3b
 8005aa8:	08005d3b 	.word	0x08005d3b
 8005aac:	08005d3b 	.word	0x08005d3b
 8005ab0:	08005d3b 	.word	0x08005d3b
 8005ab4:	08005d3b 	.word	0x08005d3b
 8005ab8:	08005b23 	.word	0x08005b23
 8005abc:	08005d3b 	.word	0x08005d3b
 8005ac0:	08005d3b 	.word	0x08005d3b
 8005ac4:	08005d3b 	.word	0x08005d3b
 8005ac8:	08005d3b 	.word	0x08005d3b
 8005acc:	08005d3b 	.word	0x08005d3b
 8005ad0:	08005d3b 	.word	0x08005d3b
 8005ad4:	08005d3b 	.word	0x08005d3b
 8005ad8:	08005b29 	.word	0x08005b29
 8005adc:	08005d3b 	.word	0x08005d3b
 8005ae0:	08005d3b 	.word	0x08005d3b
 8005ae4:	08005d3b 	.word	0x08005d3b
 8005ae8:	08005d3b 	.word	0x08005d3b
 8005aec:	08005d3b 	.word	0x08005d3b
 8005af0:	08005d3b 	.word	0x08005d3b
 8005af4:	08005d3b 	.word	0x08005d3b
 8005af8:	08005b2f 	.word	0x08005b2f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005afc:	4b94      	ldr	r3, [pc, #592]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0320 	and.w	r3, r3, #32
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d009      	beq.n	8005b1c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b08:	4b91      	ldr	r3, [pc, #580]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	08db      	lsrs	r3, r3, #3
 8005b0e:	f003 0303 	and.w	r3, r3, #3
 8005b12:	4a90      	ldr	r2, [pc, #576]	; (8005d54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b14:	fa22 f303 	lsr.w	r3, r2, r3
 8005b18:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005b1a:	e111      	b.n	8005d40 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005b1c:	4b8d      	ldr	r3, [pc, #564]	; (8005d54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b1e:	61bb      	str	r3, [r7, #24]
      break;
 8005b20:	e10e      	b.n	8005d40 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005b22:	4b8d      	ldr	r3, [pc, #564]	; (8005d58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005b24:	61bb      	str	r3, [r7, #24]
      break;
 8005b26:	e10b      	b.n	8005d40 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005b28:	4b8c      	ldr	r3, [pc, #560]	; (8005d5c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005b2a:	61bb      	str	r3, [r7, #24]
      break;
 8005b2c:	e108      	b.n	8005d40 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b2e:	4b88      	ldr	r3, [pc, #544]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b32:	f003 0303 	and.w	r3, r3, #3
 8005b36:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005b38:	4b85      	ldr	r3, [pc, #532]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3c:	091b      	lsrs	r3, r3, #4
 8005b3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b42:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005b44:	4b82      	ldr	r3, [pc, #520]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b48:	f003 0301 	and.w	r3, r3, #1
 8005b4c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005b4e:	4b80      	ldr	r3, [pc, #512]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b52:	08db      	lsrs	r3, r3, #3
 8005b54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	fb02 f303 	mul.w	r3, r2, r3
 8005b5e:	ee07 3a90 	vmov	s15, r3
 8005b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b66:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f000 80e1 	beq.w	8005d34 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	f000 8083 	beq.w	8005c80 <HAL_RCC_GetSysClockFreq+0x204>
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	f200 80a1 	bhi.w	8005cc4 <HAL_RCC_GetSysClockFreq+0x248>
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d003      	beq.n	8005b90 <HAL_RCC_GetSysClockFreq+0x114>
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d056      	beq.n	8005c3c <HAL_RCC_GetSysClockFreq+0x1c0>
 8005b8e:	e099      	b.n	8005cc4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b90:	4b6f      	ldr	r3, [pc, #444]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0320 	and.w	r3, r3, #32
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d02d      	beq.n	8005bf8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b9c:	4b6c      	ldr	r3, [pc, #432]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	08db      	lsrs	r3, r3, #3
 8005ba2:	f003 0303 	and.w	r3, r3, #3
 8005ba6:	4a6b      	ldr	r2, [pc, #428]	; (8005d54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8005bac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	ee07 3a90 	vmov	s15, r3
 8005bb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	ee07 3a90 	vmov	s15, r3
 8005bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bc6:	4b62      	ldr	r3, [pc, #392]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bce:	ee07 3a90 	vmov	s15, r3
 8005bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bda:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005d60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005be6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bf2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005bf6:	e087      	b.n	8005d08 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	ee07 3a90 	vmov	s15, r3
 8005bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c02:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005d64 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c0a:	4b51      	ldr	r3, [pc, #324]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c12:	ee07 3a90 	vmov	s15, r3
 8005c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c1e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005d60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005c3a:	e065      	b.n	8005d08 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	ee07 3a90 	vmov	s15, r3
 8005c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c46:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005d68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c4e:	4b40      	ldr	r3, [pc, #256]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c56:	ee07 3a90 	vmov	s15, r3
 8005c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c62:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005d60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005c7e:	e043      	b.n	8005d08 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	ee07 3a90 	vmov	s15, r3
 8005c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c8a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005d6c <HAL_RCC_GetSysClockFreq+0x2f0>
 8005c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c92:	4b2f      	ldr	r3, [pc, #188]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c9a:	ee07 3a90 	vmov	s15, r3
 8005c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ca2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ca6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005d60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005cc2:	e021      	b.n	8005d08 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	ee07 3a90 	vmov	s15, r3
 8005cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cce:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005d68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cd6:	4b1e      	ldr	r3, [pc, #120]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cde:	ee07 3a90 	vmov	s15, r3
 8005ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ce6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005d60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d06:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005d08:	4b11      	ldr	r3, [pc, #68]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0c:	0a5b      	lsrs	r3, r3, #9
 8005d0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d12:	3301      	adds	r3, #1
 8005d14:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	ee07 3a90 	vmov	s15, r3
 8005d1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d20:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d2c:	ee17 3a90 	vmov	r3, s15
 8005d30:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005d32:	e005      	b.n	8005d40 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005d34:	2300      	movs	r3, #0
 8005d36:	61bb      	str	r3, [r7, #24]
      break;
 8005d38:	e002      	b.n	8005d40 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005d3a:	4b07      	ldr	r3, [pc, #28]	; (8005d58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005d3c:	61bb      	str	r3, [r7, #24]
      break;
 8005d3e:	bf00      	nop
  }

  return sysclockfreq;
 8005d40:	69bb      	ldr	r3, [r7, #24]
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3724      	adds	r7, #36	; 0x24
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	58024400 	.word	0x58024400
 8005d54:	03d09000 	.word	0x03d09000
 8005d58:	003d0900 	.word	0x003d0900
 8005d5c:	007a1200 	.word	0x007a1200
 8005d60:	46000000 	.word	0x46000000
 8005d64:	4c742400 	.word	0x4c742400
 8005d68:	4a742400 	.word	0x4a742400
 8005d6c:	4af42400 	.word	0x4af42400

08005d70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005d76:	f7ff fe81 	bl	8005a7c <HAL_RCC_GetSysClockFreq>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	4b10      	ldr	r3, [pc, #64]	; (8005dc0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	0a1b      	lsrs	r3, r3, #8
 8005d82:	f003 030f 	and.w	r3, r3, #15
 8005d86:	490f      	ldr	r1, [pc, #60]	; (8005dc4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005d88:	5ccb      	ldrb	r3, [r1, r3]
 8005d8a:	f003 031f 	and.w	r3, r3, #31
 8005d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d92:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d94:	4b0a      	ldr	r3, [pc, #40]	; (8005dc0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	f003 030f 	and.w	r3, r3, #15
 8005d9c:	4a09      	ldr	r2, [pc, #36]	; (8005dc4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005d9e:	5cd3      	ldrb	r3, [r2, r3]
 8005da0:	f003 031f 	and.w	r3, r3, #31
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	fa22 f303 	lsr.w	r3, r2, r3
 8005daa:	4a07      	ldr	r2, [pc, #28]	; (8005dc8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005dac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005dae:	4a07      	ldr	r2, [pc, #28]	; (8005dcc <HAL_RCC_GetHCLKFreq+0x5c>)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005db4:	4b04      	ldr	r3, [pc, #16]	; (8005dc8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005db6:	681b      	ldr	r3, [r3, #0]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3708      	adds	r7, #8
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	58024400 	.word	0x58024400
 8005dc4:	0800b8f8 	.word	0x0800b8f8
 8005dc8:	24000004 	.word	0x24000004
 8005dcc:	24000000 	.word	0x24000000

08005dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005dd4:	f7ff ffcc 	bl	8005d70 <HAL_RCC_GetHCLKFreq>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	4b06      	ldr	r3, [pc, #24]	; (8005df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	091b      	lsrs	r3, r3, #4
 8005de0:	f003 0307 	and.w	r3, r3, #7
 8005de4:	4904      	ldr	r1, [pc, #16]	; (8005df8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005de6:	5ccb      	ldrb	r3, [r1, r3]
 8005de8:	f003 031f 	and.w	r3, r3, #31
 8005dec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	58024400 	.word	0x58024400
 8005df8:	0800b8f8 	.word	0x0800b8f8

08005dfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005e00:	f7ff ffb6 	bl	8005d70 <HAL_RCC_GetHCLKFreq>
 8005e04:	4602      	mov	r2, r0
 8005e06:	4b06      	ldr	r3, [pc, #24]	; (8005e20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e08:	69db      	ldr	r3, [r3, #28]
 8005e0a:	0a1b      	lsrs	r3, r3, #8
 8005e0c:	f003 0307 	and.w	r3, r3, #7
 8005e10:	4904      	ldr	r1, [pc, #16]	; (8005e24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e12:	5ccb      	ldrb	r3, [r1, r3]
 8005e14:	f003 031f 	and.w	r3, r3, #31
 8005e18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	58024400 	.word	0x58024400
 8005e24:	0800b8f8 	.word	0x0800b8f8

08005e28 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e2c:	b0ca      	sub	sp, #296	; 0x128
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e34:	2300      	movs	r3, #0
 8005e36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e48:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005e4c:	2500      	movs	r5, #0
 8005e4e:	ea54 0305 	orrs.w	r3, r4, r5
 8005e52:	d049      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e5a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e5e:	d02f      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005e60:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e64:	d828      	bhi.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005e66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e6a:	d01a      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005e6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e70:	d822      	bhi.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d003      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005e76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e7a:	d007      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005e7c:	e01c      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e7e:	4bb8      	ldr	r3, [pc, #736]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e82:	4ab7      	ldr	r2, [pc, #732]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005e8a:	e01a      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e90:	3308      	adds	r3, #8
 8005e92:	2102      	movs	r1, #2
 8005e94:	4618      	mov	r0, r3
 8005e96:	f001 fc8f 	bl	80077b8 <RCCEx_PLL2_Config>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005ea0:	e00f      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ea6:	3328      	adds	r3, #40	; 0x28
 8005ea8:	2102      	movs	r1, #2
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f001 fd36 	bl	800791c <RCCEx_PLL3_Config>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005eb6:	e004      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005ebe:	e000      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005ec0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ec2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10a      	bne.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005eca:	4ba5      	ldr	r3, [pc, #660]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ece:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ed6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ed8:	4aa1      	ldr	r2, [pc, #644]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005eda:	430b      	orrs	r3, r1
 8005edc:	6513      	str	r3, [r2, #80]	; 0x50
 8005ede:	e003      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ee0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ee4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005ef4:	f04f 0900 	mov.w	r9, #0
 8005ef8:	ea58 0309 	orrs.w	r3, r8, r9
 8005efc:	d047      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f04:	2b04      	cmp	r3, #4
 8005f06:	d82a      	bhi.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005f08:	a201      	add	r2, pc, #4	; (adr r2, 8005f10 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0e:	bf00      	nop
 8005f10:	08005f25 	.word	0x08005f25
 8005f14:	08005f33 	.word	0x08005f33
 8005f18:	08005f49 	.word	0x08005f49
 8005f1c:	08005f67 	.word	0x08005f67
 8005f20:	08005f67 	.word	0x08005f67
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f24:	4b8e      	ldr	r3, [pc, #568]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f28:	4a8d      	ldr	r2, [pc, #564]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f30:	e01a      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f36:	3308      	adds	r3, #8
 8005f38:	2100      	movs	r1, #0
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f001 fc3c 	bl	80077b8 <RCCEx_PLL2_Config>
 8005f40:	4603      	mov	r3, r0
 8005f42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f46:	e00f      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f4c:	3328      	adds	r3, #40	; 0x28
 8005f4e:	2100      	movs	r1, #0
 8005f50:	4618      	mov	r0, r3
 8005f52:	f001 fce3 	bl	800791c <RCCEx_PLL3_Config>
 8005f56:	4603      	mov	r3, r0
 8005f58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f5c:	e004      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f64:	e000      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005f66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10a      	bne.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f70:	4b7b      	ldr	r3, [pc, #492]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f74:	f023 0107 	bic.w	r1, r3, #7
 8005f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f7e:	4a78      	ldr	r2, [pc, #480]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f80:	430b      	orrs	r3, r1
 8005f82:	6513      	str	r3, [r2, #80]	; 0x50
 8005f84:	e003      	b.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f96:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005f9a:	f04f 0b00 	mov.w	fp, #0
 8005f9e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005fa2:	d04c      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005faa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fae:	d030      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005fb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fb4:	d829      	bhi.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005fb6:	2bc0      	cmp	r3, #192	; 0xc0
 8005fb8:	d02d      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005fba:	2bc0      	cmp	r3, #192	; 0xc0
 8005fbc:	d825      	bhi.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005fbe:	2b80      	cmp	r3, #128	; 0x80
 8005fc0:	d018      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005fc2:	2b80      	cmp	r3, #128	; 0x80
 8005fc4:	d821      	bhi.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d002      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005fca:	2b40      	cmp	r3, #64	; 0x40
 8005fcc:	d007      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005fce:	e01c      	b.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fd0:	4b63      	ldr	r3, [pc, #396]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd4:	4a62      	ldr	r2, [pc, #392]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005fd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005fdc:	e01c      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fe2:	3308      	adds	r3, #8
 8005fe4:	2100      	movs	r1, #0
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f001 fbe6 	bl	80077b8 <RCCEx_PLL2_Config>
 8005fec:	4603      	mov	r3, r0
 8005fee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005ff2:	e011      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ff8:	3328      	adds	r3, #40	; 0x28
 8005ffa:	2100      	movs	r1, #0
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f001 fc8d 	bl	800791c <RCCEx_PLL3_Config>
 8006002:	4603      	mov	r3, r0
 8006004:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006008:	e006      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006010:	e002      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006012:	bf00      	nop
 8006014:	e000      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006016:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006018:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10a      	bne.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006020:	4b4f      	ldr	r3, [pc, #316]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006024:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006028:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800602c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800602e:	4a4c      	ldr	r2, [pc, #304]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006030:	430b      	orrs	r3, r1
 8006032:	6513      	str	r3, [r2, #80]	; 0x50
 8006034:	e003      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006036:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800603a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800603e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006046:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800604a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800604e:	2300      	movs	r3, #0
 8006050:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006054:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8006058:	460b      	mov	r3, r1
 800605a:	4313      	orrs	r3, r2
 800605c:	d053      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800605e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006062:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006066:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800606a:	d035      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800606c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006070:	d82e      	bhi.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006072:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006076:	d031      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006078:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800607c:	d828      	bhi.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800607e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006082:	d01a      	beq.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006084:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006088:	d822      	bhi.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800608a:	2b00      	cmp	r3, #0
 800608c:	d003      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800608e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006092:	d007      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006094:	e01c      	b.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006096:	4b32      	ldr	r3, [pc, #200]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609a:	4a31      	ldr	r2, [pc, #196]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800609c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060a2:	e01c      	b.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060a8:	3308      	adds	r3, #8
 80060aa:	2100      	movs	r1, #0
 80060ac:	4618      	mov	r0, r3
 80060ae:	f001 fb83 	bl	80077b8 <RCCEx_PLL2_Config>
 80060b2:	4603      	mov	r3, r0
 80060b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80060b8:	e011      	b.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060be:	3328      	adds	r3, #40	; 0x28
 80060c0:	2100      	movs	r1, #0
 80060c2:	4618      	mov	r0, r3
 80060c4:	f001 fc2a 	bl	800791c <RCCEx_PLL3_Config>
 80060c8:	4603      	mov	r3, r0
 80060ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060ce:	e006      	b.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80060d6:	e002      	b.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80060d8:	bf00      	nop
 80060da:	e000      	b.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80060dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d10b      	bne.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80060e6:	4b1e      	ldr	r3, [pc, #120]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ea:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80060ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80060f6:	4a1a      	ldr	r2, [pc, #104]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060f8:	430b      	orrs	r3, r1
 80060fa:	6593      	str	r3, [r2, #88]	; 0x58
 80060fc:	e003      	b.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006102:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006106:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800610a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006112:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006116:	2300      	movs	r3, #0
 8006118:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800611c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006120:	460b      	mov	r3, r1
 8006122:	4313      	orrs	r3, r2
 8006124:	d056      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006126:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800612a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800612e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006132:	d038      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006134:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006138:	d831      	bhi.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800613a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800613e:	d034      	beq.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006140:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006144:	d82b      	bhi.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006146:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800614a:	d01d      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800614c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006150:	d825      	bhi.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006152:	2b00      	cmp	r3, #0
 8006154:	d006      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006156:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800615a:	d00a      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800615c:	e01f      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800615e:	bf00      	nop
 8006160:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006164:	4ba2      	ldr	r3, [pc, #648]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006168:	4aa1      	ldr	r2, [pc, #644]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800616a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800616e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006170:	e01c      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006176:	3308      	adds	r3, #8
 8006178:	2100      	movs	r1, #0
 800617a:	4618      	mov	r0, r3
 800617c:	f001 fb1c 	bl	80077b8 <RCCEx_PLL2_Config>
 8006180:	4603      	mov	r3, r0
 8006182:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006186:	e011      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006188:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800618c:	3328      	adds	r3, #40	; 0x28
 800618e:	2100      	movs	r1, #0
 8006190:	4618      	mov	r0, r3
 8006192:	f001 fbc3 	bl	800791c <RCCEx_PLL3_Config>
 8006196:	4603      	mov	r3, r0
 8006198:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800619c:	e006      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80061a4:	e002      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80061a6:	bf00      	nop
 80061a8:	e000      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80061aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10b      	bne.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80061b4:	4b8e      	ldr	r3, [pc, #568]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80061bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80061c4:	4a8a      	ldr	r2, [pc, #552]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061c6:	430b      	orrs	r3, r1
 80061c8:	6593      	str	r3, [r2, #88]	; 0x58
 80061ca:	e003      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80061d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061dc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80061e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80061e4:	2300      	movs	r3, #0
 80061e6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80061ea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80061ee:	460b      	mov	r3, r1
 80061f0:	4313      	orrs	r3, r2
 80061f2:	d03a      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80061f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061fa:	2b30      	cmp	r3, #48	; 0x30
 80061fc:	d01f      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80061fe:	2b30      	cmp	r3, #48	; 0x30
 8006200:	d819      	bhi.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006202:	2b20      	cmp	r3, #32
 8006204:	d00c      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006206:	2b20      	cmp	r3, #32
 8006208:	d815      	bhi.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800620a:	2b00      	cmp	r3, #0
 800620c:	d019      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800620e:	2b10      	cmp	r3, #16
 8006210:	d111      	bne.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006212:	4b77      	ldr	r3, [pc, #476]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006216:	4a76      	ldr	r2, [pc, #472]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800621c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800621e:	e011      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006224:	3308      	adds	r3, #8
 8006226:	2102      	movs	r1, #2
 8006228:	4618      	mov	r0, r3
 800622a:	f001 fac5 	bl	80077b8 <RCCEx_PLL2_Config>
 800622e:	4603      	mov	r3, r0
 8006230:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006234:	e006      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800623c:	e002      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800623e:	bf00      	nop
 8006240:	e000      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006242:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006244:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006248:	2b00      	cmp	r3, #0
 800624a:	d10a      	bne.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800624c:	4b68      	ldr	r3, [pc, #416]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800624e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006250:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006254:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800625a:	4a65      	ldr	r2, [pc, #404]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800625c:	430b      	orrs	r3, r1
 800625e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006260:	e003      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006262:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006266:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800626a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800626e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006272:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006276:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800627a:	2300      	movs	r3, #0
 800627c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006280:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006284:	460b      	mov	r3, r1
 8006286:	4313      	orrs	r3, r2
 8006288:	d051      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800628a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800628e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006290:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006294:	d035      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006296:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800629a:	d82e      	bhi.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800629c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062a0:	d031      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80062a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062a6:	d828      	bhi.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80062a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062ac:	d01a      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80062ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062b2:	d822      	bhi.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d003      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80062b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062bc:	d007      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80062be:	e01c      	b.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062c0:	4b4b      	ldr	r3, [pc, #300]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c4:	4a4a      	ldr	r2, [pc, #296]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80062cc:	e01c      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062d2:	3308      	adds	r3, #8
 80062d4:	2100      	movs	r1, #0
 80062d6:	4618      	mov	r0, r3
 80062d8:	f001 fa6e 	bl	80077b8 <RCCEx_PLL2_Config>
 80062dc:	4603      	mov	r3, r0
 80062de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80062e2:	e011      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062e8:	3328      	adds	r3, #40	; 0x28
 80062ea:	2100      	movs	r1, #0
 80062ec:	4618      	mov	r0, r3
 80062ee:	f001 fb15 	bl	800791c <RCCEx_PLL3_Config>
 80062f2:	4603      	mov	r3, r0
 80062f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80062f8:	e006      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006300:	e002      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006302:	bf00      	nop
 8006304:	e000      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006306:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006308:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800630c:	2b00      	cmp	r3, #0
 800630e:	d10a      	bne.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006310:	4b37      	ldr	r3, [pc, #220]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006314:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006318:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800631c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800631e:	4a34      	ldr	r2, [pc, #208]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006320:	430b      	orrs	r3, r1
 8006322:	6513      	str	r3, [r2, #80]	; 0x50
 8006324:	e003      	b.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006326:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800632a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800632e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006336:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800633a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800633e:	2300      	movs	r3, #0
 8006340:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006344:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006348:	460b      	mov	r3, r1
 800634a:	4313      	orrs	r3, r2
 800634c:	d056      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800634e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006352:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006354:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006358:	d033      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800635a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800635e:	d82c      	bhi.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006360:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006364:	d02f      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006366:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800636a:	d826      	bhi.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 800636c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006370:	d02b      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006372:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006376:	d820      	bhi.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006378:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800637c:	d012      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800637e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006382:	d81a      	bhi.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006384:	2b00      	cmp	r3, #0
 8006386:	d022      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800638c:	d115      	bne.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800638e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006392:	3308      	adds	r3, #8
 8006394:	2101      	movs	r1, #1
 8006396:	4618      	mov	r0, r3
 8006398:	f001 fa0e 	bl	80077b8 <RCCEx_PLL2_Config>
 800639c:	4603      	mov	r3, r0
 800639e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80063a2:	e015      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063a8:	3328      	adds	r3, #40	; 0x28
 80063aa:	2101      	movs	r1, #1
 80063ac:	4618      	mov	r0, r3
 80063ae:	f001 fab5 	bl	800791c <RCCEx_PLL3_Config>
 80063b2:	4603      	mov	r3, r0
 80063b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80063b8:	e00a      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80063c0:	e006      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80063c2:	bf00      	nop
 80063c4:	e004      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80063c6:	bf00      	nop
 80063c8:	e002      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80063ca:	bf00      	nop
 80063cc:	e000      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80063ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d10d      	bne.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80063d8:	4b05      	ldr	r3, [pc, #20]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063dc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80063e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063e6:	4a02      	ldr	r2, [pc, #8]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063e8:	430b      	orrs	r3, r1
 80063ea:	6513      	str	r3, [r2, #80]	; 0x50
 80063ec:	e006      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80063ee:	bf00      	nop
 80063f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80063fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006404:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006408:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800640c:	2300      	movs	r3, #0
 800640e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006412:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006416:	460b      	mov	r3, r1
 8006418:	4313      	orrs	r3, r2
 800641a:	d055      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800641c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006420:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006424:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006428:	d033      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800642a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800642e:	d82c      	bhi.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006434:	d02f      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800643a:	d826      	bhi.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800643c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006440:	d02b      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006442:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006446:	d820      	bhi.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006448:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800644c:	d012      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800644e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006452:	d81a      	bhi.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006454:	2b00      	cmp	r3, #0
 8006456:	d022      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006458:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800645c:	d115      	bne.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800645e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006462:	3308      	adds	r3, #8
 8006464:	2101      	movs	r1, #1
 8006466:	4618      	mov	r0, r3
 8006468:	f001 f9a6 	bl	80077b8 <RCCEx_PLL2_Config>
 800646c:	4603      	mov	r3, r0
 800646e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006472:	e015      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006474:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006478:	3328      	adds	r3, #40	; 0x28
 800647a:	2101      	movs	r1, #1
 800647c:	4618      	mov	r0, r3
 800647e:	f001 fa4d 	bl	800791c <RCCEx_PLL3_Config>
 8006482:	4603      	mov	r3, r0
 8006484:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006488:	e00a      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006490:	e006      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006492:	bf00      	nop
 8006494:	e004      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006496:	bf00      	nop
 8006498:	e002      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800649a:	bf00      	nop
 800649c:	e000      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800649e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d10b      	bne.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80064a8:	4ba3      	ldr	r3, [pc, #652]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ac:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80064b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80064b8:	4a9f      	ldr	r2, [pc, #636]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064ba:	430b      	orrs	r3, r1
 80064bc:	6593      	str	r3, [r2, #88]	; 0x58
 80064be:	e003      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80064c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80064d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80064d8:	2300      	movs	r3, #0
 80064da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80064de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80064e2:	460b      	mov	r3, r1
 80064e4:	4313      	orrs	r3, r2
 80064e6:	d037      	beq.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80064e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064f2:	d00e      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80064f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064f8:	d816      	bhi.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d018      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80064fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006502:	d111      	bne.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006504:	4b8c      	ldr	r3, [pc, #560]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006508:	4a8b      	ldr	r2, [pc, #556]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800650a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800650e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006510:	e00f      	b.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006516:	3308      	adds	r3, #8
 8006518:	2101      	movs	r1, #1
 800651a:	4618      	mov	r0, r3
 800651c:	f001 f94c 	bl	80077b8 <RCCEx_PLL2_Config>
 8006520:	4603      	mov	r3, r0
 8006522:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006526:	e004      	b.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800652e:	e000      	b.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006530:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006532:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10a      	bne.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800653a:	4b7f      	ldr	r3, [pc, #508]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800653c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800653e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006542:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006548:	4a7b      	ldr	r2, [pc, #492]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800654a:	430b      	orrs	r3, r1
 800654c:	6513      	str	r3, [r2, #80]	; 0x50
 800654e:	e003      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006550:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006554:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800655c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006560:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006564:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006568:	2300      	movs	r3, #0
 800656a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800656e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006572:	460b      	mov	r3, r1
 8006574:	4313      	orrs	r3, r2
 8006576:	d039      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800657c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800657e:	2b03      	cmp	r3, #3
 8006580:	d81c      	bhi.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006582:	a201      	add	r2, pc, #4	; (adr r2, 8006588 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006588:	080065c5 	.word	0x080065c5
 800658c:	08006599 	.word	0x08006599
 8006590:	080065a7 	.word	0x080065a7
 8006594:	080065c5 	.word	0x080065c5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006598:	4b67      	ldr	r3, [pc, #412]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800659a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659c:	4a66      	ldr	r2, [pc, #408]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800659e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80065a4:	e00f      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80065a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065aa:	3308      	adds	r3, #8
 80065ac:	2102      	movs	r1, #2
 80065ae:	4618      	mov	r0, r3
 80065b0:	f001 f902 	bl	80077b8 <RCCEx_PLL2_Config>
 80065b4:	4603      	mov	r3, r0
 80065b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80065ba:	e004      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80065c2:	e000      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80065c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10a      	bne.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80065ce:	4b5a      	ldr	r3, [pc, #360]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065d2:	f023 0103 	bic.w	r1, r3, #3
 80065d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065dc:	4a56      	ldr	r2, [pc, #344]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065de:	430b      	orrs	r3, r1
 80065e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80065e2:	e003      	b.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80065ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80065f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065fc:	2300      	movs	r3, #0
 80065fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006602:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006606:	460b      	mov	r3, r1
 8006608:	4313      	orrs	r3, r2
 800660a:	f000 809f 	beq.w	800674c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800660e:	4b4b      	ldr	r3, [pc, #300]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a4a      	ldr	r2, [pc, #296]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006618:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800661a:	f7fb f821 	bl	8001660 <HAL_GetTick>
 800661e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006622:	e00b      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006624:	f7fb f81c 	bl	8001660 <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	2b64      	cmp	r3, #100	; 0x64
 8006632:	d903      	bls.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800663a:	e005      	b.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800663c:	4b3f      	ldr	r3, [pc, #252]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006644:	2b00      	cmp	r3, #0
 8006646:	d0ed      	beq.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006648:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800664c:	2b00      	cmp	r3, #0
 800664e:	d179      	bne.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006650:	4b39      	ldr	r3, [pc, #228]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006652:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006654:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006658:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800665c:	4053      	eors	r3, r2
 800665e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006662:	2b00      	cmp	r3, #0
 8006664:	d015      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006666:	4b34      	ldr	r3, [pc, #208]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800666a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800666e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006672:	4b31      	ldr	r3, [pc, #196]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006676:	4a30      	ldr	r2, [pc, #192]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800667c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800667e:	4b2e      	ldr	r3, [pc, #184]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006682:	4a2d      	ldr	r2, [pc, #180]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006688:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800668a:	4a2b      	ldr	r2, [pc, #172]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800668c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006690:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006696:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800669a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800669e:	d118      	bne.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066a0:	f7fa ffde 	bl	8001660 <HAL_GetTick>
 80066a4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066a8:	e00d      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066aa:	f7fa ffd9 	bl	8001660 <HAL_GetTick>
 80066ae:	4602      	mov	r2, r0
 80066b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80066b4:	1ad2      	subs	r2, r2, r3
 80066b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d903      	bls.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80066c4:	e005      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066c6:	4b1c      	ldr	r3, [pc, #112]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ca:	f003 0302 	and.w	r3, r3, #2
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d0eb      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80066d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d129      	bne.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80066e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066ea:	d10e      	bne.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80066ec:	4b12      	ldr	r3, [pc, #72]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80066f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80066fc:	091a      	lsrs	r2, r3, #4
 80066fe:	4b10      	ldr	r3, [pc, #64]	; (8006740 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006700:	4013      	ands	r3, r2
 8006702:	4a0d      	ldr	r2, [pc, #52]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006704:	430b      	orrs	r3, r1
 8006706:	6113      	str	r3, [r2, #16]
 8006708:	e005      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800670a:	4b0b      	ldr	r3, [pc, #44]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	4a0a      	ldr	r2, [pc, #40]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006710:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006714:	6113      	str	r3, [r2, #16]
 8006716:	4b08      	ldr	r3, [pc, #32]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006718:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800671a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800671e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006722:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006726:	4a04      	ldr	r2, [pc, #16]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006728:	430b      	orrs	r3, r1
 800672a:	6713      	str	r3, [r2, #112]	; 0x70
 800672c:	e00e      	b.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800672e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006732:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8006736:	e009      	b.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006738:	58024400 	.word	0x58024400
 800673c:	58024800 	.word	0x58024800
 8006740:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006744:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006748:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800674c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006754:	f002 0301 	and.w	r3, r2, #1
 8006758:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800675c:	2300      	movs	r3, #0
 800675e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006762:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006766:	460b      	mov	r3, r1
 8006768:	4313      	orrs	r3, r2
 800676a:	f000 8089 	beq.w	8006880 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800676e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006772:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006774:	2b28      	cmp	r3, #40	; 0x28
 8006776:	d86b      	bhi.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006778:	a201      	add	r2, pc, #4	; (adr r2, 8006780 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800677a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677e:	bf00      	nop
 8006780:	08006859 	.word	0x08006859
 8006784:	08006851 	.word	0x08006851
 8006788:	08006851 	.word	0x08006851
 800678c:	08006851 	.word	0x08006851
 8006790:	08006851 	.word	0x08006851
 8006794:	08006851 	.word	0x08006851
 8006798:	08006851 	.word	0x08006851
 800679c:	08006851 	.word	0x08006851
 80067a0:	08006825 	.word	0x08006825
 80067a4:	08006851 	.word	0x08006851
 80067a8:	08006851 	.word	0x08006851
 80067ac:	08006851 	.word	0x08006851
 80067b0:	08006851 	.word	0x08006851
 80067b4:	08006851 	.word	0x08006851
 80067b8:	08006851 	.word	0x08006851
 80067bc:	08006851 	.word	0x08006851
 80067c0:	0800683b 	.word	0x0800683b
 80067c4:	08006851 	.word	0x08006851
 80067c8:	08006851 	.word	0x08006851
 80067cc:	08006851 	.word	0x08006851
 80067d0:	08006851 	.word	0x08006851
 80067d4:	08006851 	.word	0x08006851
 80067d8:	08006851 	.word	0x08006851
 80067dc:	08006851 	.word	0x08006851
 80067e0:	08006859 	.word	0x08006859
 80067e4:	08006851 	.word	0x08006851
 80067e8:	08006851 	.word	0x08006851
 80067ec:	08006851 	.word	0x08006851
 80067f0:	08006851 	.word	0x08006851
 80067f4:	08006851 	.word	0x08006851
 80067f8:	08006851 	.word	0x08006851
 80067fc:	08006851 	.word	0x08006851
 8006800:	08006859 	.word	0x08006859
 8006804:	08006851 	.word	0x08006851
 8006808:	08006851 	.word	0x08006851
 800680c:	08006851 	.word	0x08006851
 8006810:	08006851 	.word	0x08006851
 8006814:	08006851 	.word	0x08006851
 8006818:	08006851 	.word	0x08006851
 800681c:	08006851 	.word	0x08006851
 8006820:	08006859 	.word	0x08006859
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006828:	3308      	adds	r3, #8
 800682a:	2101      	movs	r1, #1
 800682c:	4618      	mov	r0, r3
 800682e:	f000 ffc3 	bl	80077b8 <RCCEx_PLL2_Config>
 8006832:	4603      	mov	r3, r0
 8006834:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006838:	e00f      	b.n	800685a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800683a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800683e:	3328      	adds	r3, #40	; 0x28
 8006840:	2101      	movs	r1, #1
 8006842:	4618      	mov	r0, r3
 8006844:	f001 f86a 	bl	800791c <RCCEx_PLL3_Config>
 8006848:	4603      	mov	r3, r0
 800684a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800684e:	e004      	b.n	800685a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006856:	e000      	b.n	800685a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006858:	bf00      	nop
    }

    if (ret == HAL_OK)
 800685a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800685e:	2b00      	cmp	r3, #0
 8006860:	d10a      	bne.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006862:	4bbf      	ldr	r3, [pc, #764]	; (8006b60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006866:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800686a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800686e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006870:	4abb      	ldr	r2, [pc, #748]	; (8006b60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006872:	430b      	orrs	r3, r1
 8006874:	6553      	str	r3, [r2, #84]	; 0x54
 8006876:	e003      	b.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006878:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800687c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006880:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006888:	f002 0302 	and.w	r3, r2, #2
 800688c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006890:	2300      	movs	r3, #0
 8006892:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006896:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800689a:	460b      	mov	r3, r1
 800689c:	4313      	orrs	r3, r2
 800689e:	d041      	beq.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80068a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068a6:	2b05      	cmp	r3, #5
 80068a8:	d824      	bhi.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80068aa:	a201      	add	r2, pc, #4	; (adr r2, 80068b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80068ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b0:	080068fd 	.word	0x080068fd
 80068b4:	080068c9 	.word	0x080068c9
 80068b8:	080068df 	.word	0x080068df
 80068bc:	080068fd 	.word	0x080068fd
 80068c0:	080068fd 	.word	0x080068fd
 80068c4:	080068fd 	.word	0x080068fd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068cc:	3308      	adds	r3, #8
 80068ce:	2101      	movs	r1, #1
 80068d0:	4618      	mov	r0, r3
 80068d2:	f000 ff71 	bl	80077b8 <RCCEx_PLL2_Config>
 80068d6:	4603      	mov	r3, r0
 80068d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80068dc:	e00f      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80068de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068e2:	3328      	adds	r3, #40	; 0x28
 80068e4:	2101      	movs	r1, #1
 80068e6:	4618      	mov	r0, r3
 80068e8:	f001 f818 	bl	800791c <RCCEx_PLL3_Config>
 80068ec:	4603      	mov	r3, r0
 80068ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80068f2:	e004      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80068fa:	e000      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80068fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006902:	2b00      	cmp	r3, #0
 8006904:	d10a      	bne.n	800691c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006906:	4b96      	ldr	r3, [pc, #600]	; (8006b60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800690a:	f023 0107 	bic.w	r1, r3, #7
 800690e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006912:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006914:	4a92      	ldr	r2, [pc, #584]	; (8006b60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006916:	430b      	orrs	r3, r1
 8006918:	6553      	str	r3, [r2, #84]	; 0x54
 800691a:	e003      	b.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800691c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006920:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800692c:	f002 0304 	and.w	r3, r2, #4
 8006930:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006934:	2300      	movs	r3, #0
 8006936:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800693a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800693e:	460b      	mov	r3, r1
 8006940:	4313      	orrs	r3, r2
 8006942:	d044      	beq.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006948:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800694c:	2b05      	cmp	r3, #5
 800694e:	d825      	bhi.n	800699c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006950:	a201      	add	r2, pc, #4	; (adr r2, 8006958 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006956:	bf00      	nop
 8006958:	080069a5 	.word	0x080069a5
 800695c:	08006971 	.word	0x08006971
 8006960:	08006987 	.word	0x08006987
 8006964:	080069a5 	.word	0x080069a5
 8006968:	080069a5 	.word	0x080069a5
 800696c:	080069a5 	.word	0x080069a5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006974:	3308      	adds	r3, #8
 8006976:	2101      	movs	r1, #1
 8006978:	4618      	mov	r0, r3
 800697a:	f000 ff1d 	bl	80077b8 <RCCEx_PLL2_Config>
 800697e:	4603      	mov	r3, r0
 8006980:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006984:	e00f      	b.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800698a:	3328      	adds	r3, #40	; 0x28
 800698c:	2101      	movs	r1, #1
 800698e:	4618      	mov	r0, r3
 8006990:	f000 ffc4 	bl	800791c <RCCEx_PLL3_Config>
 8006994:	4603      	mov	r3, r0
 8006996:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800699a:	e004      	b.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80069a2:	e000      	b.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80069a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10b      	bne.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80069ae:	4b6c      	ldr	r3, [pc, #432]	; (8006b60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80069b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069b2:	f023 0107 	bic.w	r1, r3, #7
 80069b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069be:	4a68      	ldr	r2, [pc, #416]	; (8006b60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80069c0:	430b      	orrs	r3, r1
 80069c2:	6593      	str	r3, [r2, #88]	; 0x58
 80069c4:	e003      	b.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80069ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d6:	f002 0320 	and.w	r3, r2, #32
 80069da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80069de:	2300      	movs	r3, #0
 80069e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80069e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80069e8:	460b      	mov	r3, r1
 80069ea:	4313      	orrs	r3, r2
 80069ec:	d055      	beq.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80069ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069fa:	d033      	beq.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80069fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a00:	d82c      	bhi.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a06:	d02f      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a0c:	d826      	bhi.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006a0e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a12:	d02b      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006a14:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a18:	d820      	bhi.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006a1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a1e:	d012      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006a20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a24:	d81a      	bhi.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d022      	beq.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006a2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a2e:	d115      	bne.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a34:	3308      	adds	r3, #8
 8006a36:	2100      	movs	r1, #0
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f000 febd 	bl	80077b8 <RCCEx_PLL2_Config>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006a44:	e015      	b.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a4a:	3328      	adds	r3, #40	; 0x28
 8006a4c:	2102      	movs	r1, #2
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f000 ff64 	bl	800791c <RCCEx_PLL3_Config>
 8006a54:	4603      	mov	r3, r0
 8006a56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006a5a:	e00a      	b.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006a62:	e006      	b.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006a64:	bf00      	nop
 8006a66:	e004      	b.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006a68:	bf00      	nop
 8006a6a:	e002      	b.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006a6c:	bf00      	nop
 8006a6e:	e000      	b.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006a70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10b      	bne.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a7a:	4b39      	ldr	r3, [pc, #228]	; (8006b60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a7e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a8a:	4a35      	ldr	r2, [pc, #212]	; (8006b60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006a8c:	430b      	orrs	r3, r1
 8006a8e:	6553      	str	r3, [r2, #84]	; 0x54
 8006a90:	e003      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006aa6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006aaa:	2300      	movs	r3, #0
 8006aac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006ab0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	d058      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006abe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ac2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006ac6:	d033      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006ac8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006acc:	d82c      	bhi.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ad2:	d02f      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ad8:	d826      	bhi.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006ada:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ade:	d02b      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006ae0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ae4:	d820      	bhi.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006ae6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006aea:	d012      	beq.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006aec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006af0:	d81a      	bhi.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d022      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006af6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006afa:	d115      	bne.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b00:	3308      	adds	r3, #8
 8006b02:	2100      	movs	r1, #0
 8006b04:	4618      	mov	r0, r3
 8006b06:	f000 fe57 	bl	80077b8 <RCCEx_PLL2_Config>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006b10:	e015      	b.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b16:	3328      	adds	r3, #40	; 0x28
 8006b18:	2102      	movs	r1, #2
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 fefe 	bl	800791c <RCCEx_PLL3_Config>
 8006b20:	4603      	mov	r3, r0
 8006b22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006b26:	e00a      	b.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006b2e:	e006      	b.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006b30:	bf00      	nop
 8006b32:	e004      	b.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006b34:	bf00      	nop
 8006b36:	e002      	b.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006b38:	bf00      	nop
 8006b3a:	e000      	b.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006b3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10e      	bne.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006b46:	4b06      	ldr	r3, [pc, #24]	; (8006b60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b4a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b56:	4a02      	ldr	r2, [pc, #8]	; (8006b60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b58:	430b      	orrs	r3, r1
 8006b5a:	6593      	str	r3, [r2, #88]	; 0x58
 8006b5c:	e006      	b.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006b5e:	bf00      	nop
 8006b60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b68:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b74:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006b78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b82:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006b86:	460b      	mov	r3, r1
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	d055      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006b94:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006b98:	d033      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006b9a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006b9e:	d82c      	bhi.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006ba0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ba4:	d02f      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006ba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006baa:	d826      	bhi.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006bac:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006bb0:	d02b      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006bb2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006bb6:	d820      	bhi.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006bb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bbc:	d012      	beq.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006bbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bc2:	d81a      	bhi.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d022      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006bc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bcc:	d115      	bne.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bd2:	3308      	adds	r3, #8
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f000 fdee 	bl	80077b8 <RCCEx_PLL2_Config>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006be2:	e015      	b.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006be8:	3328      	adds	r3, #40	; 0x28
 8006bea:	2102      	movs	r1, #2
 8006bec:	4618      	mov	r0, r3
 8006bee:	f000 fe95 	bl	800791c <RCCEx_PLL3_Config>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006bf8:	e00a      	b.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006c00:	e006      	b.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006c02:	bf00      	nop
 8006c04:	e004      	b.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006c06:	bf00      	nop
 8006c08:	e002      	b.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006c0a:	bf00      	nop
 8006c0c:	e000      	b.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006c0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d10b      	bne.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006c18:	4ba1      	ldr	r3, [pc, #644]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c1c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006c28:	4a9d      	ldr	r2, [pc, #628]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c2a:	430b      	orrs	r3, r1
 8006c2c:	6593      	str	r3, [r2, #88]	; 0x58
 8006c2e:	e003      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c40:	f002 0308 	and.w	r3, r2, #8
 8006c44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006c48:	2300      	movs	r3, #0
 8006c4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006c4e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006c52:	460b      	mov	r3, r1
 8006c54:	4313      	orrs	r3, r2
 8006c56:	d01e      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c64:	d10c      	bne.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c6a:	3328      	adds	r3, #40	; 0x28
 8006c6c:	2102      	movs	r1, #2
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f000 fe54 	bl	800791c <RCCEx_PLL3_Config>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d002      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006c80:	4b87      	ldr	r3, [pc, #540]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c84:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c90:	4a83      	ldr	r2, [pc, #524]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c92:	430b      	orrs	r3, r1
 8006c94:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9e:	f002 0310 	and.w	r3, r2, #16
 8006ca2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006cac:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	d01e      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cc2:	d10c      	bne.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cc8:	3328      	adds	r3, #40	; 0x28
 8006cca:	2102      	movs	r1, #2
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f000 fe25 	bl	800791c <RCCEx_PLL3_Config>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d002      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006cde:	4b70      	ldr	r3, [pc, #448]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ce2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006cee:	4a6c      	ldr	r2, [pc, #432]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006cf0:	430b      	orrs	r3, r1
 8006cf2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006d00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d04:	2300      	movs	r3, #0
 8006d06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d0a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006d0e:	460b      	mov	r3, r1
 8006d10:	4313      	orrs	r3, r2
 8006d12:	d03e      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006d1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d20:	d022      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006d22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d26:	d81b      	bhi.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d003      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d30:	d00b      	beq.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006d32:	e015      	b.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d38:	3308      	adds	r3, #8
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f000 fd3b 	bl	80077b8 <RCCEx_PLL2_Config>
 8006d42:	4603      	mov	r3, r0
 8006d44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006d48:	e00f      	b.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d4e:	3328      	adds	r3, #40	; 0x28
 8006d50:	2102      	movs	r1, #2
 8006d52:	4618      	mov	r0, r3
 8006d54:	f000 fde2 	bl	800791c <RCCEx_PLL3_Config>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006d5e:	e004      	b.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006d66:	e000      	b.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006d68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d10b      	bne.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006d72:	4b4b      	ldr	r3, [pc, #300]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d76:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006d82:	4a47      	ldr	r2, [pc, #284]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d84:	430b      	orrs	r3, r1
 8006d86:	6593      	str	r3, [r2, #88]	; 0x58
 8006d88:	e003      	b.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006d9e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006da0:	2300      	movs	r3, #0
 8006da2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006da4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006da8:	460b      	mov	r3, r1
 8006daa:	4313      	orrs	r3, r2
 8006dac:	d03b      	beq.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006db6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006dba:	d01f      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006dbc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006dc0:	d818      	bhi.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006dc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dc6:	d003      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006dc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006dcc:	d007      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006dce:	e011      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dd0:	4b33      	ldr	r3, [pc, #204]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd4:	4a32      	ldr	r2, [pc, #200]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006dd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006ddc:	e00f      	b.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006de2:	3328      	adds	r3, #40	; 0x28
 8006de4:	2101      	movs	r1, #1
 8006de6:	4618      	mov	r0, r3
 8006de8:	f000 fd98 	bl	800791c <RCCEx_PLL3_Config>
 8006dec:	4603      	mov	r3, r0
 8006dee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006df2:	e004      	b.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006dfa:	e000      	b.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006dfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d10b      	bne.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e06:	4b26      	ldr	r3, [pc, #152]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e0a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e16:	4a22      	ldr	r2, [pc, #136]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e18:	430b      	orrs	r3, r1
 8006e1a:	6553      	str	r3, [r2, #84]	; 0x54
 8006e1c:	e003      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006e32:	673b      	str	r3, [r7, #112]	; 0x70
 8006e34:	2300      	movs	r3, #0
 8006e36:	677b      	str	r3, [r7, #116]	; 0x74
 8006e38:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	d034      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d003      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e50:	d007      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006e52:	e011      	b.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e54:	4b12      	ldr	r3, [pc, #72]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e58:	4a11      	ldr	r2, [pc, #68]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006e60:	e00e      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e66:	3308      	adds	r3, #8
 8006e68:	2102      	movs	r1, #2
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f000 fca4 	bl	80077b8 <RCCEx_PLL2_Config>
 8006e70:	4603      	mov	r3, r0
 8006e72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006e76:	e003      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d10d      	bne.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006e88:	4b05      	ldr	r3, [pc, #20]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e96:	4a02      	ldr	r2, [pc, #8]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e98:	430b      	orrs	r3, r1
 8006e9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e9c:	e006      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006e9e:	bf00      	nop
 8006ea0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ea4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ea8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006eb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8006eba:	2300      	movs	r3, #0
 8006ebc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ebe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	d00c      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ecc:	3328      	adds	r3, #40	; 0x28
 8006ece:	2102      	movs	r1, #2
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f000 fd23 	bl	800791c <RCCEx_PLL3_Config>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d002      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eea:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006eee:	663b      	str	r3, [r7, #96]	; 0x60
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	667b      	str	r3, [r7, #100]	; 0x64
 8006ef4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006ef8:	460b      	mov	r3, r1
 8006efa:	4313      	orrs	r3, r2
 8006efc:	d038      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f0a:	d018      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006f0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f10:	d811      	bhi.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006f12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f16:	d014      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006f18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f1c:	d80b      	bhi.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d011      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006f22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f26:	d106      	bne.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f28:	4bc3      	ldr	r3, [pc, #780]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2c:	4ac2      	ldr	r2, [pc, #776]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006f34:	e008      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f3c:	e004      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006f3e:	bf00      	nop
 8006f40:	e002      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006f42:	bf00      	nop
 8006f44:	e000      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006f46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d10b      	bne.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f50:	4bb9      	ldr	r3, [pc, #740]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f54:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f60:	4ab5      	ldr	r2, [pc, #724]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f62:	430b      	orrs	r3, r1
 8006f64:	6553      	str	r3, [r2, #84]	; 0x54
 8006f66:	e003      	b.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f78:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006f7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f7e:	2300      	movs	r3, #0
 8006f80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f82:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006f86:	460b      	mov	r3, r1
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	d009      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006f8c:	4baa      	ldr	r3, [pc, #680]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f90:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f9a:	4aa7      	ldr	r2, [pc, #668]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f9c:	430b      	orrs	r3, r1
 8006f9e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006fac:	653b      	str	r3, [r7, #80]	; 0x50
 8006fae:	2300      	movs	r3, #0
 8006fb0:	657b      	str	r3, [r7, #84]	; 0x54
 8006fb2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	d00a      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006fbc:	4b9e      	ldr	r3, [pc, #632]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fc8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006fcc:	4a9a      	ldr	r2, [pc, #616]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006fce:	430b      	orrs	r3, r1
 8006fd0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fda:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006fde:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fe4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006fe8:	460b      	mov	r3, r1
 8006fea:	4313      	orrs	r3, r2
 8006fec:	d009      	beq.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006fee:	4b92      	ldr	r3, [pc, #584]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ff2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ffc:	4a8e      	ldr	r2, [pc, #568]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ffe:	430b      	orrs	r3, r1
 8007000:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007002:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800700e:	643b      	str	r3, [r7, #64]	; 0x40
 8007010:	2300      	movs	r3, #0
 8007012:	647b      	str	r3, [r7, #68]	; 0x44
 8007014:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007018:	460b      	mov	r3, r1
 800701a:	4313      	orrs	r3, r2
 800701c:	d00e      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800701e:	4b86      	ldr	r3, [pc, #536]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	4a85      	ldr	r2, [pc, #532]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007024:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007028:	6113      	str	r3, [r2, #16]
 800702a:	4b83      	ldr	r3, [pc, #524]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800702c:	6919      	ldr	r1, [r3, #16]
 800702e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007032:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007036:	4a80      	ldr	r2, [pc, #512]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007038:	430b      	orrs	r3, r1
 800703a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800703c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007044:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007048:	63bb      	str	r3, [r7, #56]	; 0x38
 800704a:	2300      	movs	r3, #0
 800704c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800704e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007052:	460b      	mov	r3, r1
 8007054:	4313      	orrs	r3, r2
 8007056:	d009      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007058:	4b77      	ldr	r3, [pc, #476]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800705a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800705c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007066:	4a74      	ldr	r2, [pc, #464]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007068:	430b      	orrs	r3, r1
 800706a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800706c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007074:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007078:	633b      	str	r3, [r7, #48]	; 0x30
 800707a:	2300      	movs	r3, #0
 800707c:	637b      	str	r3, [r7, #52]	; 0x34
 800707e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007082:	460b      	mov	r3, r1
 8007084:	4313      	orrs	r3, r2
 8007086:	d00a      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007088:	4b6b      	ldr	r3, [pc, #428]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800708a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800708c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007090:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007094:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007098:	4a67      	ldr	r2, [pc, #412]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800709a:	430b      	orrs	r3, r1
 800709c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800709e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a6:	2100      	movs	r1, #0
 80070a8:	62b9      	str	r1, [r7, #40]	; 0x28
 80070aa:	f003 0301 	and.w	r3, r3, #1
 80070ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070b0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80070b4:	460b      	mov	r3, r1
 80070b6:	4313      	orrs	r3, r2
 80070b8:	d011      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070be:	3308      	adds	r3, #8
 80070c0:	2100      	movs	r1, #0
 80070c2:	4618      	mov	r0, r3
 80070c4:	f000 fb78 	bl	80077b8 <RCCEx_PLL2_Config>
 80070c8:	4603      	mov	r3, r0
 80070ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80070ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d003      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80070de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e6:	2100      	movs	r1, #0
 80070e8:	6239      	str	r1, [r7, #32]
 80070ea:	f003 0302 	and.w	r3, r3, #2
 80070ee:	627b      	str	r3, [r7, #36]	; 0x24
 80070f0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80070f4:	460b      	mov	r3, r1
 80070f6:	4313      	orrs	r3, r2
 80070f8:	d011      	beq.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80070fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070fe:	3308      	adds	r3, #8
 8007100:	2101      	movs	r1, #1
 8007102:	4618      	mov	r0, r3
 8007104:	f000 fb58 	bl	80077b8 <RCCEx_PLL2_Config>
 8007108:	4603      	mov	r3, r0
 800710a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800710e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007112:	2b00      	cmp	r3, #0
 8007114:	d003      	beq.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007116:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800711a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800711e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007126:	2100      	movs	r1, #0
 8007128:	61b9      	str	r1, [r7, #24]
 800712a:	f003 0304 	and.w	r3, r3, #4
 800712e:	61fb      	str	r3, [r7, #28]
 8007130:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007134:	460b      	mov	r3, r1
 8007136:	4313      	orrs	r3, r2
 8007138:	d011      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800713a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800713e:	3308      	adds	r3, #8
 8007140:	2102      	movs	r1, #2
 8007142:	4618      	mov	r0, r3
 8007144:	f000 fb38 	bl	80077b8 <RCCEx_PLL2_Config>
 8007148:	4603      	mov	r3, r0
 800714a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800714e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007152:	2b00      	cmp	r3, #0
 8007154:	d003      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007156:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800715a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800715e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007166:	2100      	movs	r1, #0
 8007168:	6139      	str	r1, [r7, #16]
 800716a:	f003 0308 	and.w	r3, r3, #8
 800716e:	617b      	str	r3, [r7, #20]
 8007170:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007174:	460b      	mov	r3, r1
 8007176:	4313      	orrs	r3, r2
 8007178:	d011      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800717a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800717e:	3328      	adds	r3, #40	; 0x28
 8007180:	2100      	movs	r1, #0
 8007182:	4618      	mov	r0, r3
 8007184:	f000 fbca 	bl	800791c <RCCEx_PLL3_Config>
 8007188:	4603      	mov	r3, r0
 800718a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800718e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007192:	2b00      	cmp	r3, #0
 8007194:	d003      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007196:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800719a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800719e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a6:	2100      	movs	r1, #0
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	f003 0310 	and.w	r3, r3, #16
 80071ae:	60fb      	str	r3, [r7, #12]
 80071b0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80071b4:	460b      	mov	r3, r1
 80071b6:	4313      	orrs	r3, r2
 80071b8:	d011      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80071ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071be:	3328      	adds	r3, #40	; 0x28
 80071c0:	2101      	movs	r1, #1
 80071c2:	4618      	mov	r0, r3
 80071c4:	f000 fbaa 	bl	800791c <RCCEx_PLL3_Config>
 80071c8:	4603      	mov	r3, r0
 80071ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80071ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d003      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80071de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e6:	2100      	movs	r1, #0
 80071e8:	6039      	str	r1, [r7, #0]
 80071ea:	f003 0320 	and.w	r3, r3, #32
 80071ee:	607b      	str	r3, [r7, #4]
 80071f0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80071f4:	460b      	mov	r3, r1
 80071f6:	4313      	orrs	r3, r2
 80071f8:	d011      	beq.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80071fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071fe:	3328      	adds	r3, #40	; 0x28
 8007200:	2102      	movs	r1, #2
 8007202:	4618      	mov	r0, r3
 8007204:	f000 fb8a 	bl	800791c <RCCEx_PLL3_Config>
 8007208:	4603      	mov	r3, r0
 800720a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800720e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007212:	2b00      	cmp	r3, #0
 8007214:	d003      	beq.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007216:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800721a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800721e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8007222:	2b00      	cmp	r3, #0
 8007224:	d101      	bne.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007226:	2300      	movs	r3, #0
 8007228:	e000      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
}
 800722c:	4618      	mov	r0, r3
 800722e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8007232:	46bd      	mov	sp, r7
 8007234:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007238:	58024400 	.word	0x58024400

0800723c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007240:	f7fe fd96 	bl	8005d70 <HAL_RCC_GetHCLKFreq>
 8007244:	4602      	mov	r2, r0
 8007246:	4b06      	ldr	r3, [pc, #24]	; (8007260 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007248:	6a1b      	ldr	r3, [r3, #32]
 800724a:	091b      	lsrs	r3, r3, #4
 800724c:	f003 0307 	and.w	r3, r3, #7
 8007250:	4904      	ldr	r1, [pc, #16]	; (8007264 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007252:	5ccb      	ldrb	r3, [r1, r3]
 8007254:	f003 031f 	and.w	r3, r3, #31
 8007258:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800725c:	4618      	mov	r0, r3
 800725e:	bd80      	pop	{r7, pc}
 8007260:	58024400 	.word	0x58024400
 8007264:	0800b8f8 	.word	0x0800b8f8

08007268 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007268:	b480      	push	{r7}
 800726a:	b089      	sub	sp, #36	; 0x24
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007270:	4ba1      	ldr	r3, [pc, #644]	; (80074f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007274:	f003 0303 	and.w	r3, r3, #3
 8007278:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800727a:	4b9f      	ldr	r3, [pc, #636]	; (80074f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800727c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800727e:	0b1b      	lsrs	r3, r3, #12
 8007280:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007284:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007286:	4b9c      	ldr	r3, [pc, #624]	; (80074f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800728a:	091b      	lsrs	r3, r3, #4
 800728c:	f003 0301 	and.w	r3, r3, #1
 8007290:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007292:	4b99      	ldr	r3, [pc, #612]	; (80074f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007296:	08db      	lsrs	r3, r3, #3
 8007298:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	fb02 f303 	mul.w	r3, r2, r3
 80072a2:	ee07 3a90 	vmov	s15, r3
 80072a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	f000 8111 	beq.w	80074d8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	f000 8083 	beq.w	80073c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	f200 80a1 	bhi.w	8007408 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d003      	beq.n	80072d4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d056      	beq.n	8007380 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80072d2:	e099      	b.n	8007408 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072d4:	4b88      	ldr	r3, [pc, #544]	; (80074f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f003 0320 	and.w	r3, r3, #32
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d02d      	beq.n	800733c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072e0:	4b85      	ldr	r3, [pc, #532]	; (80074f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	08db      	lsrs	r3, r3, #3
 80072e6:	f003 0303 	and.w	r3, r3, #3
 80072ea:	4a84      	ldr	r2, [pc, #528]	; (80074fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80072ec:	fa22 f303 	lsr.w	r3, r2, r3
 80072f0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	ee07 3a90 	vmov	s15, r3
 80072f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	ee07 3a90 	vmov	s15, r3
 8007302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800730a:	4b7b      	ldr	r3, [pc, #492]	; (80074f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800730c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007312:	ee07 3a90 	vmov	s15, r3
 8007316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800731a:	ed97 6a03 	vldr	s12, [r7, #12]
 800731e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007500 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800732a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800732e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007336:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800733a:	e087      	b.n	800744c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	ee07 3a90 	vmov	s15, r3
 8007342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007346:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007504 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800734a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800734e:	4b6a      	ldr	r3, [pc, #424]	; (80074f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007356:	ee07 3a90 	vmov	s15, r3
 800735a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800735e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007362:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007500 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800736a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800736e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800737a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800737e:	e065      	b.n	800744c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	ee07 3a90 	vmov	s15, r3
 8007386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800738a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800738e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007392:	4b59      	ldr	r3, [pc, #356]	; (80074f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800739a:	ee07 3a90 	vmov	s15, r3
 800739e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80073a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007500 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073c2:	e043      	b.n	800744c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	ee07 3a90 	vmov	s15, r3
 80073ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800750c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80073d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073d6:	4b48      	ldr	r3, [pc, #288]	; (80074f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073de:	ee07 3a90 	vmov	s15, r3
 80073e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80073ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007500 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007402:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007406:	e021      	b.n	800744c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	ee07 3a90 	vmov	s15, r3
 800740e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007412:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800741a:	4b37      	ldr	r3, [pc, #220]	; (80074f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800741c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800741e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007422:	ee07 3a90 	vmov	s15, r3
 8007426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800742a:	ed97 6a03 	vldr	s12, [r7, #12]
 800742e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007500 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800743a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800743e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007446:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800744a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800744c:	4b2a      	ldr	r3, [pc, #168]	; (80074f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800744e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007450:	0a5b      	lsrs	r3, r3, #9
 8007452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007456:	ee07 3a90 	vmov	s15, r3
 800745a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800745e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007462:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007466:	edd7 6a07 	vldr	s13, [r7, #28]
 800746a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800746e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007472:	ee17 2a90 	vmov	r2, s15
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800747a:	4b1f      	ldr	r3, [pc, #124]	; (80074f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800747c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747e:	0c1b      	lsrs	r3, r3, #16
 8007480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007484:	ee07 3a90 	vmov	s15, r3
 8007488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800748c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007490:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007494:	edd7 6a07 	vldr	s13, [r7, #28]
 8007498:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800749c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074a0:	ee17 2a90 	vmov	r2, s15
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80074a8:	4b13      	ldr	r3, [pc, #76]	; (80074f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ac:	0e1b      	lsrs	r3, r3, #24
 80074ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074b2:	ee07 3a90 	vmov	s15, r3
 80074b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80074c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074ce:	ee17 2a90 	vmov	r2, s15
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80074d6:	e008      	b.n	80074ea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	609a      	str	r2, [r3, #8]
}
 80074ea:	bf00      	nop
 80074ec:	3724      	adds	r7, #36	; 0x24
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr
 80074f6:	bf00      	nop
 80074f8:	58024400 	.word	0x58024400
 80074fc:	03d09000 	.word	0x03d09000
 8007500:	46000000 	.word	0x46000000
 8007504:	4c742400 	.word	0x4c742400
 8007508:	4a742400 	.word	0x4a742400
 800750c:	4af42400 	.word	0x4af42400

08007510 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007510:	b480      	push	{r7}
 8007512:	b089      	sub	sp, #36	; 0x24
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007518:	4ba1      	ldr	r3, [pc, #644]	; (80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800751a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800751c:	f003 0303 	and.w	r3, r3, #3
 8007520:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007522:	4b9f      	ldr	r3, [pc, #636]	; (80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007526:	0d1b      	lsrs	r3, r3, #20
 8007528:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800752c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800752e:	4b9c      	ldr	r3, [pc, #624]	; (80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007532:	0a1b      	lsrs	r3, r3, #8
 8007534:	f003 0301 	and.w	r3, r3, #1
 8007538:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800753a:	4b99      	ldr	r3, [pc, #612]	; (80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800753c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800753e:	08db      	lsrs	r3, r3, #3
 8007540:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007544:	693a      	ldr	r2, [r7, #16]
 8007546:	fb02 f303 	mul.w	r3, r2, r3
 800754a:	ee07 3a90 	vmov	s15, r3
 800754e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007552:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	2b00      	cmp	r3, #0
 800755a:	f000 8111 	beq.w	8007780 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	2b02      	cmp	r3, #2
 8007562:	f000 8083 	beq.w	800766c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	2b02      	cmp	r3, #2
 800756a:	f200 80a1 	bhi.w	80076b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d003      	beq.n	800757c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	2b01      	cmp	r3, #1
 8007578:	d056      	beq.n	8007628 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800757a:	e099      	b.n	80076b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800757c:	4b88      	ldr	r3, [pc, #544]	; (80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f003 0320 	and.w	r3, r3, #32
 8007584:	2b00      	cmp	r3, #0
 8007586:	d02d      	beq.n	80075e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007588:	4b85      	ldr	r3, [pc, #532]	; (80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	08db      	lsrs	r3, r3, #3
 800758e:	f003 0303 	and.w	r3, r3, #3
 8007592:	4a84      	ldr	r2, [pc, #528]	; (80077a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007594:	fa22 f303 	lsr.w	r3, r2, r3
 8007598:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	ee07 3a90 	vmov	s15, r3
 80075a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	ee07 3a90 	vmov	s15, r3
 80075aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075b2:	4b7b      	ldr	r3, [pc, #492]	; (80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ba:	ee07 3a90 	vmov	s15, r3
 80075be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80075c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80077a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80075e2:	e087      	b.n	80076f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	ee07 3a90 	vmov	s15, r3
 80075ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80077ac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80075f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075f6:	4b6a      	ldr	r3, [pc, #424]	; (80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075fe:	ee07 3a90 	vmov	s15, r3
 8007602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007606:	ed97 6a03 	vldr	s12, [r7, #12]
 800760a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80077a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800760e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007616:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800761a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800761e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007622:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007626:	e065      	b.n	80076f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	ee07 3a90 	vmov	s15, r3
 800762e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007632:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80077b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800763a:	4b59      	ldr	r3, [pc, #356]	; (80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800763c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007642:	ee07 3a90 	vmov	s15, r3
 8007646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800764a:	ed97 6a03 	vldr	s12, [r7, #12]
 800764e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80077a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800765a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800765e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007666:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800766a:	e043      	b.n	80076f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	ee07 3a90 	vmov	s15, r3
 8007672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007676:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80077b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800767a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800767e:	4b48      	ldr	r3, [pc, #288]	; (80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007686:	ee07 3a90 	vmov	s15, r3
 800768a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800768e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007692:	eddf 5a45 	vldr	s11, [pc, #276]	; 80077a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800769a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800769e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076ae:	e021      	b.n	80076f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	ee07 3a90 	vmov	s15, r3
 80076b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80077b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80076be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076c2:	4b37      	ldr	r3, [pc, #220]	; (80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ca:	ee07 3a90 	vmov	s15, r3
 80076ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80076d6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80077a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076f2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80076f4:	4b2a      	ldr	r3, [pc, #168]	; (80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f8:	0a5b      	lsrs	r3, r3, #9
 80076fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076fe:	ee07 3a90 	vmov	s15, r3
 8007702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007706:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800770a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800770e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007712:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007716:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800771a:	ee17 2a90 	vmov	r2, s15
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007722:	4b1f      	ldr	r3, [pc, #124]	; (80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007726:	0c1b      	lsrs	r3, r3, #16
 8007728:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800772c:	ee07 3a90 	vmov	s15, r3
 8007730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007734:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007738:	ee37 7a87 	vadd.f32	s14, s15, s14
 800773c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007740:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007744:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007748:	ee17 2a90 	vmov	r2, s15
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007750:	4b13      	ldr	r3, [pc, #76]	; (80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007754:	0e1b      	lsrs	r3, r3, #24
 8007756:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800775a:	ee07 3a90 	vmov	s15, r3
 800775e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007762:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007766:	ee37 7a87 	vadd.f32	s14, s15, s14
 800776a:	edd7 6a07 	vldr	s13, [r7, #28]
 800776e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007772:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007776:	ee17 2a90 	vmov	r2, s15
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800777e:	e008      	b.n	8007792 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	609a      	str	r2, [r3, #8]
}
 8007792:	bf00      	nop
 8007794:	3724      	adds	r7, #36	; 0x24
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	58024400 	.word	0x58024400
 80077a4:	03d09000 	.word	0x03d09000
 80077a8:	46000000 	.word	0x46000000
 80077ac:	4c742400 	.word	0x4c742400
 80077b0:	4a742400 	.word	0x4a742400
 80077b4:	4af42400 	.word	0x4af42400

080077b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077c2:	2300      	movs	r3, #0
 80077c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077c6:	4b53      	ldr	r3, [pc, #332]	; (8007914 <RCCEx_PLL2_Config+0x15c>)
 80077c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ca:	f003 0303 	and.w	r3, r3, #3
 80077ce:	2b03      	cmp	r3, #3
 80077d0:	d101      	bne.n	80077d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e099      	b.n	800790a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80077d6:	4b4f      	ldr	r3, [pc, #316]	; (8007914 <RCCEx_PLL2_Config+0x15c>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a4e      	ldr	r2, [pc, #312]	; (8007914 <RCCEx_PLL2_Config+0x15c>)
 80077dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80077e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077e2:	f7f9 ff3d 	bl	8001660 <HAL_GetTick>
 80077e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80077e8:	e008      	b.n	80077fc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80077ea:	f7f9 ff39 	bl	8001660 <HAL_GetTick>
 80077ee:	4602      	mov	r2, r0
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	1ad3      	subs	r3, r2, r3
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	d901      	bls.n	80077fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e086      	b.n	800790a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80077fc:	4b45      	ldr	r3, [pc, #276]	; (8007914 <RCCEx_PLL2_Config+0x15c>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d1f0      	bne.n	80077ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007808:	4b42      	ldr	r3, [pc, #264]	; (8007914 <RCCEx_PLL2_Config+0x15c>)
 800780a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800780c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	031b      	lsls	r3, r3, #12
 8007816:	493f      	ldr	r1, [pc, #252]	; (8007914 <RCCEx_PLL2_Config+0x15c>)
 8007818:	4313      	orrs	r3, r2
 800781a:	628b      	str	r3, [r1, #40]	; 0x28
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	3b01      	subs	r3, #1
 8007822:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	3b01      	subs	r3, #1
 800782c:	025b      	lsls	r3, r3, #9
 800782e:	b29b      	uxth	r3, r3
 8007830:	431a      	orrs	r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	3b01      	subs	r3, #1
 8007838:	041b      	lsls	r3, r3, #16
 800783a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800783e:	431a      	orrs	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	691b      	ldr	r3, [r3, #16]
 8007844:	3b01      	subs	r3, #1
 8007846:	061b      	lsls	r3, r3, #24
 8007848:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800784c:	4931      	ldr	r1, [pc, #196]	; (8007914 <RCCEx_PLL2_Config+0x15c>)
 800784e:	4313      	orrs	r3, r2
 8007850:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007852:	4b30      	ldr	r3, [pc, #192]	; (8007914 <RCCEx_PLL2_Config+0x15c>)
 8007854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007856:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	695b      	ldr	r3, [r3, #20]
 800785e:	492d      	ldr	r1, [pc, #180]	; (8007914 <RCCEx_PLL2_Config+0x15c>)
 8007860:	4313      	orrs	r3, r2
 8007862:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007864:	4b2b      	ldr	r3, [pc, #172]	; (8007914 <RCCEx_PLL2_Config+0x15c>)
 8007866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007868:	f023 0220 	bic.w	r2, r3, #32
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	699b      	ldr	r3, [r3, #24]
 8007870:	4928      	ldr	r1, [pc, #160]	; (8007914 <RCCEx_PLL2_Config+0x15c>)
 8007872:	4313      	orrs	r3, r2
 8007874:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007876:	4b27      	ldr	r3, [pc, #156]	; (8007914 <RCCEx_PLL2_Config+0x15c>)
 8007878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800787a:	4a26      	ldr	r2, [pc, #152]	; (8007914 <RCCEx_PLL2_Config+0x15c>)
 800787c:	f023 0310 	bic.w	r3, r3, #16
 8007880:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007882:	4b24      	ldr	r3, [pc, #144]	; (8007914 <RCCEx_PLL2_Config+0x15c>)
 8007884:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007886:	4b24      	ldr	r3, [pc, #144]	; (8007918 <RCCEx_PLL2_Config+0x160>)
 8007888:	4013      	ands	r3, r2
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	69d2      	ldr	r2, [r2, #28]
 800788e:	00d2      	lsls	r2, r2, #3
 8007890:	4920      	ldr	r1, [pc, #128]	; (8007914 <RCCEx_PLL2_Config+0x15c>)
 8007892:	4313      	orrs	r3, r2
 8007894:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007896:	4b1f      	ldr	r3, [pc, #124]	; (8007914 <RCCEx_PLL2_Config+0x15c>)
 8007898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789a:	4a1e      	ldr	r2, [pc, #120]	; (8007914 <RCCEx_PLL2_Config+0x15c>)
 800789c:	f043 0310 	orr.w	r3, r3, #16
 80078a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d106      	bne.n	80078b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80078a8:	4b1a      	ldr	r3, [pc, #104]	; (8007914 <RCCEx_PLL2_Config+0x15c>)
 80078aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ac:	4a19      	ldr	r2, [pc, #100]	; (8007914 <RCCEx_PLL2_Config+0x15c>)
 80078ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078b4:	e00f      	b.n	80078d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d106      	bne.n	80078ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80078bc:	4b15      	ldr	r3, [pc, #84]	; (8007914 <RCCEx_PLL2_Config+0x15c>)
 80078be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c0:	4a14      	ldr	r2, [pc, #80]	; (8007914 <RCCEx_PLL2_Config+0x15c>)
 80078c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078c8:	e005      	b.n	80078d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80078ca:	4b12      	ldr	r3, [pc, #72]	; (8007914 <RCCEx_PLL2_Config+0x15c>)
 80078cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ce:	4a11      	ldr	r2, [pc, #68]	; (8007914 <RCCEx_PLL2_Config+0x15c>)
 80078d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80078d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80078d6:	4b0f      	ldr	r3, [pc, #60]	; (8007914 <RCCEx_PLL2_Config+0x15c>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a0e      	ldr	r2, [pc, #56]	; (8007914 <RCCEx_PLL2_Config+0x15c>)
 80078dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80078e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078e2:	f7f9 febd 	bl	8001660 <HAL_GetTick>
 80078e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80078e8:	e008      	b.n	80078fc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80078ea:	f7f9 feb9 	bl	8001660 <HAL_GetTick>
 80078ee:	4602      	mov	r2, r0
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	1ad3      	subs	r3, r2, r3
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	d901      	bls.n	80078fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80078f8:	2303      	movs	r3, #3
 80078fa:	e006      	b.n	800790a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80078fc:	4b05      	ldr	r3, [pc, #20]	; (8007914 <RCCEx_PLL2_Config+0x15c>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007904:	2b00      	cmp	r3, #0
 8007906:	d0f0      	beq.n	80078ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007908:	7bfb      	ldrb	r3, [r7, #15]
}
 800790a:	4618      	mov	r0, r3
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	58024400 	.word	0x58024400
 8007918:	ffff0007 	.word	0xffff0007

0800791c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007926:	2300      	movs	r3, #0
 8007928:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800792a:	4b53      	ldr	r3, [pc, #332]	; (8007a78 <RCCEx_PLL3_Config+0x15c>)
 800792c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800792e:	f003 0303 	and.w	r3, r3, #3
 8007932:	2b03      	cmp	r3, #3
 8007934:	d101      	bne.n	800793a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e099      	b.n	8007a6e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800793a:	4b4f      	ldr	r3, [pc, #316]	; (8007a78 <RCCEx_PLL3_Config+0x15c>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a4e      	ldr	r2, [pc, #312]	; (8007a78 <RCCEx_PLL3_Config+0x15c>)
 8007940:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007944:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007946:	f7f9 fe8b 	bl	8001660 <HAL_GetTick>
 800794a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800794c:	e008      	b.n	8007960 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800794e:	f7f9 fe87 	bl	8001660 <HAL_GetTick>
 8007952:	4602      	mov	r2, r0
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	1ad3      	subs	r3, r2, r3
 8007958:	2b02      	cmp	r3, #2
 800795a:	d901      	bls.n	8007960 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800795c:	2303      	movs	r3, #3
 800795e:	e086      	b.n	8007a6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007960:	4b45      	ldr	r3, [pc, #276]	; (8007a78 <RCCEx_PLL3_Config+0x15c>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007968:	2b00      	cmp	r3, #0
 800796a:	d1f0      	bne.n	800794e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800796c:	4b42      	ldr	r3, [pc, #264]	; (8007a78 <RCCEx_PLL3_Config+0x15c>)
 800796e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007970:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	051b      	lsls	r3, r3, #20
 800797a:	493f      	ldr	r1, [pc, #252]	; (8007a78 <RCCEx_PLL3_Config+0x15c>)
 800797c:	4313      	orrs	r3, r2
 800797e:	628b      	str	r3, [r1, #40]	; 0x28
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	3b01      	subs	r3, #1
 8007986:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	3b01      	subs	r3, #1
 8007990:	025b      	lsls	r3, r3, #9
 8007992:	b29b      	uxth	r3, r3
 8007994:	431a      	orrs	r2, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	3b01      	subs	r3, #1
 800799c:	041b      	lsls	r3, r3, #16
 800799e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80079a2:	431a      	orrs	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	691b      	ldr	r3, [r3, #16]
 80079a8:	3b01      	subs	r3, #1
 80079aa:	061b      	lsls	r3, r3, #24
 80079ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80079b0:	4931      	ldr	r1, [pc, #196]	; (8007a78 <RCCEx_PLL3_Config+0x15c>)
 80079b2:	4313      	orrs	r3, r2
 80079b4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80079b6:	4b30      	ldr	r3, [pc, #192]	; (8007a78 <RCCEx_PLL3_Config+0x15c>)
 80079b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	695b      	ldr	r3, [r3, #20]
 80079c2:	492d      	ldr	r1, [pc, #180]	; (8007a78 <RCCEx_PLL3_Config+0x15c>)
 80079c4:	4313      	orrs	r3, r2
 80079c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80079c8:	4b2b      	ldr	r3, [pc, #172]	; (8007a78 <RCCEx_PLL3_Config+0x15c>)
 80079ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079cc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	699b      	ldr	r3, [r3, #24]
 80079d4:	4928      	ldr	r1, [pc, #160]	; (8007a78 <RCCEx_PLL3_Config+0x15c>)
 80079d6:	4313      	orrs	r3, r2
 80079d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80079da:	4b27      	ldr	r3, [pc, #156]	; (8007a78 <RCCEx_PLL3_Config+0x15c>)
 80079dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079de:	4a26      	ldr	r2, [pc, #152]	; (8007a78 <RCCEx_PLL3_Config+0x15c>)
 80079e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80079e6:	4b24      	ldr	r3, [pc, #144]	; (8007a78 <RCCEx_PLL3_Config+0x15c>)
 80079e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079ea:	4b24      	ldr	r3, [pc, #144]	; (8007a7c <RCCEx_PLL3_Config+0x160>)
 80079ec:	4013      	ands	r3, r2
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	69d2      	ldr	r2, [r2, #28]
 80079f2:	00d2      	lsls	r2, r2, #3
 80079f4:	4920      	ldr	r1, [pc, #128]	; (8007a78 <RCCEx_PLL3_Config+0x15c>)
 80079f6:	4313      	orrs	r3, r2
 80079f8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80079fa:	4b1f      	ldr	r3, [pc, #124]	; (8007a78 <RCCEx_PLL3_Config+0x15c>)
 80079fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079fe:	4a1e      	ldr	r2, [pc, #120]	; (8007a78 <RCCEx_PLL3_Config+0x15c>)
 8007a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d106      	bne.n	8007a1a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007a0c:	4b1a      	ldr	r3, [pc, #104]	; (8007a78 <RCCEx_PLL3_Config+0x15c>)
 8007a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a10:	4a19      	ldr	r2, [pc, #100]	; (8007a78 <RCCEx_PLL3_Config+0x15c>)
 8007a12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007a16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a18:	e00f      	b.n	8007a3a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d106      	bne.n	8007a2e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007a20:	4b15      	ldr	r3, [pc, #84]	; (8007a78 <RCCEx_PLL3_Config+0x15c>)
 8007a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a24:	4a14      	ldr	r2, [pc, #80]	; (8007a78 <RCCEx_PLL3_Config+0x15c>)
 8007a26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007a2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a2c:	e005      	b.n	8007a3a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007a2e:	4b12      	ldr	r3, [pc, #72]	; (8007a78 <RCCEx_PLL3_Config+0x15c>)
 8007a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a32:	4a11      	ldr	r2, [pc, #68]	; (8007a78 <RCCEx_PLL3_Config+0x15c>)
 8007a34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a38:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007a3a:	4b0f      	ldr	r3, [pc, #60]	; (8007a78 <RCCEx_PLL3_Config+0x15c>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a0e      	ldr	r2, [pc, #56]	; (8007a78 <RCCEx_PLL3_Config+0x15c>)
 8007a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a46:	f7f9 fe0b 	bl	8001660 <HAL_GetTick>
 8007a4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a4c:	e008      	b.n	8007a60 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007a4e:	f7f9 fe07 	bl	8001660 <HAL_GetTick>
 8007a52:	4602      	mov	r2, r0
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	1ad3      	subs	r3, r2, r3
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d901      	bls.n	8007a60 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	e006      	b.n	8007a6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a60:	4b05      	ldr	r3, [pc, #20]	; (8007a78 <RCCEx_PLL3_Config+0x15c>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d0f0      	beq.n	8007a4e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	58024400 	.word	0x58024400
 8007a7c:	ffff0007 	.word	0xffff0007

08007a80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d101      	bne.n	8007a92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e049      	b.n	8007b26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d106      	bne.n	8007aac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f7f9 fae8 	bl	800107c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2202      	movs	r2, #2
 8007ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	3304      	adds	r3, #4
 8007abc:	4619      	mov	r1, r3
 8007abe:	4610      	mov	r0, r2
 8007ac0:	f000 ffee 	bl	8008aa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2201      	movs	r2, #1
 8007b08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3708      	adds	r7, #8
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b082      	sub	sp, #8
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d101      	bne.n	8007b40 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e049      	b.n	8007bd4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d106      	bne.n	8007b5a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 f841 	bl	8007bdc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2202      	movs	r2, #2
 8007b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	3304      	adds	r3, #4
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	4610      	mov	r0, r2
 8007b6e:	f000 ff97 	bl	8008aa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2201      	movs	r2, #1
 8007b76:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2201      	movs	r2, #1
 8007b86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2201      	movs	r2, #1
 8007b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2201      	movs	r2, #1
 8007bae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3708      	adds	r7, #8
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007be4:	bf00      	nop
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b086      	sub	sp, #24
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	607a      	str	r2, [r7, #4]
 8007bfc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d109      	bne.n	8007c1c <HAL_TIM_PWM_Start_DMA+0x2c>
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	bf0c      	ite	eq
 8007c14:	2301      	moveq	r3, #1
 8007c16:	2300      	movne	r3, #0
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	e03c      	b.n	8007c96 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	2b04      	cmp	r3, #4
 8007c20:	d109      	bne.n	8007c36 <HAL_TIM_PWM_Start_DMA+0x46>
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	2b02      	cmp	r3, #2
 8007c2c:	bf0c      	ite	eq
 8007c2e:	2301      	moveq	r3, #1
 8007c30:	2300      	movne	r3, #0
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	e02f      	b.n	8007c96 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	2b08      	cmp	r3, #8
 8007c3a:	d109      	bne.n	8007c50 <HAL_TIM_PWM_Start_DMA+0x60>
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	bf0c      	ite	eq
 8007c48:	2301      	moveq	r3, #1
 8007c4a:	2300      	movne	r3, #0
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	e022      	b.n	8007c96 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	2b0c      	cmp	r3, #12
 8007c54:	d109      	bne.n	8007c6a <HAL_TIM_PWM_Start_DMA+0x7a>
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	2b02      	cmp	r3, #2
 8007c60:	bf0c      	ite	eq
 8007c62:	2301      	moveq	r3, #1
 8007c64:	2300      	movne	r3, #0
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	e015      	b.n	8007c96 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	2b10      	cmp	r3, #16
 8007c6e:	d109      	bne.n	8007c84 <HAL_TIM_PWM_Start_DMA+0x94>
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	2b02      	cmp	r3, #2
 8007c7a:	bf0c      	ite	eq
 8007c7c:	2301      	moveq	r3, #1
 8007c7e:	2300      	movne	r3, #0
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	e008      	b.n	8007c96 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	2b02      	cmp	r3, #2
 8007c8e:	bf0c      	ite	eq
 8007c90:	2301      	moveq	r3, #1
 8007c92:	2300      	movne	r3, #0
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d001      	beq.n	8007c9e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8007c9a:	2302      	movs	r3, #2
 8007c9c:	e1b0      	b.n	8008000 <HAL_TIM_PWM_Start_DMA+0x410>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d109      	bne.n	8007cb8 <HAL_TIM_PWM_Start_DMA+0xc8>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	bf0c      	ite	eq
 8007cb0:	2301      	moveq	r3, #1
 8007cb2:	2300      	movne	r3, #0
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	e03c      	b.n	8007d32 <HAL_TIM_PWM_Start_DMA+0x142>
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	2b04      	cmp	r3, #4
 8007cbc:	d109      	bne.n	8007cd2 <HAL_TIM_PWM_Start_DMA+0xe2>
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	bf0c      	ite	eq
 8007cca:	2301      	moveq	r3, #1
 8007ccc:	2300      	movne	r3, #0
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	e02f      	b.n	8007d32 <HAL_TIM_PWM_Start_DMA+0x142>
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	2b08      	cmp	r3, #8
 8007cd6:	d109      	bne.n	8007cec <HAL_TIM_PWM_Start_DMA+0xfc>
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	bf0c      	ite	eq
 8007ce4:	2301      	moveq	r3, #1
 8007ce6:	2300      	movne	r3, #0
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	e022      	b.n	8007d32 <HAL_TIM_PWM_Start_DMA+0x142>
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	2b0c      	cmp	r3, #12
 8007cf0:	d109      	bne.n	8007d06 <HAL_TIM_PWM_Start_DMA+0x116>
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	bf0c      	ite	eq
 8007cfe:	2301      	moveq	r3, #1
 8007d00:	2300      	movne	r3, #0
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	e015      	b.n	8007d32 <HAL_TIM_PWM_Start_DMA+0x142>
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	2b10      	cmp	r3, #16
 8007d0a:	d109      	bne.n	8007d20 <HAL_TIM_PWM_Start_DMA+0x130>
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	bf0c      	ite	eq
 8007d18:	2301      	moveq	r3, #1
 8007d1a:	2300      	movne	r3, #0
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	e008      	b.n	8007d32 <HAL_TIM_PWM_Start_DMA+0x142>
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	bf0c      	ite	eq
 8007d2c:	2301      	moveq	r3, #1
 8007d2e:	2300      	movne	r3, #0
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d034      	beq.n	8007da0 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d002      	beq.n	8007d42 <HAL_TIM_PWM_Start_DMA+0x152>
 8007d3c:	887b      	ldrh	r3, [r7, #2]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d101      	bne.n	8007d46 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	e15c      	b.n	8008000 <HAL_TIM_PWM_Start_DMA+0x410>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d104      	bne.n	8007d56 <HAL_TIM_PWM_Start_DMA+0x166>
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2202      	movs	r2, #2
 8007d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d54:	e026      	b.n	8007da4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	2b04      	cmp	r3, #4
 8007d5a:	d104      	bne.n	8007d66 <HAL_TIM_PWM_Start_DMA+0x176>
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2202      	movs	r2, #2
 8007d60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d64:	e01e      	b.n	8007da4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	2b08      	cmp	r3, #8
 8007d6a:	d104      	bne.n	8007d76 <HAL_TIM_PWM_Start_DMA+0x186>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2202      	movs	r2, #2
 8007d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d74:	e016      	b.n	8007da4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	2b0c      	cmp	r3, #12
 8007d7a:	d104      	bne.n	8007d86 <HAL_TIM_PWM_Start_DMA+0x196>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2202      	movs	r2, #2
 8007d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d84:	e00e      	b.n	8007da4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	2b10      	cmp	r3, #16
 8007d8a:	d104      	bne.n	8007d96 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2202      	movs	r2, #2
 8007d90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d94:	e006      	b.n	8007da4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2202      	movs	r2, #2
 8007d9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d9e:	e001      	b.n	8007da4 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	e12d      	b.n	8008000 <HAL_TIM_PWM_Start_DMA+0x410>
  }

  switch (Channel)
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	2b0c      	cmp	r3, #12
 8007da8:	f200 80ae 	bhi.w	8007f08 <HAL_TIM_PWM_Start_DMA+0x318>
 8007dac:	a201      	add	r2, pc, #4	; (adr r2, 8007db4 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8007dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db2:	bf00      	nop
 8007db4:	08007de9 	.word	0x08007de9
 8007db8:	08007f09 	.word	0x08007f09
 8007dbc:	08007f09 	.word	0x08007f09
 8007dc0:	08007f09 	.word	0x08007f09
 8007dc4:	08007e31 	.word	0x08007e31
 8007dc8:	08007f09 	.word	0x08007f09
 8007dcc:	08007f09 	.word	0x08007f09
 8007dd0:	08007f09 	.word	0x08007f09
 8007dd4:	08007e79 	.word	0x08007e79
 8007dd8:	08007f09 	.word	0x08007f09
 8007ddc:	08007f09 	.word	0x08007f09
 8007de0:	08007f09 	.word	0x08007f09
 8007de4:	08007ec1 	.word	0x08007ec1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dec:	4a86      	ldr	r2, [pc, #536]	; (8008008 <HAL_TIM_PWM_Start_DMA+0x418>)
 8007dee:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df4:	4a85      	ldr	r2, [pc, #532]	; (800800c <HAL_TIM_PWM_Start_DMA+0x41c>)
 8007df6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfc:	4a84      	ldr	r2, [pc, #528]	; (8008010 <HAL_TIM_PWM_Start_DMA+0x420>)
 8007dfe:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007e04:	6879      	ldr	r1, [r7, #4]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	3334      	adds	r3, #52	; 0x34
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	887b      	ldrh	r3, [r7, #2]
 8007e10:	f7fa f8e2 	bl	8001fd8 <HAL_DMA_Start_IT>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d001      	beq.n	8007e1e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e0f0      	b.n	8008000 <HAL_TIM_PWM_Start_DMA+0x410>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68da      	ldr	r2, [r3, #12]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e2c:	60da      	str	r2, [r3, #12]
      break;
 8007e2e:	e06e      	b.n	8007f0e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e34:	4a74      	ldr	r2, [pc, #464]	; (8008008 <HAL_TIM_PWM_Start_DMA+0x418>)
 8007e36:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e3c:	4a73      	ldr	r2, [pc, #460]	; (800800c <HAL_TIM_PWM_Start_DMA+0x41c>)
 8007e3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e44:	4a72      	ldr	r2, [pc, #456]	; (8008010 <HAL_TIM_PWM_Start_DMA+0x420>)
 8007e46:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007e4c:	6879      	ldr	r1, [r7, #4]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	3338      	adds	r3, #56	; 0x38
 8007e54:	461a      	mov	r2, r3
 8007e56:	887b      	ldrh	r3, [r7, #2]
 8007e58:	f7fa f8be 	bl	8001fd8 <HAL_DMA_Start_IT>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d001      	beq.n	8007e66 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	e0cc      	b.n	8008000 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	68da      	ldr	r2, [r3, #12]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007e74:	60da      	str	r2, [r3, #12]
      break;
 8007e76:	e04a      	b.n	8007f0e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e7c:	4a62      	ldr	r2, [pc, #392]	; (8008008 <HAL_TIM_PWM_Start_DMA+0x418>)
 8007e7e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e84:	4a61      	ldr	r2, [pc, #388]	; (800800c <HAL_TIM_PWM_Start_DMA+0x41c>)
 8007e86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e8c:	4a60      	ldr	r2, [pc, #384]	; (8008010 <HAL_TIM_PWM_Start_DMA+0x420>)
 8007e8e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007e94:	6879      	ldr	r1, [r7, #4]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	333c      	adds	r3, #60	; 0x3c
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	887b      	ldrh	r3, [r7, #2]
 8007ea0:	f7fa f89a 	bl	8001fd8 <HAL_DMA_Start_IT>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d001      	beq.n	8007eae <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e0a8      	b.n	8008000 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	68da      	ldr	r2, [r3, #12]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ebc:	60da      	str	r2, [r3, #12]
      break;
 8007ebe:	e026      	b.n	8007f0e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec4:	4a50      	ldr	r2, [pc, #320]	; (8008008 <HAL_TIM_PWM_Start_DMA+0x418>)
 8007ec6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ecc:	4a4f      	ldr	r2, [pc, #316]	; (800800c <HAL_TIM_PWM_Start_DMA+0x41c>)
 8007ece:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed4:	4a4e      	ldr	r2, [pc, #312]	; (8008010 <HAL_TIM_PWM_Start_DMA+0x420>)
 8007ed6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007edc:	6879      	ldr	r1, [r7, #4]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	3340      	adds	r3, #64	; 0x40
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	887b      	ldrh	r3, [r7, #2]
 8007ee8:	f7fa f876 	bl	8001fd8 <HAL_DMA_Start_IT>
 8007eec:	4603      	mov	r3, r0
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d001      	beq.n	8007ef6 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e084      	b.n	8008000 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	68da      	ldr	r2, [r3, #12]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007f04:	60da      	str	r2, [r3, #12]
      break;
 8007f06:	e002      	b.n	8007f0e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	75fb      	strb	r3, [r7, #23]
      break;
 8007f0c:	bf00      	nop
  }

  if (status == HAL_OK)
 8007f0e:	7dfb      	ldrb	r3, [r7, #23]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d174      	bne.n	8007ffe <HAL_TIM_PWM_Start_DMA+0x40e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2201      	movs	r2, #1
 8007f1a:	68b9      	ldr	r1, [r7, #8]
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f001 f9cd 	bl	80092bc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a3b      	ldr	r2, [pc, #236]	; (8008014 <HAL_TIM_PWM_Start_DMA+0x424>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d013      	beq.n	8007f54 <HAL_TIM_PWM_Start_DMA+0x364>
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a39      	ldr	r2, [pc, #228]	; (8008018 <HAL_TIM_PWM_Start_DMA+0x428>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d00e      	beq.n	8007f54 <HAL_TIM_PWM_Start_DMA+0x364>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a38      	ldr	r2, [pc, #224]	; (800801c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d009      	beq.n	8007f54 <HAL_TIM_PWM_Start_DMA+0x364>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a36      	ldr	r2, [pc, #216]	; (8008020 <HAL_TIM_PWM_Start_DMA+0x430>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d004      	beq.n	8007f54 <HAL_TIM_PWM_Start_DMA+0x364>
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a35      	ldr	r2, [pc, #212]	; (8008024 <HAL_TIM_PWM_Start_DMA+0x434>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d101      	bne.n	8007f58 <HAL_TIM_PWM_Start_DMA+0x368>
 8007f54:	2301      	movs	r3, #1
 8007f56:	e000      	b.n	8007f5a <HAL_TIM_PWM_Start_DMA+0x36a>
 8007f58:	2300      	movs	r3, #0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d007      	beq.n	8007f6e <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f6c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a28      	ldr	r2, [pc, #160]	; (8008014 <HAL_TIM_PWM_Start_DMA+0x424>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d022      	beq.n	8007fbe <HAL_TIM_PWM_Start_DMA+0x3ce>
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f80:	d01d      	beq.n	8007fbe <HAL_TIM_PWM_Start_DMA+0x3ce>
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a28      	ldr	r2, [pc, #160]	; (8008028 <HAL_TIM_PWM_Start_DMA+0x438>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d018      	beq.n	8007fbe <HAL_TIM_PWM_Start_DMA+0x3ce>
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a26      	ldr	r2, [pc, #152]	; (800802c <HAL_TIM_PWM_Start_DMA+0x43c>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d013      	beq.n	8007fbe <HAL_TIM_PWM_Start_DMA+0x3ce>
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a25      	ldr	r2, [pc, #148]	; (8008030 <HAL_TIM_PWM_Start_DMA+0x440>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d00e      	beq.n	8007fbe <HAL_TIM_PWM_Start_DMA+0x3ce>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a1c      	ldr	r2, [pc, #112]	; (8008018 <HAL_TIM_PWM_Start_DMA+0x428>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d009      	beq.n	8007fbe <HAL_TIM_PWM_Start_DMA+0x3ce>
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a21      	ldr	r2, [pc, #132]	; (8008034 <HAL_TIM_PWM_Start_DMA+0x444>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d004      	beq.n	8007fbe <HAL_TIM_PWM_Start_DMA+0x3ce>
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a18      	ldr	r2, [pc, #96]	; (800801c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d115      	bne.n	8007fea <HAL_TIM_PWM_Start_DMA+0x3fa>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	689a      	ldr	r2, [r3, #8]
 8007fc4:	4b1c      	ldr	r3, [pc, #112]	; (8008038 <HAL_TIM_PWM_Start_DMA+0x448>)
 8007fc6:	4013      	ands	r3, r2
 8007fc8:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	2b06      	cmp	r3, #6
 8007fce:	d015      	beq.n	8007ffc <HAL_TIM_PWM_Start_DMA+0x40c>
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fd6:	d011      	beq.n	8007ffc <HAL_TIM_PWM_Start_DMA+0x40c>
      {
        __HAL_TIM_ENABLE(htim);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f042 0201 	orr.w	r2, r2, #1
 8007fe6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fe8:	e008      	b.n	8007ffc <HAL_TIM_PWM_Start_DMA+0x40c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f042 0201 	orr.w	r2, r2, #1
 8007ff8:	601a      	str	r2, [r3, #0]
 8007ffa:	e000      	b.n	8007ffe <HAL_TIM_PWM_Start_DMA+0x40e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ffc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008000:	4618      	mov	r0, r3
 8008002:	3718      	adds	r7, #24
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}
 8008008:	0800898f 	.word	0x0800898f
 800800c:	08008a37 	.word	0x08008a37
 8008010:	080088fd 	.word	0x080088fd
 8008014:	40010000 	.word	0x40010000
 8008018:	40010400 	.word	0x40010400
 800801c:	40014000 	.word	0x40014000
 8008020:	40014400 	.word	0x40014400
 8008024:	40014800 	.word	0x40014800
 8008028:	40000400 	.word	0x40000400
 800802c:	40000800 	.word	0x40000800
 8008030:	40000c00 	.word	0x40000c00
 8008034:	40001800 	.word	0x40001800
 8008038:	00010007 	.word	0x00010007

0800803c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008046:	2300      	movs	r3, #0
 8008048:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	2b0c      	cmp	r3, #12
 800804e:	d855      	bhi.n	80080fc <HAL_TIM_PWM_Stop_DMA+0xc0>
 8008050:	a201      	add	r2, pc, #4	; (adr r2, 8008058 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8008052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008056:	bf00      	nop
 8008058:	0800808d 	.word	0x0800808d
 800805c:	080080fd 	.word	0x080080fd
 8008060:	080080fd 	.word	0x080080fd
 8008064:	080080fd 	.word	0x080080fd
 8008068:	080080a9 	.word	0x080080a9
 800806c:	080080fd 	.word	0x080080fd
 8008070:	080080fd 	.word	0x080080fd
 8008074:	080080fd 	.word	0x080080fd
 8008078:	080080c5 	.word	0x080080c5
 800807c:	080080fd 	.word	0x080080fd
 8008080:	080080fd 	.word	0x080080fd
 8008084:	080080fd 	.word	0x080080fd
 8008088:	080080e1 	.word	0x080080e1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68da      	ldr	r2, [r3, #12]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800809a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a0:	4618      	mov	r0, r3
 80080a2:	f7fa fa03 	bl	80024ac <HAL_DMA_Abort_IT>
      break;
 80080a6:	e02c      	b.n	8008102 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	68da      	ldr	r2, [r3, #12]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080b6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080bc:	4618      	mov	r0, r3
 80080be:	f7fa f9f5 	bl	80024ac <HAL_DMA_Abort_IT>
      break;
 80080c2:	e01e      	b.n	8008102 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68da      	ldr	r2, [r3, #12]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080d2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d8:	4618      	mov	r0, r3
 80080da:	f7fa f9e7 	bl	80024ac <HAL_DMA_Abort_IT>
      break;
 80080de:	e010      	b.n	8008102 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	68da      	ldr	r2, [r3, #12]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80080ee:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7fa f9d9 	bl	80024ac <HAL_DMA_Abort_IT>
      break;
 80080fa:	e002      	b.n	8008102 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	73fb      	strb	r3, [r7, #15]
      break;
 8008100:	bf00      	nop
  }

  if (status == HAL_OK)
 8008102:	7bfb      	ldrb	r3, [r7, #15]
 8008104:	2b00      	cmp	r3, #0
 8008106:	f040 8081 	bne.w	800820c <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2200      	movs	r2, #0
 8008110:	6839      	ldr	r1, [r7, #0]
 8008112:	4618      	mov	r0, r3
 8008114:	f001 f8d2 	bl	80092bc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a3e      	ldr	r2, [pc, #248]	; (8008218 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d013      	beq.n	800814a <HAL_TIM_PWM_Stop_DMA+0x10e>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a3d      	ldr	r2, [pc, #244]	; (800821c <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d00e      	beq.n	800814a <HAL_TIM_PWM_Stop_DMA+0x10e>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a3b      	ldr	r2, [pc, #236]	; (8008220 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d009      	beq.n	800814a <HAL_TIM_PWM_Stop_DMA+0x10e>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a3a      	ldr	r2, [pc, #232]	; (8008224 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d004      	beq.n	800814a <HAL_TIM_PWM_Stop_DMA+0x10e>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a38      	ldr	r2, [pc, #224]	; (8008228 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d101      	bne.n	800814e <HAL_TIM_PWM_Stop_DMA+0x112>
 800814a:	2301      	movs	r3, #1
 800814c:	e000      	b.n	8008150 <HAL_TIM_PWM_Stop_DMA+0x114>
 800814e:	2300      	movs	r3, #0
 8008150:	2b00      	cmp	r3, #0
 8008152:	d017      	beq.n	8008184 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	6a1a      	ldr	r2, [r3, #32]
 800815a:	f241 1311 	movw	r3, #4369	; 0x1111
 800815e:	4013      	ands	r3, r2
 8008160:	2b00      	cmp	r3, #0
 8008162:	d10f      	bne.n	8008184 <HAL_TIM_PWM_Stop_DMA+0x148>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	6a1a      	ldr	r2, [r3, #32]
 800816a:	f240 4344 	movw	r3, #1092	; 0x444
 800816e:	4013      	ands	r3, r2
 8008170:	2b00      	cmp	r3, #0
 8008172:	d107      	bne.n	8008184 <HAL_TIM_PWM_Stop_DMA+0x148>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008182:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	6a1a      	ldr	r2, [r3, #32]
 800818a:	f241 1311 	movw	r3, #4369	; 0x1111
 800818e:	4013      	ands	r3, r2
 8008190:	2b00      	cmp	r3, #0
 8008192:	d10f      	bne.n	80081b4 <HAL_TIM_PWM_Stop_DMA+0x178>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	6a1a      	ldr	r2, [r3, #32]
 800819a:	f240 4344 	movw	r3, #1092	; 0x444
 800819e:	4013      	ands	r3, r2
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d107      	bne.n	80081b4 <HAL_TIM_PWM_Stop_DMA+0x178>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f022 0201 	bic.w	r2, r2, #1
 80081b2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d104      	bne.n	80081c4 <HAL_TIM_PWM_Stop_DMA+0x188>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2201      	movs	r2, #1
 80081be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081c2:	e023      	b.n	800820c <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	2b04      	cmp	r3, #4
 80081c8:	d104      	bne.n	80081d4 <HAL_TIM_PWM_Stop_DMA+0x198>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2201      	movs	r2, #1
 80081ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081d2:	e01b      	b.n	800820c <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	2b08      	cmp	r3, #8
 80081d8:	d104      	bne.n	80081e4 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2201      	movs	r2, #1
 80081de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081e2:	e013      	b.n	800820c <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	2b0c      	cmp	r3, #12
 80081e8:	d104      	bne.n	80081f4 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80081f2:	e00b      	b.n	800820c <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	2b10      	cmp	r3, #16
 80081f8:	d104      	bne.n	8008204 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2201      	movs	r2, #1
 80081fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008202:	e003      	b.n	800820c <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800820c:	7bfb      	ldrb	r3, [r7, #15]
}
 800820e:	4618      	mov	r0, r3
 8008210:	3710      	adds	r7, #16
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	40010000 	.word	0x40010000
 800821c:	40010400 	.word	0x40010400
 8008220:	40014000 	.word	0x40014000
 8008224:	40014400 	.word	0x40014400
 8008228:	40014800 	.word	0x40014800

0800822c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	691b      	ldr	r3, [r3, #16]
 800823a:	f003 0302 	and.w	r3, r3, #2
 800823e:	2b02      	cmp	r3, #2
 8008240:	d122      	bne.n	8008288 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	f003 0302 	and.w	r3, r3, #2
 800824c:	2b02      	cmp	r3, #2
 800824e:	d11b      	bne.n	8008288 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f06f 0202 	mvn.w	r2, #2
 8008258:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2201      	movs	r2, #1
 800825e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	699b      	ldr	r3, [r3, #24]
 8008266:	f003 0303 	and.w	r3, r3, #3
 800826a:	2b00      	cmp	r3, #0
 800826c:	d003      	beq.n	8008276 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 fb1c 	bl	80088ac <HAL_TIM_IC_CaptureCallback>
 8008274:	e005      	b.n	8008282 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 fb0e 	bl	8008898 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f7f8 fac1 	bl	8000804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	f003 0304 	and.w	r3, r3, #4
 8008292:	2b04      	cmp	r3, #4
 8008294:	d122      	bne.n	80082dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	f003 0304 	and.w	r3, r3, #4
 80082a0:	2b04      	cmp	r3, #4
 80082a2:	d11b      	bne.n	80082dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f06f 0204 	mvn.w	r2, #4
 80082ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2202      	movs	r2, #2
 80082b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	699b      	ldr	r3, [r3, #24]
 80082ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d003      	beq.n	80082ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 faf2 	bl	80088ac <HAL_TIM_IC_CaptureCallback>
 80082c8:	e005      	b.n	80082d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fae4 	bl	8008898 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f7f8 fa97 	bl	8000804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	f003 0308 	and.w	r3, r3, #8
 80082e6:	2b08      	cmp	r3, #8
 80082e8:	d122      	bne.n	8008330 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	f003 0308 	and.w	r3, r3, #8
 80082f4:	2b08      	cmp	r3, #8
 80082f6:	d11b      	bne.n	8008330 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f06f 0208 	mvn.w	r2, #8
 8008300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2204      	movs	r2, #4
 8008306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	69db      	ldr	r3, [r3, #28]
 800830e:	f003 0303 	and.w	r3, r3, #3
 8008312:	2b00      	cmp	r3, #0
 8008314:	d003      	beq.n	800831e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fac8 	bl	80088ac <HAL_TIM_IC_CaptureCallback>
 800831c:	e005      	b.n	800832a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 faba 	bl	8008898 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f7f8 fa6d 	bl	8000804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	691b      	ldr	r3, [r3, #16]
 8008336:	f003 0310 	and.w	r3, r3, #16
 800833a:	2b10      	cmp	r3, #16
 800833c:	d122      	bne.n	8008384 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	68db      	ldr	r3, [r3, #12]
 8008344:	f003 0310 	and.w	r3, r3, #16
 8008348:	2b10      	cmp	r3, #16
 800834a:	d11b      	bne.n	8008384 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f06f 0210 	mvn.w	r2, #16
 8008354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2208      	movs	r2, #8
 800835a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	69db      	ldr	r3, [r3, #28]
 8008362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008366:	2b00      	cmp	r3, #0
 8008368:	d003      	beq.n	8008372 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fa9e 	bl	80088ac <HAL_TIM_IC_CaptureCallback>
 8008370:	e005      	b.n	800837e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 fa90 	bl	8008898 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f7f8 fa43 	bl	8000804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	f003 0301 	and.w	r3, r3, #1
 800838e:	2b01      	cmp	r3, #1
 8008390:	d10e      	bne.n	80083b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	f003 0301 	and.w	r3, r3, #1
 800839c:	2b01      	cmp	r3, #1
 800839e:	d107      	bne.n	80083b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f06f 0201 	mvn.w	r2, #1
 80083a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 fa6a 	bl	8008884 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083ba:	2b80      	cmp	r3, #128	; 0x80
 80083bc:	d10e      	bne.n	80083dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083c8:	2b80      	cmp	r3, #128	; 0x80
 80083ca:	d107      	bne.n	80083dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80083d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f001 f82e 	bl	8009438 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	691b      	ldr	r3, [r3, #16]
 80083e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083ea:	d10e      	bne.n	800840a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	68db      	ldr	r3, [r3, #12]
 80083f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083f6:	2b80      	cmp	r3, #128	; 0x80
 80083f8:	d107      	bne.n	800840a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008402:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f001 f821 	bl	800944c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	691b      	ldr	r3, [r3, #16]
 8008410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008414:	2b40      	cmp	r3, #64	; 0x40
 8008416:	d10e      	bne.n	8008436 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008422:	2b40      	cmp	r3, #64	; 0x40
 8008424:	d107      	bne.n	8008436 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800842e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 fa4f 	bl	80088d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	691b      	ldr	r3, [r3, #16]
 800843c:	f003 0320 	and.w	r3, r3, #32
 8008440:	2b20      	cmp	r3, #32
 8008442:	d10e      	bne.n	8008462 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	f003 0320 	and.w	r3, r3, #32
 800844e:	2b20      	cmp	r3, #32
 8008450:	d107      	bne.n	8008462 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f06f 0220 	mvn.w	r2, #32
 800845a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 ffe1 	bl	8009424 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008462:	bf00      	nop
 8008464:	3708      	adds	r7, #8
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
	...

0800846c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b086      	sub	sp, #24
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008478:	2300      	movs	r3, #0
 800847a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008482:	2b01      	cmp	r3, #1
 8008484:	d101      	bne.n	800848a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008486:	2302      	movs	r3, #2
 8008488:	e0ff      	b.n	800868a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2201      	movs	r2, #1
 800848e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2b14      	cmp	r3, #20
 8008496:	f200 80f0 	bhi.w	800867a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800849a:	a201      	add	r2, pc, #4	; (adr r2, 80084a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800849c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a0:	080084f5 	.word	0x080084f5
 80084a4:	0800867b 	.word	0x0800867b
 80084a8:	0800867b 	.word	0x0800867b
 80084ac:	0800867b 	.word	0x0800867b
 80084b0:	08008535 	.word	0x08008535
 80084b4:	0800867b 	.word	0x0800867b
 80084b8:	0800867b 	.word	0x0800867b
 80084bc:	0800867b 	.word	0x0800867b
 80084c0:	08008577 	.word	0x08008577
 80084c4:	0800867b 	.word	0x0800867b
 80084c8:	0800867b 	.word	0x0800867b
 80084cc:	0800867b 	.word	0x0800867b
 80084d0:	080085b7 	.word	0x080085b7
 80084d4:	0800867b 	.word	0x0800867b
 80084d8:	0800867b 	.word	0x0800867b
 80084dc:	0800867b 	.word	0x0800867b
 80084e0:	080085f9 	.word	0x080085f9
 80084e4:	0800867b 	.word	0x0800867b
 80084e8:	0800867b 	.word	0x0800867b
 80084ec:	0800867b 	.word	0x0800867b
 80084f0:	08008639 	.word	0x08008639
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68b9      	ldr	r1, [r7, #8]
 80084fa:	4618      	mov	r0, r3
 80084fc:	f000 fb6a 	bl	8008bd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	699a      	ldr	r2, [r3, #24]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f042 0208 	orr.w	r2, r2, #8
 800850e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	699a      	ldr	r2, [r3, #24]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f022 0204 	bic.w	r2, r2, #4
 800851e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	6999      	ldr	r1, [r3, #24]
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	691a      	ldr	r2, [r3, #16]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	430a      	orrs	r2, r1
 8008530:	619a      	str	r2, [r3, #24]
      break;
 8008532:	e0a5      	b.n	8008680 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	68b9      	ldr	r1, [r7, #8]
 800853a:	4618      	mov	r0, r3
 800853c:	f000 fbda 	bl	8008cf4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	699a      	ldr	r2, [r3, #24]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800854e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	699a      	ldr	r2, [r3, #24]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800855e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	6999      	ldr	r1, [r3, #24]
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	021a      	lsls	r2, r3, #8
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	430a      	orrs	r2, r1
 8008572:	619a      	str	r2, [r3, #24]
      break;
 8008574:	e084      	b.n	8008680 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	68b9      	ldr	r1, [r7, #8]
 800857c:	4618      	mov	r0, r3
 800857e:	f000 fc43 	bl	8008e08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	69da      	ldr	r2, [r3, #28]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f042 0208 	orr.w	r2, r2, #8
 8008590:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	69da      	ldr	r2, [r3, #28]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f022 0204 	bic.w	r2, r2, #4
 80085a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	69d9      	ldr	r1, [r3, #28]
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	691a      	ldr	r2, [r3, #16]
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	430a      	orrs	r2, r1
 80085b2:	61da      	str	r2, [r3, #28]
      break;
 80085b4:	e064      	b.n	8008680 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	68b9      	ldr	r1, [r7, #8]
 80085bc:	4618      	mov	r0, r3
 80085be:	f000 fcab 	bl	8008f18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	69da      	ldr	r2, [r3, #28]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	69da      	ldr	r2, [r3, #28]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	69d9      	ldr	r1, [r3, #28]
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	691b      	ldr	r3, [r3, #16]
 80085ec:	021a      	lsls	r2, r3, #8
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	430a      	orrs	r2, r1
 80085f4:	61da      	str	r2, [r3, #28]
      break;
 80085f6:	e043      	b.n	8008680 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	68b9      	ldr	r1, [r7, #8]
 80085fe:	4618      	mov	r0, r3
 8008600:	f000 fcf4 	bl	8008fec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f042 0208 	orr.w	r2, r2, #8
 8008612:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f022 0204 	bic.w	r2, r2, #4
 8008622:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	691a      	ldr	r2, [r3, #16]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	430a      	orrs	r2, r1
 8008634:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008636:	e023      	b.n	8008680 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68b9      	ldr	r1, [r7, #8]
 800863e:	4618      	mov	r0, r3
 8008640:	f000 fd38 	bl	80090b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008652:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008662:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	691b      	ldr	r3, [r3, #16]
 800866e:	021a      	lsls	r2, r3, #8
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	430a      	orrs	r2, r1
 8008676:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008678:	e002      	b.n	8008680 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800867a:	2301      	movs	r3, #1
 800867c:	75fb      	strb	r3, [r7, #23]
      break;
 800867e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2200      	movs	r2, #0
 8008684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008688:	7dfb      	ldrb	r3, [r7, #23]
}
 800868a:	4618      	mov	r0, r3
 800868c:	3718      	adds	r7, #24
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop

08008694 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800869e:	2300      	movs	r3, #0
 80086a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d101      	bne.n	80086b0 <HAL_TIM_ConfigClockSource+0x1c>
 80086ac:	2302      	movs	r3, #2
 80086ae:	e0dc      	b.n	800886a <HAL_TIM_ConfigClockSource+0x1d6>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2202      	movs	r2, #2
 80086bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80086c8:	68ba      	ldr	r2, [r7, #8]
 80086ca:	4b6a      	ldr	r3, [pc, #424]	; (8008874 <HAL_TIM_ConfigClockSource+0x1e0>)
 80086cc:	4013      	ands	r3, r2
 80086ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	68ba      	ldr	r2, [r7, #8]
 80086de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a64      	ldr	r2, [pc, #400]	; (8008878 <HAL_TIM_ConfigClockSource+0x1e4>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	f000 80a9 	beq.w	800883e <HAL_TIM_ConfigClockSource+0x1aa>
 80086ec:	4a62      	ldr	r2, [pc, #392]	; (8008878 <HAL_TIM_ConfigClockSource+0x1e4>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	f200 80ae 	bhi.w	8008850 <HAL_TIM_ConfigClockSource+0x1bc>
 80086f4:	4a61      	ldr	r2, [pc, #388]	; (800887c <HAL_TIM_ConfigClockSource+0x1e8>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	f000 80a1 	beq.w	800883e <HAL_TIM_ConfigClockSource+0x1aa>
 80086fc:	4a5f      	ldr	r2, [pc, #380]	; (800887c <HAL_TIM_ConfigClockSource+0x1e8>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	f200 80a6 	bhi.w	8008850 <HAL_TIM_ConfigClockSource+0x1bc>
 8008704:	4a5e      	ldr	r2, [pc, #376]	; (8008880 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008706:	4293      	cmp	r3, r2
 8008708:	f000 8099 	beq.w	800883e <HAL_TIM_ConfigClockSource+0x1aa>
 800870c:	4a5c      	ldr	r2, [pc, #368]	; (8008880 <HAL_TIM_ConfigClockSource+0x1ec>)
 800870e:	4293      	cmp	r3, r2
 8008710:	f200 809e 	bhi.w	8008850 <HAL_TIM_ConfigClockSource+0x1bc>
 8008714:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008718:	f000 8091 	beq.w	800883e <HAL_TIM_ConfigClockSource+0x1aa>
 800871c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008720:	f200 8096 	bhi.w	8008850 <HAL_TIM_ConfigClockSource+0x1bc>
 8008724:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008728:	f000 8089 	beq.w	800883e <HAL_TIM_ConfigClockSource+0x1aa>
 800872c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008730:	f200 808e 	bhi.w	8008850 <HAL_TIM_ConfigClockSource+0x1bc>
 8008734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008738:	d03e      	beq.n	80087b8 <HAL_TIM_ConfigClockSource+0x124>
 800873a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800873e:	f200 8087 	bhi.w	8008850 <HAL_TIM_ConfigClockSource+0x1bc>
 8008742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008746:	f000 8086 	beq.w	8008856 <HAL_TIM_ConfigClockSource+0x1c2>
 800874a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800874e:	d87f      	bhi.n	8008850 <HAL_TIM_ConfigClockSource+0x1bc>
 8008750:	2b70      	cmp	r3, #112	; 0x70
 8008752:	d01a      	beq.n	800878a <HAL_TIM_ConfigClockSource+0xf6>
 8008754:	2b70      	cmp	r3, #112	; 0x70
 8008756:	d87b      	bhi.n	8008850 <HAL_TIM_ConfigClockSource+0x1bc>
 8008758:	2b60      	cmp	r3, #96	; 0x60
 800875a:	d050      	beq.n	80087fe <HAL_TIM_ConfigClockSource+0x16a>
 800875c:	2b60      	cmp	r3, #96	; 0x60
 800875e:	d877      	bhi.n	8008850 <HAL_TIM_ConfigClockSource+0x1bc>
 8008760:	2b50      	cmp	r3, #80	; 0x50
 8008762:	d03c      	beq.n	80087de <HAL_TIM_ConfigClockSource+0x14a>
 8008764:	2b50      	cmp	r3, #80	; 0x50
 8008766:	d873      	bhi.n	8008850 <HAL_TIM_ConfigClockSource+0x1bc>
 8008768:	2b40      	cmp	r3, #64	; 0x40
 800876a:	d058      	beq.n	800881e <HAL_TIM_ConfigClockSource+0x18a>
 800876c:	2b40      	cmp	r3, #64	; 0x40
 800876e:	d86f      	bhi.n	8008850 <HAL_TIM_ConfigClockSource+0x1bc>
 8008770:	2b30      	cmp	r3, #48	; 0x30
 8008772:	d064      	beq.n	800883e <HAL_TIM_ConfigClockSource+0x1aa>
 8008774:	2b30      	cmp	r3, #48	; 0x30
 8008776:	d86b      	bhi.n	8008850 <HAL_TIM_ConfigClockSource+0x1bc>
 8008778:	2b20      	cmp	r3, #32
 800877a:	d060      	beq.n	800883e <HAL_TIM_ConfigClockSource+0x1aa>
 800877c:	2b20      	cmp	r3, #32
 800877e:	d867      	bhi.n	8008850 <HAL_TIM_ConfigClockSource+0x1bc>
 8008780:	2b00      	cmp	r3, #0
 8008782:	d05c      	beq.n	800883e <HAL_TIM_ConfigClockSource+0x1aa>
 8008784:	2b10      	cmp	r3, #16
 8008786:	d05a      	beq.n	800883e <HAL_TIM_ConfigClockSource+0x1aa>
 8008788:	e062      	b.n	8008850 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6818      	ldr	r0, [r3, #0]
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	6899      	ldr	r1, [r3, #8]
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	685a      	ldr	r2, [r3, #4]
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	f000 fd6f 	bl	800927c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80087ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	68ba      	ldr	r2, [r7, #8]
 80087b4:	609a      	str	r2, [r3, #8]
      break;
 80087b6:	e04f      	b.n	8008858 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6818      	ldr	r0, [r3, #0]
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	6899      	ldr	r1, [r3, #8]
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	685a      	ldr	r2, [r3, #4]
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	f000 fd58 	bl	800927c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	689a      	ldr	r2, [r3, #8]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80087da:	609a      	str	r2, [r3, #8]
      break;
 80087dc:	e03c      	b.n	8008858 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6818      	ldr	r0, [r3, #0]
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	6859      	ldr	r1, [r3, #4]
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	461a      	mov	r2, r3
 80087ec:	f000 fcc8 	bl	8009180 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2150      	movs	r1, #80	; 0x50
 80087f6:	4618      	mov	r0, r3
 80087f8:	f000 fd22 	bl	8009240 <TIM_ITRx_SetConfig>
      break;
 80087fc:	e02c      	b.n	8008858 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6818      	ldr	r0, [r3, #0]
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	6859      	ldr	r1, [r3, #4]
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	68db      	ldr	r3, [r3, #12]
 800880a:	461a      	mov	r2, r3
 800880c:	f000 fce7 	bl	80091de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2160      	movs	r1, #96	; 0x60
 8008816:	4618      	mov	r0, r3
 8008818:	f000 fd12 	bl	8009240 <TIM_ITRx_SetConfig>
      break;
 800881c:	e01c      	b.n	8008858 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6818      	ldr	r0, [r3, #0]
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	6859      	ldr	r1, [r3, #4]
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	461a      	mov	r2, r3
 800882c:	f000 fca8 	bl	8009180 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2140      	movs	r1, #64	; 0x40
 8008836:	4618      	mov	r0, r3
 8008838:	f000 fd02 	bl	8009240 <TIM_ITRx_SetConfig>
      break;
 800883c:	e00c      	b.n	8008858 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4619      	mov	r1, r3
 8008848:	4610      	mov	r0, r2
 800884a:	f000 fcf9 	bl	8009240 <TIM_ITRx_SetConfig>
      break;
 800884e:	e003      	b.n	8008858 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008850:	2301      	movs	r3, #1
 8008852:	73fb      	strb	r3, [r7, #15]
      break;
 8008854:	e000      	b.n	8008858 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008856:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2201      	movs	r2, #1
 800885c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008868:	7bfb      	ldrb	r3, [r7, #15]
}
 800886a:	4618      	mov	r0, r3
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	ffceff88 	.word	0xffceff88
 8008878:	00100040 	.word	0x00100040
 800887c:	00100030 	.word	0x00100030
 8008880:	00100020 	.word	0x00100020

08008884 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008884:	b480      	push	{r7}
 8008886:	b083      	sub	sp, #12
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800888c:	bf00      	nop
 800888e:	370c      	adds	r7, #12
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80088a0:	bf00      	nop
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80088b4:	bf00      	nop
 80088b6:	370c      	adds	r7, #12
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80088c8:	bf00      	nop
 80088ca:	370c      	adds	r7, #12
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80088dc:	bf00      	nop
 80088de:	370c      	adds	r7, #12
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr

080088e8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80088f0:	bf00      	nop
 80088f2:	370c      	adds	r7, #12
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008908:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	429a      	cmp	r2, r3
 8008912:	d107      	bne.n	8008924 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2201      	movs	r2, #1
 8008918:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2201      	movs	r2, #1
 800891e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008922:	e02a      	b.n	800897a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	429a      	cmp	r2, r3
 800892c:	d107      	bne.n	800893e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2202      	movs	r2, #2
 8008932:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800893c:	e01d      	b.n	800897a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	429a      	cmp	r2, r3
 8008946:	d107      	bne.n	8008958 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2204      	movs	r2, #4
 800894c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2201      	movs	r2, #1
 8008952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008956:	e010      	b.n	800897a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	429a      	cmp	r2, r3
 8008960:	d107      	bne.n	8008972 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2208      	movs	r2, #8
 8008966:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2201      	movs	r2, #1
 800896c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008970:	e003      	b.n	800897a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2201      	movs	r2, #1
 8008976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800897a:	68f8      	ldr	r0, [r7, #12]
 800897c:	f7ff ffb4 	bl	80088e8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	771a      	strb	r2, [r3, #28]
}
 8008986:	bf00      	nop
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b084      	sub	sp, #16
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800899a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d10b      	bne.n	80089be <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2201      	movs	r2, #1
 80089aa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	69db      	ldr	r3, [r3, #28]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d136      	bne.n	8008a22 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2201      	movs	r2, #1
 80089b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089bc:	e031      	b.n	8008a22 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d10b      	bne.n	80089e0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2202      	movs	r2, #2
 80089cc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	69db      	ldr	r3, [r3, #28]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d125      	bne.n	8008a22 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2201      	movs	r2, #1
 80089da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089de:	e020      	b.n	8008a22 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d10b      	bne.n	8008a02 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2204      	movs	r2, #4
 80089ee:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	69db      	ldr	r3, [r3, #28]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d114      	bne.n	8008a22 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a00:	e00f      	b.n	8008a22 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d10a      	bne.n	8008a22 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2208      	movs	r2, #8
 8008a10:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	69db      	ldr	r3, [r3, #28]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d103      	bne.n	8008a22 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a22:	68f8      	ldr	r0, [r7, #12]
 8008a24:	f7f7 feee 	bl	8000804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	771a      	strb	r2, [r3, #28]
}
 8008a2e:	bf00      	nop
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}

08008a36 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b084      	sub	sp, #16
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a42:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d103      	bne.n	8008a56 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2201      	movs	r2, #1
 8008a52:	771a      	strb	r2, [r3, #28]
 8008a54:	e019      	b.n	8008a8a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d103      	bne.n	8008a68 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2202      	movs	r2, #2
 8008a64:	771a      	strb	r2, [r3, #28]
 8008a66:	e010      	b.n	8008a8a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d103      	bne.n	8008a7a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2204      	movs	r2, #4
 8008a76:	771a      	strb	r2, [r3, #28]
 8008a78:	e007      	b.n	8008a8a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d102      	bne.n	8008a8a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2208      	movs	r2, #8
 8008a88:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8008a8a:	68f8      	ldr	r0, [r7, #12]
 8008a8c:	f7ff ff18 	bl	80088c0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2200      	movs	r2, #0
 8008a94:	771a      	strb	r2, [r3, #28]
}
 8008a96:	bf00      	nop
 8008a98:	3710      	adds	r7, #16
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
	...

08008aa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	4a40      	ldr	r2, [pc, #256]	; (8008bb4 <TIM_Base_SetConfig+0x114>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d013      	beq.n	8008ae0 <TIM_Base_SetConfig+0x40>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008abe:	d00f      	beq.n	8008ae0 <TIM_Base_SetConfig+0x40>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	4a3d      	ldr	r2, [pc, #244]	; (8008bb8 <TIM_Base_SetConfig+0x118>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d00b      	beq.n	8008ae0 <TIM_Base_SetConfig+0x40>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	4a3c      	ldr	r2, [pc, #240]	; (8008bbc <TIM_Base_SetConfig+0x11c>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d007      	beq.n	8008ae0 <TIM_Base_SetConfig+0x40>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	4a3b      	ldr	r2, [pc, #236]	; (8008bc0 <TIM_Base_SetConfig+0x120>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d003      	beq.n	8008ae0 <TIM_Base_SetConfig+0x40>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	4a3a      	ldr	r2, [pc, #232]	; (8008bc4 <TIM_Base_SetConfig+0x124>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d108      	bne.n	8008af2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ae6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	68fa      	ldr	r2, [r7, #12]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4a2f      	ldr	r2, [pc, #188]	; (8008bb4 <TIM_Base_SetConfig+0x114>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d01f      	beq.n	8008b3a <TIM_Base_SetConfig+0x9a>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b00:	d01b      	beq.n	8008b3a <TIM_Base_SetConfig+0x9a>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	4a2c      	ldr	r2, [pc, #176]	; (8008bb8 <TIM_Base_SetConfig+0x118>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d017      	beq.n	8008b3a <TIM_Base_SetConfig+0x9a>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	4a2b      	ldr	r2, [pc, #172]	; (8008bbc <TIM_Base_SetConfig+0x11c>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d013      	beq.n	8008b3a <TIM_Base_SetConfig+0x9a>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	4a2a      	ldr	r2, [pc, #168]	; (8008bc0 <TIM_Base_SetConfig+0x120>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d00f      	beq.n	8008b3a <TIM_Base_SetConfig+0x9a>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4a29      	ldr	r2, [pc, #164]	; (8008bc4 <TIM_Base_SetConfig+0x124>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d00b      	beq.n	8008b3a <TIM_Base_SetConfig+0x9a>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	4a28      	ldr	r2, [pc, #160]	; (8008bc8 <TIM_Base_SetConfig+0x128>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d007      	beq.n	8008b3a <TIM_Base_SetConfig+0x9a>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4a27      	ldr	r2, [pc, #156]	; (8008bcc <TIM_Base_SetConfig+0x12c>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d003      	beq.n	8008b3a <TIM_Base_SetConfig+0x9a>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	4a26      	ldr	r2, [pc, #152]	; (8008bd0 <TIM_Base_SetConfig+0x130>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d108      	bne.n	8008b4c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	68fa      	ldr	r2, [r7, #12]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	695b      	ldr	r3, [r3, #20]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	689a      	ldr	r2, [r3, #8]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4a10      	ldr	r2, [pc, #64]	; (8008bb4 <TIM_Base_SetConfig+0x114>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d00f      	beq.n	8008b98 <TIM_Base_SetConfig+0xf8>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	4a12      	ldr	r2, [pc, #72]	; (8008bc4 <TIM_Base_SetConfig+0x124>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d00b      	beq.n	8008b98 <TIM_Base_SetConfig+0xf8>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4a11      	ldr	r2, [pc, #68]	; (8008bc8 <TIM_Base_SetConfig+0x128>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d007      	beq.n	8008b98 <TIM_Base_SetConfig+0xf8>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4a10      	ldr	r2, [pc, #64]	; (8008bcc <TIM_Base_SetConfig+0x12c>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d003      	beq.n	8008b98 <TIM_Base_SetConfig+0xf8>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4a0f      	ldr	r2, [pc, #60]	; (8008bd0 <TIM_Base_SetConfig+0x130>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d103      	bne.n	8008ba0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	691a      	ldr	r2, [r3, #16]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	615a      	str	r2, [r3, #20]
}
 8008ba6:	bf00      	nop
 8008ba8:	3714      	adds	r7, #20
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr
 8008bb2:	bf00      	nop
 8008bb4:	40010000 	.word	0x40010000
 8008bb8:	40000400 	.word	0x40000400
 8008bbc:	40000800 	.word	0x40000800
 8008bc0:	40000c00 	.word	0x40000c00
 8008bc4:	40010400 	.word	0x40010400
 8008bc8:	40014000 	.word	0x40014000
 8008bcc:	40014400 	.word	0x40014400
 8008bd0:	40014800 	.word	0x40014800

08008bd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b087      	sub	sp, #28
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6a1b      	ldr	r3, [r3, #32]
 8008be2:	f023 0201 	bic.w	r2, r3, #1
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6a1b      	ldr	r3, [r3, #32]
 8008bee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	699b      	ldr	r3, [r3, #24]
 8008bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	4b37      	ldr	r3, [pc, #220]	; (8008cdc <TIM_OC1_SetConfig+0x108>)
 8008c00:	4013      	ands	r3, r2
 8008c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f023 0303 	bic.w	r3, r3, #3
 8008c0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	68fa      	ldr	r2, [r7, #12]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	f023 0302 	bic.w	r3, r3, #2
 8008c1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	689b      	ldr	r3, [r3, #8]
 8008c22:	697a      	ldr	r2, [r7, #20]
 8008c24:	4313      	orrs	r3, r2
 8008c26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4a2d      	ldr	r2, [pc, #180]	; (8008ce0 <TIM_OC1_SetConfig+0x10c>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d00f      	beq.n	8008c50 <TIM_OC1_SetConfig+0x7c>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4a2c      	ldr	r2, [pc, #176]	; (8008ce4 <TIM_OC1_SetConfig+0x110>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d00b      	beq.n	8008c50 <TIM_OC1_SetConfig+0x7c>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4a2b      	ldr	r2, [pc, #172]	; (8008ce8 <TIM_OC1_SetConfig+0x114>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d007      	beq.n	8008c50 <TIM_OC1_SetConfig+0x7c>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	4a2a      	ldr	r2, [pc, #168]	; (8008cec <TIM_OC1_SetConfig+0x118>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d003      	beq.n	8008c50 <TIM_OC1_SetConfig+0x7c>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4a29      	ldr	r2, [pc, #164]	; (8008cf0 <TIM_OC1_SetConfig+0x11c>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d10c      	bne.n	8008c6a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	f023 0308 	bic.w	r3, r3, #8
 8008c56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	697a      	ldr	r2, [r7, #20]
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	f023 0304 	bic.w	r3, r3, #4
 8008c68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	4a1c      	ldr	r2, [pc, #112]	; (8008ce0 <TIM_OC1_SetConfig+0x10c>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d00f      	beq.n	8008c92 <TIM_OC1_SetConfig+0xbe>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	4a1b      	ldr	r2, [pc, #108]	; (8008ce4 <TIM_OC1_SetConfig+0x110>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d00b      	beq.n	8008c92 <TIM_OC1_SetConfig+0xbe>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	4a1a      	ldr	r2, [pc, #104]	; (8008ce8 <TIM_OC1_SetConfig+0x114>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d007      	beq.n	8008c92 <TIM_OC1_SetConfig+0xbe>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	4a19      	ldr	r2, [pc, #100]	; (8008cec <TIM_OC1_SetConfig+0x118>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d003      	beq.n	8008c92 <TIM_OC1_SetConfig+0xbe>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	4a18      	ldr	r2, [pc, #96]	; (8008cf0 <TIM_OC1_SetConfig+0x11c>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d111      	bne.n	8008cb6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	695b      	ldr	r3, [r3, #20]
 8008ca6:	693a      	ldr	r2, [r7, #16]
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	699b      	ldr	r3, [r3, #24]
 8008cb0:	693a      	ldr	r2, [r7, #16]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	693a      	ldr	r2, [r7, #16]
 8008cba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	68fa      	ldr	r2, [r7, #12]
 8008cc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	685a      	ldr	r2, [r3, #4]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	697a      	ldr	r2, [r7, #20]
 8008cce:	621a      	str	r2, [r3, #32]
}
 8008cd0:	bf00      	nop
 8008cd2:	371c      	adds	r7, #28
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr
 8008cdc:	fffeff8f 	.word	0xfffeff8f
 8008ce0:	40010000 	.word	0x40010000
 8008ce4:	40010400 	.word	0x40010400
 8008ce8:	40014000 	.word	0x40014000
 8008cec:	40014400 	.word	0x40014400
 8008cf0:	40014800 	.word	0x40014800

08008cf4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b087      	sub	sp, #28
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6a1b      	ldr	r3, [r3, #32]
 8008d02:	f023 0210 	bic.w	r2, r3, #16
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6a1b      	ldr	r3, [r3, #32]
 8008d0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	699b      	ldr	r3, [r3, #24]
 8008d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008d1c:	68fa      	ldr	r2, [r7, #12]
 8008d1e:	4b34      	ldr	r3, [pc, #208]	; (8008df0 <TIM_OC2_SetConfig+0xfc>)
 8008d20:	4013      	ands	r3, r2
 8008d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	021b      	lsls	r3, r3, #8
 8008d32:	68fa      	ldr	r2, [r7, #12]
 8008d34:	4313      	orrs	r3, r2
 8008d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	f023 0320 	bic.w	r3, r3, #32
 8008d3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	011b      	lsls	r3, r3, #4
 8008d46:	697a      	ldr	r2, [r7, #20]
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	4a29      	ldr	r2, [pc, #164]	; (8008df4 <TIM_OC2_SetConfig+0x100>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d003      	beq.n	8008d5c <TIM_OC2_SetConfig+0x68>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	4a28      	ldr	r2, [pc, #160]	; (8008df8 <TIM_OC2_SetConfig+0x104>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d10d      	bne.n	8008d78 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	011b      	lsls	r3, r3, #4
 8008d6a:	697a      	ldr	r2, [r7, #20]
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4a1e      	ldr	r2, [pc, #120]	; (8008df4 <TIM_OC2_SetConfig+0x100>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d00f      	beq.n	8008da0 <TIM_OC2_SetConfig+0xac>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	4a1d      	ldr	r2, [pc, #116]	; (8008df8 <TIM_OC2_SetConfig+0x104>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d00b      	beq.n	8008da0 <TIM_OC2_SetConfig+0xac>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4a1c      	ldr	r2, [pc, #112]	; (8008dfc <TIM_OC2_SetConfig+0x108>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d007      	beq.n	8008da0 <TIM_OC2_SetConfig+0xac>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4a1b      	ldr	r2, [pc, #108]	; (8008e00 <TIM_OC2_SetConfig+0x10c>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d003      	beq.n	8008da0 <TIM_OC2_SetConfig+0xac>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a1a      	ldr	r2, [pc, #104]	; (8008e04 <TIM_OC2_SetConfig+0x110>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d113      	bne.n	8008dc8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008da6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008dae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	695b      	ldr	r3, [r3, #20]
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	693a      	ldr	r2, [r7, #16]
 8008db8:	4313      	orrs	r3, r2
 8008dba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	699b      	ldr	r3, [r3, #24]
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	693a      	ldr	r2, [r7, #16]
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	693a      	ldr	r2, [r7, #16]
 8008dcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	68fa      	ldr	r2, [r7, #12]
 8008dd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	685a      	ldr	r2, [r3, #4]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	697a      	ldr	r2, [r7, #20]
 8008de0:	621a      	str	r2, [r3, #32]
}
 8008de2:	bf00      	nop
 8008de4:	371c      	adds	r7, #28
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop
 8008df0:	feff8fff 	.word	0xfeff8fff
 8008df4:	40010000 	.word	0x40010000
 8008df8:	40010400 	.word	0x40010400
 8008dfc:	40014000 	.word	0x40014000
 8008e00:	40014400 	.word	0x40014400
 8008e04:	40014800 	.word	0x40014800

08008e08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b087      	sub	sp, #28
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6a1b      	ldr	r3, [r3, #32]
 8008e16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6a1b      	ldr	r3, [r3, #32]
 8008e22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	69db      	ldr	r3, [r3, #28]
 8008e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008e30:	68fa      	ldr	r2, [r7, #12]
 8008e32:	4b33      	ldr	r3, [pc, #204]	; (8008f00 <TIM_OC3_SetConfig+0xf8>)
 8008e34:	4013      	ands	r3, r2
 8008e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f023 0303 	bic.w	r3, r3, #3
 8008e3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	68fa      	ldr	r2, [r7, #12]
 8008e46:	4313      	orrs	r3, r2
 8008e48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	021b      	lsls	r3, r3, #8
 8008e58:	697a      	ldr	r2, [r7, #20]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	4a28      	ldr	r2, [pc, #160]	; (8008f04 <TIM_OC3_SetConfig+0xfc>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d003      	beq.n	8008e6e <TIM_OC3_SetConfig+0x66>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	4a27      	ldr	r2, [pc, #156]	; (8008f08 <TIM_OC3_SetConfig+0x100>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d10d      	bne.n	8008e8a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	68db      	ldr	r3, [r3, #12]
 8008e7a:	021b      	lsls	r3, r3, #8
 8008e7c:	697a      	ldr	r2, [r7, #20]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4a1d      	ldr	r2, [pc, #116]	; (8008f04 <TIM_OC3_SetConfig+0xfc>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d00f      	beq.n	8008eb2 <TIM_OC3_SetConfig+0xaa>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	4a1c      	ldr	r2, [pc, #112]	; (8008f08 <TIM_OC3_SetConfig+0x100>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d00b      	beq.n	8008eb2 <TIM_OC3_SetConfig+0xaa>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	4a1b      	ldr	r2, [pc, #108]	; (8008f0c <TIM_OC3_SetConfig+0x104>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d007      	beq.n	8008eb2 <TIM_OC3_SetConfig+0xaa>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	4a1a      	ldr	r2, [pc, #104]	; (8008f10 <TIM_OC3_SetConfig+0x108>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d003      	beq.n	8008eb2 <TIM_OC3_SetConfig+0xaa>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	4a19      	ldr	r2, [pc, #100]	; (8008f14 <TIM_OC3_SetConfig+0x10c>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d113      	bne.n	8008eda <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008eb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	695b      	ldr	r3, [r3, #20]
 8008ec6:	011b      	lsls	r3, r3, #4
 8008ec8:	693a      	ldr	r2, [r7, #16]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	699b      	ldr	r3, [r3, #24]
 8008ed2:	011b      	lsls	r3, r3, #4
 8008ed4:	693a      	ldr	r2, [r7, #16]
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	693a      	ldr	r2, [r7, #16]
 8008ede:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	68fa      	ldr	r2, [r7, #12]
 8008ee4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	685a      	ldr	r2, [r3, #4]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	697a      	ldr	r2, [r7, #20]
 8008ef2:	621a      	str	r2, [r3, #32]
}
 8008ef4:	bf00      	nop
 8008ef6:	371c      	adds	r7, #28
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr
 8008f00:	fffeff8f 	.word	0xfffeff8f
 8008f04:	40010000 	.word	0x40010000
 8008f08:	40010400 	.word	0x40010400
 8008f0c:	40014000 	.word	0x40014000
 8008f10:	40014400 	.word	0x40014400
 8008f14:	40014800 	.word	0x40014800

08008f18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b087      	sub	sp, #28
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6a1b      	ldr	r3, [r3, #32]
 8008f26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6a1b      	ldr	r3, [r3, #32]
 8008f32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	69db      	ldr	r3, [r3, #28]
 8008f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	4b24      	ldr	r3, [pc, #144]	; (8008fd4 <TIM_OC4_SetConfig+0xbc>)
 8008f44:	4013      	ands	r3, r2
 8008f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	021b      	lsls	r3, r3, #8
 8008f56:	68fa      	ldr	r2, [r7, #12]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	031b      	lsls	r3, r3, #12
 8008f6a:	693a      	ldr	r2, [r7, #16]
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4a19      	ldr	r2, [pc, #100]	; (8008fd8 <TIM_OC4_SetConfig+0xc0>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d00f      	beq.n	8008f98 <TIM_OC4_SetConfig+0x80>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4a18      	ldr	r2, [pc, #96]	; (8008fdc <TIM_OC4_SetConfig+0xc4>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d00b      	beq.n	8008f98 <TIM_OC4_SetConfig+0x80>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4a17      	ldr	r2, [pc, #92]	; (8008fe0 <TIM_OC4_SetConfig+0xc8>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d007      	beq.n	8008f98 <TIM_OC4_SetConfig+0x80>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4a16      	ldr	r2, [pc, #88]	; (8008fe4 <TIM_OC4_SetConfig+0xcc>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d003      	beq.n	8008f98 <TIM_OC4_SetConfig+0x80>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4a15      	ldr	r2, [pc, #84]	; (8008fe8 <TIM_OC4_SetConfig+0xd0>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d109      	bne.n	8008fac <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	695b      	ldr	r3, [r3, #20]
 8008fa4:	019b      	lsls	r3, r3, #6
 8008fa6:	697a      	ldr	r2, [r7, #20]
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	697a      	ldr	r2, [r7, #20]
 8008fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	68fa      	ldr	r2, [r7, #12]
 8008fb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	685a      	ldr	r2, [r3, #4]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	693a      	ldr	r2, [r7, #16]
 8008fc4:	621a      	str	r2, [r3, #32]
}
 8008fc6:	bf00      	nop
 8008fc8:	371c      	adds	r7, #28
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr
 8008fd2:	bf00      	nop
 8008fd4:	feff8fff 	.word	0xfeff8fff
 8008fd8:	40010000 	.word	0x40010000
 8008fdc:	40010400 	.word	0x40010400
 8008fe0:	40014000 	.word	0x40014000
 8008fe4:	40014400 	.word	0x40014400
 8008fe8:	40014800 	.word	0x40014800

08008fec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b087      	sub	sp, #28
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6a1b      	ldr	r3, [r3, #32]
 8008ffa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6a1b      	ldr	r3, [r3, #32]
 8009006:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009014:	68fa      	ldr	r2, [r7, #12]
 8009016:	4b21      	ldr	r3, [pc, #132]	; (800909c <TIM_OC5_SetConfig+0xb0>)
 8009018:	4013      	ands	r3, r2
 800901a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	68fa      	ldr	r2, [r7, #12]
 8009022:	4313      	orrs	r3, r2
 8009024:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800902c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	041b      	lsls	r3, r3, #16
 8009034:	693a      	ldr	r2, [r7, #16]
 8009036:	4313      	orrs	r3, r2
 8009038:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4a18      	ldr	r2, [pc, #96]	; (80090a0 <TIM_OC5_SetConfig+0xb4>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d00f      	beq.n	8009062 <TIM_OC5_SetConfig+0x76>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4a17      	ldr	r2, [pc, #92]	; (80090a4 <TIM_OC5_SetConfig+0xb8>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d00b      	beq.n	8009062 <TIM_OC5_SetConfig+0x76>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	4a16      	ldr	r2, [pc, #88]	; (80090a8 <TIM_OC5_SetConfig+0xbc>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d007      	beq.n	8009062 <TIM_OC5_SetConfig+0x76>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	4a15      	ldr	r2, [pc, #84]	; (80090ac <TIM_OC5_SetConfig+0xc0>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d003      	beq.n	8009062 <TIM_OC5_SetConfig+0x76>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	4a14      	ldr	r2, [pc, #80]	; (80090b0 <TIM_OC5_SetConfig+0xc4>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d109      	bne.n	8009076 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009068:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	695b      	ldr	r3, [r3, #20]
 800906e:	021b      	lsls	r3, r3, #8
 8009070:	697a      	ldr	r2, [r7, #20]
 8009072:	4313      	orrs	r3, r2
 8009074:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	697a      	ldr	r2, [r7, #20]
 800907a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	68fa      	ldr	r2, [r7, #12]
 8009080:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	685a      	ldr	r2, [r3, #4]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	693a      	ldr	r2, [r7, #16]
 800908e:	621a      	str	r2, [r3, #32]
}
 8009090:	bf00      	nop
 8009092:	371c      	adds	r7, #28
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr
 800909c:	fffeff8f 	.word	0xfffeff8f
 80090a0:	40010000 	.word	0x40010000
 80090a4:	40010400 	.word	0x40010400
 80090a8:	40014000 	.word	0x40014000
 80090ac:	40014400 	.word	0x40014400
 80090b0:	40014800 	.word	0x40014800

080090b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b087      	sub	sp, #28
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6a1b      	ldr	r3, [r3, #32]
 80090c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6a1b      	ldr	r3, [r3, #32]
 80090ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80090dc:	68fa      	ldr	r2, [r7, #12]
 80090de:	4b22      	ldr	r3, [pc, #136]	; (8009168 <TIM_OC6_SetConfig+0xb4>)
 80090e0:	4013      	ands	r3, r2
 80090e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	021b      	lsls	r3, r3, #8
 80090ea:	68fa      	ldr	r2, [r7, #12]
 80090ec:	4313      	orrs	r3, r2
 80090ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80090f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	051b      	lsls	r3, r3, #20
 80090fe:	693a      	ldr	r2, [r7, #16]
 8009100:	4313      	orrs	r3, r2
 8009102:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	4a19      	ldr	r2, [pc, #100]	; (800916c <TIM_OC6_SetConfig+0xb8>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d00f      	beq.n	800912c <TIM_OC6_SetConfig+0x78>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	4a18      	ldr	r2, [pc, #96]	; (8009170 <TIM_OC6_SetConfig+0xbc>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d00b      	beq.n	800912c <TIM_OC6_SetConfig+0x78>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	4a17      	ldr	r2, [pc, #92]	; (8009174 <TIM_OC6_SetConfig+0xc0>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d007      	beq.n	800912c <TIM_OC6_SetConfig+0x78>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	4a16      	ldr	r2, [pc, #88]	; (8009178 <TIM_OC6_SetConfig+0xc4>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d003      	beq.n	800912c <TIM_OC6_SetConfig+0x78>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	4a15      	ldr	r2, [pc, #84]	; (800917c <TIM_OC6_SetConfig+0xc8>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d109      	bne.n	8009140 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009132:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	695b      	ldr	r3, [r3, #20]
 8009138:	029b      	lsls	r3, r3, #10
 800913a:	697a      	ldr	r2, [r7, #20]
 800913c:	4313      	orrs	r3, r2
 800913e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	697a      	ldr	r2, [r7, #20]
 8009144:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	68fa      	ldr	r2, [r7, #12]
 800914a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	685a      	ldr	r2, [r3, #4]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	693a      	ldr	r2, [r7, #16]
 8009158:	621a      	str	r2, [r3, #32]
}
 800915a:	bf00      	nop
 800915c:	371c      	adds	r7, #28
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr
 8009166:	bf00      	nop
 8009168:	feff8fff 	.word	0xfeff8fff
 800916c:	40010000 	.word	0x40010000
 8009170:	40010400 	.word	0x40010400
 8009174:	40014000 	.word	0x40014000
 8009178:	40014400 	.word	0x40014400
 800917c:	40014800 	.word	0x40014800

08009180 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009180:	b480      	push	{r7}
 8009182:	b087      	sub	sp, #28
 8009184:	af00      	add	r7, sp, #0
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	6a1b      	ldr	r3, [r3, #32]
 8009190:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	6a1b      	ldr	r3, [r3, #32]
 8009196:	f023 0201 	bic.w	r2, r3, #1
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	699b      	ldr	r3, [r3, #24]
 80091a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80091aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	011b      	lsls	r3, r3, #4
 80091b0:	693a      	ldr	r2, [r7, #16]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	f023 030a 	bic.w	r3, r3, #10
 80091bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80091be:	697a      	ldr	r2, [r7, #20]
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	4313      	orrs	r3, r2
 80091c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	693a      	ldr	r2, [r7, #16]
 80091ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	697a      	ldr	r2, [r7, #20]
 80091d0:	621a      	str	r2, [r3, #32]
}
 80091d2:	bf00      	nop
 80091d4:	371c      	adds	r7, #28
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr

080091de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091de:	b480      	push	{r7}
 80091e0:	b087      	sub	sp, #28
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	60f8      	str	r0, [r7, #12]
 80091e6:	60b9      	str	r1, [r7, #8]
 80091e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6a1b      	ldr	r3, [r3, #32]
 80091ee:	f023 0210 	bic.w	r2, r3, #16
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	699b      	ldr	r3, [r3, #24]
 80091fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	6a1b      	ldr	r3, [r3, #32]
 8009200:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009208:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	031b      	lsls	r3, r3, #12
 800920e:	697a      	ldr	r2, [r7, #20]
 8009210:	4313      	orrs	r3, r2
 8009212:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800921a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	011b      	lsls	r3, r3, #4
 8009220:	693a      	ldr	r2, [r7, #16]
 8009222:	4313      	orrs	r3, r2
 8009224:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	697a      	ldr	r2, [r7, #20]
 800922a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	693a      	ldr	r2, [r7, #16]
 8009230:	621a      	str	r2, [r3, #32]
}
 8009232:	bf00      	nop
 8009234:	371c      	adds	r7, #28
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr
	...

08009240 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009240:	b480      	push	{r7}
 8009242:	b085      	sub	sp, #20
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	689b      	ldr	r3, [r3, #8]
 800924e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009250:	68fa      	ldr	r2, [r7, #12]
 8009252:	4b09      	ldr	r3, [pc, #36]	; (8009278 <TIM_ITRx_SetConfig+0x38>)
 8009254:	4013      	ands	r3, r2
 8009256:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009258:	683a      	ldr	r2, [r7, #0]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	4313      	orrs	r3, r2
 800925e:	f043 0307 	orr.w	r3, r3, #7
 8009262:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	68fa      	ldr	r2, [r7, #12]
 8009268:	609a      	str	r2, [r3, #8]
}
 800926a:	bf00      	nop
 800926c:	3714      	adds	r7, #20
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop
 8009278:	ffcfff8f 	.word	0xffcfff8f

0800927c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800927c:	b480      	push	{r7}
 800927e:	b087      	sub	sp, #28
 8009280:	af00      	add	r7, sp, #0
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	607a      	str	r2, [r7, #4]
 8009288:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009296:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	021a      	lsls	r2, r3, #8
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	431a      	orrs	r2, r3
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	4313      	orrs	r3, r2
 80092a4:	697a      	ldr	r2, [r7, #20]
 80092a6:	4313      	orrs	r3, r2
 80092a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	697a      	ldr	r2, [r7, #20]
 80092ae:	609a      	str	r2, [r3, #8]
}
 80092b0:	bf00      	nop
 80092b2:	371c      	adds	r7, #28
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80092bc:	b480      	push	{r7}
 80092be:	b087      	sub	sp, #28
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	f003 031f 	and.w	r3, r3, #31
 80092ce:	2201      	movs	r2, #1
 80092d0:	fa02 f303 	lsl.w	r3, r2, r3
 80092d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	6a1a      	ldr	r2, [r3, #32]
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	43db      	mvns	r3, r3
 80092de:	401a      	ands	r2, r3
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	6a1a      	ldr	r2, [r3, #32]
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	f003 031f 	and.w	r3, r3, #31
 80092ee:	6879      	ldr	r1, [r7, #4]
 80092f0:	fa01 f303 	lsl.w	r3, r1, r3
 80092f4:	431a      	orrs	r2, r3
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	621a      	str	r2, [r3, #32]
}
 80092fa:	bf00      	nop
 80092fc:	371c      	adds	r7, #28
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr
	...

08009308 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009308:	b480      	push	{r7}
 800930a:	b085      	sub	sp, #20
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009318:	2b01      	cmp	r3, #1
 800931a:	d101      	bne.n	8009320 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800931c:	2302      	movs	r3, #2
 800931e:	e06d      	b.n	80093fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2202      	movs	r2, #2
 800932c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	685b      	ldr	r3, [r3, #4]
 8009336:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	689b      	ldr	r3, [r3, #8]
 800933e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a30      	ldr	r2, [pc, #192]	; (8009408 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d004      	beq.n	8009354 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a2f      	ldr	r2, [pc, #188]	; (800940c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d108      	bne.n	8009366 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800935a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	68fa      	ldr	r2, [r7, #12]
 8009362:	4313      	orrs	r3, r2
 8009364:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800936c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	68fa      	ldr	r2, [r7, #12]
 8009374:	4313      	orrs	r3, r2
 8009376:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	68fa      	ldr	r2, [r7, #12]
 800937e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a20      	ldr	r2, [pc, #128]	; (8009408 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d022      	beq.n	80093d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009392:	d01d      	beq.n	80093d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a1d      	ldr	r2, [pc, #116]	; (8009410 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d018      	beq.n	80093d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a1c      	ldr	r2, [pc, #112]	; (8009414 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d013      	beq.n	80093d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a1a      	ldr	r2, [pc, #104]	; (8009418 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d00e      	beq.n	80093d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a15      	ldr	r2, [pc, #84]	; (800940c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d009      	beq.n	80093d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a16      	ldr	r2, [pc, #88]	; (800941c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d004      	beq.n	80093d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a15      	ldr	r2, [pc, #84]	; (8009420 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d10c      	bne.n	80093ea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	68ba      	ldr	r2, [r7, #8]
 80093de:	4313      	orrs	r3, r2
 80093e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	68ba      	ldr	r2, [r7, #8]
 80093e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2201      	movs	r2, #1
 80093ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2200      	movs	r2, #0
 80093f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80093fa:	2300      	movs	r3, #0
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3714      	adds	r7, #20
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr
 8009408:	40010000 	.word	0x40010000
 800940c:	40010400 	.word	0x40010400
 8009410:	40000400 	.word	0x40000400
 8009414:	40000800 	.word	0x40000800
 8009418:	40000c00 	.word	0x40000c00
 800941c:	40001800 	.word	0x40001800
 8009420:	40014000 	.word	0x40014000

08009424 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800942c:	bf00      	nop
 800942e:	370c      	adds	r7, #12
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr

08009438 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009438:	b480      	push	{r7}
 800943a:	b083      	sub	sp, #12
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009440:	bf00      	nop
 8009442:	370c      	adds	r7, #12
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr

0800944c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800944c:	b480      	push	{r7}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009454:	bf00      	nop
 8009456:	370c      	adds	r7, #12
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d101      	bne.n	8009472 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800946e:	2301      	movs	r3, #1
 8009470:	e042      	b.n	80094f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009478:	2b00      	cmp	r3, #0
 800947a:	d106      	bne.n	800948a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2200      	movs	r2, #0
 8009480:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f7f7 fe8f 	bl	80011a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2224      	movs	r2, #36	; 0x24
 800948e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f022 0201 	bic.w	r2, r2, #1
 80094a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 f82c 	bl	8009500 <UART_SetConfig>
 80094a8:	4603      	mov	r3, r0
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	d101      	bne.n	80094b2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80094ae:	2301      	movs	r3, #1
 80094b0:	e022      	b.n	80094f8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d002      	beq.n	80094c0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 fd88 	bl	8009fd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	685a      	ldr	r2, [r3, #4]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80094ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	689a      	ldr	r2, [r3, #8]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80094de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	681a      	ldr	r2, [r3, #0]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f042 0201 	orr.w	r2, r2, #1
 80094ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 fe0f 	bl	800a114 <UART_CheckIdleState>
 80094f6:	4603      	mov	r3, r0
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3708      	adds	r7, #8
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009504:	b092      	sub	sp, #72	; 0x48
 8009506:	af00      	add	r7, sp, #0
 8009508:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800950a:	2300      	movs	r3, #0
 800950c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	689a      	ldr	r2, [r3, #8]
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	691b      	ldr	r3, [r3, #16]
 8009518:	431a      	orrs	r2, r3
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	695b      	ldr	r3, [r3, #20]
 800951e:	431a      	orrs	r2, r3
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	69db      	ldr	r3, [r3, #28]
 8009524:	4313      	orrs	r3, r2
 8009526:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	4bbe      	ldr	r3, [pc, #760]	; (8009828 <UART_SetConfig+0x328>)
 8009530:	4013      	ands	r3, r2
 8009532:	697a      	ldr	r2, [r7, #20]
 8009534:	6812      	ldr	r2, [r2, #0]
 8009536:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009538:	430b      	orrs	r3, r1
 800953a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	68da      	ldr	r2, [r3, #12]
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	430a      	orrs	r2, r1
 8009550:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	699b      	ldr	r3, [r3, #24]
 8009556:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4ab3      	ldr	r2, [pc, #716]	; (800982c <UART_SetConfig+0x32c>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d004      	beq.n	800956c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	6a1b      	ldr	r3, [r3, #32]
 8009566:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009568:	4313      	orrs	r3, r2
 800956a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	689a      	ldr	r2, [r3, #8]
 8009572:	4baf      	ldr	r3, [pc, #700]	; (8009830 <UART_SetConfig+0x330>)
 8009574:	4013      	ands	r3, r2
 8009576:	697a      	ldr	r2, [r7, #20]
 8009578:	6812      	ldr	r2, [r2, #0]
 800957a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800957c:	430b      	orrs	r3, r1
 800957e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009586:	f023 010f 	bic.w	r1, r3, #15
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	430a      	orrs	r2, r1
 8009594:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4aa6      	ldr	r2, [pc, #664]	; (8009834 <UART_SetConfig+0x334>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d177      	bne.n	8009690 <UART_SetConfig+0x190>
 80095a0:	4ba5      	ldr	r3, [pc, #660]	; (8009838 <UART_SetConfig+0x338>)
 80095a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80095a8:	2b28      	cmp	r3, #40	; 0x28
 80095aa:	d86d      	bhi.n	8009688 <UART_SetConfig+0x188>
 80095ac:	a201      	add	r2, pc, #4	; (adr r2, 80095b4 <UART_SetConfig+0xb4>)
 80095ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095b2:	bf00      	nop
 80095b4:	08009659 	.word	0x08009659
 80095b8:	08009689 	.word	0x08009689
 80095bc:	08009689 	.word	0x08009689
 80095c0:	08009689 	.word	0x08009689
 80095c4:	08009689 	.word	0x08009689
 80095c8:	08009689 	.word	0x08009689
 80095cc:	08009689 	.word	0x08009689
 80095d0:	08009689 	.word	0x08009689
 80095d4:	08009661 	.word	0x08009661
 80095d8:	08009689 	.word	0x08009689
 80095dc:	08009689 	.word	0x08009689
 80095e0:	08009689 	.word	0x08009689
 80095e4:	08009689 	.word	0x08009689
 80095e8:	08009689 	.word	0x08009689
 80095ec:	08009689 	.word	0x08009689
 80095f0:	08009689 	.word	0x08009689
 80095f4:	08009669 	.word	0x08009669
 80095f8:	08009689 	.word	0x08009689
 80095fc:	08009689 	.word	0x08009689
 8009600:	08009689 	.word	0x08009689
 8009604:	08009689 	.word	0x08009689
 8009608:	08009689 	.word	0x08009689
 800960c:	08009689 	.word	0x08009689
 8009610:	08009689 	.word	0x08009689
 8009614:	08009671 	.word	0x08009671
 8009618:	08009689 	.word	0x08009689
 800961c:	08009689 	.word	0x08009689
 8009620:	08009689 	.word	0x08009689
 8009624:	08009689 	.word	0x08009689
 8009628:	08009689 	.word	0x08009689
 800962c:	08009689 	.word	0x08009689
 8009630:	08009689 	.word	0x08009689
 8009634:	08009679 	.word	0x08009679
 8009638:	08009689 	.word	0x08009689
 800963c:	08009689 	.word	0x08009689
 8009640:	08009689 	.word	0x08009689
 8009644:	08009689 	.word	0x08009689
 8009648:	08009689 	.word	0x08009689
 800964c:	08009689 	.word	0x08009689
 8009650:	08009689 	.word	0x08009689
 8009654:	08009681 	.word	0x08009681
 8009658:	2301      	movs	r3, #1
 800965a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800965e:	e222      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 8009660:	2304      	movs	r3, #4
 8009662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009666:	e21e      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 8009668:	2308      	movs	r3, #8
 800966a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800966e:	e21a      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 8009670:	2310      	movs	r3, #16
 8009672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009676:	e216      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 8009678:	2320      	movs	r3, #32
 800967a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800967e:	e212      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 8009680:	2340      	movs	r3, #64	; 0x40
 8009682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009686:	e20e      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 8009688:	2380      	movs	r3, #128	; 0x80
 800968a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800968e:	e20a      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a69      	ldr	r2, [pc, #420]	; (800983c <UART_SetConfig+0x33c>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d130      	bne.n	80096fc <UART_SetConfig+0x1fc>
 800969a:	4b67      	ldr	r3, [pc, #412]	; (8009838 <UART_SetConfig+0x338>)
 800969c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800969e:	f003 0307 	and.w	r3, r3, #7
 80096a2:	2b05      	cmp	r3, #5
 80096a4:	d826      	bhi.n	80096f4 <UART_SetConfig+0x1f4>
 80096a6:	a201      	add	r2, pc, #4	; (adr r2, 80096ac <UART_SetConfig+0x1ac>)
 80096a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ac:	080096c5 	.word	0x080096c5
 80096b0:	080096cd 	.word	0x080096cd
 80096b4:	080096d5 	.word	0x080096d5
 80096b8:	080096dd 	.word	0x080096dd
 80096bc:	080096e5 	.word	0x080096e5
 80096c0:	080096ed 	.word	0x080096ed
 80096c4:	2300      	movs	r3, #0
 80096c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096ca:	e1ec      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 80096cc:	2304      	movs	r3, #4
 80096ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096d2:	e1e8      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 80096d4:	2308      	movs	r3, #8
 80096d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096da:	e1e4      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 80096dc:	2310      	movs	r3, #16
 80096de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096e2:	e1e0      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 80096e4:	2320      	movs	r3, #32
 80096e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096ea:	e1dc      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 80096ec:	2340      	movs	r3, #64	; 0x40
 80096ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096f2:	e1d8      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 80096f4:	2380      	movs	r3, #128	; 0x80
 80096f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096fa:	e1d4      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a4f      	ldr	r2, [pc, #316]	; (8009840 <UART_SetConfig+0x340>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d130      	bne.n	8009768 <UART_SetConfig+0x268>
 8009706:	4b4c      	ldr	r3, [pc, #304]	; (8009838 <UART_SetConfig+0x338>)
 8009708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800970a:	f003 0307 	and.w	r3, r3, #7
 800970e:	2b05      	cmp	r3, #5
 8009710:	d826      	bhi.n	8009760 <UART_SetConfig+0x260>
 8009712:	a201      	add	r2, pc, #4	; (adr r2, 8009718 <UART_SetConfig+0x218>)
 8009714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009718:	08009731 	.word	0x08009731
 800971c:	08009739 	.word	0x08009739
 8009720:	08009741 	.word	0x08009741
 8009724:	08009749 	.word	0x08009749
 8009728:	08009751 	.word	0x08009751
 800972c:	08009759 	.word	0x08009759
 8009730:	2300      	movs	r3, #0
 8009732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009736:	e1b6      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 8009738:	2304      	movs	r3, #4
 800973a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800973e:	e1b2      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 8009740:	2308      	movs	r3, #8
 8009742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009746:	e1ae      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 8009748:	2310      	movs	r3, #16
 800974a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800974e:	e1aa      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 8009750:	2320      	movs	r3, #32
 8009752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009756:	e1a6      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 8009758:	2340      	movs	r3, #64	; 0x40
 800975a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800975e:	e1a2      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 8009760:	2380      	movs	r3, #128	; 0x80
 8009762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009766:	e19e      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a35      	ldr	r2, [pc, #212]	; (8009844 <UART_SetConfig+0x344>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d130      	bne.n	80097d4 <UART_SetConfig+0x2d4>
 8009772:	4b31      	ldr	r3, [pc, #196]	; (8009838 <UART_SetConfig+0x338>)
 8009774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009776:	f003 0307 	and.w	r3, r3, #7
 800977a:	2b05      	cmp	r3, #5
 800977c:	d826      	bhi.n	80097cc <UART_SetConfig+0x2cc>
 800977e:	a201      	add	r2, pc, #4	; (adr r2, 8009784 <UART_SetConfig+0x284>)
 8009780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009784:	0800979d 	.word	0x0800979d
 8009788:	080097a5 	.word	0x080097a5
 800978c:	080097ad 	.word	0x080097ad
 8009790:	080097b5 	.word	0x080097b5
 8009794:	080097bd 	.word	0x080097bd
 8009798:	080097c5 	.word	0x080097c5
 800979c:	2300      	movs	r3, #0
 800979e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097a2:	e180      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 80097a4:	2304      	movs	r3, #4
 80097a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097aa:	e17c      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 80097ac:	2308      	movs	r3, #8
 80097ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097b2:	e178      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 80097b4:	2310      	movs	r3, #16
 80097b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097ba:	e174      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 80097bc:	2320      	movs	r3, #32
 80097be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097c2:	e170      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 80097c4:	2340      	movs	r3, #64	; 0x40
 80097c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097ca:	e16c      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 80097cc:	2380      	movs	r3, #128	; 0x80
 80097ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097d2:	e168      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a1b      	ldr	r2, [pc, #108]	; (8009848 <UART_SetConfig+0x348>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d142      	bne.n	8009864 <UART_SetConfig+0x364>
 80097de:	4b16      	ldr	r3, [pc, #88]	; (8009838 <UART_SetConfig+0x338>)
 80097e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097e2:	f003 0307 	and.w	r3, r3, #7
 80097e6:	2b05      	cmp	r3, #5
 80097e8:	d838      	bhi.n	800985c <UART_SetConfig+0x35c>
 80097ea:	a201      	add	r2, pc, #4	; (adr r2, 80097f0 <UART_SetConfig+0x2f0>)
 80097ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f0:	08009809 	.word	0x08009809
 80097f4:	08009811 	.word	0x08009811
 80097f8:	08009819 	.word	0x08009819
 80097fc:	08009821 	.word	0x08009821
 8009800:	0800984d 	.word	0x0800984d
 8009804:	08009855 	.word	0x08009855
 8009808:	2300      	movs	r3, #0
 800980a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800980e:	e14a      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 8009810:	2304      	movs	r3, #4
 8009812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009816:	e146      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 8009818:	2308      	movs	r3, #8
 800981a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800981e:	e142      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 8009820:	2310      	movs	r3, #16
 8009822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009826:	e13e      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 8009828:	cfff69f3 	.word	0xcfff69f3
 800982c:	58000c00 	.word	0x58000c00
 8009830:	11fff4ff 	.word	0x11fff4ff
 8009834:	40011000 	.word	0x40011000
 8009838:	58024400 	.word	0x58024400
 800983c:	40004400 	.word	0x40004400
 8009840:	40004800 	.word	0x40004800
 8009844:	40004c00 	.word	0x40004c00
 8009848:	40005000 	.word	0x40005000
 800984c:	2320      	movs	r3, #32
 800984e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009852:	e128      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 8009854:	2340      	movs	r3, #64	; 0x40
 8009856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800985a:	e124      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 800985c:	2380      	movs	r3, #128	; 0x80
 800985e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009862:	e120      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4acb      	ldr	r2, [pc, #812]	; (8009b98 <UART_SetConfig+0x698>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d176      	bne.n	800995c <UART_SetConfig+0x45c>
 800986e:	4bcb      	ldr	r3, [pc, #812]	; (8009b9c <UART_SetConfig+0x69c>)
 8009870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009872:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009876:	2b28      	cmp	r3, #40	; 0x28
 8009878:	d86c      	bhi.n	8009954 <UART_SetConfig+0x454>
 800987a:	a201      	add	r2, pc, #4	; (adr r2, 8009880 <UART_SetConfig+0x380>)
 800987c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009880:	08009925 	.word	0x08009925
 8009884:	08009955 	.word	0x08009955
 8009888:	08009955 	.word	0x08009955
 800988c:	08009955 	.word	0x08009955
 8009890:	08009955 	.word	0x08009955
 8009894:	08009955 	.word	0x08009955
 8009898:	08009955 	.word	0x08009955
 800989c:	08009955 	.word	0x08009955
 80098a0:	0800992d 	.word	0x0800992d
 80098a4:	08009955 	.word	0x08009955
 80098a8:	08009955 	.word	0x08009955
 80098ac:	08009955 	.word	0x08009955
 80098b0:	08009955 	.word	0x08009955
 80098b4:	08009955 	.word	0x08009955
 80098b8:	08009955 	.word	0x08009955
 80098bc:	08009955 	.word	0x08009955
 80098c0:	08009935 	.word	0x08009935
 80098c4:	08009955 	.word	0x08009955
 80098c8:	08009955 	.word	0x08009955
 80098cc:	08009955 	.word	0x08009955
 80098d0:	08009955 	.word	0x08009955
 80098d4:	08009955 	.word	0x08009955
 80098d8:	08009955 	.word	0x08009955
 80098dc:	08009955 	.word	0x08009955
 80098e0:	0800993d 	.word	0x0800993d
 80098e4:	08009955 	.word	0x08009955
 80098e8:	08009955 	.word	0x08009955
 80098ec:	08009955 	.word	0x08009955
 80098f0:	08009955 	.word	0x08009955
 80098f4:	08009955 	.word	0x08009955
 80098f8:	08009955 	.word	0x08009955
 80098fc:	08009955 	.word	0x08009955
 8009900:	08009945 	.word	0x08009945
 8009904:	08009955 	.word	0x08009955
 8009908:	08009955 	.word	0x08009955
 800990c:	08009955 	.word	0x08009955
 8009910:	08009955 	.word	0x08009955
 8009914:	08009955 	.word	0x08009955
 8009918:	08009955 	.word	0x08009955
 800991c:	08009955 	.word	0x08009955
 8009920:	0800994d 	.word	0x0800994d
 8009924:	2301      	movs	r3, #1
 8009926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800992a:	e0bc      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 800992c:	2304      	movs	r3, #4
 800992e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009932:	e0b8      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 8009934:	2308      	movs	r3, #8
 8009936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800993a:	e0b4      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 800993c:	2310      	movs	r3, #16
 800993e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009942:	e0b0      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 8009944:	2320      	movs	r3, #32
 8009946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800994a:	e0ac      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 800994c:	2340      	movs	r3, #64	; 0x40
 800994e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009952:	e0a8      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 8009954:	2380      	movs	r3, #128	; 0x80
 8009956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800995a:	e0a4      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a8f      	ldr	r2, [pc, #572]	; (8009ba0 <UART_SetConfig+0x6a0>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d130      	bne.n	80099c8 <UART_SetConfig+0x4c8>
 8009966:	4b8d      	ldr	r3, [pc, #564]	; (8009b9c <UART_SetConfig+0x69c>)
 8009968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800996a:	f003 0307 	and.w	r3, r3, #7
 800996e:	2b05      	cmp	r3, #5
 8009970:	d826      	bhi.n	80099c0 <UART_SetConfig+0x4c0>
 8009972:	a201      	add	r2, pc, #4	; (adr r2, 8009978 <UART_SetConfig+0x478>)
 8009974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009978:	08009991 	.word	0x08009991
 800997c:	08009999 	.word	0x08009999
 8009980:	080099a1 	.word	0x080099a1
 8009984:	080099a9 	.word	0x080099a9
 8009988:	080099b1 	.word	0x080099b1
 800998c:	080099b9 	.word	0x080099b9
 8009990:	2300      	movs	r3, #0
 8009992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009996:	e086      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 8009998:	2304      	movs	r3, #4
 800999a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800999e:	e082      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 80099a0:	2308      	movs	r3, #8
 80099a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099a6:	e07e      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 80099a8:	2310      	movs	r3, #16
 80099aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099ae:	e07a      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 80099b0:	2320      	movs	r3, #32
 80099b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099b6:	e076      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 80099b8:	2340      	movs	r3, #64	; 0x40
 80099ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099be:	e072      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 80099c0:	2380      	movs	r3, #128	; 0x80
 80099c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099c6:	e06e      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a75      	ldr	r2, [pc, #468]	; (8009ba4 <UART_SetConfig+0x6a4>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d130      	bne.n	8009a34 <UART_SetConfig+0x534>
 80099d2:	4b72      	ldr	r3, [pc, #456]	; (8009b9c <UART_SetConfig+0x69c>)
 80099d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099d6:	f003 0307 	and.w	r3, r3, #7
 80099da:	2b05      	cmp	r3, #5
 80099dc:	d826      	bhi.n	8009a2c <UART_SetConfig+0x52c>
 80099de:	a201      	add	r2, pc, #4	; (adr r2, 80099e4 <UART_SetConfig+0x4e4>)
 80099e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e4:	080099fd 	.word	0x080099fd
 80099e8:	08009a05 	.word	0x08009a05
 80099ec:	08009a0d 	.word	0x08009a0d
 80099f0:	08009a15 	.word	0x08009a15
 80099f4:	08009a1d 	.word	0x08009a1d
 80099f8:	08009a25 	.word	0x08009a25
 80099fc:	2300      	movs	r3, #0
 80099fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a02:	e050      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 8009a04:	2304      	movs	r3, #4
 8009a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a0a:	e04c      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 8009a0c:	2308      	movs	r3, #8
 8009a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a12:	e048      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 8009a14:	2310      	movs	r3, #16
 8009a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a1a:	e044      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 8009a1c:	2320      	movs	r3, #32
 8009a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a22:	e040      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 8009a24:	2340      	movs	r3, #64	; 0x40
 8009a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a2a:	e03c      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 8009a2c:	2380      	movs	r3, #128	; 0x80
 8009a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a32:	e038      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a5b      	ldr	r2, [pc, #364]	; (8009ba8 <UART_SetConfig+0x6a8>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d130      	bne.n	8009aa0 <UART_SetConfig+0x5a0>
 8009a3e:	4b57      	ldr	r3, [pc, #348]	; (8009b9c <UART_SetConfig+0x69c>)
 8009a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a42:	f003 0307 	and.w	r3, r3, #7
 8009a46:	2b05      	cmp	r3, #5
 8009a48:	d826      	bhi.n	8009a98 <UART_SetConfig+0x598>
 8009a4a:	a201      	add	r2, pc, #4	; (adr r2, 8009a50 <UART_SetConfig+0x550>)
 8009a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a50:	08009a69 	.word	0x08009a69
 8009a54:	08009a71 	.word	0x08009a71
 8009a58:	08009a79 	.word	0x08009a79
 8009a5c:	08009a81 	.word	0x08009a81
 8009a60:	08009a89 	.word	0x08009a89
 8009a64:	08009a91 	.word	0x08009a91
 8009a68:	2302      	movs	r3, #2
 8009a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a6e:	e01a      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 8009a70:	2304      	movs	r3, #4
 8009a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a76:	e016      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 8009a78:	2308      	movs	r3, #8
 8009a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a7e:	e012      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 8009a80:	2310      	movs	r3, #16
 8009a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a86:	e00e      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 8009a88:	2320      	movs	r3, #32
 8009a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a8e:	e00a      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 8009a90:	2340      	movs	r3, #64	; 0x40
 8009a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a96:	e006      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 8009a98:	2380      	movs	r3, #128	; 0x80
 8009a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a9e:	e002      	b.n	8009aa6 <UART_SetConfig+0x5a6>
 8009aa0:	2380      	movs	r3, #128	; 0x80
 8009aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a3f      	ldr	r2, [pc, #252]	; (8009ba8 <UART_SetConfig+0x6a8>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	f040 80f8 	bne.w	8009ca2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009ab2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009ab6:	2b20      	cmp	r3, #32
 8009ab8:	dc46      	bgt.n	8009b48 <UART_SetConfig+0x648>
 8009aba:	2b02      	cmp	r3, #2
 8009abc:	f2c0 8082 	blt.w	8009bc4 <UART_SetConfig+0x6c4>
 8009ac0:	3b02      	subs	r3, #2
 8009ac2:	2b1e      	cmp	r3, #30
 8009ac4:	d87e      	bhi.n	8009bc4 <UART_SetConfig+0x6c4>
 8009ac6:	a201      	add	r2, pc, #4	; (adr r2, 8009acc <UART_SetConfig+0x5cc>)
 8009ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009acc:	08009b4f 	.word	0x08009b4f
 8009ad0:	08009bc5 	.word	0x08009bc5
 8009ad4:	08009b57 	.word	0x08009b57
 8009ad8:	08009bc5 	.word	0x08009bc5
 8009adc:	08009bc5 	.word	0x08009bc5
 8009ae0:	08009bc5 	.word	0x08009bc5
 8009ae4:	08009b67 	.word	0x08009b67
 8009ae8:	08009bc5 	.word	0x08009bc5
 8009aec:	08009bc5 	.word	0x08009bc5
 8009af0:	08009bc5 	.word	0x08009bc5
 8009af4:	08009bc5 	.word	0x08009bc5
 8009af8:	08009bc5 	.word	0x08009bc5
 8009afc:	08009bc5 	.word	0x08009bc5
 8009b00:	08009bc5 	.word	0x08009bc5
 8009b04:	08009b77 	.word	0x08009b77
 8009b08:	08009bc5 	.word	0x08009bc5
 8009b0c:	08009bc5 	.word	0x08009bc5
 8009b10:	08009bc5 	.word	0x08009bc5
 8009b14:	08009bc5 	.word	0x08009bc5
 8009b18:	08009bc5 	.word	0x08009bc5
 8009b1c:	08009bc5 	.word	0x08009bc5
 8009b20:	08009bc5 	.word	0x08009bc5
 8009b24:	08009bc5 	.word	0x08009bc5
 8009b28:	08009bc5 	.word	0x08009bc5
 8009b2c:	08009bc5 	.word	0x08009bc5
 8009b30:	08009bc5 	.word	0x08009bc5
 8009b34:	08009bc5 	.word	0x08009bc5
 8009b38:	08009bc5 	.word	0x08009bc5
 8009b3c:	08009bc5 	.word	0x08009bc5
 8009b40:	08009bc5 	.word	0x08009bc5
 8009b44:	08009bb7 	.word	0x08009bb7
 8009b48:	2b40      	cmp	r3, #64	; 0x40
 8009b4a:	d037      	beq.n	8009bbc <UART_SetConfig+0x6bc>
 8009b4c:	e03a      	b.n	8009bc4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009b4e:	f7fd fb75 	bl	800723c <HAL_RCCEx_GetD3PCLK1Freq>
 8009b52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009b54:	e03c      	b.n	8009bd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f7fd fb84 	bl	8007268 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b64:	e034      	b.n	8009bd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b66:	f107 0318 	add.w	r3, r7, #24
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f7fd fcd0 	bl	8007510 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009b70:	69fb      	ldr	r3, [r7, #28]
 8009b72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b74:	e02c      	b.n	8009bd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b76:	4b09      	ldr	r3, [pc, #36]	; (8009b9c <UART_SetConfig+0x69c>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f003 0320 	and.w	r3, r3, #32
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d016      	beq.n	8009bb0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009b82:	4b06      	ldr	r3, [pc, #24]	; (8009b9c <UART_SetConfig+0x69c>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	08db      	lsrs	r3, r3, #3
 8009b88:	f003 0303 	and.w	r3, r3, #3
 8009b8c:	4a07      	ldr	r2, [pc, #28]	; (8009bac <UART_SetConfig+0x6ac>)
 8009b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8009b92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009b94:	e01c      	b.n	8009bd0 <UART_SetConfig+0x6d0>
 8009b96:	bf00      	nop
 8009b98:	40011400 	.word	0x40011400
 8009b9c:	58024400 	.word	0x58024400
 8009ba0:	40007800 	.word	0x40007800
 8009ba4:	40007c00 	.word	0x40007c00
 8009ba8:	58000c00 	.word	0x58000c00
 8009bac:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009bb0:	4b9d      	ldr	r3, [pc, #628]	; (8009e28 <UART_SetConfig+0x928>)
 8009bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bb4:	e00c      	b.n	8009bd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009bb6:	4b9d      	ldr	r3, [pc, #628]	; (8009e2c <UART_SetConfig+0x92c>)
 8009bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bba:	e009      	b.n	8009bd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bc2:	e005      	b.n	8009bd0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009bce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	f000 81de 	beq.w	8009f94 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bdc:	4a94      	ldr	r2, [pc, #592]	; (8009e30 <UART_SetConfig+0x930>)
 8009bde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009be2:	461a      	mov	r2, r3
 8009be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009be6:	fbb3 f3f2 	udiv	r3, r3, r2
 8009bea:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	685a      	ldr	r2, [r3, #4]
 8009bf0:	4613      	mov	r3, r2
 8009bf2:	005b      	lsls	r3, r3, #1
 8009bf4:	4413      	add	r3, r2
 8009bf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d305      	bcc.n	8009c08 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d903      	bls.n	8009c10 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009c0e:	e1c1      	b.n	8009f94 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c12:	2200      	movs	r2, #0
 8009c14:	60bb      	str	r3, [r7, #8]
 8009c16:	60fa      	str	r2, [r7, #12]
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c1c:	4a84      	ldr	r2, [pc, #528]	; (8009e30 <UART_SetConfig+0x930>)
 8009c1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	2200      	movs	r2, #0
 8009c26:	603b      	str	r3, [r7, #0]
 8009c28:	607a      	str	r2, [r7, #4]
 8009c2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009c32:	f7f6 fb51 	bl	80002d8 <__aeabi_uldivmod>
 8009c36:	4602      	mov	r2, r0
 8009c38:	460b      	mov	r3, r1
 8009c3a:	4610      	mov	r0, r2
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	f04f 0200 	mov.w	r2, #0
 8009c42:	f04f 0300 	mov.w	r3, #0
 8009c46:	020b      	lsls	r3, r1, #8
 8009c48:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009c4c:	0202      	lsls	r2, r0, #8
 8009c4e:	6979      	ldr	r1, [r7, #20]
 8009c50:	6849      	ldr	r1, [r1, #4]
 8009c52:	0849      	lsrs	r1, r1, #1
 8009c54:	2000      	movs	r0, #0
 8009c56:	460c      	mov	r4, r1
 8009c58:	4605      	mov	r5, r0
 8009c5a:	eb12 0804 	adds.w	r8, r2, r4
 8009c5e:	eb43 0905 	adc.w	r9, r3, r5
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	2200      	movs	r2, #0
 8009c68:	469a      	mov	sl, r3
 8009c6a:	4693      	mov	fp, r2
 8009c6c:	4652      	mov	r2, sl
 8009c6e:	465b      	mov	r3, fp
 8009c70:	4640      	mov	r0, r8
 8009c72:	4649      	mov	r1, r9
 8009c74:	f7f6 fb30 	bl	80002d8 <__aeabi_uldivmod>
 8009c78:	4602      	mov	r2, r0
 8009c7a:	460b      	mov	r3, r1
 8009c7c:	4613      	mov	r3, r2
 8009c7e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c86:	d308      	bcc.n	8009c9a <UART_SetConfig+0x79a>
 8009c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c8e:	d204      	bcs.n	8009c9a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c96:	60da      	str	r2, [r3, #12]
 8009c98:	e17c      	b.n	8009f94 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009ca0:	e178      	b.n	8009f94 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	69db      	ldr	r3, [r3, #28]
 8009ca6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009caa:	f040 80c5 	bne.w	8009e38 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009cae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009cb2:	2b20      	cmp	r3, #32
 8009cb4:	dc48      	bgt.n	8009d48 <UART_SetConfig+0x848>
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	db7b      	blt.n	8009db2 <UART_SetConfig+0x8b2>
 8009cba:	2b20      	cmp	r3, #32
 8009cbc:	d879      	bhi.n	8009db2 <UART_SetConfig+0x8b2>
 8009cbe:	a201      	add	r2, pc, #4	; (adr r2, 8009cc4 <UART_SetConfig+0x7c4>)
 8009cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cc4:	08009d4f 	.word	0x08009d4f
 8009cc8:	08009d57 	.word	0x08009d57
 8009ccc:	08009db3 	.word	0x08009db3
 8009cd0:	08009db3 	.word	0x08009db3
 8009cd4:	08009d5f 	.word	0x08009d5f
 8009cd8:	08009db3 	.word	0x08009db3
 8009cdc:	08009db3 	.word	0x08009db3
 8009ce0:	08009db3 	.word	0x08009db3
 8009ce4:	08009d6f 	.word	0x08009d6f
 8009ce8:	08009db3 	.word	0x08009db3
 8009cec:	08009db3 	.word	0x08009db3
 8009cf0:	08009db3 	.word	0x08009db3
 8009cf4:	08009db3 	.word	0x08009db3
 8009cf8:	08009db3 	.word	0x08009db3
 8009cfc:	08009db3 	.word	0x08009db3
 8009d00:	08009db3 	.word	0x08009db3
 8009d04:	08009d7f 	.word	0x08009d7f
 8009d08:	08009db3 	.word	0x08009db3
 8009d0c:	08009db3 	.word	0x08009db3
 8009d10:	08009db3 	.word	0x08009db3
 8009d14:	08009db3 	.word	0x08009db3
 8009d18:	08009db3 	.word	0x08009db3
 8009d1c:	08009db3 	.word	0x08009db3
 8009d20:	08009db3 	.word	0x08009db3
 8009d24:	08009db3 	.word	0x08009db3
 8009d28:	08009db3 	.word	0x08009db3
 8009d2c:	08009db3 	.word	0x08009db3
 8009d30:	08009db3 	.word	0x08009db3
 8009d34:	08009db3 	.word	0x08009db3
 8009d38:	08009db3 	.word	0x08009db3
 8009d3c:	08009db3 	.word	0x08009db3
 8009d40:	08009db3 	.word	0x08009db3
 8009d44:	08009da5 	.word	0x08009da5
 8009d48:	2b40      	cmp	r3, #64	; 0x40
 8009d4a:	d02e      	beq.n	8009daa <UART_SetConfig+0x8aa>
 8009d4c:	e031      	b.n	8009db2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d4e:	f7fc f83f 	bl	8005dd0 <HAL_RCC_GetPCLK1Freq>
 8009d52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009d54:	e033      	b.n	8009dbe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d56:	f7fc f851 	bl	8005dfc <HAL_RCC_GetPCLK2Freq>
 8009d5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009d5c:	e02f      	b.n	8009dbe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d62:	4618      	mov	r0, r3
 8009d64:	f7fd fa80 	bl	8007268 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d6c:	e027      	b.n	8009dbe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d6e:	f107 0318 	add.w	r3, r7, #24
 8009d72:	4618      	mov	r0, r3
 8009d74:	f7fd fbcc 	bl	8007510 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009d78:	69fb      	ldr	r3, [r7, #28]
 8009d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d7c:	e01f      	b.n	8009dbe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d7e:	4b2d      	ldr	r3, [pc, #180]	; (8009e34 <UART_SetConfig+0x934>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f003 0320 	and.w	r3, r3, #32
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d009      	beq.n	8009d9e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009d8a:	4b2a      	ldr	r3, [pc, #168]	; (8009e34 <UART_SetConfig+0x934>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	08db      	lsrs	r3, r3, #3
 8009d90:	f003 0303 	and.w	r3, r3, #3
 8009d94:	4a24      	ldr	r2, [pc, #144]	; (8009e28 <UART_SetConfig+0x928>)
 8009d96:	fa22 f303 	lsr.w	r3, r2, r3
 8009d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009d9c:	e00f      	b.n	8009dbe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009d9e:	4b22      	ldr	r3, [pc, #136]	; (8009e28 <UART_SetConfig+0x928>)
 8009da0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009da2:	e00c      	b.n	8009dbe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009da4:	4b21      	ldr	r3, [pc, #132]	; (8009e2c <UART_SetConfig+0x92c>)
 8009da6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009da8:	e009      	b.n	8009dbe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009dae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009db0:	e005      	b.n	8009dbe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009db2:	2300      	movs	r3, #0
 8009db4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009db6:	2301      	movs	r3, #1
 8009db8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009dbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	f000 80e7 	beq.w	8009f94 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dca:	4a19      	ldr	r2, [pc, #100]	; (8009e30 <UART_SetConfig+0x930>)
 8009dcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8009dd8:	005a      	lsls	r2, r3, #1
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	085b      	lsrs	r3, r3, #1
 8009de0:	441a      	add	r2, r3
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dea:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dee:	2b0f      	cmp	r3, #15
 8009df0:	d916      	bls.n	8009e20 <UART_SetConfig+0x920>
 8009df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009df8:	d212      	bcs.n	8009e20 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dfc:	b29b      	uxth	r3, r3
 8009dfe:	f023 030f 	bic.w	r3, r3, #15
 8009e02:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e06:	085b      	lsrs	r3, r3, #1
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	f003 0307 	and.w	r3, r3, #7
 8009e0e:	b29a      	uxth	r2, r3
 8009e10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009e12:	4313      	orrs	r3, r2
 8009e14:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009e1c:	60da      	str	r2, [r3, #12]
 8009e1e:	e0b9      	b.n	8009f94 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009e20:	2301      	movs	r3, #1
 8009e22:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009e26:	e0b5      	b.n	8009f94 <UART_SetConfig+0xa94>
 8009e28:	03d09000 	.word	0x03d09000
 8009e2c:	003d0900 	.word	0x003d0900
 8009e30:	0800b910 	.word	0x0800b910
 8009e34:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e38:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009e3c:	2b20      	cmp	r3, #32
 8009e3e:	dc49      	bgt.n	8009ed4 <UART_SetConfig+0x9d4>
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	db7c      	blt.n	8009f3e <UART_SetConfig+0xa3e>
 8009e44:	2b20      	cmp	r3, #32
 8009e46:	d87a      	bhi.n	8009f3e <UART_SetConfig+0xa3e>
 8009e48:	a201      	add	r2, pc, #4	; (adr r2, 8009e50 <UART_SetConfig+0x950>)
 8009e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e4e:	bf00      	nop
 8009e50:	08009edb 	.word	0x08009edb
 8009e54:	08009ee3 	.word	0x08009ee3
 8009e58:	08009f3f 	.word	0x08009f3f
 8009e5c:	08009f3f 	.word	0x08009f3f
 8009e60:	08009eeb 	.word	0x08009eeb
 8009e64:	08009f3f 	.word	0x08009f3f
 8009e68:	08009f3f 	.word	0x08009f3f
 8009e6c:	08009f3f 	.word	0x08009f3f
 8009e70:	08009efb 	.word	0x08009efb
 8009e74:	08009f3f 	.word	0x08009f3f
 8009e78:	08009f3f 	.word	0x08009f3f
 8009e7c:	08009f3f 	.word	0x08009f3f
 8009e80:	08009f3f 	.word	0x08009f3f
 8009e84:	08009f3f 	.word	0x08009f3f
 8009e88:	08009f3f 	.word	0x08009f3f
 8009e8c:	08009f3f 	.word	0x08009f3f
 8009e90:	08009f0b 	.word	0x08009f0b
 8009e94:	08009f3f 	.word	0x08009f3f
 8009e98:	08009f3f 	.word	0x08009f3f
 8009e9c:	08009f3f 	.word	0x08009f3f
 8009ea0:	08009f3f 	.word	0x08009f3f
 8009ea4:	08009f3f 	.word	0x08009f3f
 8009ea8:	08009f3f 	.word	0x08009f3f
 8009eac:	08009f3f 	.word	0x08009f3f
 8009eb0:	08009f3f 	.word	0x08009f3f
 8009eb4:	08009f3f 	.word	0x08009f3f
 8009eb8:	08009f3f 	.word	0x08009f3f
 8009ebc:	08009f3f 	.word	0x08009f3f
 8009ec0:	08009f3f 	.word	0x08009f3f
 8009ec4:	08009f3f 	.word	0x08009f3f
 8009ec8:	08009f3f 	.word	0x08009f3f
 8009ecc:	08009f3f 	.word	0x08009f3f
 8009ed0:	08009f31 	.word	0x08009f31
 8009ed4:	2b40      	cmp	r3, #64	; 0x40
 8009ed6:	d02e      	beq.n	8009f36 <UART_SetConfig+0xa36>
 8009ed8:	e031      	b.n	8009f3e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009eda:	f7fb ff79 	bl	8005dd0 <HAL_RCC_GetPCLK1Freq>
 8009ede:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009ee0:	e033      	b.n	8009f4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ee2:	f7fb ff8b 	bl	8005dfc <HAL_RCC_GetPCLK2Freq>
 8009ee6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009ee8:	e02f      	b.n	8009f4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f7fd f9ba 	bl	8007268 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ef8:	e027      	b.n	8009f4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009efa:	f107 0318 	add.w	r3, r7, #24
 8009efe:	4618      	mov	r0, r3
 8009f00:	f7fd fb06 	bl	8007510 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f04:	69fb      	ldr	r3, [r7, #28]
 8009f06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f08:	e01f      	b.n	8009f4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f0a:	4b2d      	ldr	r3, [pc, #180]	; (8009fc0 <UART_SetConfig+0xac0>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f003 0320 	and.w	r3, r3, #32
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d009      	beq.n	8009f2a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f16:	4b2a      	ldr	r3, [pc, #168]	; (8009fc0 <UART_SetConfig+0xac0>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	08db      	lsrs	r3, r3, #3
 8009f1c:	f003 0303 	and.w	r3, r3, #3
 8009f20:	4a28      	ldr	r2, [pc, #160]	; (8009fc4 <UART_SetConfig+0xac4>)
 8009f22:	fa22 f303 	lsr.w	r3, r2, r3
 8009f26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f28:	e00f      	b.n	8009f4a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009f2a:	4b26      	ldr	r3, [pc, #152]	; (8009fc4 <UART_SetConfig+0xac4>)
 8009f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f2e:	e00c      	b.n	8009f4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f30:	4b25      	ldr	r3, [pc, #148]	; (8009fc8 <UART_SetConfig+0xac8>)
 8009f32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f34:	e009      	b.n	8009f4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f3c:	e005      	b.n	8009f4a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009f48:	bf00      	nop
    }

    if (pclk != 0U)
 8009f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d021      	beq.n	8009f94 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f54:	4a1d      	ldr	r2, [pc, #116]	; (8009fcc <UART_SetConfig+0xacc>)
 8009f56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f5e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	085b      	lsrs	r3, r3, #1
 8009f68:	441a      	add	r2, r3
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f72:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f76:	2b0f      	cmp	r3, #15
 8009f78:	d909      	bls.n	8009f8e <UART_SetConfig+0xa8e>
 8009f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f80:	d205      	bcs.n	8009f8e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f84:	b29a      	uxth	r2, r3
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	60da      	str	r2, [r3, #12]
 8009f8c:	e002      	b.n	8009f94 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	2201      	movs	r2, #1
 8009f98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	2200      	movs	r2, #0
 8009fae:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009fb0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3748      	adds	r7, #72	; 0x48
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009fbe:	bf00      	nop
 8009fc0:	58024400 	.word	0x58024400
 8009fc4:	03d09000 	.word	0x03d09000
 8009fc8:	003d0900 	.word	0x003d0900
 8009fcc:	0800b910 	.word	0x0800b910

08009fd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b083      	sub	sp, #12
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fdc:	f003 0301 	and.w	r3, r3, #1
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d00a      	beq.n	8009ffa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	430a      	orrs	r2, r1
 8009ff8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ffe:	f003 0302 	and.w	r3, r3, #2
 800a002:	2b00      	cmp	r3, #0
 800a004:	d00a      	beq.n	800a01c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	430a      	orrs	r2, r1
 800a01a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a020:	f003 0304 	and.w	r3, r3, #4
 800a024:	2b00      	cmp	r3, #0
 800a026:	d00a      	beq.n	800a03e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	430a      	orrs	r2, r1
 800a03c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a042:	f003 0308 	and.w	r3, r3, #8
 800a046:	2b00      	cmp	r3, #0
 800a048:	d00a      	beq.n	800a060 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	430a      	orrs	r2, r1
 800a05e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a064:	f003 0310 	and.w	r3, r3, #16
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d00a      	beq.n	800a082 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	689b      	ldr	r3, [r3, #8]
 800a072:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	430a      	orrs	r2, r1
 800a080:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a086:	f003 0320 	and.w	r3, r3, #32
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d00a      	beq.n	800a0a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	430a      	orrs	r2, r1
 800a0a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d01a      	beq.n	800a0e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	430a      	orrs	r2, r1
 800a0c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0ce:	d10a      	bne.n	800a0e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	430a      	orrs	r2, r1
 800a0e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d00a      	beq.n	800a108 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	430a      	orrs	r2, r1
 800a106:	605a      	str	r2, [r3, #4]
  }
}
 800a108:	bf00      	nop
 800a10a:	370c      	adds	r7, #12
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr

0800a114 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b098      	sub	sp, #96	; 0x60
 800a118:	af02      	add	r7, sp, #8
 800a11a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2200      	movs	r2, #0
 800a120:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a124:	f7f7 fa9c 	bl	8001660 <HAL_GetTick>
 800a128:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f003 0308 	and.w	r3, r3, #8
 800a134:	2b08      	cmp	r3, #8
 800a136:	d12f      	bne.n	800a198 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a138:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a13c:	9300      	str	r3, [sp, #0]
 800a13e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a140:	2200      	movs	r2, #0
 800a142:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f000 f88e 	bl	800a268 <UART_WaitOnFlagUntilTimeout>
 800a14c:	4603      	mov	r3, r0
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d022      	beq.n	800a198 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a15a:	e853 3f00 	ldrex	r3, [r3]
 800a15e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a162:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a166:	653b      	str	r3, [r7, #80]	; 0x50
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	461a      	mov	r2, r3
 800a16e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a170:	647b      	str	r3, [r7, #68]	; 0x44
 800a172:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a174:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a176:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a178:	e841 2300 	strex	r3, r2, [r1]
 800a17c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a17e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a180:	2b00      	cmp	r3, #0
 800a182:	d1e6      	bne.n	800a152 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2220      	movs	r2, #32
 800a188:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2200      	movs	r2, #0
 800a190:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a194:	2303      	movs	r3, #3
 800a196:	e063      	b.n	800a260 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f003 0304 	and.w	r3, r3, #4
 800a1a2:	2b04      	cmp	r3, #4
 800a1a4:	d149      	bne.n	800a23a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a1aa:	9300      	str	r3, [sp, #0]
 800a1ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f000 f857 	bl	800a268 <UART_WaitOnFlagUntilTimeout>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d03c      	beq.n	800a23a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c8:	e853 3f00 	ldrex	r3, [r3]
 800a1cc:	623b      	str	r3, [r7, #32]
   return(result);
 800a1ce:	6a3b      	ldr	r3, [r7, #32]
 800a1d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a1d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	461a      	mov	r2, r3
 800a1dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1de:	633b      	str	r3, [r7, #48]	; 0x30
 800a1e0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a1e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1e6:	e841 2300 	strex	r3, r2, [r1]
 800a1ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d1e6      	bne.n	800a1c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	3308      	adds	r3, #8
 800a1f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	e853 3f00 	ldrex	r3, [r3]
 800a200:	60fb      	str	r3, [r7, #12]
   return(result);
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	f023 0301 	bic.w	r3, r3, #1
 800a208:	64bb      	str	r3, [r7, #72]	; 0x48
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	3308      	adds	r3, #8
 800a210:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a212:	61fa      	str	r2, [r7, #28]
 800a214:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a216:	69b9      	ldr	r1, [r7, #24]
 800a218:	69fa      	ldr	r2, [r7, #28]
 800a21a:	e841 2300 	strex	r3, r2, [r1]
 800a21e:	617b      	str	r3, [r7, #20]
   return(result);
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d1e5      	bne.n	800a1f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2220      	movs	r2, #32
 800a22a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2200      	movs	r2, #0
 800a232:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a236:	2303      	movs	r3, #3
 800a238:	e012      	b.n	800a260 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2220      	movs	r2, #32
 800a23e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2220      	movs	r2, #32
 800a246:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2200      	movs	r2, #0
 800a24e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2200      	movs	r2, #0
 800a254:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2200      	movs	r2, #0
 800a25a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a25e:	2300      	movs	r3, #0
}
 800a260:	4618      	mov	r0, r3
 800a262:	3758      	adds	r7, #88	; 0x58
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b084      	sub	sp, #16
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	60b9      	str	r1, [r7, #8]
 800a272:	603b      	str	r3, [r7, #0]
 800a274:	4613      	mov	r3, r2
 800a276:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a278:	e049      	b.n	800a30e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a27a:	69bb      	ldr	r3, [r7, #24]
 800a27c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a280:	d045      	beq.n	800a30e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a282:	f7f7 f9ed 	bl	8001660 <HAL_GetTick>
 800a286:	4602      	mov	r2, r0
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	1ad3      	subs	r3, r2, r3
 800a28c:	69ba      	ldr	r2, [r7, #24]
 800a28e:	429a      	cmp	r2, r3
 800a290:	d302      	bcc.n	800a298 <UART_WaitOnFlagUntilTimeout+0x30>
 800a292:	69bb      	ldr	r3, [r7, #24]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d101      	bne.n	800a29c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a298:	2303      	movs	r3, #3
 800a29a:	e048      	b.n	800a32e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f003 0304 	and.w	r3, r3, #4
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d031      	beq.n	800a30e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	69db      	ldr	r3, [r3, #28]
 800a2b0:	f003 0308 	and.w	r3, r3, #8
 800a2b4:	2b08      	cmp	r3, #8
 800a2b6:	d110      	bne.n	800a2da <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	2208      	movs	r2, #8
 800a2be:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a2c0:	68f8      	ldr	r0, [r7, #12]
 800a2c2:	f000 f839 	bl	800a338 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	2208      	movs	r2, #8
 800a2ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	e029      	b.n	800a32e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	69db      	ldr	r3, [r3, #28]
 800a2e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a2e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2e8:	d111      	bne.n	800a30e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a2f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a2f4:	68f8      	ldr	r0, [r7, #12]
 800a2f6:	f000 f81f 	bl	800a338 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2220      	movs	r2, #32
 800a2fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	2200      	movs	r2, #0
 800a306:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a30a:	2303      	movs	r3, #3
 800a30c:	e00f      	b.n	800a32e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	69da      	ldr	r2, [r3, #28]
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	4013      	ands	r3, r2
 800a318:	68ba      	ldr	r2, [r7, #8]
 800a31a:	429a      	cmp	r2, r3
 800a31c:	bf0c      	ite	eq
 800a31e:	2301      	moveq	r3, #1
 800a320:	2300      	movne	r3, #0
 800a322:	b2db      	uxtb	r3, r3
 800a324:	461a      	mov	r2, r3
 800a326:	79fb      	ldrb	r3, [r7, #7]
 800a328:	429a      	cmp	r2, r3
 800a32a:	d0a6      	beq.n	800a27a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a32c:	2300      	movs	r3, #0
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3710      	adds	r7, #16
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
	...

0800a338 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a338:	b480      	push	{r7}
 800a33a:	b095      	sub	sp, #84	; 0x54
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a348:	e853 3f00 	ldrex	r3, [r3]
 800a34c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a350:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a354:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	461a      	mov	r2, r3
 800a35c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a35e:	643b      	str	r3, [r7, #64]	; 0x40
 800a360:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a362:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a364:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a366:	e841 2300 	strex	r3, r2, [r1]
 800a36a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d1e6      	bne.n	800a340 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	3308      	adds	r3, #8
 800a378:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a37a:	6a3b      	ldr	r3, [r7, #32]
 800a37c:	e853 3f00 	ldrex	r3, [r3]
 800a380:	61fb      	str	r3, [r7, #28]
   return(result);
 800a382:	69fa      	ldr	r2, [r7, #28]
 800a384:	4b1e      	ldr	r3, [pc, #120]	; (800a400 <UART_EndRxTransfer+0xc8>)
 800a386:	4013      	ands	r3, r2
 800a388:	64bb      	str	r3, [r7, #72]	; 0x48
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	3308      	adds	r3, #8
 800a390:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a392:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a394:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a396:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a39a:	e841 2300 	strex	r3, r2, [r1]
 800a39e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d1e5      	bne.n	800a372 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d118      	bne.n	800a3e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	e853 3f00 	ldrex	r3, [r3]
 800a3ba:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	f023 0310 	bic.w	r3, r3, #16
 800a3c2:	647b      	str	r3, [r7, #68]	; 0x44
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3cc:	61bb      	str	r3, [r7, #24]
 800a3ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3d0:	6979      	ldr	r1, [r7, #20]
 800a3d2:	69ba      	ldr	r2, [r7, #24]
 800a3d4:	e841 2300 	strex	r3, r2, [r1]
 800a3d8:	613b      	str	r3, [r7, #16]
   return(result);
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d1e6      	bne.n	800a3ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2220      	movs	r2, #32
 800a3e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a3f4:	bf00      	nop
 800a3f6:	3754      	adds	r7, #84	; 0x54
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr
 800a400:	effffffe 	.word	0xeffffffe

0800a404 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a404:	b480      	push	{r7}
 800a406:	b085      	sub	sp, #20
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a412:	2b01      	cmp	r3, #1
 800a414:	d101      	bne.n	800a41a <HAL_UARTEx_DisableFifoMode+0x16>
 800a416:	2302      	movs	r3, #2
 800a418:	e027      	b.n	800a46a <HAL_UARTEx_DisableFifoMode+0x66>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2201      	movs	r2, #1
 800a41e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2224      	movs	r2, #36	; 0x24
 800a426:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	681a      	ldr	r2, [r3, #0]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f022 0201 	bic.w	r2, r2, #1
 800a440:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a448:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2200      	movs	r2, #0
 800a44e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	68fa      	ldr	r2, [r7, #12]
 800a456:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2220      	movs	r2, #32
 800a45c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2200      	movs	r2, #0
 800a464:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a468:	2300      	movs	r3, #0
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3714      	adds	r7, #20
 800a46e:	46bd      	mov	sp, r7
 800a470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a474:	4770      	bx	lr

0800a476 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a476:	b580      	push	{r7, lr}
 800a478:	b084      	sub	sp, #16
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	6078      	str	r0, [r7, #4]
 800a47e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a486:	2b01      	cmp	r3, #1
 800a488:	d101      	bne.n	800a48e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a48a:	2302      	movs	r3, #2
 800a48c:	e02d      	b.n	800a4ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2201      	movs	r2, #1
 800a492:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2224      	movs	r2, #36	; 0x24
 800a49a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f022 0201 	bic.w	r2, r2, #1
 800a4b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	689b      	ldr	r3, [r3, #8]
 800a4bc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	683a      	ldr	r2, [r7, #0]
 800a4c6:	430a      	orrs	r2, r1
 800a4c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f000 f850 	bl	800a570 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	68fa      	ldr	r2, [r7, #12]
 800a4d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2220      	movs	r2, #32
 800a4dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a4e8:	2300      	movs	r3, #0
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3710      	adds	r7, #16
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a4f2:	b580      	push	{r7, lr}
 800a4f4:	b084      	sub	sp, #16
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
 800a4fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a502:	2b01      	cmp	r3, #1
 800a504:	d101      	bne.n	800a50a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a506:	2302      	movs	r3, #2
 800a508:	e02d      	b.n	800a566 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2201      	movs	r2, #1
 800a50e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2224      	movs	r2, #36	; 0x24
 800a516:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	681a      	ldr	r2, [r3, #0]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f022 0201 	bic.w	r2, r2, #1
 800a530:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	689b      	ldr	r3, [r3, #8]
 800a538:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	683a      	ldr	r2, [r7, #0]
 800a542:	430a      	orrs	r2, r1
 800a544:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 f812 	bl	800a570 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	68fa      	ldr	r2, [r7, #12]
 800a552:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2220      	movs	r2, #32
 800a558:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2200      	movs	r2, #0
 800a560:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a564:	2300      	movs	r3, #0
}
 800a566:	4618      	mov	r0, r3
 800a568:	3710      	adds	r7, #16
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
	...

0800a570 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a570:	b480      	push	{r7}
 800a572:	b085      	sub	sp, #20
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d108      	bne.n	800a592 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2201      	movs	r2, #1
 800a584:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2201      	movs	r2, #1
 800a58c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a590:	e031      	b.n	800a5f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a592:	2310      	movs	r3, #16
 800a594:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a596:	2310      	movs	r3, #16
 800a598:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	0e5b      	lsrs	r3, r3, #25
 800a5a2:	b2db      	uxtb	r3, r3
 800a5a4:	f003 0307 	and.w	r3, r3, #7
 800a5a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	689b      	ldr	r3, [r3, #8]
 800a5b0:	0f5b      	lsrs	r3, r3, #29
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	f003 0307 	and.w	r3, r3, #7
 800a5b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a5ba:	7bbb      	ldrb	r3, [r7, #14]
 800a5bc:	7b3a      	ldrb	r2, [r7, #12]
 800a5be:	4911      	ldr	r1, [pc, #68]	; (800a604 <UARTEx_SetNbDataToProcess+0x94>)
 800a5c0:	5c8a      	ldrb	r2, [r1, r2]
 800a5c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a5c6:	7b3a      	ldrb	r2, [r7, #12]
 800a5c8:	490f      	ldr	r1, [pc, #60]	; (800a608 <UARTEx_SetNbDataToProcess+0x98>)
 800a5ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a5cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5d0:	b29a      	uxth	r2, r3
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a5d8:	7bfb      	ldrb	r3, [r7, #15]
 800a5da:	7b7a      	ldrb	r2, [r7, #13]
 800a5dc:	4909      	ldr	r1, [pc, #36]	; (800a604 <UARTEx_SetNbDataToProcess+0x94>)
 800a5de:	5c8a      	ldrb	r2, [r1, r2]
 800a5e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a5e4:	7b7a      	ldrb	r2, [r7, #13]
 800a5e6:	4908      	ldr	r1, [pc, #32]	; (800a608 <UARTEx_SetNbDataToProcess+0x98>)
 800a5e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a5ea:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5ee:	b29a      	uxth	r2, r3
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a5f6:	bf00      	nop
 800a5f8:	3714      	adds	r7, #20
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a600:	4770      	bx	lr
 800a602:	bf00      	nop
 800a604:	0800b928 	.word	0x0800b928
 800a608:	0800b930 	.word	0x0800b930

0800a60c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a60c:	b084      	sub	sp, #16
 800a60e:	b580      	push	{r7, lr}
 800a610:	b084      	sub	sp, #16
 800a612:	af00      	add	r7, sp, #0
 800a614:	6078      	str	r0, [r7, #4]
 800a616:	f107 001c 	add.w	r0, r7, #28
 800a61a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a620:	2b01      	cmp	r3, #1
 800a622:	d120      	bne.n	800a666 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a628:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	68da      	ldr	r2, [r3, #12]
 800a634:	4b2a      	ldr	r3, [pc, #168]	; (800a6e0 <USB_CoreInit+0xd4>)
 800a636:	4013      	ands	r3, r2
 800a638:	687a      	ldr	r2, [r7, #4]
 800a63a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	68db      	ldr	r3, [r3, #12]
 800a640:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d105      	bne.n	800a65a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	68db      	ldr	r3, [r3, #12]
 800a652:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f000 faac 	bl	800abb8 <USB_CoreReset>
 800a660:	4603      	mov	r3, r0
 800a662:	73fb      	strb	r3, [r7, #15]
 800a664:	e01a      	b.n	800a69c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	68db      	ldr	r3, [r3, #12]
 800a66a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f000 faa0 	bl	800abb8 <USB_CoreReset>
 800a678:	4603      	mov	r3, r0
 800a67a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a67c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d106      	bne.n	800a690 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a686:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	639a      	str	r2, [r3, #56]	; 0x38
 800a68e:	e005      	b.n	800a69c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a694:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	d116      	bne.n	800a6d0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6a6:	b29a      	uxth	r2, r3
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a6b0:	4b0c      	ldr	r3, [pc, #48]	; (800a6e4 <USB_CoreInit+0xd8>)
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	687a      	ldr	r2, [r7, #4]
 800a6b6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	f043 0206 	orr.w	r2, r3, #6
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	689b      	ldr	r3, [r3, #8]
 800a6c8:	f043 0220 	orr.w	r2, r3, #32
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a6d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3710      	adds	r7, #16
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a6dc:	b004      	add	sp, #16
 800a6de:	4770      	bx	lr
 800a6e0:	ffbdffbf 	.word	0xffbdffbf
 800a6e4:	03ee0000 	.word	0x03ee0000

0800a6e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b083      	sub	sp, #12
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	f023 0201 	bic.w	r2, r3, #1
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a6fc:	2300      	movs	r3, #0
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	370c      	adds	r7, #12
 800a702:	46bd      	mov	sp, r7
 800a704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a708:	4770      	bx	lr

0800a70a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a70a:	b580      	push	{r7, lr}
 800a70c:	b084      	sub	sp, #16
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
 800a712:	460b      	mov	r3, r1
 800a714:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a716:	2300      	movs	r3, #0
 800a718:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	68db      	ldr	r3, [r3, #12]
 800a71e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a726:	78fb      	ldrb	r3, [r7, #3]
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d115      	bne.n	800a758 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a738:	2001      	movs	r0, #1
 800a73a:	f7f6 ff9d 	bl	8001678 <HAL_Delay>
      ms++;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	3301      	adds	r3, #1
 800a742:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f000 fa29 	bl	800ab9c <USB_GetMode>
 800a74a:	4603      	mov	r3, r0
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	d01e      	beq.n	800a78e <USB_SetCurrentMode+0x84>
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2b31      	cmp	r3, #49	; 0x31
 800a754:	d9f0      	bls.n	800a738 <USB_SetCurrentMode+0x2e>
 800a756:	e01a      	b.n	800a78e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a758:	78fb      	ldrb	r3, [r7, #3]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d115      	bne.n	800a78a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	68db      	ldr	r3, [r3, #12]
 800a762:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a76a:	2001      	movs	r0, #1
 800a76c:	f7f6 ff84 	bl	8001678 <HAL_Delay>
      ms++;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	3301      	adds	r3, #1
 800a774:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 fa10 	bl	800ab9c <USB_GetMode>
 800a77c:	4603      	mov	r3, r0
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d005      	beq.n	800a78e <USB_SetCurrentMode+0x84>
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2b31      	cmp	r3, #49	; 0x31
 800a786:	d9f0      	bls.n	800a76a <USB_SetCurrentMode+0x60>
 800a788:	e001      	b.n	800a78e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a78a:	2301      	movs	r3, #1
 800a78c:	e005      	b.n	800a79a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2b32      	cmp	r3, #50	; 0x32
 800a792:	d101      	bne.n	800a798 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a794:	2301      	movs	r3, #1
 800a796:	e000      	b.n	800a79a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a798:	2300      	movs	r3, #0
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3710      	adds	r7, #16
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
	...

0800a7a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a7a4:	b084      	sub	sp, #16
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b086      	sub	sp, #24
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
 800a7ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a7b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a7be:	2300      	movs	r3, #0
 800a7c0:	613b      	str	r3, [r7, #16]
 800a7c2:	e009      	b.n	800a7d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	3340      	adds	r3, #64	; 0x40
 800a7ca:	009b      	lsls	r3, r3, #2
 800a7cc:	4413      	add	r3, r2
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	613b      	str	r3, [r7, #16]
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	2b0e      	cmp	r3, #14
 800a7dc:	d9f2      	bls.n	800a7c4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a7de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d11c      	bne.n	800a81e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7ea:	685b      	ldr	r3, [r3, #4]
 800a7ec:	68fa      	ldr	r2, [r7, #12]
 800a7ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a7f2:	f043 0302 	orr.w	r3, r3, #2
 800a7f6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7fc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	601a      	str	r2, [r3, #0]
 800a81c:	e005      	b.n	800a82a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a822:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a830:	461a      	mov	r2, r3
 800a832:	2300      	movs	r3, #0
 800a834:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a83c:	4619      	mov	r1, r3
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a844:	461a      	mov	r2, r3
 800a846:	680b      	ldr	r3, [r1, #0]
 800a848:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a84a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d10c      	bne.n	800a86a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a852:	2b00      	cmp	r3, #0
 800a854:	d104      	bne.n	800a860 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a856:	2100      	movs	r1, #0
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f000 f965 	bl	800ab28 <USB_SetDevSpeed>
 800a85e:	e008      	b.n	800a872 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a860:	2101      	movs	r1, #1
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 f960 	bl	800ab28 <USB_SetDevSpeed>
 800a868:	e003      	b.n	800a872 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a86a:	2103      	movs	r1, #3
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f000 f95b 	bl	800ab28 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a872:	2110      	movs	r1, #16
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f000 f8f3 	bl	800aa60 <USB_FlushTxFifo>
 800a87a:	4603      	mov	r3, r0
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d001      	beq.n	800a884 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a880:	2301      	movs	r3, #1
 800a882:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 f91f 	bl	800aac8 <USB_FlushRxFifo>
 800a88a:	4603      	mov	r3, r0
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d001      	beq.n	800a894 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a890:	2301      	movs	r3, #1
 800a892:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a89a:	461a      	mov	r2, r3
 800a89c:	2300      	movs	r3, #0
 800a89e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8b2:	461a      	mov	r2, r3
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	613b      	str	r3, [r7, #16]
 800a8bc:	e043      	b.n	800a946 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	015a      	lsls	r2, r3, #5
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	4413      	add	r3, r2
 800a8c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a8d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a8d4:	d118      	bne.n	800a908 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d10a      	bne.n	800a8f2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	015a      	lsls	r2, r3, #5
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	4413      	add	r3, r2
 800a8e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8e8:	461a      	mov	r2, r3
 800a8ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a8ee:	6013      	str	r3, [r2, #0]
 800a8f0:	e013      	b.n	800a91a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	015a      	lsls	r2, r3, #5
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	4413      	add	r3, r2
 800a8fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8fe:	461a      	mov	r2, r3
 800a900:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a904:	6013      	str	r3, [r2, #0]
 800a906:	e008      	b.n	800a91a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	015a      	lsls	r2, r3, #5
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	4413      	add	r3, r2
 800a910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a914:	461a      	mov	r2, r3
 800a916:	2300      	movs	r3, #0
 800a918:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	015a      	lsls	r2, r3, #5
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	4413      	add	r3, r2
 800a922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a926:	461a      	mov	r2, r3
 800a928:	2300      	movs	r3, #0
 800a92a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	015a      	lsls	r2, r3, #5
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	4413      	add	r3, r2
 800a934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a938:	461a      	mov	r2, r3
 800a93a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a93e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	3301      	adds	r3, #1
 800a944:	613b      	str	r3, [r7, #16]
 800a946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a948:	693a      	ldr	r2, [r7, #16]
 800a94a:	429a      	cmp	r2, r3
 800a94c:	d3b7      	bcc.n	800a8be <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a94e:	2300      	movs	r3, #0
 800a950:	613b      	str	r3, [r7, #16]
 800a952:	e043      	b.n	800a9dc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	015a      	lsls	r2, r3, #5
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	4413      	add	r3, r2
 800a95c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a966:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a96a:	d118      	bne.n	800a99e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d10a      	bne.n	800a988 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	015a      	lsls	r2, r3, #5
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	4413      	add	r3, r2
 800a97a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a97e:	461a      	mov	r2, r3
 800a980:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a984:	6013      	str	r3, [r2, #0]
 800a986:	e013      	b.n	800a9b0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	015a      	lsls	r2, r3, #5
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	4413      	add	r3, r2
 800a990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a994:	461a      	mov	r2, r3
 800a996:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a99a:	6013      	str	r3, [r2, #0]
 800a99c:	e008      	b.n	800a9b0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	015a      	lsls	r2, r3, #5
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	4413      	add	r3, r2
 800a9a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	015a      	lsls	r2, r3, #5
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	4413      	add	r3, r2
 800a9b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9bc:	461a      	mov	r2, r3
 800a9be:	2300      	movs	r3, #0
 800a9c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	015a      	lsls	r2, r3, #5
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	4413      	add	r3, r2
 800a9ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a9d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	3301      	adds	r3, #1
 800a9da:	613b      	str	r3, [r7, #16]
 800a9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9de:	693a      	ldr	r2, [r7, #16]
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d3b7      	bcc.n	800a954 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9ea:	691b      	ldr	r3, [r3, #16]
 800a9ec:	68fa      	ldr	r2, [r7, #12]
 800a9ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a9f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a9f6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800aa04:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800aa06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d105      	bne.n	800aa18 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	699b      	ldr	r3, [r3, #24]
 800aa10:	f043 0210 	orr.w	r2, r3, #16
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	699a      	ldr	r2, [r3, #24]
 800aa1c:	4b0e      	ldr	r3, [pc, #56]	; (800aa58 <USB_DevInit+0x2b4>)
 800aa1e:	4313      	orrs	r3, r2
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800aa24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d005      	beq.n	800aa36 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	699b      	ldr	r3, [r3, #24]
 800aa2e:	f043 0208 	orr.w	r2, r3, #8
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800aa36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa38:	2b01      	cmp	r3, #1
 800aa3a:	d105      	bne.n	800aa48 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	699a      	ldr	r2, [r3, #24]
 800aa40:	4b06      	ldr	r3, [pc, #24]	; (800aa5c <USB_DevInit+0x2b8>)
 800aa42:	4313      	orrs	r3, r2
 800aa44:	687a      	ldr	r2, [r7, #4]
 800aa46:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800aa48:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3718      	adds	r7, #24
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aa54:	b004      	add	sp, #16
 800aa56:	4770      	bx	lr
 800aa58:	803c3800 	.word	0x803c3800
 800aa5c:	40000004 	.word	0x40000004

0800aa60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b085      	sub	sp, #20
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	3301      	adds	r3, #1
 800aa72:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	4a13      	ldr	r2, [pc, #76]	; (800aac4 <USB_FlushTxFifo+0x64>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d901      	bls.n	800aa80 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800aa7c:	2303      	movs	r3, #3
 800aa7e:	e01b      	b.n	800aab8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	691b      	ldr	r3, [r3, #16]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	daf2      	bge.n	800aa6e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	019b      	lsls	r3, r3, #6
 800aa90:	f043 0220 	orr.w	r2, r3, #32
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	3301      	adds	r3, #1
 800aa9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	4a08      	ldr	r2, [pc, #32]	; (800aac4 <USB_FlushTxFifo+0x64>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d901      	bls.n	800aaaa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800aaa6:	2303      	movs	r3, #3
 800aaa8:	e006      	b.n	800aab8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	691b      	ldr	r3, [r3, #16]
 800aaae:	f003 0320 	and.w	r3, r3, #32
 800aab2:	2b20      	cmp	r3, #32
 800aab4:	d0f0      	beq.n	800aa98 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800aab6:	2300      	movs	r3, #0
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3714      	adds	r7, #20
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr
 800aac4:	00030d40 	.word	0x00030d40

0800aac8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b085      	sub	sp, #20
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aad0:	2300      	movs	r3, #0
 800aad2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	3301      	adds	r3, #1
 800aad8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	4a11      	ldr	r2, [pc, #68]	; (800ab24 <USB_FlushRxFifo+0x5c>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d901      	bls.n	800aae6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800aae2:	2303      	movs	r3, #3
 800aae4:	e018      	b.n	800ab18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	691b      	ldr	r3, [r3, #16]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	daf2      	bge.n	800aad4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2210      	movs	r2, #16
 800aaf6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	3301      	adds	r3, #1
 800aafc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	4a08      	ldr	r2, [pc, #32]	; (800ab24 <USB_FlushRxFifo+0x5c>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d901      	bls.n	800ab0a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ab06:	2303      	movs	r3, #3
 800ab08:	e006      	b.n	800ab18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	691b      	ldr	r3, [r3, #16]
 800ab0e:	f003 0310 	and.w	r3, r3, #16
 800ab12:	2b10      	cmp	r3, #16
 800ab14:	d0f0      	beq.n	800aaf8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ab16:	2300      	movs	r3, #0
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3714      	adds	r7, #20
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr
 800ab24:	00030d40 	.word	0x00030d40

0800ab28 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b085      	sub	sp, #20
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	460b      	mov	r3, r1
 800ab32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab3e:	681a      	ldr	r2, [r3, #0]
 800ab40:	78fb      	ldrb	r3, [r7, #3]
 800ab42:	68f9      	ldr	r1, [r7, #12]
 800ab44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ab4c:	2300      	movs	r3, #0
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3714      	adds	r7, #20
 800ab52:	46bd      	mov	sp, r7
 800ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab58:	4770      	bx	lr

0800ab5a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ab5a:	b480      	push	{r7}
 800ab5c:	b085      	sub	sp, #20
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	68fa      	ldr	r2, [r7, #12]
 800ab70:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ab74:	f023 0303 	bic.w	r3, r3, #3
 800ab78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	68fa      	ldr	r2, [r7, #12]
 800ab84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab88:	f043 0302 	orr.w	r3, r3, #2
 800ab8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ab8e:	2300      	movs	r3, #0
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3714      	adds	r7, #20
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr

0800ab9c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b083      	sub	sp, #12
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	695b      	ldr	r3, [r3, #20]
 800aba8:	f003 0301 	and.w	r3, r3, #1
}
 800abac:	4618      	mov	r0, r3
 800abae:	370c      	adds	r7, #12
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr

0800abb8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800abb8:	b480      	push	{r7}
 800abba:	b085      	sub	sp, #20
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800abc0:	2300      	movs	r3, #0
 800abc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	3301      	adds	r3, #1
 800abc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	4a13      	ldr	r2, [pc, #76]	; (800ac1c <USB_CoreReset+0x64>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d901      	bls.n	800abd6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800abd2:	2303      	movs	r3, #3
 800abd4:	e01b      	b.n	800ac0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	691b      	ldr	r3, [r3, #16]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	daf2      	bge.n	800abc4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800abde:	2300      	movs	r3, #0
 800abe0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	691b      	ldr	r3, [r3, #16]
 800abe6:	f043 0201 	orr.w	r2, r3, #1
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	3301      	adds	r3, #1
 800abf2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	4a09      	ldr	r2, [pc, #36]	; (800ac1c <USB_CoreReset+0x64>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d901      	bls.n	800ac00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800abfc:	2303      	movs	r3, #3
 800abfe:	e006      	b.n	800ac0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	691b      	ldr	r3, [r3, #16]
 800ac04:	f003 0301 	and.w	r3, r3, #1
 800ac08:	2b01      	cmp	r3, #1
 800ac0a:	d0f0      	beq.n	800abee <USB_CoreReset+0x36>

  return HAL_OK;
 800ac0c:	2300      	movs	r3, #0
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3714      	adds	r7, #20
 800ac12:	46bd      	mov	sp, r7
 800ac14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac18:	4770      	bx	lr
 800ac1a:	bf00      	nop
 800ac1c:	00030d40 	.word	0x00030d40

0800ac20 <tan>:
 800ac20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac22:	eeb0 7b40 	vmov.f64	d7, d0
 800ac26:	ee17 3a90 	vmov	r3, s15
 800ac2a:	4a15      	ldr	r2, [pc, #84]	; (800ac80 <tan+0x60>)
 800ac2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac30:	4293      	cmp	r3, r2
 800ac32:	dc07      	bgt.n	800ac44 <tan+0x24>
 800ac34:	ed9f 1b10 	vldr	d1, [pc, #64]	; 800ac78 <tan+0x58>
 800ac38:	2001      	movs	r0, #1
 800ac3a:	b005      	add	sp, #20
 800ac3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac40:	f000 bbfe 	b.w	800b440 <__kernel_tan>
 800ac44:	4a0f      	ldr	r2, [pc, #60]	; (800ac84 <tan+0x64>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	dd04      	ble.n	800ac54 <tan+0x34>
 800ac4a:	ee30 0b40 	vsub.f64	d0, d0, d0
 800ac4e:	b005      	add	sp, #20
 800ac50:	f85d fb04 	ldr.w	pc, [sp], #4
 800ac54:	4668      	mov	r0, sp
 800ac56:	f000 f817 	bl	800ac88 <__ieee754_rem_pio2>
 800ac5a:	0040      	lsls	r0, r0, #1
 800ac5c:	f000 0002 	and.w	r0, r0, #2
 800ac60:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ac64:	ed9d 0b00 	vldr	d0, [sp]
 800ac68:	f1c0 0001 	rsb	r0, r0, #1
 800ac6c:	f000 fbe8 	bl	800b440 <__kernel_tan>
 800ac70:	e7ed      	b.n	800ac4e <tan+0x2e>
 800ac72:	bf00      	nop
 800ac74:	f3af 8000 	nop.w
	...
 800ac80:	3fe921fb 	.word	0x3fe921fb
 800ac84:	7fefffff 	.word	0x7fefffff

0800ac88 <__ieee754_rem_pio2>:
 800ac88:	b570      	push	{r4, r5, r6, lr}
 800ac8a:	eeb0 7b40 	vmov.f64	d7, d0
 800ac8e:	ee17 5a90 	vmov	r5, s15
 800ac92:	4b99      	ldr	r3, [pc, #612]	; (800aef8 <__ieee754_rem_pio2+0x270>)
 800ac94:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ac98:	429e      	cmp	r6, r3
 800ac9a:	b088      	sub	sp, #32
 800ac9c:	4604      	mov	r4, r0
 800ac9e:	dc07      	bgt.n	800acb0 <__ieee754_rem_pio2+0x28>
 800aca0:	2200      	movs	r2, #0
 800aca2:	2300      	movs	r3, #0
 800aca4:	ed84 0b00 	vstr	d0, [r4]
 800aca8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800acac:	2000      	movs	r0, #0
 800acae:	e01b      	b.n	800ace8 <__ieee754_rem_pio2+0x60>
 800acb0:	4b92      	ldr	r3, [pc, #584]	; (800aefc <__ieee754_rem_pio2+0x274>)
 800acb2:	429e      	cmp	r6, r3
 800acb4:	dc3b      	bgt.n	800ad2e <__ieee754_rem_pio2+0xa6>
 800acb6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800acba:	2d00      	cmp	r5, #0
 800acbc:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 800aeb8 <__ieee754_rem_pio2+0x230>
 800acc0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800acc4:	dd19      	ble.n	800acfa <__ieee754_rem_pio2+0x72>
 800acc6:	ee30 7b46 	vsub.f64	d7, d0, d6
 800acca:	429e      	cmp	r6, r3
 800accc:	d00e      	beq.n	800acec <__ieee754_rem_pio2+0x64>
 800acce:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800aec0 <__ieee754_rem_pio2+0x238>
 800acd2:	ee37 5b46 	vsub.f64	d5, d7, d6
 800acd6:	ee37 7b45 	vsub.f64	d7, d7, d5
 800acda:	ed84 5b00 	vstr	d5, [r4]
 800acde:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ace2:	ed84 7b02 	vstr	d7, [r4, #8]
 800ace6:	2001      	movs	r0, #1
 800ace8:	b008      	add	sp, #32
 800acea:	bd70      	pop	{r4, r5, r6, pc}
 800acec:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800aec8 <__ieee754_rem_pio2+0x240>
 800acf0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800acf4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800aed0 <__ieee754_rem_pio2+0x248>
 800acf8:	e7eb      	b.n	800acd2 <__ieee754_rem_pio2+0x4a>
 800acfa:	429e      	cmp	r6, r3
 800acfc:	ee30 7b06 	vadd.f64	d7, d0, d6
 800ad00:	d00e      	beq.n	800ad20 <__ieee754_rem_pio2+0x98>
 800ad02:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 800aec0 <__ieee754_rem_pio2+0x238>
 800ad06:	ee37 5b06 	vadd.f64	d5, d7, d6
 800ad0a:	ee37 7b45 	vsub.f64	d7, d7, d5
 800ad0e:	ed84 5b00 	vstr	d5, [r4]
 800ad12:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ad16:	f04f 30ff 	mov.w	r0, #4294967295
 800ad1a:	ed84 7b02 	vstr	d7, [r4, #8]
 800ad1e:	e7e3      	b.n	800ace8 <__ieee754_rem_pio2+0x60>
 800ad20:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800aec8 <__ieee754_rem_pio2+0x240>
 800ad24:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ad28:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800aed0 <__ieee754_rem_pio2+0x248>
 800ad2c:	e7eb      	b.n	800ad06 <__ieee754_rem_pio2+0x7e>
 800ad2e:	4b74      	ldr	r3, [pc, #464]	; (800af00 <__ieee754_rem_pio2+0x278>)
 800ad30:	429e      	cmp	r6, r3
 800ad32:	dc70      	bgt.n	800ae16 <__ieee754_rem_pio2+0x18e>
 800ad34:	f000 fc9c 	bl	800b670 <fabs>
 800ad38:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800ad3c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800aed8 <__ieee754_rem_pio2+0x250>
 800ad40:	eea0 7b06 	vfma.f64	d7, d0, d6
 800ad44:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800ad48:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800ad4c:	ee17 0a90 	vmov	r0, s15
 800ad50:	eeb1 4b45 	vneg.f64	d4, d5
 800ad54:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800aeb8 <__ieee754_rem_pio2+0x230>
 800ad58:	eea5 0b47 	vfms.f64	d0, d5, d7
 800ad5c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800aec0 <__ieee754_rem_pio2+0x238>
 800ad60:	281f      	cmp	r0, #31
 800ad62:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ad66:	ee30 6b47 	vsub.f64	d6, d0, d7
 800ad6a:	dc08      	bgt.n	800ad7e <__ieee754_rem_pio2+0xf6>
 800ad6c:	4b65      	ldr	r3, [pc, #404]	; (800af04 <__ieee754_rem_pio2+0x27c>)
 800ad6e:	1e42      	subs	r2, r0, #1
 800ad70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad74:	42b3      	cmp	r3, r6
 800ad76:	d002      	beq.n	800ad7e <__ieee754_rem_pio2+0xf6>
 800ad78:	ed84 6b00 	vstr	d6, [r4]
 800ad7c:	e026      	b.n	800adcc <__ieee754_rem_pio2+0x144>
 800ad7e:	ee16 3a90 	vmov	r3, s13
 800ad82:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800ad86:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800ad8a:	2b10      	cmp	r3, #16
 800ad8c:	ea4f 5226 	mov.w	r2, r6, asr #20
 800ad90:	ddf2      	ble.n	800ad78 <__ieee754_rem_pio2+0xf0>
 800ad92:	eeb0 6b40 	vmov.f64	d6, d0
 800ad96:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 800aec8 <__ieee754_rem_pio2+0x240>
 800ad9a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 800aed0 <__ieee754_rem_pio2+0x248>
 800ad9e:	eea4 6b07 	vfma.f64	d6, d4, d7
 800ada2:	ee30 0b46 	vsub.f64	d0, d0, d6
 800ada6:	eea4 0b07 	vfma.f64	d0, d4, d7
 800adaa:	eeb0 7b40 	vmov.f64	d7, d0
 800adae:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800adb2:	ee36 3b47 	vsub.f64	d3, d6, d7
 800adb6:	ee13 3a90 	vmov	r3, s7
 800adba:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800adbe:	1ad3      	subs	r3, r2, r3
 800adc0:	2b31      	cmp	r3, #49	; 0x31
 800adc2:	dc17      	bgt.n	800adf4 <__ieee754_rem_pio2+0x16c>
 800adc4:	eeb0 0b46 	vmov.f64	d0, d6
 800adc8:	ed84 3b00 	vstr	d3, [r4]
 800adcc:	ed94 6b00 	vldr	d6, [r4]
 800add0:	2d00      	cmp	r5, #0
 800add2:	ee30 0b46 	vsub.f64	d0, d0, d6
 800add6:	ee30 0b47 	vsub.f64	d0, d0, d7
 800adda:	ed84 0b02 	vstr	d0, [r4, #8]
 800adde:	da83      	bge.n	800ace8 <__ieee754_rem_pio2+0x60>
 800ade0:	eeb1 6b46 	vneg.f64	d6, d6
 800ade4:	eeb1 0b40 	vneg.f64	d0, d0
 800ade8:	ed84 6b00 	vstr	d6, [r4]
 800adec:	ed84 0b02 	vstr	d0, [r4, #8]
 800adf0:	4240      	negs	r0, r0
 800adf2:	e779      	b.n	800ace8 <__ieee754_rem_pio2+0x60>
 800adf4:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 800aee0 <__ieee754_rem_pio2+0x258>
 800adf8:	eeb0 0b46 	vmov.f64	d0, d6
 800adfc:	eea4 0b03 	vfma.f64	d0, d4, d3
 800ae00:	ee36 7b40 	vsub.f64	d7, d6, d0
 800ae04:	ed9f 6b38 	vldr	d6, [pc, #224]	; 800aee8 <__ieee754_rem_pio2+0x260>
 800ae08:	eea4 7b03 	vfma.f64	d7, d4, d3
 800ae0c:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800ae10:	ee30 6b47 	vsub.f64	d6, d0, d7
 800ae14:	e7b0      	b.n	800ad78 <__ieee754_rem_pio2+0xf0>
 800ae16:	4b3c      	ldr	r3, [pc, #240]	; (800af08 <__ieee754_rem_pio2+0x280>)
 800ae18:	429e      	cmp	r6, r3
 800ae1a:	dd06      	ble.n	800ae2a <__ieee754_rem_pio2+0x1a2>
 800ae1c:	ee30 7b40 	vsub.f64	d7, d0, d0
 800ae20:	ed80 7b02 	vstr	d7, [r0, #8]
 800ae24:	ed80 7b00 	vstr	d7, [r0]
 800ae28:	e740      	b.n	800acac <__ieee754_rem_pio2+0x24>
 800ae2a:	1532      	asrs	r2, r6, #20
 800ae2c:	ee10 0a10 	vmov	r0, s0
 800ae30:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800ae34:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800ae38:	ec41 0b17 	vmov	d7, r0, r1
 800ae3c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800ae40:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 800aef0 <__ieee754_rem_pio2+0x268>
 800ae44:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800ae48:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ae4c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ae50:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ae54:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800ae58:	a902      	add	r1, sp, #8
 800ae5a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800ae5e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ae62:	ed8d 6b04 	vstr	d6, [sp, #16]
 800ae66:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ae6a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ae6e:	2603      	movs	r6, #3
 800ae70:	4608      	mov	r0, r1
 800ae72:	ed91 7b04 	vldr	d7, [r1, #16]
 800ae76:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ae7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae7e:	4633      	mov	r3, r6
 800ae80:	f1a1 0108 	sub.w	r1, r1, #8
 800ae84:	f106 36ff 	add.w	r6, r6, #4294967295
 800ae88:	d0f3      	beq.n	800ae72 <__ieee754_rem_pio2+0x1ea>
 800ae8a:	4920      	ldr	r1, [pc, #128]	; (800af0c <__ieee754_rem_pio2+0x284>)
 800ae8c:	9101      	str	r1, [sp, #4]
 800ae8e:	2102      	movs	r1, #2
 800ae90:	9100      	str	r1, [sp, #0]
 800ae92:	4621      	mov	r1, r4
 800ae94:	f000 f83c 	bl	800af10 <__kernel_rem_pio2>
 800ae98:	2d00      	cmp	r5, #0
 800ae9a:	f6bf af25 	bge.w	800ace8 <__ieee754_rem_pio2+0x60>
 800ae9e:	ed94 7b00 	vldr	d7, [r4]
 800aea2:	eeb1 7b47 	vneg.f64	d7, d7
 800aea6:	ed84 7b00 	vstr	d7, [r4]
 800aeaa:	ed94 7b02 	vldr	d7, [r4, #8]
 800aeae:	eeb1 7b47 	vneg.f64	d7, d7
 800aeb2:	ed84 7b02 	vstr	d7, [r4, #8]
 800aeb6:	e79b      	b.n	800adf0 <__ieee754_rem_pio2+0x168>
 800aeb8:	54400000 	.word	0x54400000
 800aebc:	3ff921fb 	.word	0x3ff921fb
 800aec0:	1a626331 	.word	0x1a626331
 800aec4:	3dd0b461 	.word	0x3dd0b461
 800aec8:	1a600000 	.word	0x1a600000
 800aecc:	3dd0b461 	.word	0x3dd0b461
 800aed0:	2e037073 	.word	0x2e037073
 800aed4:	3ba3198a 	.word	0x3ba3198a
 800aed8:	6dc9c883 	.word	0x6dc9c883
 800aedc:	3fe45f30 	.word	0x3fe45f30
 800aee0:	2e000000 	.word	0x2e000000
 800aee4:	3ba3198a 	.word	0x3ba3198a
 800aee8:	252049c1 	.word	0x252049c1
 800aeec:	397b839a 	.word	0x397b839a
 800aef0:	00000000 	.word	0x00000000
 800aef4:	41700000 	.word	0x41700000
 800aef8:	3fe921fb 	.word	0x3fe921fb
 800aefc:	4002d97b 	.word	0x4002d97b
 800af00:	413921fb 	.word	0x413921fb
 800af04:	0800b938 	.word	0x0800b938
 800af08:	7fefffff 	.word	0x7fefffff
 800af0c:	0800b9b8 	.word	0x0800b9b8

0800af10 <__kernel_rem_pio2>:
 800af10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af14:	ed2d 8b06 	vpush	{d8-d10}
 800af18:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800af1c:	460f      	mov	r7, r1
 800af1e:	9002      	str	r0, [sp, #8]
 800af20:	49c5      	ldr	r1, [pc, #788]	; (800b238 <__kernel_rem_pio2+0x328>)
 800af22:	98a2      	ldr	r0, [sp, #648]	; 0x288
 800af24:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 800af28:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800af2c:	9301      	str	r3, [sp, #4]
 800af2e:	f112 0f14 	cmn.w	r2, #20
 800af32:	bfa8      	it	ge
 800af34:	2018      	movge	r0, #24
 800af36:	f103 31ff 	add.w	r1, r3, #4294967295
 800af3a:	bfb8      	it	lt
 800af3c:	2000      	movlt	r0, #0
 800af3e:	f06f 0417 	mvn.w	r4, #23
 800af42:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 800b220 <__kernel_rem_pio2+0x310>
 800af46:	bfa4      	itt	ge
 800af48:	f1a2 0a03 	subge.w	sl, r2, #3
 800af4c:	fb9a f0f0 	sdivge	r0, sl, r0
 800af50:	fb00 4404 	mla	r4, r0, r4, r4
 800af54:	1a46      	subs	r6, r0, r1
 800af56:	4414      	add	r4, r2
 800af58:	eb09 0c01 	add.w	ip, r9, r1
 800af5c:	ad1a      	add	r5, sp, #104	; 0x68
 800af5e:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 800af62:	2200      	movs	r2, #0
 800af64:	4562      	cmp	r2, ip
 800af66:	dd10      	ble.n	800af8a <__kernel_rem_pio2+0x7a>
 800af68:	9a01      	ldr	r2, [sp, #4]
 800af6a:	ab1a      	add	r3, sp, #104	; 0x68
 800af6c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800af70:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 800af74:	f04f 0c00 	mov.w	ip, #0
 800af78:	45cc      	cmp	ip, r9
 800af7a:	dc26      	bgt.n	800afca <__kernel_rem_pio2+0xba>
 800af7c:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 800b220 <__kernel_rem_pio2+0x310>
 800af80:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800af84:	4616      	mov	r6, r2
 800af86:	2500      	movs	r5, #0
 800af88:	e015      	b.n	800afb6 <__kernel_rem_pio2+0xa6>
 800af8a:	42d6      	cmn	r6, r2
 800af8c:	d409      	bmi.n	800afa2 <__kernel_rem_pio2+0x92>
 800af8e:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 800af92:	ee07 3a90 	vmov	s15, r3
 800af96:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800af9a:	eca5 7b02 	vstmia	r5!, {d7}
 800af9e:	3201      	adds	r2, #1
 800afa0:	e7e0      	b.n	800af64 <__kernel_rem_pio2+0x54>
 800afa2:	eeb0 7b46 	vmov.f64	d7, d6
 800afa6:	e7f8      	b.n	800af9a <__kernel_rem_pio2+0x8a>
 800afa8:	ecb8 5b02 	vldmia	r8!, {d5}
 800afac:	ed96 6b00 	vldr	d6, [r6]
 800afb0:	3501      	adds	r5, #1
 800afb2:	eea5 7b06 	vfma.f64	d7, d5, d6
 800afb6:	428d      	cmp	r5, r1
 800afb8:	f1a6 0608 	sub.w	r6, r6, #8
 800afbc:	ddf4      	ble.n	800afa8 <__kernel_rem_pio2+0x98>
 800afbe:	ecaa 7b02 	vstmia	sl!, {d7}
 800afc2:	f10c 0c01 	add.w	ip, ip, #1
 800afc6:	3208      	adds	r2, #8
 800afc8:	e7d6      	b.n	800af78 <__kernel_rem_pio2+0x68>
 800afca:	ab06      	add	r3, sp, #24
 800afcc:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800b228 <__kernel_rem_pio2+0x318>
 800afd0:	ed9f ab97 	vldr	d10, [pc, #604]	; 800b230 <__kernel_rem_pio2+0x320>
 800afd4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800afd8:	9303      	str	r3, [sp, #12]
 800afda:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 800afde:	464d      	mov	r5, r9
 800afe0:	00eb      	lsls	r3, r5, #3
 800afe2:	9304      	str	r3, [sp, #16]
 800afe4:	ab92      	add	r3, sp, #584	; 0x248
 800afe6:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800afea:	f10d 0b18 	add.w	fp, sp, #24
 800afee:	ab6a      	add	r3, sp, #424	; 0x1a8
 800aff0:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 800aff4:	465e      	mov	r6, fp
 800aff6:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800affa:	4628      	mov	r0, r5
 800affc:	2800      	cmp	r0, #0
 800affe:	f1a2 0208 	sub.w	r2, r2, #8
 800b002:	dc4c      	bgt.n	800b09e <__kernel_rem_pio2+0x18e>
 800b004:	4620      	mov	r0, r4
 800b006:	9105      	str	r1, [sp, #20]
 800b008:	f000 fbb2 	bl	800b770 <scalbn>
 800b00c:	eeb0 8b40 	vmov.f64	d8, d0
 800b010:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800b014:	ee28 0b00 	vmul.f64	d0, d8, d0
 800b018:	f000 fb36 	bl	800b688 <floor>
 800b01c:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800b020:	eea0 8b47 	vfms.f64	d8, d0, d7
 800b024:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800b028:	2c00      	cmp	r4, #0
 800b02a:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800b02e:	ee17 8a90 	vmov	r8, s15
 800b032:	ee38 8b40 	vsub.f64	d8, d8, d0
 800b036:	9905      	ldr	r1, [sp, #20]
 800b038:	dd43      	ble.n	800b0c2 <__kernel_rem_pio2+0x1b2>
 800b03a:	1e68      	subs	r0, r5, #1
 800b03c:	ab06      	add	r3, sp, #24
 800b03e:	f1c4 0c18 	rsb	ip, r4, #24
 800b042:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800b046:	fa46 f20c 	asr.w	r2, r6, ip
 800b04a:	4490      	add	r8, r2
 800b04c:	fa02 f20c 	lsl.w	r2, r2, ip
 800b050:	1ab6      	subs	r6, r6, r2
 800b052:	f1c4 0217 	rsb	r2, r4, #23
 800b056:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 800b05a:	4116      	asrs	r6, r2
 800b05c:	2e00      	cmp	r6, #0
 800b05e:	dd3f      	ble.n	800b0e0 <__kernel_rem_pio2+0x1d0>
 800b060:	f04f 0c00 	mov.w	ip, #0
 800b064:	f108 0801 	add.w	r8, r8, #1
 800b068:	4660      	mov	r0, ip
 800b06a:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800b06e:	4565      	cmp	r5, ip
 800b070:	dc6e      	bgt.n	800b150 <__kernel_rem_pio2+0x240>
 800b072:	2c00      	cmp	r4, #0
 800b074:	dd04      	ble.n	800b080 <__kernel_rem_pio2+0x170>
 800b076:	2c01      	cmp	r4, #1
 800b078:	d07f      	beq.n	800b17a <__kernel_rem_pio2+0x26a>
 800b07a:	2c02      	cmp	r4, #2
 800b07c:	f000 8087 	beq.w	800b18e <__kernel_rem_pio2+0x27e>
 800b080:	2e02      	cmp	r6, #2
 800b082:	d12d      	bne.n	800b0e0 <__kernel_rem_pio2+0x1d0>
 800b084:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800b088:	ee30 8b48 	vsub.f64	d8, d0, d8
 800b08c:	b340      	cbz	r0, 800b0e0 <__kernel_rem_pio2+0x1d0>
 800b08e:	4620      	mov	r0, r4
 800b090:	9105      	str	r1, [sp, #20]
 800b092:	f000 fb6d 	bl	800b770 <scalbn>
 800b096:	9905      	ldr	r1, [sp, #20]
 800b098:	ee38 8b40 	vsub.f64	d8, d8, d0
 800b09c:	e020      	b.n	800b0e0 <__kernel_rem_pio2+0x1d0>
 800b09e:	ee20 7b09 	vmul.f64	d7, d0, d9
 800b0a2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800b0a6:	3801      	subs	r0, #1
 800b0a8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800b0ac:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800b0b0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800b0b4:	eca6 0a01 	vstmia	r6!, {s0}
 800b0b8:	ed92 0b00 	vldr	d0, [r2]
 800b0bc:	ee37 0b00 	vadd.f64	d0, d7, d0
 800b0c0:	e79c      	b.n	800affc <__kernel_rem_pio2+0xec>
 800b0c2:	d105      	bne.n	800b0d0 <__kernel_rem_pio2+0x1c0>
 800b0c4:	1e6a      	subs	r2, r5, #1
 800b0c6:	ab06      	add	r3, sp, #24
 800b0c8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800b0cc:	15f6      	asrs	r6, r6, #23
 800b0ce:	e7c5      	b.n	800b05c <__kernel_rem_pio2+0x14c>
 800b0d0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800b0d4:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b0d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0dc:	da36      	bge.n	800b14c <__kernel_rem_pio2+0x23c>
 800b0de:	2600      	movs	r6, #0
 800b0e0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b0e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0e8:	f040 80aa 	bne.w	800b240 <__kernel_rem_pio2+0x330>
 800b0ec:	f105 3bff 	add.w	fp, r5, #4294967295
 800b0f0:	4658      	mov	r0, fp
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	4548      	cmp	r0, r9
 800b0f6:	da52      	bge.n	800b19e <__kernel_rem_pio2+0x28e>
 800b0f8:	2a00      	cmp	r2, #0
 800b0fa:	f000 8081 	beq.w	800b200 <__kernel_rem_pio2+0x2f0>
 800b0fe:	ab06      	add	r3, sp, #24
 800b100:	3c18      	subs	r4, #24
 800b102:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800b106:	2b00      	cmp	r3, #0
 800b108:	f000 8087 	beq.w	800b21a <__kernel_rem_pio2+0x30a>
 800b10c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800b110:	4620      	mov	r0, r4
 800b112:	f000 fb2d 	bl	800b770 <scalbn>
 800b116:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b11a:	ed9f 6b43 	vldr	d6, [pc, #268]	; 800b228 <__kernel_rem_pio2+0x318>
 800b11e:	a96a      	add	r1, sp, #424	; 0x1a8
 800b120:	f103 0208 	add.w	r2, r3, #8
 800b124:	1888      	adds	r0, r1, r2
 800b126:	4659      	mov	r1, fp
 800b128:	2900      	cmp	r1, #0
 800b12a:	f280 80b7 	bge.w	800b29c <__kernel_rem_pio2+0x38c>
 800b12e:	4659      	mov	r1, fp
 800b130:	2900      	cmp	r1, #0
 800b132:	f2c0 80d5 	blt.w	800b2e0 <__kernel_rem_pio2+0x3d0>
 800b136:	a86a      	add	r0, sp, #424	; 0x1a8
 800b138:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 800b13c:	ed9f 7b38 	vldr	d7, [pc, #224]	; 800b220 <__kernel_rem_pio2+0x310>
 800b140:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 800b23c <__kernel_rem_pio2+0x32c>
 800b144:	2400      	movs	r4, #0
 800b146:	ebab 0001 	sub.w	r0, fp, r1
 800b14a:	e0be      	b.n	800b2ca <__kernel_rem_pio2+0x3ba>
 800b14c:	2602      	movs	r6, #2
 800b14e:	e787      	b.n	800b060 <__kernel_rem_pio2+0x150>
 800b150:	f8db 2000 	ldr.w	r2, [fp]
 800b154:	b958      	cbnz	r0, 800b16e <__kernel_rem_pio2+0x25e>
 800b156:	b122      	cbz	r2, 800b162 <__kernel_rem_pio2+0x252>
 800b158:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800b15c:	f8cb 2000 	str.w	r2, [fp]
 800b160:	2201      	movs	r2, #1
 800b162:	f10c 0c01 	add.w	ip, ip, #1
 800b166:	f10b 0b04 	add.w	fp, fp, #4
 800b16a:	4610      	mov	r0, r2
 800b16c:	e77f      	b.n	800b06e <__kernel_rem_pio2+0x15e>
 800b16e:	ebae 0202 	sub.w	r2, lr, r2
 800b172:	f8cb 2000 	str.w	r2, [fp]
 800b176:	4602      	mov	r2, r0
 800b178:	e7f3      	b.n	800b162 <__kernel_rem_pio2+0x252>
 800b17a:	f105 3cff 	add.w	ip, r5, #4294967295
 800b17e:	ab06      	add	r3, sp, #24
 800b180:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800b184:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800b188:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 800b18c:	e778      	b.n	800b080 <__kernel_rem_pio2+0x170>
 800b18e:	f105 3cff 	add.w	ip, r5, #4294967295
 800b192:	ab06      	add	r3, sp, #24
 800b194:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800b198:	f3c2 0215 	ubfx	r2, r2, #0, #22
 800b19c:	e7f4      	b.n	800b188 <__kernel_rem_pio2+0x278>
 800b19e:	ab06      	add	r3, sp, #24
 800b1a0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800b1a4:	3801      	subs	r0, #1
 800b1a6:	431a      	orrs	r2, r3
 800b1a8:	e7a4      	b.n	800b0f4 <__kernel_rem_pio2+0x1e4>
 800b1aa:	f10c 0c01 	add.w	ip, ip, #1
 800b1ae:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800b1b2:	2800      	cmp	r0, #0
 800b1b4:	d0f9      	beq.n	800b1aa <__kernel_rem_pio2+0x29a>
 800b1b6:	9b04      	ldr	r3, [sp, #16]
 800b1b8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800b1bc:	eb0d 0203 	add.w	r2, sp, r3
 800b1c0:	9b01      	ldr	r3, [sp, #4]
 800b1c2:	18e8      	adds	r0, r5, r3
 800b1c4:	ab1a      	add	r3, sp, #104	; 0x68
 800b1c6:	1c6e      	adds	r6, r5, #1
 800b1c8:	3a98      	subs	r2, #152	; 0x98
 800b1ca:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800b1ce:	4465      	add	r5, ip
 800b1d0:	42b5      	cmp	r5, r6
 800b1d2:	f6ff af05 	blt.w	800afe0 <__kernel_rem_pio2+0xd0>
 800b1d6:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 800b1da:	f8dd e008 	ldr.w	lr, [sp, #8]
 800b1de:	ee07 3a90 	vmov	s15, r3
 800b1e2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b1e6:	f04f 0c00 	mov.w	ip, #0
 800b1ea:	eca0 7b02 	vstmia	r0!, {d7}
 800b1ee:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800b220 <__kernel_rem_pio2+0x310>
 800b1f2:	4680      	mov	r8, r0
 800b1f4:	458c      	cmp	ip, r1
 800b1f6:	dd07      	ble.n	800b208 <__kernel_rem_pio2+0x2f8>
 800b1f8:	eca2 7b02 	vstmia	r2!, {d7}
 800b1fc:	3601      	adds	r6, #1
 800b1fe:	e7e7      	b.n	800b1d0 <__kernel_rem_pio2+0x2c0>
 800b200:	9a03      	ldr	r2, [sp, #12]
 800b202:	f04f 0c01 	mov.w	ip, #1
 800b206:	e7d2      	b.n	800b1ae <__kernel_rem_pio2+0x29e>
 800b208:	ecbe 5b02 	vldmia	lr!, {d5}
 800b20c:	ed38 6b02 	vldmdb	r8!, {d6}
 800b210:	f10c 0c01 	add.w	ip, ip, #1
 800b214:	eea5 7b06 	vfma.f64	d7, d5, d6
 800b218:	e7ec      	b.n	800b1f4 <__kernel_rem_pio2+0x2e4>
 800b21a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b21e:	e76e      	b.n	800b0fe <__kernel_rem_pio2+0x1ee>
	...
 800b22c:	3e700000 	.word	0x3e700000
 800b230:	00000000 	.word	0x00000000
 800b234:	41700000 	.word	0x41700000
 800b238:	0800bb00 	.word	0x0800bb00
 800b23c:	0800bac0 	.word	0x0800bac0
 800b240:	4260      	negs	r0, r4
 800b242:	eeb0 0b48 	vmov.f64	d0, d8
 800b246:	f000 fa93 	bl	800b770 <scalbn>
 800b24a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800b428 <__kernel_rem_pio2+0x518>
 800b24e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800b252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b256:	db18      	blt.n	800b28a <__kernel_rem_pio2+0x37a>
 800b258:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800b430 <__kernel_rem_pio2+0x520>
 800b25c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800b260:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800b264:	aa06      	add	r2, sp, #24
 800b266:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800b26a:	eea5 0b46 	vfms.f64	d0, d5, d6
 800b26e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800b272:	f105 0b01 	add.w	fp, r5, #1
 800b276:	ee10 3a10 	vmov	r3, s0
 800b27a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800b27e:	ee17 3a10 	vmov	r3, s14
 800b282:	3418      	adds	r4, #24
 800b284:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 800b288:	e740      	b.n	800b10c <__kernel_rem_pio2+0x1fc>
 800b28a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800b28e:	aa06      	add	r2, sp, #24
 800b290:	ee10 3a10 	vmov	r3, s0
 800b294:	46ab      	mov	fp, r5
 800b296:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800b29a:	e737      	b.n	800b10c <__kernel_rem_pio2+0x1fc>
 800b29c:	ac06      	add	r4, sp, #24
 800b29e:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 800b2a2:	9401      	str	r4, [sp, #4]
 800b2a4:	ee07 4a90 	vmov	s15, r4
 800b2a8:	3901      	subs	r1, #1
 800b2aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b2ae:	ee27 7b00 	vmul.f64	d7, d7, d0
 800b2b2:	ee20 0b06 	vmul.f64	d0, d0, d6
 800b2b6:	ed20 7b02 	vstmdb	r0!, {d7}
 800b2ba:	e735      	b.n	800b128 <__kernel_rem_pio2+0x218>
 800b2bc:	ecbc 5b02 	vldmia	ip!, {d5}
 800b2c0:	ecb5 6b02 	vldmia	r5!, {d6}
 800b2c4:	3401      	adds	r4, #1
 800b2c6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800b2ca:	454c      	cmp	r4, r9
 800b2cc:	dc01      	bgt.n	800b2d2 <__kernel_rem_pio2+0x3c2>
 800b2ce:	4284      	cmp	r4, r0
 800b2d0:	ddf4      	ble.n	800b2bc <__kernel_rem_pio2+0x3ac>
 800b2d2:	ac42      	add	r4, sp, #264	; 0x108
 800b2d4:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800b2d8:	ed80 7b00 	vstr	d7, [r0]
 800b2dc:	3901      	subs	r1, #1
 800b2de:	e727      	b.n	800b130 <__kernel_rem_pio2+0x220>
 800b2e0:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800b2e2:	2902      	cmp	r1, #2
 800b2e4:	dc0a      	bgt.n	800b2fc <__kernel_rem_pio2+0x3ec>
 800b2e6:	2900      	cmp	r1, #0
 800b2e8:	dc2c      	bgt.n	800b344 <__kernel_rem_pio2+0x434>
 800b2ea:	d045      	beq.n	800b378 <__kernel_rem_pio2+0x468>
 800b2ec:	f008 0007 	and.w	r0, r8, #7
 800b2f0:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800b2f4:	ecbd 8b06 	vpop	{d8-d10}
 800b2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2fc:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800b2fe:	2a03      	cmp	r2, #3
 800b300:	d1f4      	bne.n	800b2ec <__kernel_rem_pio2+0x3dc>
 800b302:	aa42      	add	r2, sp, #264	; 0x108
 800b304:	4413      	add	r3, r2
 800b306:	461a      	mov	r2, r3
 800b308:	4619      	mov	r1, r3
 800b30a:	4658      	mov	r0, fp
 800b30c:	2800      	cmp	r0, #0
 800b30e:	f1a1 0108 	sub.w	r1, r1, #8
 800b312:	dc54      	bgt.n	800b3be <__kernel_rem_pio2+0x4ae>
 800b314:	4659      	mov	r1, fp
 800b316:	2901      	cmp	r1, #1
 800b318:	f1a2 0208 	sub.w	r2, r2, #8
 800b31c:	dc5f      	bgt.n	800b3de <__kernel_rem_pio2+0x4ce>
 800b31e:	ed9f 7b46 	vldr	d7, [pc, #280]	; 800b438 <__kernel_rem_pio2+0x528>
 800b322:	3308      	adds	r3, #8
 800b324:	f1bb 0f01 	cmp.w	fp, #1
 800b328:	dc69      	bgt.n	800b3fe <__kernel_rem_pio2+0x4ee>
 800b32a:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800b32e:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800b332:	2e00      	cmp	r6, #0
 800b334:	d16a      	bne.n	800b40c <__kernel_rem_pio2+0x4fc>
 800b336:	ed87 5b00 	vstr	d5, [r7]
 800b33a:	ed87 6b02 	vstr	d6, [r7, #8]
 800b33e:	ed87 7b04 	vstr	d7, [r7, #16]
 800b342:	e7d3      	b.n	800b2ec <__kernel_rem_pio2+0x3dc>
 800b344:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800b438 <__kernel_rem_pio2+0x528>
 800b348:	ab42      	add	r3, sp, #264	; 0x108
 800b34a:	441a      	add	r2, r3
 800b34c:	465b      	mov	r3, fp
 800b34e:	2b00      	cmp	r3, #0
 800b350:	da26      	bge.n	800b3a0 <__kernel_rem_pio2+0x490>
 800b352:	b35e      	cbz	r6, 800b3ac <__kernel_rem_pio2+0x49c>
 800b354:	eeb1 7b46 	vneg.f64	d7, d6
 800b358:	ed87 7b00 	vstr	d7, [r7]
 800b35c:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800b360:	aa44      	add	r2, sp, #272	; 0x110
 800b362:	2301      	movs	r3, #1
 800b364:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b368:	459b      	cmp	fp, r3
 800b36a:	da22      	bge.n	800b3b2 <__kernel_rem_pio2+0x4a2>
 800b36c:	b10e      	cbz	r6, 800b372 <__kernel_rem_pio2+0x462>
 800b36e:	eeb1 7b47 	vneg.f64	d7, d7
 800b372:	ed87 7b02 	vstr	d7, [r7, #8]
 800b376:	e7b9      	b.n	800b2ec <__kernel_rem_pio2+0x3dc>
 800b378:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800b438 <__kernel_rem_pio2+0x528>
 800b37c:	ab42      	add	r3, sp, #264	; 0x108
 800b37e:	441a      	add	r2, r3
 800b380:	f1bb 0f00 	cmp.w	fp, #0
 800b384:	da05      	bge.n	800b392 <__kernel_rem_pio2+0x482>
 800b386:	b10e      	cbz	r6, 800b38c <__kernel_rem_pio2+0x47c>
 800b388:	eeb1 7b47 	vneg.f64	d7, d7
 800b38c:	ed87 7b00 	vstr	d7, [r7]
 800b390:	e7ac      	b.n	800b2ec <__kernel_rem_pio2+0x3dc>
 800b392:	ed32 6b02 	vldmdb	r2!, {d6}
 800b396:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b39a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b39e:	e7ef      	b.n	800b380 <__kernel_rem_pio2+0x470>
 800b3a0:	ed32 7b02 	vldmdb	r2!, {d7}
 800b3a4:	3b01      	subs	r3, #1
 800b3a6:	ee36 6b07 	vadd.f64	d6, d6, d7
 800b3aa:	e7d0      	b.n	800b34e <__kernel_rem_pio2+0x43e>
 800b3ac:	eeb0 7b46 	vmov.f64	d7, d6
 800b3b0:	e7d2      	b.n	800b358 <__kernel_rem_pio2+0x448>
 800b3b2:	ecb2 6b02 	vldmia	r2!, {d6}
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b3bc:	e7d4      	b.n	800b368 <__kernel_rem_pio2+0x458>
 800b3be:	ed91 7b00 	vldr	d7, [r1]
 800b3c2:	ed91 5b02 	vldr	d5, [r1, #8]
 800b3c6:	3801      	subs	r0, #1
 800b3c8:	ee37 6b05 	vadd.f64	d6, d7, d5
 800b3cc:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b3d0:	ed81 6b00 	vstr	d6, [r1]
 800b3d4:	ee37 7b05 	vadd.f64	d7, d7, d5
 800b3d8:	ed81 7b02 	vstr	d7, [r1, #8]
 800b3dc:	e796      	b.n	800b30c <__kernel_rem_pio2+0x3fc>
 800b3de:	ed92 7b00 	vldr	d7, [r2]
 800b3e2:	ed92 5b02 	vldr	d5, [r2, #8]
 800b3e6:	3901      	subs	r1, #1
 800b3e8:	ee37 6b05 	vadd.f64	d6, d7, d5
 800b3ec:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b3f0:	ed82 6b00 	vstr	d6, [r2]
 800b3f4:	ee37 7b05 	vadd.f64	d7, d7, d5
 800b3f8:	ed82 7b02 	vstr	d7, [r2, #8]
 800b3fc:	e78b      	b.n	800b316 <__kernel_rem_pio2+0x406>
 800b3fe:	ed33 6b02 	vldmdb	r3!, {d6}
 800b402:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b406:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b40a:	e78b      	b.n	800b324 <__kernel_rem_pio2+0x414>
 800b40c:	eeb1 5b45 	vneg.f64	d5, d5
 800b410:	eeb1 6b46 	vneg.f64	d6, d6
 800b414:	ed87 5b00 	vstr	d5, [r7]
 800b418:	eeb1 7b47 	vneg.f64	d7, d7
 800b41c:	ed87 6b02 	vstr	d6, [r7, #8]
 800b420:	e78d      	b.n	800b33e <__kernel_rem_pio2+0x42e>
 800b422:	bf00      	nop
 800b424:	f3af 8000 	nop.w
 800b428:	00000000 	.word	0x00000000
 800b42c:	41700000 	.word	0x41700000
 800b430:	00000000 	.word	0x00000000
 800b434:	3e700000 	.word	0x3e700000
	...

0800b440 <__kernel_tan>:
 800b440:	eeb0 7b40 	vmov.f64	d7, d0
 800b444:	ee17 3a90 	vmov	r3, s15
 800b448:	4987      	ldr	r1, [pc, #540]	; (800b668 <__kernel_tan+0x228>)
 800b44a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b44e:	428a      	cmp	r2, r1
 800b450:	b510      	push	{r4, lr}
 800b452:	dc33      	bgt.n	800b4bc <__kernel_tan+0x7c>
 800b454:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 800b458:	ee16 1a90 	vmov	r1, s13
 800b45c:	2900      	cmp	r1, #0
 800b45e:	d143      	bne.n	800b4e8 <__kernel_tan+0xa8>
 800b460:	ee10 4a10 	vmov	r4, s0
 800b464:	1c43      	adds	r3, r0, #1
 800b466:	4323      	orrs	r3, r4
 800b468:	4313      	orrs	r3, r2
 800b46a:	d108      	bne.n	800b47e <__kernel_tan+0x3e>
 800b46c:	f000 f900 	bl	800b670 <fabs>
 800b470:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800b474:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800b478:	eeb0 0b47 	vmov.f64	d0, d7
 800b47c:	bd10      	pop	{r4, pc}
 800b47e:	2801      	cmp	r0, #1
 800b480:	d0fa      	beq.n	800b478 <__kernel_tan+0x38>
 800b482:	ee30 6b01 	vadd.f64	d6, d0, d1
 800b486:	ec53 2b16 	vmov	r2, r3, d6
 800b48a:	460a      	mov	r2, r1
 800b48c:	ec43 2b15 	vmov	d5, r2, r3
 800b490:	ee35 7b40 	vsub.f64	d7, d5, d0
 800b494:	ee31 1b47 	vsub.f64	d1, d1, d7
 800b498:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800b49c:	ee87 4b06 	vdiv.f64	d4, d7, d6
 800b4a0:	ec53 2b14 	vmov	r2, r3, d4
 800b4a4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800b4a8:	460a      	mov	r2, r1
 800b4aa:	ec43 2b17 	vmov	d7, r2, r3
 800b4ae:	eea5 6b07 	vfma.f64	d6, d5, d7
 800b4b2:	eea1 6b07 	vfma.f64	d6, d1, d7
 800b4b6:	eea6 7b04 	vfma.f64	d7, d6, d4
 800b4ba:	e7dd      	b.n	800b478 <__kernel_tan+0x38>
 800b4bc:	496b      	ldr	r1, [pc, #428]	; (800b66c <__kernel_tan+0x22c>)
 800b4be:	428a      	cmp	r2, r1
 800b4c0:	dd12      	ble.n	800b4e8 <__kernel_tan+0xa8>
 800b4c2:	ed9f 6b49 	vldr	d6, [pc, #292]	; 800b5e8 <__kernel_tan+0x1a8>
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	bfb8      	it	lt
 800b4ca:	eeb1 7b40 	vneglt.f64	d7, d0
 800b4ce:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b4d2:	ed9f 6b47 	vldr	d6, [pc, #284]	; 800b5f0 <__kernel_tan+0x1b0>
 800b4d6:	bfb8      	it	lt
 800b4d8:	eeb1 1b41 	vneglt.f64	d1, d1
 800b4dc:	ee36 1b41 	vsub.f64	d1, d6, d1
 800b4e0:	ee31 7b07 	vadd.f64	d7, d1, d7
 800b4e4:	ed9f 1b44 	vldr	d1, [pc, #272]	; 800b5f8 <__kernel_tan+0x1b8>
 800b4e8:	ee27 5b07 	vmul.f64	d5, d7, d7
 800b4ec:	ee25 6b05 	vmul.f64	d6, d5, d5
 800b4f0:	ed9f 3b43 	vldr	d3, [pc, #268]	; 800b600 <__kernel_tan+0x1c0>
 800b4f4:	ed9f 4b44 	vldr	d4, [pc, #272]	; 800b608 <__kernel_tan+0x1c8>
 800b4f8:	eea6 4b03 	vfma.f64	d4, d6, d3
 800b4fc:	ed9f 3b44 	vldr	d3, [pc, #272]	; 800b610 <__kernel_tan+0x1d0>
 800b500:	eea4 3b06 	vfma.f64	d3, d4, d6
 800b504:	ed9f 4b44 	vldr	d4, [pc, #272]	; 800b618 <__kernel_tan+0x1d8>
 800b508:	eea3 4b06 	vfma.f64	d4, d3, d6
 800b50c:	ed9f 3b44 	vldr	d3, [pc, #272]	; 800b620 <__kernel_tan+0x1e0>
 800b510:	eea4 3b06 	vfma.f64	d3, d4, d6
 800b514:	ed9f 4b44 	vldr	d4, [pc, #272]	; 800b628 <__kernel_tan+0x1e8>
 800b518:	ed9f 2b45 	vldr	d2, [pc, #276]	; 800b630 <__kernel_tan+0x1f0>
 800b51c:	eea3 4b06 	vfma.f64	d4, d3, d6
 800b520:	ed9f 3b45 	vldr	d3, [pc, #276]	; 800b638 <__kernel_tan+0x1f8>
 800b524:	eea6 3b02 	vfma.f64	d3, d6, d2
 800b528:	ed9f 2b45 	vldr	d2, [pc, #276]	; 800b640 <__kernel_tan+0x200>
 800b52c:	eea3 2b06 	vfma.f64	d2, d3, d6
 800b530:	ed9f 3b45 	vldr	d3, [pc, #276]	; 800b648 <__kernel_tan+0x208>
 800b534:	eea2 3b06 	vfma.f64	d3, d2, d6
 800b538:	ed9f 2b45 	vldr	d2, [pc, #276]	; 800b650 <__kernel_tan+0x210>
 800b53c:	eea3 2b06 	vfma.f64	d2, d3, d6
 800b540:	ed9f 3b45 	vldr	d3, [pc, #276]	; 800b658 <__kernel_tan+0x218>
 800b544:	4949      	ldr	r1, [pc, #292]	; (800b66c <__kernel_tan+0x22c>)
 800b546:	eea2 3b06 	vfma.f64	d3, d2, d6
 800b54a:	ee27 2b05 	vmul.f64	d2, d7, d5
 800b54e:	eeb0 6b44 	vmov.f64	d6, d4
 800b552:	eeb0 4b41 	vmov.f64	d4, d1
 800b556:	eea3 6b05 	vfma.f64	d6, d3, d5
 800b55a:	eea6 4b02 	vfma.f64	d4, d6, d2
 800b55e:	ed9f 6b40 	vldr	d6, [pc, #256]	; 800b660 <__kernel_tan+0x220>
 800b562:	eea4 1b05 	vfma.f64	d1, d4, d5
 800b566:	428a      	cmp	r2, r1
 800b568:	eea2 1b06 	vfma.f64	d1, d2, d6
 800b56c:	ee37 5b01 	vadd.f64	d5, d7, d1
 800b570:	dd1d      	ble.n	800b5ae <__kernel_tan+0x16e>
 800b572:	ee25 3b05 	vmul.f64	d3, d5, d5
 800b576:	179b      	asrs	r3, r3, #30
 800b578:	ee06 0a90 	vmov	s13, r0
 800b57c:	f003 0302 	and.w	r3, r3, #2
 800b580:	f1c3 0301 	rsb	r3, r3, #1
 800b584:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b588:	ee35 5b06 	vadd.f64	d5, d5, d6
 800b58c:	ee83 4b05 	vdiv.f64	d4, d3, d5
 800b590:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b594:	ee34 1b41 	vsub.f64	d1, d4, d1
 800b598:	ee37 7b41 	vsub.f64	d7, d7, d1
 800b59c:	eea7 6b45 	vfms.f64	d6, d7, d5
 800b5a0:	ee07 3a10 	vmov	s14, r3
 800b5a4:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800b5a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b5ac:	e764      	b.n	800b478 <__kernel_tan+0x38>
 800b5ae:	2801      	cmp	r0, #1
 800b5b0:	d016      	beq.n	800b5e0 <__kernel_tan+0x1a0>
 800b5b2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800b5b6:	ec51 0b15 	vmov	r0, r1, d5
 800b5ba:	2000      	movs	r0, #0
 800b5bc:	ec41 0b13 	vmov	d3, r0, r1
 800b5c0:	ee33 7b47 	vsub.f64	d7, d3, d7
 800b5c4:	ee31 1b47 	vsub.f64	d1, d1, d7
 800b5c8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800b5cc:	ee87 4b05 	vdiv.f64	d4, d7, d5
 800b5d0:	ec53 2b14 	vmov	r2, r3, d4
 800b5d4:	4602      	mov	r2, r0
 800b5d6:	ec43 2b17 	vmov	d7, r2, r3
 800b5da:	eea3 6b07 	vfma.f64	d6, d3, d7
 800b5de:	e768      	b.n	800b4b2 <__kernel_tan+0x72>
 800b5e0:	eeb0 7b45 	vmov.f64	d7, d5
 800b5e4:	e748      	b.n	800b478 <__kernel_tan+0x38>
 800b5e6:	bf00      	nop
 800b5e8:	54442d18 	.word	0x54442d18
 800b5ec:	3fe921fb 	.word	0x3fe921fb
 800b5f0:	33145c07 	.word	0x33145c07
 800b5f4:	3c81a626 	.word	0x3c81a626
	...
 800b600:	db605373 	.word	0xdb605373
 800b604:	bef375cb 	.word	0xbef375cb
 800b608:	a03792a6 	.word	0xa03792a6
 800b60c:	3f147e88 	.word	0x3f147e88
 800b610:	f2f26501 	.word	0xf2f26501
 800b614:	3f4344d8 	.word	0x3f4344d8
 800b618:	c9560328 	.word	0xc9560328
 800b61c:	3f6d6d22 	.word	0x3f6d6d22
 800b620:	8406d637 	.word	0x8406d637
 800b624:	3f9664f4 	.word	0x3f9664f4
 800b628:	1110fe7a 	.word	0x1110fe7a
 800b62c:	3fc11111 	.word	0x3fc11111
 800b630:	74bf7ad4 	.word	0x74bf7ad4
 800b634:	3efb2a70 	.word	0x3efb2a70
 800b638:	32f0a7e9 	.word	0x32f0a7e9
 800b63c:	3f12b80f 	.word	0x3f12b80f
 800b640:	1a8d1068 	.word	0x1a8d1068
 800b644:	3f3026f7 	.word	0x3f3026f7
 800b648:	fee08315 	.word	0xfee08315
 800b64c:	3f57dbc8 	.word	0x3f57dbc8
 800b650:	e96e8493 	.word	0xe96e8493
 800b654:	3f8226e3 	.word	0x3f8226e3
 800b658:	1bb341fe 	.word	0x1bb341fe
 800b65c:	3faba1ba 	.word	0x3faba1ba
 800b660:	55555563 	.word	0x55555563
 800b664:	3fd55555 	.word	0x3fd55555
 800b668:	3e2fffff 	.word	0x3e2fffff
 800b66c:	3fe59427 	.word	0x3fe59427

0800b670 <fabs>:
 800b670:	ec51 0b10 	vmov	r0, r1, d0
 800b674:	ee10 2a10 	vmov	r2, s0
 800b678:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b67c:	ec43 2b10 	vmov	d0, r2, r3
 800b680:	4770      	bx	lr
 800b682:	0000      	movs	r0, r0
 800b684:	0000      	movs	r0, r0
	...

0800b688 <floor>:
 800b688:	ee10 1a90 	vmov	r1, s1
 800b68c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b690:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800b694:	2b13      	cmp	r3, #19
 800b696:	b530      	push	{r4, r5, lr}
 800b698:	ee10 0a10 	vmov	r0, s0
 800b69c:	ee10 5a10 	vmov	r5, s0
 800b6a0:	dc31      	bgt.n	800b706 <floor+0x7e>
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	da15      	bge.n	800b6d2 <floor+0x4a>
 800b6a6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800b760 <floor+0xd8>
 800b6aa:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b6ae:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b6b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6b6:	dd07      	ble.n	800b6c8 <floor+0x40>
 800b6b8:	2900      	cmp	r1, #0
 800b6ba:	da4e      	bge.n	800b75a <floor+0xd2>
 800b6bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b6c0:	4318      	orrs	r0, r3
 800b6c2:	d001      	beq.n	800b6c8 <floor+0x40>
 800b6c4:	4928      	ldr	r1, [pc, #160]	; (800b768 <floor+0xe0>)
 800b6c6:	2000      	movs	r0, #0
 800b6c8:	460b      	mov	r3, r1
 800b6ca:	4602      	mov	r2, r0
 800b6cc:	ec43 2b10 	vmov	d0, r2, r3
 800b6d0:	e020      	b.n	800b714 <floor+0x8c>
 800b6d2:	4a26      	ldr	r2, [pc, #152]	; (800b76c <floor+0xe4>)
 800b6d4:	411a      	asrs	r2, r3
 800b6d6:	ea01 0402 	and.w	r4, r1, r2
 800b6da:	4304      	orrs	r4, r0
 800b6dc:	d01a      	beq.n	800b714 <floor+0x8c>
 800b6de:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800b760 <floor+0xd8>
 800b6e2:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b6e6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b6ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6ee:	ddeb      	ble.n	800b6c8 <floor+0x40>
 800b6f0:	2900      	cmp	r1, #0
 800b6f2:	bfbe      	ittt	lt
 800b6f4:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800b6f8:	fa40 f303 	asrlt.w	r3, r0, r3
 800b6fc:	18c9      	addlt	r1, r1, r3
 800b6fe:	ea21 0102 	bic.w	r1, r1, r2
 800b702:	2000      	movs	r0, #0
 800b704:	e7e0      	b.n	800b6c8 <floor+0x40>
 800b706:	2b33      	cmp	r3, #51	; 0x33
 800b708:	dd05      	ble.n	800b716 <floor+0x8e>
 800b70a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b70e:	d101      	bne.n	800b714 <floor+0x8c>
 800b710:	ee30 0b00 	vadd.f64	d0, d0, d0
 800b714:	bd30      	pop	{r4, r5, pc}
 800b716:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800b71a:	f04f 32ff 	mov.w	r2, #4294967295
 800b71e:	40e2      	lsrs	r2, r4
 800b720:	4202      	tst	r2, r0
 800b722:	d0f7      	beq.n	800b714 <floor+0x8c>
 800b724:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800b760 <floor+0xd8>
 800b728:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b72c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b734:	ddc8      	ble.n	800b6c8 <floor+0x40>
 800b736:	2900      	cmp	r1, #0
 800b738:	da02      	bge.n	800b740 <floor+0xb8>
 800b73a:	2b14      	cmp	r3, #20
 800b73c:	d103      	bne.n	800b746 <floor+0xbe>
 800b73e:	3101      	adds	r1, #1
 800b740:	ea20 0002 	bic.w	r0, r0, r2
 800b744:	e7c0      	b.n	800b6c8 <floor+0x40>
 800b746:	2401      	movs	r4, #1
 800b748:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b74c:	fa04 f303 	lsl.w	r3, r4, r3
 800b750:	4418      	add	r0, r3
 800b752:	42a8      	cmp	r0, r5
 800b754:	bf38      	it	cc
 800b756:	1909      	addcc	r1, r1, r4
 800b758:	e7f2      	b.n	800b740 <floor+0xb8>
 800b75a:	2000      	movs	r0, #0
 800b75c:	4601      	mov	r1, r0
 800b75e:	e7b3      	b.n	800b6c8 <floor+0x40>
 800b760:	8800759c 	.word	0x8800759c
 800b764:	7e37e43c 	.word	0x7e37e43c
 800b768:	bff00000 	.word	0xbff00000
 800b76c:	000fffff 	.word	0x000fffff

0800b770 <scalbn>:
 800b770:	ee10 1a90 	vmov	r1, s1
 800b774:	b510      	push	{r4, lr}
 800b776:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800b77a:	b98c      	cbnz	r4, 800b7a0 <scalbn+0x30>
 800b77c:	ee10 3a10 	vmov	r3, s0
 800b780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b784:	430b      	orrs	r3, r1
 800b786:	d011      	beq.n	800b7ac <scalbn+0x3c>
 800b788:	ed9f 7b31 	vldr	d7, [pc, #196]	; 800b850 <scalbn+0xe0>
 800b78c:	4b3c      	ldr	r3, [pc, #240]	; (800b880 <scalbn+0x110>)
 800b78e:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b792:	4298      	cmp	r0, r3
 800b794:	da0b      	bge.n	800b7ae <scalbn+0x3e>
 800b796:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800b858 <scalbn+0xe8>
 800b79a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b79e:	e005      	b.n	800b7ac <scalbn+0x3c>
 800b7a0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800b7a4:	429c      	cmp	r4, r3
 800b7a6:	d107      	bne.n	800b7b8 <scalbn+0x48>
 800b7a8:	ee30 0b00 	vadd.f64	d0, d0, d0
 800b7ac:	bd10      	pop	{r4, pc}
 800b7ae:	ee10 1a90 	vmov	r1, s1
 800b7b2:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800b7b6:	3c36      	subs	r4, #54	; 0x36
 800b7b8:	4404      	add	r4, r0
 800b7ba:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800b7be:	429c      	cmp	r4, r3
 800b7c0:	dd0d      	ble.n	800b7de <scalbn+0x6e>
 800b7c2:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800b860 <scalbn+0xf0>
 800b7c6:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800b868 <scalbn+0xf8>
 800b7ca:	eeb0 6b47 	vmov.f64	d6, d7
 800b7ce:	ee10 3a90 	vmov	r3, s1
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	fe27 7b05 	vselge.f64	d7, d7, d5
 800b7d8:	ee27 0b06 	vmul.f64	d0, d7, d6
 800b7dc:	e7e6      	b.n	800b7ac <scalbn+0x3c>
 800b7de:	2c00      	cmp	r4, #0
 800b7e0:	dd0a      	ble.n	800b7f8 <scalbn+0x88>
 800b7e2:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800b7e6:	ec53 2b10 	vmov	r2, r3, d0
 800b7ea:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800b7ee:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800b7f2:	ec43 2b10 	vmov	d0, r2, r3
 800b7f6:	e7d9      	b.n	800b7ac <scalbn+0x3c>
 800b7f8:	f114 0f35 	cmn.w	r4, #53	; 0x35
 800b7fc:	da19      	bge.n	800b832 <scalbn+0xc2>
 800b7fe:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b802:	4298      	cmp	r0, r3
 800b804:	ee10 3a90 	vmov	r3, s1
 800b808:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b80c:	dd09      	ble.n	800b822 <scalbn+0xb2>
 800b80e:	ed9f 0b14 	vldr	d0, [pc, #80]	; 800b860 <scalbn+0xf0>
 800b812:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800b868 <scalbn+0xf8>
 800b816:	eeb0 7b40 	vmov.f64	d7, d0
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	fe00 0b06 	vseleq.f64	d0, d0, d6
 800b820:	e7bb      	b.n	800b79a <scalbn+0x2a>
 800b822:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 800b858 <scalbn+0xe8>
 800b826:	ed9f 6b12 	vldr	d6, [pc, #72]	; 800b870 <scalbn+0x100>
 800b82a:	eeb0 7b40 	vmov.f64	d7, d0
 800b82e:	2b00      	cmp	r3, #0
 800b830:	e7f4      	b.n	800b81c <scalbn+0xac>
 800b832:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800b836:	ec53 2b10 	vmov	r2, r3, d0
 800b83a:	3436      	adds	r4, #54	; 0x36
 800b83c:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800b840:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800b844:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800b878 <scalbn+0x108>
 800b848:	ec43 2b10 	vmov	d0, r2, r3
 800b84c:	e7a5      	b.n	800b79a <scalbn+0x2a>
 800b84e:	bf00      	nop
 800b850:	00000000 	.word	0x00000000
 800b854:	43500000 	.word	0x43500000
 800b858:	c2f8f359 	.word	0xc2f8f359
 800b85c:	01a56e1f 	.word	0x01a56e1f
 800b860:	8800759c 	.word	0x8800759c
 800b864:	7e37e43c 	.word	0x7e37e43c
 800b868:	8800759c 	.word	0x8800759c
 800b86c:	fe37e43c 	.word	0xfe37e43c
 800b870:	c2f8f359 	.word	0xc2f8f359
 800b874:	81a56e1f 	.word	0x81a56e1f
 800b878:	00000000 	.word	0x00000000
 800b87c:	3c900000 	.word	0x3c900000
 800b880:	ffff3cb0 	.word	0xffff3cb0

0800b884 <__libc_init_array>:
 800b884:	b570      	push	{r4, r5, r6, lr}
 800b886:	4d0d      	ldr	r5, [pc, #52]	; (800b8bc <__libc_init_array+0x38>)
 800b888:	4c0d      	ldr	r4, [pc, #52]	; (800b8c0 <__libc_init_array+0x3c>)
 800b88a:	1b64      	subs	r4, r4, r5
 800b88c:	10a4      	asrs	r4, r4, #2
 800b88e:	2600      	movs	r6, #0
 800b890:	42a6      	cmp	r6, r4
 800b892:	d109      	bne.n	800b8a8 <__libc_init_array+0x24>
 800b894:	4d0b      	ldr	r5, [pc, #44]	; (800b8c4 <__libc_init_array+0x40>)
 800b896:	4c0c      	ldr	r4, [pc, #48]	; (800b8c8 <__libc_init_array+0x44>)
 800b898:	f000 f820 	bl	800b8dc <_init>
 800b89c:	1b64      	subs	r4, r4, r5
 800b89e:	10a4      	asrs	r4, r4, #2
 800b8a0:	2600      	movs	r6, #0
 800b8a2:	42a6      	cmp	r6, r4
 800b8a4:	d105      	bne.n	800b8b2 <__libc_init_array+0x2e>
 800b8a6:	bd70      	pop	{r4, r5, r6, pc}
 800b8a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8ac:	4798      	blx	r3
 800b8ae:	3601      	adds	r6, #1
 800b8b0:	e7ee      	b.n	800b890 <__libc_init_array+0xc>
 800b8b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8b6:	4798      	blx	r3
 800b8b8:	3601      	adds	r6, #1
 800b8ba:	e7f2      	b.n	800b8a2 <__libc_init_array+0x1e>
 800b8bc:	0800bb18 	.word	0x0800bb18
 800b8c0:	0800bb18 	.word	0x0800bb18
 800b8c4:	0800bb18 	.word	0x0800bb18
 800b8c8:	0800bb1c 	.word	0x0800bb1c

0800b8cc <memset>:
 800b8cc:	4402      	add	r2, r0
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d100      	bne.n	800b8d6 <memset+0xa>
 800b8d4:	4770      	bx	lr
 800b8d6:	f803 1b01 	strb.w	r1, [r3], #1
 800b8da:	e7f9      	b.n	800b8d0 <memset+0x4>

0800b8dc <_init>:
 800b8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8de:	bf00      	nop
 800b8e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8e2:	bc08      	pop	{r3}
 800b8e4:	469e      	mov	lr, r3
 800b8e6:	4770      	bx	lr

0800b8e8 <_fini>:
 800b8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ea:	bf00      	nop
 800b8ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8ee:	bc08      	pop	{r3}
 800b8f0:	469e      	mov	lr, r3
 800b8f2:	4770      	bx	lr
